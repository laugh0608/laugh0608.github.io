<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Go+Vue3开发博客系统之一</title>
      <link href="/posts/28c8104d/"/>
      <url>/posts/28c8104d/</url>
      
        <content type="html"><![CDATA[<p><strong>注意：这个项目烂尾了，请谨慎观看！</strong></p><blockquote><p><strong>开发环境：</strong></p><p>Windows server 2022+GoLand2024.1+MySQL8.3Winx64+Redis7.0Winx64</p><p>Go代理： <code>go env -w GOPROXY=https://goproxy.cn</code> </p><p>（由于用的是远程桌面连接虚拟机，故截图比较糊，主要看代码）</p></blockquote><h2 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h2><p>创建如下的目录结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GOBLOG-ADMIN</span><br><span class="line">├── go.mod    # go mod文件</span><br><span class="line">├── main.go    # 程序入口</span><br><span class="line">├── config.yaml    # 配置文件</span><br><span class="line">├── api/    # api</span><br><span class="line">├── config/    # 配置项</span><br><span class="line">├── core/    # 核心库</span><br><span class="line">├── result/    # 接口访问集</span><br><span class="line">├── global/    # 全局配置文件</span><br><span class="line">├── middleware/    # 中间件</span><br><span class="line">├── model/    # 模型</span><br><span class="line">├── router/    # 路由</span><br><span class="line">├── utils/    # 工具类</span><br><span class="line">└── constant/    # 系统常量</span><br></pre></td></tr></table></figure><p>测试一下环境：</p><p><code>go.mod</code> :</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">model goblog-admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="number">1.22</span></span><br></pre></td></tr></table></figure><p><code>main.go</code> :</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 启动程序</span></span><br><span class="line"><span class="comment">// @author DaBaiLuoBo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;The GoBlog-Admin has been started...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/202404082127913.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/202404082008181.png"></p><h2 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h2><p>首先引入一下 <code>yaml</code> 支持的包，项目根目录执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get gopkg.in/yaml.v2</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/202404082136313.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/202404082015553.png"></p><p>查看 <code>go.mod</code> 文件已加载其依赖：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/202404082018782.png"></p><p>配置 <code>config.yaml</code> 文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 系统配置</span></span><br><span class="line"><span class="attr">system:</span></span><br><span class="line">  <span class="comment"># 运行地址：本地</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line">  <span class="comment"># 端口</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">5001</span></span><br><span class="line">  <span class="comment"># 启动环境：debug/release</span></span><br><span class="line">  <span class="attr">env:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><p>创建 <code>/config/config.go</code> 文件：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取配置文件</span></span><br><span class="line"><span class="comment">// @author DaBaiLuoBo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> config</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;gopkg.in/yaml.v2&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// config 总配置文件</span></span><br><span class="line"><span class="keyword">type</span> config <span class="keyword">struct</span> &#123;</span><br><span class="line">System system <span class="string">`yaml:&quot;system&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 系统配置</span></span><br><span class="line"><span class="keyword">type</span> system <span class="keyword">struct</span> &#123;</span><br><span class="line">Host <span class="type">string</span> <span class="string">`yaml:&quot;host&quot;`</span></span><br><span class="line">Port <span class="type">int</span>    <span class="string">`yaml:&quot;port&quot;`</span></span><br><span class="line">Env  <span class="type">string</span> <span class="string">`yaml:&quot;env&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Config *config</span><br><span class="line"></span><br><span class="line"><span class="comment">// init 初始化配置</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">yamlFile, err := ioutil.ReadFile(<span class="string">&quot;./config.yaml&quot;</span>) <span class="comment">// 注意这里的路径，是和根目录同级</span></span><br><span class="line"><span class="comment">// 如果为空，直接返回错误内容</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接收配置文件，存入 Config 中</span></span><br><span class="line">yaml.Unmarshal(yamlFile, &amp;Config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>GoLand格式化代码快捷键 <code>Ctrl+Alt+L</code> </p></blockquote><p>回到 <code>main.go</code> 文件中，打印一下配置文件测试是否读取到：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 启动程序</span></span><br><span class="line"><span class="comment">// @author DaBaiLuoBo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;goblog-admin/config&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;The GoBlog-Admin has been started...&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;系统配置文件：&quot;</span>, config.Config.System)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/202404091858012.png"></p><h2 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h2><p>首先添加日志依赖：（项目根目录执行）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/sirupsen/logrus</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/202404091908052.png"></p><p>回到 <code>config.yaml</code> 文件中，继续写日志配置文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 系统配置</span></span><br><span class="line"><span class="attr">system:</span></span><br><span class="line">  <span class="comment"># 运行地址：本地</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line">  <span class="comment"># 端口</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">5001</span></span><br><span class="line">  <span class="comment"># 启动环境：debug/release</span></span><br><span class="line">  <span class="attr">env:</span> <span class="string">debug</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># logger 日志配置</span></span><br><span class="line"><span class="attr">logger:</span></span><br><span class="line">  <span class="comment"># 日志等级</span></span><br><span class="line">  <span class="attr">level:</span> <span class="string">info</span></span><br><span class="line">  <span class="comment"># 日志前缀</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">&#x27;[goblog-admin]&#x27;</span></span><br><span class="line">  <span class="comment"># 日志文件路径</span></span><br><span class="line">  <span class="attr">director:</span> <span class="string">logger</span></span><br><span class="line">  <span class="comment"># 显示行号</span></span><br><span class="line">  <span class="attr">show_line:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 是否打印在控制台</span></span><br><span class="line">  <span class="attr">log_in_console:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>在 <code>/config/config.go</code> 结构体中增加：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取配置文件</span></span><br><span class="line"><span class="comment">// @author DaBaiLuoBo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> config</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;gopkg.in/yaml.v2&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// config 总配置文件</span></span><br><span class="line"><span class="keyword">type</span> config <span class="keyword">struct</span> &#123;</span><br><span class="line">System system <span class="string">`yaml:&quot;system&quot;`</span></span><br><span class="line">Logger logger <span class="string">`yaml:&quot;logger&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 系统配置</span></span><br><span class="line"><span class="keyword">type</span> system <span class="keyword">struct</span> &#123;</span><br><span class="line">Host <span class="type">string</span> <span class="string">`yaml:&quot;host&quot;`</span></span><br><span class="line">Port <span class="type">int</span>    <span class="string">`yaml:&quot;port&quot;`</span></span><br><span class="line">Env  <span class="type">string</span> <span class="string">`yaml:&quot;env&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// logger 日志配置</span></span><br><span class="line"><span class="keyword">type</span> logger <span class="keyword">struct</span> &#123;</span><br><span class="line">Level        <span class="type">string</span> <span class="string">`yaml:&quot;level&quot;`</span></span><br><span class="line">Prefix       <span class="type">string</span> <span class="string">`yaml:&quot;prefix&quot;`</span></span><br><span class="line">Director     <span class="type">string</span> <span class="string">`yaml:&quot;director&quot;`</span></span><br><span class="line">ShowLine     <span class="type">bool</span>   <span class="string">`yaml:&quot;show_line&quot;`</span></span><br><span class="line">LogInConsole <span class="type">bool</span>   <span class="string">`yaml:&quot;log_in_console&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Config *config</span><br><span class="line"></span><br><span class="line"><span class="comment">// init 初始化配置</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">yamlFile, err := ioutil.ReadFile(<span class="string">&quot;./config.yaml&quot;</span>) <span class="comment">// 注意这里的路径，是和根目录同级</span></span><br><span class="line"><span class="comment">// 如果为空，直接返回错误内容</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接收配置文件，存入 Config 中</span></span><br><span class="line">yaml.Unmarshal(yamlFile, &amp;Config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>main.go</code> 文件中打印一下测试是否读取到：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(<span class="string">&quot;日志配置文件：&quot;</span>, config.Config.Logger)</span><br></pre></td></tr></table></figure><p>输出：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/202404091926418.png"></p><p>没有问题哈，接下来在核心组件目录中创建处理日志的包 <code>/core/logrus.go</code> ：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 日志处理</span></span><br><span class="line"><span class="comment">// @author DaBaiLuoBo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> core</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/sirupsen/logrus&quot;</span></span><br><span class="line"><span class="string">&quot;goblog-admin/config&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;path&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 颜色</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">red    = <span class="number">31</span></span><br><span class="line">yellow = <span class="number">33</span></span><br><span class="line">blue   = <span class="number">36</span></span><br><span class="line">gray   = <span class="number">37</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> LogFormatter <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Format 实现 Formatter (entry *logrus.Entry) ([]byte, error) 接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *LogFormatter)</span></span> Format(entry *logrus.Entry) ([]<span class="type">byte</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="comment">// 根据不同的 level 展示不同的颜色</span></span><br><span class="line"><span class="keyword">var</span> levelColor <span class="type">int</span></span><br><span class="line"><span class="keyword">switch</span> entry.Level &#123;</span><br><span class="line"><span class="keyword">case</span> logrus.DebugLevel, logrus.TraceLevel:</span><br><span class="line">levelColor = gray</span><br><span class="line"><span class="keyword">case</span> logrus.WarnLevel:</span><br><span class="line">levelColor = yellow</span><br><span class="line"><span class="keyword">case</span> logrus.ErrorLevel, logrus.FatalLevel, logrus.PanicLevel:</span><br><span class="line">levelColor = red</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">levelColor = blue</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">var</span> b *bytes.Buffer</span><br><span class="line"><span class="keyword">if</span> entry.Buffer != <span class="literal">nil</span> &#123;</span><br><span class="line">b = entry.Buffer</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">b = &amp;bytes.Buffer&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">log := config.Config.Logger</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义日期格式</span></span><br><span class="line">timestamp := entry.Time.Format(<span class="string">&quot;2006-01-02 15:04:05&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> entry.HasCaller() &#123;</span><br><span class="line"><span class="comment">// 自定义文件路径</span></span><br><span class="line">funcVal := entry.Caller.Function</span><br><span class="line">fileVal := fmt.Sprintf(<span class="string">&quot;%s:%d&quot;</span>, path.Base(entry.Caller.File), entry.Caller.Line)</span><br><span class="line"><span class="comment">// 自定义输出格式</span></span><br><span class="line">fmt.Fprintf(b, <span class="string">&quot;%s[%s] \x1b[%dm[%s]\x1b[0m %s %s: %s\n&quot;</span>, log.Prefix, timestamp, levelColor, entry.Level, fileVal, funcVal, entry.Message)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Fprintf(b, <span class="string">&quot;%s[%s] \x1b[%dm[%s]\x1b[0m: %s\n&quot;</span>, log.Prefix, timestamp, levelColor, entry.Level, entry.Message)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b.Bytes(), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// InitLogger 初始化</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitLogger</span><span class="params">()</span></span> *logrus.Logger &#123;</span><br><span class="line">mlog := logrus.New()                                <span class="comment">// 新建一个实例</span></span><br><span class="line">mlog.SetOutput(os.Stdout)                           <span class="comment">// 设置输出类型</span></span><br><span class="line">mlog.SetReportCaller(config.Config.Logger.ShowLine) <span class="comment">// 开启返回函数名和行号</span></span><br><span class="line">mlog.SetFormatter(&amp;LogFormatter&#123;&#125;)                  <span class="comment">// 设置自己定义的 Formatter</span></span><br><span class="line">level, err := logrus.ParseLevel(config.Config.Logger.Level)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">level = logrus.InfoLevel</span><br><span class="line">&#125;</span><br><span class="line">mlog.SetLevel(level) <span class="comment">// 设置最低的 level</span></span><br><span class="line">InitDefaultLogger()  <span class="comment">// 不注释的话即启用全局 log</span></span><br><span class="line"><span class="keyword">return</span> mlog</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// InitDefaultLogger 全局 log</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitDefaultLogger</span><span class="params">()</span></span> &#123;</span><br><span class="line">logrus.SetOutput(os.Stdout)                           <span class="comment">// 设置输出类型</span></span><br><span class="line">logrus.SetReportCaller(config.Config.Logger.ShowLine) <span class="comment">// 开启返回函数名和行号</span></span><br><span class="line">logrus.SetFormatter(&amp;LogFormatter&#123;&#125;)                  <span class="comment">// 设置自己定义的 Formatter</span></span><br><span class="line">level, err := logrus.ParseLevel(config.Config.Logger.Level)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">level = logrus.InfoLevel</span><br><span class="line">&#125;</span><br><span class="line">logrus.SetLevel(level) <span class="comment">// 设置最低的 level</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建全局共享配置， <code>global/global.go</code> ：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局共享配置</span></span><br><span class="line"><span class="comment">// @author DaBaiLuoBo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> global</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/sirupsen/logrus&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">Log *logrus.Logger</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>返回 <code>main.go</code> 文件，设置初始化和输出日志：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 启动程序</span></span><br><span class="line"><span class="comment">// @author DaBaiLuoBo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;goblog-admin/core&quot;</span></span><br><span class="line"><span class="string">&quot;goblog-admin/global&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//fmt.Println(&quot;The GoBlog-Admin has been started...&quot;)</span></span><br><span class="line"><span class="comment">//fmt.Println(&quot;系统配置文件：&quot;, config.Config.System)</span></span><br><span class="line"><span class="comment">//fmt.Println(&quot;日志配置文件：&quot;, config.Config.Logger)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 logger</span></span><br><span class="line">global.Log = core.InitLogger()</span><br><span class="line"><span class="comment">// 输出日志</span></span><br><span class="line">global.Log.Warnln(<span class="string">&quot;GoBlog 日志&quot;</span>)</span><br><span class="line">global.Log.Error(<span class="string">&quot;GoBlog 日志&quot;</span>)</span><br><span class="line">global.Log.Infof(<span class="string">&quot;GoBlog 日志&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/202404092037790.png"></p><h2 id="MySQL配置"><a href="#MySQL配置" class="headerlink" title="MySQL配置"></a>MySQL配置</h2><p>首先配置MySQL的驱动和依赖以及gorm：（项目根目录执行）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go get gorm.io/driver/mysql</span><br><span class="line">go get gorm.io/gorm</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/202404141828570.png"></p><p>在 <code>config.yaml</code> 文件中添加MySQL配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 系统配置</span></span><br><span class="line"><span class="attr">system:</span></span><br><span class="line">  <span class="comment"># 运行地址：本地</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line">  <span class="comment"># 端口</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">5001</span></span><br><span class="line">  <span class="comment"># 启动环境：debug/release</span></span><br><span class="line">  <span class="attr">env:</span> <span class="string">debug</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># logger 日志配置</span></span><br><span class="line"><span class="attr">logger:</span></span><br><span class="line">  <span class="comment"># 日志等级</span></span><br><span class="line">  <span class="attr">level:</span> <span class="string">info</span></span><br><span class="line">  <span class="comment"># 日志前缀</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">&#x27;[goblog-admin]&#x27;</span></span><br><span class="line">  <span class="comment"># 日志文件路径</span></span><br><span class="line">  <span class="attr">director:</span> <span class="string">logger</span></span><br><span class="line">  <span class="comment"># 显示行号</span></span><br><span class="line">  <span class="attr">show_line:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 是否打印在控制台</span></span><br><span class="line">  <span class="attr">log_in_console:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MySQL 配置</span></span><br><span class="line"><span class="attr">mysql:</span></span><br><span class="line">  <span class="comment"># 监听地址</span></span><br><span class="line">  <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">  <span class="comment"># 端口</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3306</span></span><br><span class="line">  <span class="comment"># 数据库名称</span></span><br><span class="line">  <span class="attr">db_name:</span> <span class="string">goblogtest</span></span><br><span class="line">  <span class="comment"># 链接数据库用户名</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">goblog</span></span><br><span class="line">  <span class="comment"># 链接数据库密码</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">goblog</span></span><br><span class="line">  <span class="comment"># 日志等级</span></span><br><span class="line">  <span class="attr">log_level:</span> <span class="string">dev</span></span><br><span class="line">  <span class="comment"># 字符集设置</span></span><br><span class="line">  <span class="attr">charset:</span> <span class="string">utf8mb4</span></span><br><span class="line">  <span class="comment"># 最大连接数</span></span><br><span class="line">  <span class="attr">maxIdle:</span> <span class="number">50</span></span><br><span class="line">  <span class="comment"># 最大连接时间</span></span><br><span class="line">  <span class="attr">maxOpen:</span> <span class="number">150</span></span><br></pre></td></tr></table></figure><p>然后在 <code>/config/config.go</code> 文件中配置一下结构体：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取配置文件</span></span><br><span class="line"><span class="comment">// @author DaBaiLuoBo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> config</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;gopkg.in/yaml.v2&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// config 总配置文件</span></span><br><span class="line"><span class="keyword">type</span> config <span class="keyword">struct</span> &#123;</span><br><span class="line">System system <span class="string">`yaml:&quot;system&quot;`</span></span><br><span class="line">Logger logger <span class="string">`yaml:&quot;logger&quot;`</span></span><br><span class="line">Mysql  mysql  <span class="string">`yaml:&quot;mysql&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 系统配置</span></span><br><span class="line"><span class="keyword">type</span> system <span class="keyword">struct</span> &#123;</span><br><span class="line">Host <span class="type">string</span> <span class="string">`yaml:&quot;host&quot;`</span></span><br><span class="line">Port <span class="type">int</span>    <span class="string">`yaml:&quot;port&quot;`</span></span><br><span class="line">Env  <span class="type">string</span> <span class="string">`yaml:&quot;env&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// logger 日志配置</span></span><br><span class="line"><span class="keyword">type</span> logger <span class="keyword">struct</span> &#123;</span><br><span class="line">Level        <span class="type">string</span> <span class="string">`yaml:&quot;level&quot;`</span></span><br><span class="line">Prefix       <span class="type">string</span> <span class="string">`yaml:&quot;prefix&quot;`</span></span><br><span class="line">Director     <span class="type">string</span> <span class="string">`yaml:&quot;director&quot;`</span></span><br><span class="line">ShowLine     <span class="type">bool</span>   <span class="string">`yaml:&quot;show_line&quot;`</span></span><br><span class="line">LogInConsole <span class="type">bool</span>   <span class="string">`yaml:&quot;log_in_console&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MySQL 配置</span></span><br><span class="line"><span class="keyword">type</span> mysql <span class="keyword">struct</span> &#123;</span><br><span class="line">Host     <span class="type">string</span> <span class="string">`yaml:&quot;host&quot;`</span></span><br><span class="line">Port     <span class="type">int</span>    <span class="string">`yaml:&quot;port&quot;`</span></span><br><span class="line">DbName   <span class="type">string</span> <span class="string">`yaml:&quot;db_name&quot;`</span></span><br><span class="line">Username <span class="type">string</span> <span class="string">`yaml:&quot;username&quot;`</span></span><br><span class="line">Password <span class="type">string</span> <span class="string">`yaml:&quot;password&quot;`</span></span><br><span class="line">LogLevel <span class="type">string</span> <span class="string">`yaml:&quot;log_level&quot;`</span></span><br><span class="line">Charset  <span class="type">string</span> <span class="string">`yaml:&quot;charset&quot;`</span></span><br><span class="line">MaxIdle  <span class="type">int</span>    <span class="string">`yaml:&quot;maxIdle&quot;`</span></span><br><span class="line">MaxOpen  <span class="type">int</span>    <span class="string">`yaml:&quot;maxOpen&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Config *config</span><br><span class="line"></span><br><span class="line"><span class="comment">// init 初始化配置</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">yamlFile, err := ioutil.ReadFile(<span class="string">&quot;./config.yaml&quot;</span>) <span class="comment">// 注意这里的路径，是和根目录同级</span></span><br><span class="line"><span class="comment">// 如果为空，直接返回错误内容</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接收配置文件，存入 Config 中</span></span><br><span class="line">yaml.Unmarshal(yamlFile, &amp;Config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写好之后在 <code>main.go</code> 文件中尝试打印一下，看看是否读取到了配置信息：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 启动程序</span></span><br><span class="line"><span class="comment">// @author DaBaiLuoBo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;goblog-admin/config&quot;</span></span><br><span class="line"><span class="string">&quot;goblog-admin/core&quot;</span></span><br><span class="line"><span class="string">&quot;goblog-admin/global&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//fmt.Println(&quot;The GoBlog-Admin has been started...&quot;)</span></span><br><span class="line"><span class="comment">//fmt.Println(&quot;系统配置文件：&quot;, config.Config.System)</span></span><br><span class="line"><span class="comment">//fmt.Println(&quot;日志配置文件：&quot;, config.Config.Logger)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 logger</span></span><br><span class="line">global.Log = core.InitLogger()</span><br><span class="line"><span class="comment">// 输出日志</span></span><br><span class="line"><span class="comment">//global.Log.Warnln(&quot;GoBlog 日志&quot;)</span></span><br><span class="line"><span class="comment">//global.Log.Error(&quot;GoBlog 日志&quot;)</span></span><br><span class="line"><span class="comment">//global.Log.Infof(&quot;GoBlog 日志&quot;)</span></span><br><span class="line"><span class="comment">// 测试一下输出MySQL配置信息</span></span><br><span class="line">global.Log.Infof(<span class="string">&quot;MySQL配置：%s&quot;</span>, config.Config.Mysql)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/202404141855403.png"></p><p>配置信息虽然输出了，但是有数据没有正常显示，这是因为全部用的 <code>%s</code> 字符串输出，先不用管，继续配置MySQL的连接</p><p>创建 <code>/core/mysql.go</code> 文件，作为MySQL的启动和连接组件：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MySQL 启动和连接组件（初始化配置）</span></span><br><span class="line"><span class="comment">// @author DaBaiLuoBo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> core</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;goblog-admin/config&quot;</span></span><br><span class="line"><span class="string">&quot;goblog-admin/global&quot;</span></span><br><span class="line"><span class="string">&quot;gorm.io/driver/mysql&quot;</span></span><br><span class="line"><span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line"><span class="string">&quot;gorm.io/gorm/logger&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个数据库，指针指向 gorm 组件</span></span><br><span class="line"><span class="keyword">var</span> Db *gorm.DB</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据库初始化</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MysqlInit</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line"><span class="comment">// 拿到 MySQL 配置信息</span></span><br><span class="line"><span class="keyword">var</span> dbConfig = config.Config.Mysql</span><br><span class="line"><span class="comment">// 格式化 url 字符串，含 MySQL 的配置参数</span></span><br><span class="line">url := fmt.Sprintf(<span class="string">&quot;%s:%s@tcp(%s:%d)/%s?charset=%s&amp;parseTime=True&amp;loc=Local&quot;</span>,</span><br><span class="line">dbConfig.Username,</span><br><span class="line">dbConfig.Password,</span><br><span class="line">dbConfig.Host,</span><br><span class="line">dbConfig.Port,</span><br><span class="line">dbConfig.DbName,</span><br><span class="line">dbConfig.Charset)</span><br><span class="line">Db, err = gorm.Open(mysql.Open(url), &amp;gorm.Config&#123;</span><br><span class="line">Logger:                                   logger.Default.LogMode(logger.Info),</span><br><span class="line">DisableForeignKeyConstraintWhenMigrating: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> Db.Error != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Db.Error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据库的设置</span></span><br><span class="line">sqlDb, err := Db.DB()</span><br><span class="line">sqlDb.SetMaxIdleConns(dbConfig.MaxIdle)</span><br><span class="line">sqlDb.SetMaxOpenConns(dbConfig.MaxOpen)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印数据库操作成功</span></span><br><span class="line">global.Log.Infof(<span class="string">&quot;[MySQL] 数据库连接成功&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保证函数完整性，返回空</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在 <code>main.go</code> 中增加数据库初始化语句：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主启动程序</span></span><br><span class="line"><span class="comment">// @author DaBaiLuoBo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;goblog-admin/core&quot;</span></span><br><span class="line"><span class="string">&quot;goblog-admin/global&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 初始化 logger</span></span><br><span class="line">global.Log = core.InitLogger()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 MySQL</span></span><br><span class="line">core.MysqlInit()</span><br><span class="line"></span><br><span class="line"><span class="comment">//fmt.Println(&quot;The GoBlog-Admin has been started...&quot;)</span></span><br><span class="line"><span class="comment">//fmt.Println(&quot;系统配置文件：&quot;, config.Config.System)</span></span><br><span class="line"><span class="comment">//fmt.Println(&quot;日志配置文件：&quot;, config.Config.Logger)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试输出日志</span></span><br><span class="line"><span class="comment">//global.Log.Warnln(&quot;GoBlog 日志&quot;)</span></span><br><span class="line"><span class="comment">//global.Log.Error(&quot;GoBlog 日志&quot;)</span></span><br><span class="line"><span class="comment">//global.Log.Infof(&quot;GoBlog 日志&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试一下输出MySQL配置信息</span></span><br><span class="line"><span class="comment">//global.Log.Infof(&quot;MySQL配置：%s&quot;, config.Config.Mysql)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后创建一个数据库，用户名和密码与配置文件中的信息保持一致，运行主程序测试是否连接成功：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/202404141948835.png"></p><h2 id="Redis配置"><a href="#Redis配置" class="headerlink" title="Redis配置"></a>Redis配置</h2><p>添加一下redis的依赖：（项目根目录执行）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/go-redis/redis/v8</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/202404142013865.png"></p><p>在 <code>config.yaml</code> 文件中增加redis的配置信息：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 系统配置</span></span><br><span class="line"><span class="attr">system:</span></span><br><span class="line">  <span class="comment"># 运行地址：本地</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line">  <span class="comment"># 端口</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">5001</span></span><br><span class="line">  <span class="comment"># 启动环境：debug/release</span></span><br><span class="line">  <span class="attr">env:</span> <span class="string">debug</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># logger 日志配置</span></span><br><span class="line"><span class="attr">logger:</span></span><br><span class="line">  <span class="comment"># 日志等级</span></span><br><span class="line">  <span class="attr">level:</span> <span class="string">info</span></span><br><span class="line">  <span class="comment"># 日志前缀</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">&#x27;[goblog-admin]&#x27;</span></span><br><span class="line">  <span class="comment"># 日志文件路径</span></span><br><span class="line">  <span class="attr">director:</span> <span class="string">logger</span></span><br><span class="line">  <span class="comment"># 显示行号</span></span><br><span class="line">  <span class="attr">show_line:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 是否打印在控制台</span></span><br><span class="line">  <span class="attr">log_in_console:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MySQL 配置</span></span><br><span class="line"><span class="attr">mysql:</span></span><br><span class="line">  <span class="comment"># 监听地址</span></span><br><span class="line">  <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">  <span class="comment"># 端口</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3306</span></span><br><span class="line">  <span class="comment"># 数据库名称</span></span><br><span class="line">  <span class="attr">db_name:</span> <span class="string">goblogtest</span></span><br><span class="line">  <span class="comment"># 链接数据库用户名</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">goblogtest</span></span><br><span class="line">  <span class="comment"># 链接数据库密码</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">goblogtest</span></span><br><span class="line">  <span class="comment"># 日志等级</span></span><br><span class="line">  <span class="attr">log_level:</span> <span class="string">dev</span></span><br><span class="line">  <span class="comment"># 字符集设置</span></span><br><span class="line">  <span class="attr">charset:</span> <span class="string">utf8mb4</span></span><br><span class="line">  <span class="comment"># 最大连接数</span></span><br><span class="line">  <span class="attr">maxIdle:</span> <span class="number">50</span></span><br><span class="line">  <span class="comment"># 最大连接时间</span></span><br><span class="line">  <span class="attr">maxOpen:</span> <span class="number">150</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Redis 配置</span></span><br><span class="line"><span class="attr">redis:</span></span><br><span class="line">  <span class="comment"># redis 访问地址</span></span><br><span class="line">  <span class="attr">address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:6379</span></span><br><span class="line">  <span class="comment"># redis 连接密码</span></span><br><span class="line">  <span class="attr">password:</span> </span><br><span class="line">  <span class="comment"># 数据库（默认为0，第一个）</span></span><br><span class="line">  <span class="attr">db:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>继续在 <code>/config/config.go</code> 文件中创建redis配置信息的结构体：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取配置文件</span></span><br><span class="line"><span class="comment">// @author DaBaiLuoBo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> config</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;gopkg.in/yaml.v2&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// config 总配置文件</span></span><br><span class="line"><span class="keyword">type</span> config <span class="keyword">struct</span> &#123;</span><br><span class="line">System system <span class="string">`yaml:&quot;system&quot;`</span></span><br><span class="line">Logger logger <span class="string">`yaml:&quot;logger&quot;`</span></span><br><span class="line">Mysql  mysql  <span class="string">`yaml:&quot;mysql&quot;`</span></span><br><span class="line">Redis  redis  <span class="string">`yaml:&quot;redis&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 系统配置</span></span><br><span class="line"><span class="keyword">type</span> system <span class="keyword">struct</span> &#123;</span><br><span class="line">Host <span class="type">string</span> <span class="string">`yaml:&quot;host&quot;`</span></span><br><span class="line">Port <span class="type">int</span>    <span class="string">`yaml:&quot;port&quot;`</span></span><br><span class="line">Env  <span class="type">string</span> <span class="string">`yaml:&quot;env&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// logger 日志配置</span></span><br><span class="line"><span class="keyword">type</span> logger <span class="keyword">struct</span> &#123;</span><br><span class="line">Level        <span class="type">string</span> <span class="string">`yaml:&quot;level&quot;`</span></span><br><span class="line">Prefix       <span class="type">string</span> <span class="string">`yaml:&quot;prefix&quot;`</span></span><br><span class="line">Director     <span class="type">string</span> <span class="string">`yaml:&quot;director&quot;`</span></span><br><span class="line">ShowLine     <span class="type">bool</span>   <span class="string">`yaml:&quot;show_line&quot;`</span></span><br><span class="line">LogInConsole <span class="type">bool</span>   <span class="string">`yaml:&quot;log_in_console&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MySQL 配置</span></span><br><span class="line"><span class="keyword">type</span> mysql <span class="keyword">struct</span> &#123;</span><br><span class="line">Host     <span class="type">string</span> <span class="string">`yaml:&quot;host&quot;`</span></span><br><span class="line">Port     <span class="type">int</span>    <span class="string">`yaml:&quot;port&quot;`</span></span><br><span class="line">DbName   <span class="type">string</span> <span class="string">`yaml:&quot;db_name&quot;`</span></span><br><span class="line">Username <span class="type">string</span> <span class="string">`yaml:&quot;username&quot;`</span></span><br><span class="line">Password <span class="type">string</span> <span class="string">`yaml:&quot;password&quot;`</span></span><br><span class="line">LogLevel <span class="type">string</span> <span class="string">`yaml:&quot;log_level&quot;`</span></span><br><span class="line">Charset  <span class="type">string</span> <span class="string">`yaml:&quot;charset&quot;`</span></span><br><span class="line">MaxIdle  <span class="type">int</span>    <span class="string">`yaml:&quot;maxIdle&quot;`</span></span><br><span class="line">MaxOpen  <span class="type">int</span>    <span class="string">`yaml:&quot;maxOpen&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Redis 配置</span></span><br><span class="line"><span class="keyword">type</span> redis <span class="keyword">struct</span> &#123;</span><br><span class="line">Address  <span class="type">string</span> <span class="string">`yaml:&quot;address&quot;`</span></span><br><span class="line">Password <span class="type">string</span> <span class="string">`yaml:&quot;password&quot;`</span></span><br><span class="line">Db       <span class="type">int</span>    <span class="string">`yaml:&quot;db&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Config *config</span><br><span class="line"></span><br><span class="line"><span class="comment">// init 初始化配置</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">yamlFile, err := ioutil.ReadFile(<span class="string">&quot;./config.yaml&quot;</span>) <span class="comment">// 注意这里的路径，是和根目录同级</span></span><br><span class="line"><span class="comment">// 如果为空，直接返回错误内容</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接收配置文件，存入 Config 中</span></span><br><span class="line">yaml.Unmarshal(yamlFile, &amp;Config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在 <code>main.go</code> 中打印配置信息测试一下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主启动程序</span></span><br><span class="line"><span class="comment">// @author DaBaiLuoBo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;goblog-admin/config&quot;</span></span><br><span class="line"><span class="string">&quot;goblog-admin/core&quot;</span></span><br><span class="line"><span class="string">&quot;goblog-admin/global&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 初始化 logger</span></span><br><span class="line">global.Log = core.InitLogger()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 MySQL</span></span><br><span class="line">core.MysqlInit()</span><br><span class="line"></span><br><span class="line"><span class="comment">//fmt.Println(&quot;The GoBlog-Admin has been started...&quot;)</span></span><br><span class="line"><span class="comment">//fmt.Println(&quot;系统配置文件：&quot;, config.Config.System)</span></span><br><span class="line"><span class="comment">//fmt.Println(&quot;日志配置文件：&quot;, config.Config.Logger)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试输出日志</span></span><br><span class="line"><span class="comment">//global.Log.Warnln(&quot;GoBlog 日志&quot;)</span></span><br><span class="line"><span class="comment">//global.Log.Error(&quot;GoBlog 日志&quot;)</span></span><br><span class="line"><span class="comment">//global.Log.Infof(&quot;GoBlog 日志&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试一下输出MySQL配置信息</span></span><br><span class="line"><span class="comment">//global.Log.Infof(&quot;MySQL配置：%s&quot;, config.Config.Mysql)</span></span><br><span class="line"><span class="comment">// 测试一下输出Redis配置信息</span></span><br><span class="line">global.Log.Infof(<span class="string">&quot;Redis配置：&quot;</span>, config.Config.Redis)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/202404142028920.png"></p><p>在 <code>/global/global.go</code> 文件里拿到redis的上下文：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局共享配置</span></span><br><span class="line"><span class="comment">// @author DaBaiLuoBo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> global</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/sirupsen/logrus&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">Log *logrus.Logger</span><br><span class="line">Ctx = context.Background()</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>注册一个 <code>/core/redis.go</code> 组件文件，完成redis初始化：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Redis 启动和连接组件（初始化配置）</span></span><br><span class="line"><span class="comment">// @author DaBaiLuoBo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> core</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/go-redis/redis/v8&quot;</span></span><br><span class="line"><span class="string">&quot;goblog-admin/config&quot;</span></span><br><span class="line"><span class="string">&quot;goblog-admin/global&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 和 MySQL 一样，先拿到 Redis 客户端</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">RedisDb *redis.Client</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 Redis 连接</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RedisInit</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line">RedisDb = redis.NewClient(&amp;redis.Options&#123;</span><br><span class="line">Addr:     config.Config.Redis.Address,</span><br><span class="line">Password: config.Config.Redis.Password,</span><br><span class="line">DB:       config.Config.Redis.Db&#125;)</span><br><span class="line"><span class="comment">// 接收 redis 连接的上下文</span></span><br><span class="line">_, err := RedisDb.Ping(global.Ctx).Result()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">global.Log.Infof(<span class="string">&quot;[Redis] Redis 连接成功&quot;</span>)</span><br><span class="line"><span class="comment">// 保证函数完整性，返回空</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>main.go</code> 中初始化redis：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主启动程序</span></span><br><span class="line"><span class="comment">// @author DaBaiLuoBo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;goblog-admin/core&quot;</span></span><br><span class="line"><span class="string">&quot;goblog-admin/global&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 初始化 logger</span></span><br><span class="line">global.Log = core.InitLogger()</span><br><span class="line"><span class="comment">// 初始化 MySQL</span></span><br><span class="line">core.MysqlInit()</span><br><span class="line"><span class="comment">// 初始化 Redis</span></span><br><span class="line">core.RedisInit()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行一下，输出：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/202404142104341.png"></p><h2 id="初始化路由"><a href="#初始化路由" class="headerlink" title="初始化路由"></a>初始化路由</h2><p>首先添加 gin 框架支持：（项目根目录下执行）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/gin-gonic/gin</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/202404142115420.png"></p><p>创建路由配置文件 <code>/router/router.go</code> ：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 路由初始化以及注册</span></span><br><span class="line"><span class="comment">// @author DaBaiLuoBo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> router</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;goblog-admin/config&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先拿到Gin框架</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RouterInit</span><span class="params">()</span></span> *gin.Engine &#123;</span><br><span class="line"><span class="comment">// 设置启动模式</span></span><br><span class="line">gin.SetMode(config.Config.System.Env)</span><br><span class="line"><span class="comment">// 新建路由</span></span><br><span class="line">router := gin.New()</span><br><span class="line"><span class="comment">// 设置跌机时恢复</span></span><br><span class="line">router.Use(gin.Recovery())</span><br><span class="line"><span class="keyword">return</span> router</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Register 路由接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">register</span><span class="params">(router *gin.Engine)</span></span> &#123;</span><br><span class="line"><span class="comment">// todo 后续的所有接口 url 将在此配置</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在 <code>main.go</code> 中启动路由：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主启动程序</span></span><br><span class="line"><span class="comment">// @author DaBaiLuoBo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;goblog-admin/config&quot;</span></span><br><span class="line"><span class="string">&quot;goblog-admin/core&quot;</span></span><br><span class="line"><span class="string">&quot;goblog-admin/global&quot;</span></span><br><span class="line"><span class="string">&quot;goblog-admin/router&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 初始化 logger</span></span><br><span class="line">global.Log = core.InitLogger()</span><br><span class="line"><span class="comment">// 初始化 MySQL</span></span><br><span class="line">core.MysqlInit()</span><br><span class="line"><span class="comment">// 初始化 Redis</span></span><br><span class="line">core.RedisInit()</span><br><span class="line"><span class="comment">// 初始化路由</span></span><br><span class="line">router := router.RouterInit()</span><br><span class="line"><span class="comment">// 拿到路由地址</span></span><br><span class="line">address := fmt.Sprintf(<span class="string">&quot;%s:%d&quot;</span>, config.Config.System.Host, config.Config.System.Port)</span><br><span class="line">global.Log.Infof(<span class="string">&quot;系统启动成功，运行在: %s&quot;</span>, address)</span><br><span class="line"><span class="comment">// 让系统运行在指定的路由上</span></span><br><span class="line">router.Run(address)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行测试一下，输出：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/202404142133061.png"></p><h2 id="通用返回结构"><a href="#通用返回结构" class="headerlink" title="通用返回结构"></a>通用返回结构</h2><p>所谓的返回结构就是指请求返回的数据结构，一般来说由三部分组成，code、data以及message组成</p><p>code就是状态码，data就是数据，message就是提示信息</p><p>创建 <code>/result/code.go</code> 文件，先实现状态码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 状态码/状态信息</span></span><br><span class="line"><span class="comment">//@author DaiBaiLuoBo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment">// Codes 定义状态</span></span><br><span class="line"><span class="keyword">type</span> Codes <span class="keyword">struct</span> &#123;</span><br><span class="line">Message <span class="keyword">map</span>[<span class="type">uint</span>]<span class="type">string</span></span><br><span class="line">Success <span class="type">uint</span></span><br><span class="line">Failed  <span class="type">uint</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ApiCode 状态码</span></span><br><span class="line"><span class="keyword">var</span> ApiCode = &amp;Codes&#123;</span><br><span class="line">Success: <span class="number">200</span>,</span><br><span class="line">Failed:  <span class="number">501</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 状态信息初始化</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">ApiCode.Message = <span class="keyword">map</span>[<span class="type">uint</span>]<span class="type">string</span>&#123;</span><br><span class="line">ApiCode.Success: <span class="string">&quot;成功&quot;</span>,</span><br><span class="line">ApiCode.Failed:  <span class="string">&quot;失败&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetMessage 供给外部调用状态信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Codes)</span></span> GetMessage(code <span class="type">uint</span>) <span class="type">string</span> &#123;</span><br><span class="line">message, ok := c.Message[code]</span><br><span class="line"><span class="comment">// 如果不 ok，返回空，ok 则返回 message</span></span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> message</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再创建一个 <code>/result/result.go</code> 文件，用来定义通用返回结构的结构体：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结构数据定义</span></span><br><span class="line"><span class="comment">// @author DaiBaiLuoBo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Result 结构体</span></span><br><span class="line"><span class="keyword">type</span> Result <span class="keyword">struct</span> &#123;</span><br><span class="line">Code    <span class="type">int</span>         <span class="string">`json:&quot;code&quot;`</span>    <span class="comment">// 状态码</span></span><br><span class="line">Message <span class="type">string</span>      <span class="string">`json:&quot;message&quot;`</span> <span class="comment">// 提示信息</span></span><br><span class="line">Data    <span class="keyword">interface</span>&#123;&#125; <span class="string">`json:&quot;data&quot;`</span>    <span class="comment">// 返回数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Success 成功</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Success</span><span class="params">(c *gin.Context, data <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> data == <span class="literal">nil</span> &#123;</span><br><span class="line">data = gin.H&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接收 Result</span></span><br><span class="line">res := Result&#123;&#125;</span><br><span class="line">res.Code = <span class="type">int</span>(ApiCode.Success)</span><br><span class="line">res.Message = ApiCode.GetMessage(ApiCode.Success)</span><br><span class="line"><span class="comment">// data 数据直接从上面拿过来</span></span><br><span class="line">res.Data = data</span><br><span class="line"><span class="comment">// 进一步返回给前端</span></span><br><span class="line">c.JSON(http.StatusOK, res)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Failed 失败</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Failed</span><span class="params">(c *gin.Context, code <span class="type">int</span>, message <span class="type">string</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// 和上面的大同小异，先接收 Result</span></span><br><span class="line">res := Result&#123;&#125;</span><br><span class="line">res.Code = code</span><br><span class="line">res.Message = message</span><br><span class="line"><span class="comment">// 错误通过 gin 来处理</span></span><br><span class="line">res.Data = gin.H&#123;&#125;</span><br><span class="line">c.JSON(http.StatusOK, res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写好之后创建一个test的API，来测试一下 <code>/api/test.go</code> ：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试 API</span></span><br><span class="line"><span class="comment">// @author DaiBaiLuoBo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> api</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;goblog-admin/result&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Success 成功测试</span></span><br><span class="line"><span class="comment">// @router /api/success [get]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Success</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">result.Success(c, <span class="number">200</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Failed 失败测试</span></span><br><span class="line"><span class="comment">// @router /api/failed [get]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Failed</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">result.Failed(c, <span class="type">int</span>(result.ApiCode.Failed), result.ApiCode.GetMessage(result.ApiCode.Failed))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在 <code>router/router.go</code> 文件中增加我们的测试api，同时注册路由：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 路由初始化以及注册</span></span><br><span class="line"><span class="comment">// @author DaBaiLuoBo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> router</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;goblog-admin/api&quot;</span></span><br><span class="line"><span class="string">&quot;goblog-admin/config&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// RouterInit 初始化先拿到Gin框架</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RouterInit</span><span class="params">()</span></span> *gin.Engine &#123;</span><br><span class="line"><span class="comment">// 设置启动模式</span></span><br><span class="line">gin.SetMode(config.Config.System.Env)</span><br><span class="line"><span class="comment">// 新建路由</span></span><br><span class="line">router := gin.New()</span><br><span class="line"><span class="comment">// 设置跌机时恢复</span></span><br><span class="line">router.Use(gin.Recovery())</span><br><span class="line"><span class="comment">// Register 注册</span></span><br><span class="line">register(router)</span><br><span class="line"><span class="comment">// 返回路由</span></span><br><span class="line"><span class="keyword">return</span> router</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Register 路由接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">register</span><span class="params">(router *gin.Engine)</span></span> &#123;</span><br><span class="line"><span class="comment">// todo 后续的所有接口 url 将在此配置</span></span><br><span class="line">router.GET(<span class="string">&quot;/api/success&quot;</span>, api.Success)</span><br><span class="line">router.GET(<span class="string">&quot;/api/failed&quot;</span>, api.Failed)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后运行程序测试一下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/202404162002825.png"></p><p>后台输出了api的相关信息：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/202404162007759.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/202404162008607.png"></p><p>可以看到两个api都没问题</p><h2 id="接入SWAG"><a href="#接入SWAG" class="headerlink" title="接入SWAG"></a>接入SWAG</h2><p>首先先加载依赖：（根目录下执行）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/swaggo/files</span><br><span class="line">go get github.com/swaggo/gin-swagger</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/202404162014850.png"></p><p>在 <code>main.go</code> 中加入swag信息：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主启动程序</span></span><br><span class="line"><span class="comment">// @author DaBaiLuoBo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;goblog-admin/config&quot;</span></span><br><span class="line"><span class="string">&quot;goblog-admin/core&quot;</span></span><br><span class="line"><span class="string">&quot;goblog-admin/global&quot;</span></span><br><span class="line"><span class="string">&quot;goblog-admin/router&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// @title GoBlog运营后台</span></span><br><span class="line"><span class="comment">// @version 24.04.16.1</span></span><br><span class="line"><span class="comment">// @description GoBlog运营后台API接口文档</span></span><br><span class="line"><span class="comment">// @securityDefinitions.apikey ApiKeyAuth</span></span><br><span class="line"><span class="comment">// @in header</span></span><br><span class="line"><span class="comment">// @name Authorization</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 初始化 logger</span></span><br><span class="line">global.Log = core.InitLogger()</span><br><span class="line"><span class="comment">// 初始化 MySQL</span></span><br><span class="line">core.MysqlInit()</span><br><span class="line"><span class="comment">// 初始化 Redis</span></span><br><span class="line">core.RedisInit()</span><br><span class="line"><span class="comment">// 初始化路由</span></span><br><span class="line">router := router.RouterInit()</span><br><span class="line"><span class="comment">// 拿到路由地址</span></span><br><span class="line">address := fmt.Sprintf(<span class="string">&quot;%s:%d&quot;</span>, config.Config.System.Host, config.Config.System.Port)</span><br><span class="line">global.Log.Infof(<span class="string">&quot;系统启动成功，运行在: %s&quot;</span>, address)</span><br><span class="line"><span class="comment">// 让系统运行在指定的路由上</span></span><br><span class="line">router.Run(address)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在路由文件 <code>router/router.go</code> 中引入swag：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 路由初始化以及注册</span></span><br><span class="line"><span class="comment">// @author DaBaiLuoBo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> router</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">swaggerFiles <span class="string">&quot;github.com/swaggo/files&quot;</span></span><br><span class="line">ginSwagger <span class="string">&quot;github.com/swaggo/gin-swagger&quot;</span></span><br><span class="line"><span class="string">&quot;goblog-admin/api&quot;</span></span><br><span class="line"><span class="string">&quot;goblog-admin/config&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// RouterInit 初始化先拿到Gin框架</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RouterInit</span><span class="params">()</span></span> *gin.Engine &#123;</span><br><span class="line"><span class="comment">// 设置启动模式</span></span><br><span class="line">gin.SetMode(config.Config.System.Env)</span><br><span class="line"><span class="comment">// 新建路由</span></span><br><span class="line">router := gin.New()</span><br><span class="line"><span class="comment">// 设置跌机时恢复</span></span><br><span class="line">router.Use(gin.Recovery())</span><br><span class="line"><span class="comment">// Register 注册</span></span><br><span class="line">register(router)</span><br><span class="line"><span class="comment">// 返回路由</span></span><br><span class="line"><span class="keyword">return</span> router</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Register 路由接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">register</span><span class="params">(router *gin.Engine)</span></span> &#123;</span><br><span class="line"><span class="comment">// todo 后续的所有接口 url 将在此配置</span></span><br><span class="line">router.GET(<span class="string">&quot;/swagger/*any&quot;</span>, ginSwagger.WrapHandler(swaggerFiles.Handler))</span><br><span class="line">router.GET(<span class="string">&quot;/api/success&quot;</span>, api.Success)</span><br><span class="line">router.GET(<span class="string">&quot;/api/failed&quot;</span>, api.Failed)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在刚才写的test路由文件 <code>/api/test.go</code> 中加入注释：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试 API</span></span><br><span class="line"><span class="comment">// @author DaiBaiLuoBo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> api</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;goblog-admin/result&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Success 成功测试</span></span><br><span class="line"><span class="comment">// @Summary 成功测试接口</span></span><br><span class="line"><span class="comment">// @Tags 测试相关接口</span></span><br><span class="line"><span class="comment">// @Produce json</span></span><br><span class="line"><span class="comment">// @Description 成功测试接口</span></span><br><span class="line"><span class="comment">// @Success 200 &#123;object&#125; result.Result</span></span><br><span class="line"><span class="comment">// @router /api/success [get]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Success</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">result.Success(c, <span class="number">200</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Failed 失败测试</span></span><br><span class="line"><span class="comment">// @Summary 失败测试接口</span></span><br><span class="line"><span class="comment">// @Tags 测试相关接口</span></span><br><span class="line"><span class="comment">// @Produce json</span></span><br><span class="line"><span class="comment">// @Description 失败测试接口</span></span><br><span class="line"><span class="comment">// @Success 200 &#123;object&#125; result.Result</span></span><br><span class="line"><span class="comment">// @router /api/failed [get]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Failed</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">result.Failed(c, <span class="type">int</span>(result.ApiCode.Failed), result.ApiCode.GetMessage(result.ApiCode.Failed))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在项目根目录下执行swag初始化：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swag init</span><br></pre></td></tr></table></figure><blockquote><p>如果失败请尝试 <code>go get -u github.com/swaggo/swag/cmd/swag</code> 命令安装swag命令行工具</p><p>如果还不行，请更换安装方式：<code>go install github.com/swaggo/swag/cmd/swag@latest</code> 后再添加系统环境变量 <code>%GOPATH%\bin</code> （实测这个可以解决问题）</p></blockquote><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/202404162046851.png"></p><p>初始化完成之后发现根目录中多了一个 <code>docs</code> 目录，回到 <code>main.go</code> 文件中，将该目录加入import扫描目录：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主启动程序</span></span><br><span class="line"><span class="comment">// @author DaBaiLuoBo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;goblog-admin/config&quot;</span></span><br><span class="line"><span class="string">&quot;goblog-admin/core&quot;</span></span><br><span class="line">_ <span class="string">&quot;goblog-admin/docs&quot;</span> <span class="comment">// swag 文档目录</span></span><br><span class="line"><span class="string">&quot;goblog-admin/global&quot;</span></span><br><span class="line"><span class="string">&quot;goblog-admin/router&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// @title GoBlog运营后台</span></span><br><span class="line"><span class="comment">// @version 24.04.16.1</span></span><br><span class="line"><span class="comment">// @description GoBlog运营后台API接口文档</span></span><br><span class="line"><span class="comment">// @securityDefinitions.apikey ApiKeyAuth</span></span><br><span class="line"><span class="comment">// @in header</span></span><br><span class="line"><span class="comment">// @name Authorization</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 初始化 logger</span></span><br><span class="line">global.Log = core.InitLogger()</span><br><span class="line"><span class="comment">// 初始化 MySQL</span></span><br><span class="line">core.MysqlInit()</span><br><span class="line"><span class="comment">// 初始化 Redis</span></span><br><span class="line">core.RedisInit()</span><br><span class="line"><span class="comment">// 初始化路由</span></span><br><span class="line">router := router.RouterInit()</span><br><span class="line"><span class="comment">// 拿到路由地址</span></span><br><span class="line">address := fmt.Sprintf(<span class="string">&quot;%s:%d&quot;</span>, config.Config.System.Host, config.Config.System.Port)</span><br><span class="line">global.Log.Infof(<span class="string">&quot;系统启动成功，运行在: %s&quot;</span>, address)</span><br><span class="line"><span class="comment">// 让系统运行在指定的路由上</span></span><br><span class="line">router.Run(address)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后启动项目测试一下：（访问 <code>127.0.0.1:5001/swagger/index.html</code> ）</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/202404162058945.png"></p><blockquote><p>如果接口显示不出来，检查刚才加入的那些注释是不是不对，然后重新 <code>swag init</code> 一下！</p></blockquote><p>点击 <code>Try it out</code> ， <code>Execute</code> 测试一下，没毛病：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/202404162101839.png"></p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下给frp注册为服务</title>
      <link href="/posts/f3c87c0e/"/>
      <url>/posts/f3c87c0e/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>过完年不是整了一台洋垃圾主机作为服务器嘛，但是家里又没有公网IP，只能用内网穿透了</p><p>每次虚拟机重启之后都需要自己一台一台的去手动开启frp服务，就很累人</p><p>所以这里记录一下怎么把frp注册为服务，并且开机自启</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>创建一个系统服务文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/systemd/system/frpc-luobo.service</span><br></pre></td></tr></table></figure><blockquote><p>服务名称可以自己定义哈，不用和我一样</p></blockquote><p>然后写入下列内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">服务描述</span></span><br><span class="line">Description=frpc-luobo service</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">服务启动时序，在网络驱动加载完毕之后</span></span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动失败时重启</span></span><br><span class="line">Restart=on-failure</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启间隔3s</span></span><br><span class="line">RestartSec=3</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">服务执行的命令</span></span><br><span class="line">ExecStart=/home/test/frpc/frpc-luobo -c /home/test/frpc/config-240323.ini</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><blockquote><p>建议删除注释食用</p></blockquote><p>然后 <code>wq!</code> 保存，保存后执行把systemctl进行重载：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>启动服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start [服务名称/frpc-luobo]</span><br></pre></td></tr></table></figure><p>注册服务为开机启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable [服务名称/frpc-luobo]</span><br></pre></td></tr></table></figure><p>其他管理服务的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">关闭</span></span><br><span class="line">sudo systemctl stop [服务名称/frpc-luobo]</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启</span></span><br><span class="line">sudo systemctl restart [服务名称/frpc-luobo]</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看状态</span></span><br><span class="line">sudo systemctl status [服务名称/frpc-luobo]</span><br></pre></td></tr></table></figure><p>喏，就这么简单。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202403241926755.png"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署Flarum社区</title>
      <link href="/posts/77b13f05/"/>
      <url>/posts/77b13f05/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202403112011137.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>自从有了服务器之后一直有点蠢蠢欲动，纯静态博客已经满足不了我了，搭建一个轻社区的想法疯狂的在脑子里生长，今天突然有个机会了解到了Flarum这个开源轻社区，强大，方便，体积小，响应快</p><p>官方GitHub：<a href="https://github.com/flarum/flarum">https://github.com/flarum/flarum</a></p><p>官方的部署过程，，，emm，一言难尽</p><p>然后看到了宝塔面板的应用商店里居然有现成的docker版本，果断下载安装，结果，，，emm，根本就没反应啊喂，坐牢塔根本不给任何的提示，百度也搜不到相关教程，说是要缺少配置，到底要配置什么你倒是告诉我啊喂，果断放弃</p><p>继续百度，在茫茫人海里突然看到了一个大佬发布的使用docker手动部署的博文，简直就是天籁之音，思路一下子打开</p><p>教程原文：<a href="https://blog.csdn.net/qq_37887537/article/details/130071605">https://blog.csdn.net/qq_37887537/article/details/130071605</a></p><p>docker镜像地址：<a href="https://github.com/mondediefr/docker-flarum">https://github.com/mondediefr/docker-flarum</a></p><blockquote><p>注：这是第三方打包的地址，而且这个仓库已经好几年没有更新了，大概率版本是比较老旧了，但是我去dockerhub看了一眼，居然是三天前更新的，所以本文中下方等会要写的配置文件中的版本，就见仁见智了，可以自己尝试更新一下</p></blockquote><h2 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h2><p>第一步：安装docker和docker-compose就不赘述了，可以看<a href="https://imbhj.com/posts/e5f6a19a/">https://imbhj.com/posts/e5f6a19a/</a></p><p>第二步：拉取镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">最新版</span></span><br><span class="line">sudo docker pull mondedie/flarum:latest</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">稳定版（推荐）：</span></span><br><span class="line">sudo docker pull mondedie/flarum:stable</span><br></pre></td></tr></table></figure><p>第三步：写配置文件</p><p>在自己能看的顺眼的位置新建一个文件夹作为根目录，名字随意</p><p>cd进入新建好的文件夹</p><p>touch一个新的文件： <code>docker-compose.yml</code> （文件名必须是这个）</p><p><code>vim docker-compose.yml</code> ：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#未知含义的版本号</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">flarum:</span></span><br><span class="line">  <span class="comment">#镜像及版本</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mondedie/flarum:stable</span></span><br><span class="line">    <span class="comment">#容器名称</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">flarum</span></span><br><span class="line">    <span class="comment">#环境文件路径</span></span><br><span class="line">    <span class="attr">env_file:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./envfile/flarum.env</span></span><br><span class="line">    <span class="comment">#挂载的其他文件路径</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="comment">#静态资源目录</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./assets:/flarum/app/public/assets</span></span><br><span class="line">    <span class="comment">#扩展/插件目录</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./extensions:/flarum/app/extensions</span></span><br><span class="line">    <span class="comment">#日志目录</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./logs:/flarum/app/storage/logs</span></span><br><span class="line">    <span class="comment">#nginx配置目录</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./nginx:/etc/nginx/flarum</span></span><br><span class="line">    <span class="comment">#容器端口映射</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8000</span><span class="string">:8888</span></span><br><span class="line">    <span class="comment">#数据库依赖</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mariadb</span></span><br><span class="line"> </span><br><span class="line">  <span class="attr">mariadb:</span></span><br><span class="line">  <span class="comment">#数据库镜像及版本</span></span><br><span class="line">  <span class="comment">#需要注意的是这里的数据库版本原作者用的是10.5版本，我这里修改到了11.3</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mariadb:11.3</span></span><br><span class="line">    <span class="comment">#数据库容器名称</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mariadb</span></span><br><span class="line">    <span class="comment">#数据库端口映射</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3306</span><span class="string">:3306</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">    <span class="comment">#root密码</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=123456</span></span><br><span class="line">    <span class="comment">#数据表名称</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=flarum</span></span><br><span class="line">    <span class="comment">#用户名</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_USER=flarum</span></span><br><span class="line">    <span class="comment">#用户密码</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_PASSWORD=123456</span></span><br><span class="line">    <span class="comment">#数据库文件目录</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./db:/var/lib/mysql</span></span><br></pre></td></tr></table></figure><blockquote><p>建议删除注释食用</p><p>注：冒号前面的目录是挂载的宿主机目录，可以自己修改，冒号后面的目录是映射的容器内部的目录，不可以更改，否则读取不到数据</p></blockquote><p>cd进入新建好的env_file文件夹</p><p>touch一个新的文件： <code>flarum.env</code> （文件名同你配置文件里的即可）</p><p><code>vim flarum.env</code> ：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#debug开关</span></span><br><span class="line"><span class="string">DEBUG=false</span></span><br><span class="line"><span class="comment">#站点IP，如果绑定了域名的话，可以直接设置为访问的域名，如果在局域网内访问也必须更改为局域网的地址</span></span><br><span class="line"><span class="comment">#设置域名之后再用本地IP端口访问会产生跨域请求问题</span></span><br><span class="line"><span class="string">FORUM_URL=http://127.0.0.1:8000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##数据库配置</span></span><br><span class="line"><span class="comment">#数据库域名，默认为容器名称</span></span><br><span class="line"><span class="comment">#如果要修改数据库端口，此项更改为宿主机域名，防火墙开更改后的端口</span></span><br><span class="line"><span class="string">DB_HOST=mariadb</span></span><br><span class="line"><span class="comment">#数据表名称</span></span><br><span class="line"><span class="string">DB_NAME=flarum</span></span><br><span class="line"><span class="comment">#数据库用户名</span></span><br><span class="line"><span class="string">DB_USER=flarum</span></span><br><span class="line"><span class="comment">#数据库用户密码</span></span><br><span class="line"><span class="string">DB_PASS=123456</span></span><br><span class="line"><span class="comment">#数据库索引</span></span><br><span class="line"><span class="string">DB_PREF=flarum_</span></span><br><span class="line"><span class="comment">#数据库端口</span></span><br><span class="line"><span class="string">DB_PORT=3306</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">##站点配置</span></span><br><span class="line"><span class="comment">#管理员用户名</span></span><br><span class="line"><span class="string">FLARUM_ADMIN_USER=admin</span></span><br><span class="line"><span class="comment">#管理员密码（必须大于8个字符）</span></span><br><span class="line"><span class="string">FLARUM_ADMIN_PASS=123456789a</span></span><br><span class="line"><span class="comment">#管理员邮箱</span></span><br><span class="line"><span class="string">FLARUM_ADMIN_MAIL=admin@domain.tld</span></span><br><span class="line"><span class="comment">#站点标题</span></span><br><span class="line"><span class="string">FLARUM_TITLE=myflarum</span></span><br></pre></td></tr></table></figure><blockquote><p>建议删除注释食用</p></blockquote><p>第四步：启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">需要有网络的情况下执行，会自动下载数据库镜像</span></span><br><span class="line">sudo docker compose up -d mariadb</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动flarum</span></span><br><span class="line">sudo docker compose up -d flarum</span><br></pre></td></tr></table></figure><p>第五步：访问</p><p>直接访问配置文件中的IP地址即可，本机访问127即可，局域网必须设置好局域网IP才可以，自定义域名同理</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202403112117898.png"></p><p>关闭容器：（在我们创建的根目录下执行）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker compose down</span><br></pre></td></tr></table></figure><p>第二次启动容器的时候就可以一键执行：（在我们创建的根目录下执行）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker compose up -d</span><br></pre></td></tr></table></figure><p>容器关闭后重新启动，插件需要重新启用并且设置也会重置，但不需要重新安装</p><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>在创建的根目录下先关闭容器（如果开启的话）</p><p>编辑yml配置文件，将flarum和数据库的版本号都更改为latest</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker compose up -d</span><br></pre></td></tr></table></figure><p>直接拉取最新的镜像并部署</p><p>查看日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker logs -f [容器名]</span><br></pre></td></tr></table></figure><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>插件商店：<a href="https://extiverse.com/">https://extiverse.com/</a></p><p>安装插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker exec -ti flarum extension require [扩展名/扩展名]</span><br></pre></td></tr></table></figure><p>移除插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker exec -ti flarum extension remove [扩展名/扩展名]</span><br></pre></td></tr></table></figure><p>列出扩展列表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker exec -ti flarum extension list</span><br></pre></td></tr></table></figure><p>首先安装中文插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker exec -ti flarum extension require flarum-lang/chinese-simplified</span><br></pre></td></tr></table></figure><blockquote><p>该命令实际上就是进入容器中调用该容器已经写好的extension脚本，来进行安装插件</p></blockquote><p>登录管理页面：127.0.0.1:8000&#x2F;admin（需要在首页登录配置好的管理员账户才有权限访问）</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202403112125762.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202403112125871.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202403112126126.png"></p><p>然后点击下方的保存，刷新即可显示为中文</p><p>安装标题搜索插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker exec -ti flarum extension require ganuonglachanh/flarum-ext-search</span><br></pre></td></tr></table></figure><p>点击右上角头像，点击后台管理，启用该插件：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202403112132117.png"></p><p>安装图片上传插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker exec -ti flarum extension require fof/upload</span><br></pre></td></tr></table></figure><p>如果安装失败，执行下列安装指定版本的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker exec -ti flarum extension require fof/upload:1.3</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意，我这里开启这个上传插件之后就导致无法发帖无法回复，请慎用</strong></p><p>应该是docker镜像的作者锁死了该插件的版本，以防php版本不适配</p><p>注意：实测直接使用最新版镜像，可以使用文件上传插件</p></blockquote><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202403112142762.png"></p><p>启用之后进行自定义的设置即可</p><p>帖子直链插件：<a href="https://github.com/PipecraftNet/flarum-ext-id-slug/blob/main/README-cn.md">https://github.com/PipecraftNet/flarum-ext-id-slug/blob/main/README-cn.md</a></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202403132129243.png"></p><p>你也不想你的生成的链接这么长吧，安装：（安装后在常规设置里更改链接引擎）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker exec -ti flarum extension require pipecraft/flarum-ext-id-slug</span><br></pre></td></tr></table></figure><p>开启后效果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202403141929545.png"></p><p>其他推荐插件：（安装第三方插件要慎重，尽量安装fof官方插件）</p><blockquote><p>注：插件的加载是有顺序的，可能某些插件会导致其他插件不可用，所以安装插件一定要慎重！</p><p>注：不保准这些插件的兼容性，更多插件可以去插件商店看看~</p><p>注：安装任何插件之前请务必确保自己的站点的版本，插件是否兼容</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 已安装</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">黑暗模式</span></span><br><span class="line">fof/nightmode</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">导航栏添加额外链接/菜单</span></span><br><span class="line">fof/links</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加一个简单的站点统计widget</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">20240318更新，这个插件与下方的一个小插件重复，已卸载</span></span><br><span class="line">fof/forum-statistics-widget</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">用户更改名称插件（配合官方自带的的用户昵称插件使用）</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">（安装成功但无法更新插件列表，是网络问题，重新安装一下就可以）</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">20240318更新，该插件与官方的昵称插件冲突，已卸载，安装请慎重</span></span><br><span class="line">fof/username-request</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">第三方登录</span></span><br><span class="line">fof/oauth</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">自定义页面</span></span><br><span class="line">fof/pages</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">标记最佳回复</span></span><br><span class="line">fof/best-answer</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">用户或用户组私密帖子（私聊）功能</span></span><br><span class="line">fof/byobu</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">注册邀请码功能</span></span><br><span class="line">fof/doorman</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">过滤帖子敏感词插件（安装完启用后敏感词列表不能为空）</span></span><br><span class="line">fof/filter</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">更改默认发信邮箱的通知权限</span></span><br><span class="line">fof/default-user-preferences</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除发信邮箱设置，默认邮箱只用于注册新用户（可能与其他需要邮箱的插件冲突）</span></span><br><span class="line">clarkwinkelmann/flarum-ext-no-email-notifications</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">拦截用乱七八糟的邮箱注册</span></span><br><span class="line">clarkwinkelmann/flarum-ext-email-whitelist</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">更多的emoji表情（开启后建议关闭原生的emoji插件）</span></span><br><span class="line">clarkwinkelmann/flarum-ext-emojionearea</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">用户个人主页添加一个个性签名的字段</span></span><br><span class="line">fof/user-bio</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在主页面展示一些小部件（配合下面这四个对应的小组件食用）</span></span><br><span class="line">afrux/forum-widgets-core</span><br><span class="line">afrux/news-widget</span><br><span class="line">afrux/top-posters-widget</span><br><span class="line">afrux/online-users-widget</span><br><span class="line">afrux/forum-stats-widget（这个组件和官方的forum-statistics-widget冲突，建议关闭其中一个）</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">给用户个人主页添加社交媒体信息配置</span></span><br><span class="line">fof/socialprofile</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加一个返回顶部按钮（二选一）</span></span><br><span class="line">becod/flarum-backtotop</span><br><span class="line">datlechin/flarum-scroll-buttons（推荐）</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">用户列表</span></span><br><span class="line">fof/user-directory</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">帖子浏览量</span></span><br><span class="line">flarumite/simple-discussion-views</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">展示热门帖子（配合afrux/forum-widgets-core食用）</span></span><br><span class="line">justoverclock/hot-discussions</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加关注用户功能</span></span><br><span class="line">ianm/follow-users</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">更改自定义翻译</span></span><br><span class="line">fof/linguist</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将某个帖子设置为头版头条，类似于精华帖</span></span><br><span class="line">fof/frontpage</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">生成sitemap插件</span></span><br><span class="line">fof/sitemap</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">SEO插件</span></span><br><span class="line">v17development/flarum-seo</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">用户协议和隐私政策</span></span><br><span class="line">fof/terms</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">长文目录功能（有小bug，慎用）</span></span><br><span class="line">tohsakarat/table-of-content</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">发帖/文草稿箱/定时发布</span></span><br><span class="line">fof/drafts</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">关注标签插件：</span></span><br><span class="line">fof/follow-tags</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">图片灯箱</span></span><br><span class="line">darkle/fancybox</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">用户资料图片允许裁剪</span></span><br><span class="line">fof/profile-image-crop</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">个人资料背景</span></span><br><span class="line">sycho/flarum-profile-cover</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">用户徽章</span></span><br><span class="line">v17development/flarum-user-badges</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">用户资产（和签到插件依赖）</span></span><br><span class="line">antoinefr/flarum-ext-money</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">签到</span></span><br><span class="line">ziiven/flarum-daily-check-in</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">移动端底部导航</span></span><br><span class="line">acpl/mobile-tab</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">代码风格</span></span><br><span class="line">ffans/clipboardjs</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">屏蔽黑名单IP地址</span></span><br><span class="line">fof/ban-ips</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">用户投票</span></span><br><span class="line">fof/polls</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">个人主页留言板</span></span><br><span class="line">fof/moderator-notes</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">博客板块功能</span></span><br><span class="line">v17development/flarum-blog</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加PWA功能</span></span><br><span class="line">askvortsov/flarum-pwa</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">合并主题</span></span><br><span class="line">fof/merge-discussions</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">展示帖子已经阅读了百分之多少</span></span><br><span class="line">justoverclock/thread-read-time</span><br></pre></td></tr></table></figure><h2 id="配置文件默认参数"><a href="#配置文件默认参数" class="headerlink" title="配置文件默认参数"></a>配置文件默认参数</h2><table><thead><tr><th><strong>UID</strong></th><th>Flarum user id</th><th><em>optional</em></th><th>991</th></tr></thead><tbody><tr><td><strong>GID</strong></td><td>Flarum group id</td><td><em>optional</em></td><td>991</td></tr><tr><td><strong>DEBUG</strong></td><td>Flarum debug mode</td><td><em>optional</em></td><td>false</td></tr><tr><td><strong>FORUM_URL</strong></td><td>Forum URL</td><td><strong>required</strong></td><td>none</td></tr><tr><td><strong>DB_HOST</strong></td><td>MariaDB instance ip&#x2F;hostname</td><td><em>optional</em></td><td>mariadb</td></tr><tr><td><strong>DB_USER</strong></td><td>MariaDB database username</td><td><em>optional</em></td><td>flarum</td></tr><tr><td><strong>DB_NAME</strong></td><td>MariaDB database name</td><td><em>optional</em></td><td>flarum</td></tr><tr><td><strong>DB_PASS</strong></td><td>MariaDB database password</td><td><strong>required</strong></td><td>none</td></tr><tr><td><strong>DB_PREF</strong></td><td>Flarum tables prefix</td><td><em>optional</em></td><td>none</td></tr><tr><td><strong>DB_PORT</strong></td><td>MariaDB database port</td><td><em>optional</em></td><td>3306</td></tr><tr><td><strong>FLARUM_PORT</strong></td><td>Port to run Flarum on inside the container</td><td><em>optional</em></td><td>8888</td></tr><tr><td><strong>UPLOAD_MAX_SIZE</strong></td><td>The maximum size of an uploaded file</td><td><em>optional</em></td><td>50M</td></tr><tr><td><strong>PHP_MEMORY_LIMIT</strong></td><td>PHP memory limit</td><td><em>optional</em></td><td>128M</td></tr><tr><td><strong>OPCACHE_MEMORY_LIMIT</strong></td><td>OPcache memory size in megabytes</td><td><em>optional</em></td><td>128</td></tr><tr><td><strong>LOG_TO_STDOUT</strong></td><td>Enable nginx and php error logs to stdout</td><td><em>optional</em></td><td>false</td></tr><tr><td><strong>GITHUB_TOKEN_AUTH</strong></td><td>Github token to download private extensions</td><td><em>optional</em></td><td>false</td></tr><tr><td><strong>PHP_EXTENSIONS</strong></td><td>Install additional php extensions</td><td><em>optional</em></td><td>none</td></tr></tbody></table><h2 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h2><h3 id="插件状态数据丢失"><a href="#插件状态数据丢失" class="headerlink" title="插件状态数据丢失"></a>插件状态数据丢失</h3><p>目前mondediefr的这个镜像，存在一个问题，就是容器重载之后插件启用状态的丢失</p><p>在GitHub里有人提出了这个问题，且给出了解决方案：<a href="https://github.com/mondediefr/docker-flarum/issues/81">https://github.com/mondediefr/docker-flarum/issues/81</a></p><p>如果你已经运行了，并且配置了一些东西，先使用 <code>docker cp</code> 命令，将下面两个文件和一个文件夹所有的内容拷贝到宿主机：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/flarum/app/vendor</span><br><span class="line">/flarum/app/composer.json</span><br><span class="line">/flarum/app/composer.lock</span><br></pre></td></tr></table></figure><p>然后在yml配置文件中添加下这三个路径：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> volumes:</span><br><span class="line">       - /mnt/docker/flarum/assets:/flarum/app/public/assets</span><br><span class="line">       - /mnt/docker/flarum/extensions:/flarum/app/extensions</span><br><span class="line">       - /mnt/docker/flarum/storage/logs:/flarum/app/storage/logs</span><br><span class="line">       - /mnt/docker/flarum/nginx:/etc/nginx/flarum</span><br><span class="line">+      - /mnt/docker/flarum/vendor:/flarum/app/vendor</span><br><span class="line">+      - /mnt/docker/flarum/composer.json:/flarum/app/composer.json</span><br><span class="line">+      - /mnt/docker/flarum/composer.lock:/flarum/app/composer.lock</span><br></pre></td></tr></table></figure><p>重启容器，就可以解决这个bug了</p><p>如果你没有运行，站点还没有配置，建议直接加上这三个路径，一劳永逸 <strong>（这个我没试过可不可以，如果直接配置这三个目录后发现容器启动不起来，那么可以先不加，启动之后复制出来再添加）</strong></p><h3 id="用户无法注册"><a href="#用户无法注册" class="headerlink" title="用户无法注册"></a>用户无法注册</h3><p>用户注册时候显示注册失败，但是后台已经注册好了用户的数据：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202403132031443.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202403132036706.png"></p><p>该报错是因为后台管理-邮箱界面没有配置邮箱服务导致的</p><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><p>在后台管理-用户页面，点击用户名进入用户主页，点击编辑，删除：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202403132055904.png"></p><h3 id="生产环境和测试环境分离"><a href="#生产环境和测试环境分离" class="headerlink" title="生产环境和测试环境分离"></a>生产环境和测试环境分离</h3><p>更改yml配置文件中的端口以及容器名称</p><p>更改envfile中的数据库host为当前主机的IP</p><p>防火墙放行更改后的端口即可同时运行两个站点（记得备份）</p><h2 id="现已放弃docker部署，改为主机部署"><a href="#现已放弃docker部署，改为主机部署" class="headerlink" title="现已放弃docker部署，改为主机部署"></a>现已放弃docker部署，改为主机部署</h2><p>下面将是在主机部署遇到的一些问题</p><h3 id="主页PHP警告"><a href="#主页PHP警告" class="headerlink" title="主页PHP警告"></a>主页PHP警告</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">afrux/forum-widgets-core</span><br><span class="line">afrux/news-widget</span><br><span class="line">afrux/top-posters-widget</span><br><span class="line">afrux/online-users-widget</span><br><span class="line">afrux/forum-stats-widget</span><br></pre></td></tr></table></figure><p>上面这几个插件安装之后访问主页会有php的警告</p><p>在站点php设置里，把警告提示输出关闭即可：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202403311951908.png"></p><h3 id="返回顶部-底部按钮"><a href="#返回顶部-底部按钮" class="headerlink" title="返回顶部&#x2F;底部按钮"></a>返回顶部&#x2F;底部按钮</h3><p>采用 <code>datlechin/flarum-scroll-buttons</code> 插件，CSS样式优化：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* flarum-scroll-buttons返回顶部/底部按钮样式优化 */</span> </span><br><span class="line"><span class="selector-class">.ScrollButtons-button</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: @primary-color <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span> <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="优化搜索高亮"><a href="#优化搜索高亮" class="headerlink" title="优化搜索高亮"></a>优化搜索高亮</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 搜索结果关键字高亮 */</span></span><br><span class="line"><span class="selector-class">.DiscussionListItem-main</span> <span class="selector-tag">mark</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#ffff80</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Flarum </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++学习笔记之四</title>
      <link href="/posts/abd1564d/"/>
      <url>/posts/abd1564d/</url>
      
        <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组是可以存储一个固定大小的相同类型元素的顺序集合，声明数组的格式为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type arrayName [ arraySize ];</span><br></pre></td></tr></table></figure><blockquote><p> 这是一维数组</p></blockquote><p>arraySize必须是一个大于零的整数常量，type可以是任意有效的C++数据类型，举例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> balance[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><blockquote><p>类型为double的包含10个元素的数组balance，现在balance是一个可用的数组，可以容纳10个类型为 double 的数字</p></blockquote><h3 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h3><p>例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">balance[<span class="number">4</span>] = <span class="number">50.0</span>;</span><br><span class="line"><span class="type">double</span> balance[<span class="number">5</span>] = &#123;<span class="number">1000.0</span>, <span class="number">2.0</span>, <span class="number">3.4</span>, <span class="number">7.0</span>, <span class="number">50.0</span>&#125;;</span><br><span class="line"><span class="type">double</span> balance[] = &#123;<span class="number">1000.0</span>, <span class="number">2.0</span>, <span class="number">3.4</span>, <span class="number">7.0</span>, <span class="number">50.0</span>&#125;;</span><br></pre></td></tr></table></figure><p>如上述例子所示，可以逐个对数组里的元素赋值，也可以直接创建并赋值，这里需要注意的是，数组每个元素的索引是从 <code>[0]</code> 开始的，同时给数组赋值时，赋值的元素个数不能超过创建数组的长度，如果创建数组时留空，那么这个数组的长度就是所赋值的元素个数</p><h3 id="访问数组元素"><a href="#访问数组元素" class="headerlink" title="访问数组元素"></a>访问数组元素</h3><p>例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// n是一个包含10个整数的数组</span></span><br><span class="line">    <span class="type">int</span> n[ <span class="number">10</span> ]; </span><br><span class="line">    <span class="comment">// 初始化数组元素          </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 设置元素i为i+100</span></span><br><span class="line">        n[ i ] = i + <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Element&quot;</span> &lt;&lt; std::<span class="built_in">setw</span>(<span class="number">13</span>) &lt;&lt; <span class="string">&quot;Value&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="comment">// 输出数组中每个元素的值                     </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">        std::cout &lt;&lt; std::<span class="built_in">setw</span>(<span class="number">7</span>)&lt;&lt; j &lt;&lt; std::<span class="built_in">setw</span>(<span class="number">13</span>) &lt;&lt; n[j] &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>setw()</code> 函数只是用来格式化输出</p></blockquote><p>输出结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202402051910333.png"></p><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><p>常见的就是二维数组：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type arrayName [ x ][ y ];</span><br></pre></td></tr></table></figure><p>说白了，二维数组就类似个Excel表格，x和y表示第几行第几列的某个元素，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">3</span>][<span class="number">4</span>] = &#123;</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;,</span><br><span class="line">    &#123;<span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 或者：</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">3</span>][<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>&#125;;</span><br></pre></td></tr></table></figure><p>访问二维数组：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 一个5行2列的数组</span></span><br><span class="line">    <span class="type">int</span> a[<span class="number">5</span>][<span class="number">2</span>] = &#123;</span><br><span class="line">        &#123;<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">2</span>&#125;,</span><br><span class="line">        &#123;<span class="number">2</span>,<span class="number">4</span>&#125;,</span><br><span class="line">        &#123;<span class="number">3</span>,<span class="number">6</span>&#125;,</span><br><span class="line">        &#123;<span class="number">4</span>,<span class="number">8</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 输出数组中每个元素的值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;a[&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;][&quot;</span> &lt;&lt; j &lt;&lt; <span class="string">&quot;]: &quot;</span>;</span><br><span class="line">        std::cout &lt;&lt; a[i][j]&lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202402051912273.png"></p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>在C语言中，字符串实际上是使用null字符 <code>\0</code> 终止的一维字符数组，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> site[<span class="number">7</span>] = &#123;<span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line"><span class="comment">// 或者：</span></span><br><span class="line"><span class="type">char</span> site[] = <span class="string">&quot;Hello!&quot;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>C++编译器会在初始化字符串数组时，自动把 <code>\0</code> 放在字符串的末尾</p></blockquote><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> site[<span class="number">7</span>] = &#123;<span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line">    std::cout &lt;&lt; site &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202402051914532.png"></p><p>下面这些函数可以用来操作以null结尾的数组字符串：</p><ul><li><code>strcpy(s1, s2);</code> 复制字符串s2到字符串s1</li><li><code>strcat(s1, s2);</code> 连接字符串s2到字符串s1的末尾，连接字符串也可以用 <code>+</code> 号</li><li><code>strlen(s1);</code> 返回字符串s1的长度</li><li><code>strcmp(s1, s2);</code> 如果s1和s2是相同的，则返回0；如果s1&lt;s2则返回值小于0；如果s1&gt;s2则返回值大于0</li><li><code>strchr(s1, ch);</code> 返回一个指针，指向字符串s1中字符ch的第一次出现的位置</li><li><code>strstr(s1, s2);</code> 返回一个指针，指向字符串s1中字符串s2的第一次出现的位置</li></ul><p>在C++中，引入了 <code>string</code> 这个类，可以直接定义字符串，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">// 引入string类</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::string str1 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">    std::string str2 = <span class="string">&quot;World&quot;</span>;</span><br><span class="line">    std::string str3;</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="comment">// 复制str1到str3</span></span><br><span class="line">    str3 = str1;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;str3 : &quot;</span> &lt;&lt; str3 &lt;&lt; std::endl;</span><br><span class="line">    <span class="comment">// 连接str1和str2</span></span><br><span class="line">    str3 = str1 + str2;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;str1 + str2 : &quot;</span> &lt;&lt; str3 &lt;&lt; std::endl;</span><br><span class="line">    <span class="comment">// 连接后str3的总长度</span></span><br><span class="line">    len = str3.<span class="built_in">size</span>();</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;str3.size() :  &quot;</span> &lt;&lt; len &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202402051915161.png"></p><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>每一个变量都有一个内存位置，每一个内存位置都定义了可使用 <code>&amp;</code> 运算符访问的地址，它表示了在内存中的一个地址</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span>  var1;</span><br><span class="line">    <span class="type">char</span> var2[<span class="number">10</span>];</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;var1 变量的地址： &quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; &amp;var1 &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;var2 变量的地址： &quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; &amp;var2 &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202402051918683.png"></p><p>指针是一个变量，值为另一个变量的地址，即内存位置的直接地址，指针变量声明：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type *var_name;</span><br></pre></td></tr></table></figure><blockquote><p>type是指针的基类型（数据类型），var_name是指针变量的名称</p></blockquote><p>所有指针的<strong>值的实际数据类型</strong>，不管是整型、浮点型、字符型，还是其他的数据类型，都是一样的，都是一个代表内存地址的长的十六进制数，不同数据类型的指针之间唯一的不同是，指针所指向的变量或常量的数据类型不同</p><p>指针的作用：指针变量传递的时候只传递该变量的内存地址，需要调用该变量的时候直接通过内存地址来访问到实际的内容，减少变量内容过大的时候传递耗时</p><blockquote><p>此为个人理解</p></blockquote><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> var = <span class="number">20</span>;   <span class="comment">// 实际变量的声明</span></span><br><span class="line">    <span class="type">int</span> *ip;        <span class="comment">// 指针变量的声明</span></span><br><span class="line">    </span><br><span class="line">    ip = &amp;var;       <span class="comment">// 在指针变量中存储var的地址</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出实际变量的值</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Value of var variable: &quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; var &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 输出在指针变量中存储的地址</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Address stored in ip variable: &quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; ip &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 访问指针中地址的值</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Value of *ip variable: &quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; *ip &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202402051919704.png"></p><h3 id="数组指针"><a href="#数组指针" class="headerlink" title="数组指针"></a>数组指针</h3><p>在数组的定义中，一个数组的名称就是指向该数组中第一个元素的一个<strong>常量指针</strong>，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个数组</span></span><br><span class="line"><span class="type">double</span> myArray[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="comment">// 创建一个指针p</span></span><br><span class="line"><span class="type">double</span> *p;</span><br><span class="line"><span class="comment">// 把数组中第一个元素1的内存地址赋值给p</span></span><br><span class="line">p = myArray;</span><br></pre></td></tr></table></figure><p>那么此时，直接使用 <code>*p</code> 就可以访问到 <code>myArray[0]</code> 的值，也就是1</p><p>同样的道理，使用 <code>*(myArray +2)</code> 就可以访问到  <code>myArray[2]</code> 的值，也就是3，示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 带有5个元素的双精度浮点型数组</span></span><br><span class="line">    <span class="type">double</span> myArray[<span class="number">5</span>] = &#123;<span class="number">1000.0</span>, <span class="number">2.0</span>, <span class="number">3.4</span>, <span class="number">17.0</span>, <span class="number">50.0</span>&#125;;</span><br><span class="line">    <span class="type">double</span> *p;</span><br><span class="line">    </span><br><span class="line">    p = myArray;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 输出数组中每个元素的值</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;使用指针的数组值 &quot;</span> &lt;&lt; std::endl; </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;*(p + &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;) : &quot;</span>;</span><br><span class="line">        std::cout &lt;&lt; *(p + i) &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;使用myArray作为地址的数组值 &quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;*(myArray + &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;) : &quot;</span>;</span><br><span class="line">        std::cout &lt;&lt; *(myArray + i) &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>p是一个指向double型的指针，也就是说它可以存储一个double类型的变量</p></blockquote><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202402051921363.png"></p><h3 id="传递数组给函数"><a href="#传递数组给函数" class="headerlink" title="传递数组给函数"></a>传递数组给函数</h3><p>C++中可以通过指定不带索引的数组名来传递一个指向数组的指针</p><p>当传递数组给一个函数，数组类型自动转换为指针类型，因而传的实际是数组的内存地址</p><p>当然，指针只是其中一种方式，还可以如下所示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">myFunction</span><span class="params">(<span class="type">int</span> *param)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// param[0]的值就是1</span></span><br><span class="line">    <span class="comment">// param[1]的值就是2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> myArray[<span class="number">2</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line"><span class="built_in">myFunction</span>(myArray);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myFunction</span><span class="params">(<span class="type">int</span> param[<span class="number">10</span>])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myFunction</span><span class="params">(<span class="type">int</span> param[])</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">getAverage</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> size)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 带有 5 个元素的整型数组</span></span><br><span class="line">    <span class="type">int</span> balance[<span class="number">5</span>] = &#123;<span class="number">1000</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">17</span>, <span class="number">50</span>&#125;;</span><br><span class="line">    <span class="type">double</span> avg;</span><br><span class="line">    <span class="comment">// 传递一个指向数组的指针作为参数</span></span><br><span class="line">    avg = <span class="built_in">getAverage</span>(balance, <span class="number">5</span>);</span><br><span class="line">    <span class="comment">// 输出返回值</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;平均值是：&quot;</span> &lt;&lt; avg &lt;&lt; std::endl; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">getAverage</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i, sum = <span class="number">0</span>;       </span><br><span class="line">    <span class="type">double</span> avg;          </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">    sum += arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    avg = <span class="built_in">double</span>(sum) / size;<span class="comment">// 将sum从int转换为double</span></span><br><span class="line">    <span class="keyword">return</span> avg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里的 <code>++i</code> 表示先自增，后引用自增后的值</p></blockquote><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202402051923922.png"></p><h3 id="从函数返回数组"><a href="#从函数返回数组" class="headerlink" title="从函数返回数组"></a>从函数返回数组</h3><p>C++不允许返回一个完整的数组作为函数的参数，但是可以通过指定不带索引的数组名来返回一个指向数组的指针</p><p>如果要从函数返回一个一维数组，则必须声明一个返回指针的函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> *<span class="title">myFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C++中不能简单地返回指向函数内部的局部数组的指针，因为当函数结束时，局部数组将被销毁，指向它的指针将变得无效，除非定义局部变量为 <code>static</code> 变量，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> *<span class="title">myFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> myArray[<span class="number">3</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    <span class="keyword">return</span> myArray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="comment">// 要生成和返回随机数的函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> *<span class="title">getRandom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span>  r[<span class="number">10</span>];</span><br><span class="line">    <span class="comment">// 设置种子</span></span><br><span class="line">    <span class="built_in">srand</span>((<span class="type">unsigned</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        r[i] = <span class="built_in">rand</span>();</span><br><span class="line">        std::cout &lt;&lt; r[i] &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回r这个数组</span></span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 要调用上面定义函数的主函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 一个指向整数的指针</span></span><br><span class="line">    <span class="type">int</span> *p;</span><br><span class="line">    <span class="comment">// 使用指针访问getRandom()函数返回的数组</span></span><br><span class="line">    p = <span class="built_in">getRandom</span>();</span><br><span class="line">    <span class="keyword">for</span> ( <span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ ) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;*(p + &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;) : &quot;</span>;</span><br><span class="line">        std::cout &lt;&lt; *(p + i) &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202402051928341.png"></p><h3 id="动态分配数组"><a href="#动态分配数组" class="headerlink" title="动态分配数组"></a>动态分配数组</h3><p>使用动态分配数组需要在函数内部使用 <code>new</code> 来分配一个数组，并在函数结束时使用 <code>delete</code> 释放该数组，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> *<span class="title">myFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> *myArray = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">3</span>];</span><br><span class="line">    myArray[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    myArray[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">    myArray[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">return</span> myArray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> *result = <span class="built_in">myFunction</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这里是使用result的语句块</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">delete</span>[] result;<span class="comment">// 使用完毕之后释放该数组</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">// 声明一个创建数组并返回数组的函数，数组参数来自参数size</span></span><br><span class="line"><span class="function"><span class="type">int</span> *<span class="title">createArray</span><span class="params">(<span class="type">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 新建一个动态数组指针arr</span></span><br><span class="line">    <span class="type">int</span> *arr = <span class="keyword">new</span> <span class="type">int</span>[size];</span><br><span class="line">    <span class="comment">// 为数组arr中的元素赋值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        arr[i] = i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回创建好且赋值好的数组</span></span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 调用创建数组的函数，将函数返回的数组赋值给myArray</span></span><br><span class="line">    <span class="type">int</span> *myArray = <span class="built_in">createArray</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="comment">// 访问myArray数组中的元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        std::cout &lt;&lt; myArray[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">    <span class="comment">// 释放内存</span></span><br><span class="line">    <span class="keyword">delete</span>[] myArray;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202402051931587.png"></p><h3 id="空指针"><a href="#空指针" class="headerlink" title="空指针"></a>空指针</h3><p>在指针变量声明的时候，如果没有确切的地址可以赋值，为其赋一个 <code>NULL</code> 值是一个良好的编程习惯，这种指针就称为为空指针，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> *ptr = <span class="literal">NULL</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;ptr 的值是 &quot;</span> &lt;&lt; ptr;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202402051932908.png"></p><p>在大多数的操作系统上，程序不允许访问地址为0的内存，因为该内存是操作系统保留的</p><p>内存地址0有特别重要的意义，它表明该指针不指向一个可访问的内存位置</p><p>但按照惯例，如果指针包含空值（零值），则假定它不指向任何东西</p><p>如需检查一个空指针，可以使用if语句，如下所示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> *ptr = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (ptr) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;ptr 的值是 &quot;</span> &lt;&lt; ptr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!ptr) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;ptr的值为空！&quot;</span> &lt;&lt; ptr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202402051933947.png"></p><h3 id="指针递增递减"><a href="#指针递增递减" class="headerlink" title="指针递增递减"></a>指针递增递减</h3><p>如果 <code>ptr</code> 指向一个<strong>内存地址</strong>为1000的字符，执行 <code>ptr++</code> 指针 <code>ptr</code> 的值会增加，指向下一个字符元素的地址，由于 <code>ptr</code> 是一个字符指针，每个字符占据1个字节，因此 <code>ptr++</code> 会将 <code>ptr</code> 的值增加1，执行后 <code>ptr</code> 指向<strong>内存地址</strong>1001</p><p>那么如果当一个指针p加上一个整数n时，结果是指针p向前移动n个元素的大小。例如，如果p是一个int类型的指针，每个int占4个字节，那么 <code>p+1</code> 将指向p所指向的下一个int元素，内存地址也会增加移动了4</p><p>定义有点抽象，举个例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">// 定义一个常量</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> var[MAX] = &#123;<span class="number">10</span>, <span class="number">100</span>, <span class="number">200</span>&#125;;</span><br><span class="line">    <span class="type">int</span> *ptr;</span><br><span class="line">    <span class="comment">// 指针中的数组地址</span></span><br><span class="line">    ptr = var;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAX; i++) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Address of var[&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;] = &quot;</span>;</span><br><span class="line">        std::cout &lt;&lt; ptr &lt;&lt; std::endl;</span><br><span class="line"> </span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Value of var[&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;] = &quot;</span>;</span><br><span class="line">        std::cout &lt;&lt; *ptr &lt;&lt; std::endl;</span><br><span class="line">        <span class="comment">// 移动到下一个元素的位置</span></span><br><span class="line">        ptr++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202402051934745.png"></p><p>递减也是同样的道理：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX = <span class="number">3</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> var[MAX] = &#123;<span class="number">10</span>, <span class="number">100</span>, <span class="number">200</span>&#125;;</span><br><span class="line">    <span class="type">int</span> *ptr;</span><br><span class="line">    <span class="comment">// 指针中最后一个元素的地址</span></span><br><span class="line">    ptr = &amp;var[MAX<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = MAX; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Address of var[&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;] = &quot;</span>;</span><br><span class="line">        std::cout &lt;&lt; ptr &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Value of var[&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;] = &quot;</span>;</span><br><span class="line">        std::cout &lt;&lt; *ptr &lt;&lt; std::endl;</span><br><span class="line">        <span class="comment">// 从最后一个元素移动到前一个位置</span></span><br><span class="line">        ptr--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202402051936476.png"></p><h3 id="指针的比较"><a href="#指针的比较" class="headerlink" title="指针的比较"></a>指针的比较</h3><p>修改上述递增的例子，将判断条件改为变量指针所指向的<strong>地址</strong>小于或等于数组的最后一个元素的<strong>地址</strong> <code>&amp;var[MAX - 1]</code> ：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX = <span class="number">3</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> var[MAX] = &#123;<span class="number">10</span>, <span class="number">100</span>, <span class="number">200</span>&#125;;</span><br><span class="line">    <span class="type">int</span> *ptr;</span><br><span class="line">    <span class="comment">// 指针中第一个元素的地址</span></span><br><span class="line">    ptr = var;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ( ptr &lt;= &amp;var[MAX - <span class="number">1</span>] ) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Address of var[&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;] = &quot;</span>;</span><br><span class="line">        std::cout &lt;&lt; ptr &lt;&lt; std::endl;</span><br><span class="line"> </span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Value of var[&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;] = &quot;</span>;</span><br><span class="line">        std::cout &lt;&lt; *ptr &lt;&lt; std::endl;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 指向上一个位置</span></span><br><span class="line">        ptr++;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202402051937940.png"></p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>引用变量是一个别名，也就是说，它是某个已存在变量的另一个名字，一旦把引用初始化为某个变量，就可以使用该引用名称或变量名称来指向变量</p><p>引用和指针的区别：</p><ul><li>不存在空引用，引用必须连接到一块合法的内存</li><li>一旦引用被初始化为一个对象，就不能被指向到另一个对象，而指针可以在任何时候指向到另一个对象</li><li>引用必须在创建时被初始化，指针可以在任何时间被初始化</li></ul><p>引用的声明：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">17</span>;</span><br><span class="line"><span class="type">int</span> &amp;r = i;<span class="comment">// 这样就创建了一个引用</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 声明简单的变量</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">double</span> d;</span><br><span class="line">    <span class="comment">// 声明引用变量</span></span><br><span class="line">    <span class="type">int</span>&amp; r = i;</span><br><span class="line">    <span class="type">double</span>&amp; s = d;</span><br><span class="line">    </span><br><span class="line">    i = <span class="number">5</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Value of i : &quot;</span> &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Value of i reference : &quot;</span> &lt;&lt; r  &lt;&lt; std::endl;</span><br><span class="line"> </span><br><span class="line">    d = <span class="number">11.7</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Value of d : &quot;</span> &lt;&lt; d &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Value of d reference : &quot;</span> &lt;&lt; s  &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202402051938720.png"></p><h3 id="把引用作为参数"><a href="#把引用作为参数" class="headerlink" title="把引用作为参数"></a>把引用作为参数</h3><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> &amp;x, <span class="type">int</span> &amp;y)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 局部变量声明</span></span><br><span class="line">    <span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">200</span>;</span><br><span class="line">    </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;交换前，a 的值：&quot;</span> &lt;&lt; a &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;交换前，b 的值：&quot;</span> &lt;&lt; b &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调用函数来交换值</span></span><br><span class="line">    <span class="built_in">swap</span>(a, b);</span><br><span class="line">    </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;交换后，a 的值：&quot;</span> &lt;&lt; a &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;交换后，b 的值：&quot;</span> &lt;&lt; b &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数定义</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> &amp;x, <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    temp = x; <span class="comment">// 保存地址x的值</span></span><br><span class="line">    x = y;    <span class="comment">// 把y赋值给x</span></span><br><span class="line">    y = temp; <span class="comment">// 把x赋值给y</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> <code>int&amp; x</code> &#x3D;&#x3D; <code>int &amp;x</code> ，指针同理</p></blockquote><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202402051955424.png"></p><h3 id="把引用作为返回值"><a href="#把引用作为返回值" class="headerlink" title="把引用作为返回值"></a>把引用作为返回值</h3><p>通过使用引用来替代指针，会使代码更容易阅读和维护</p><p>C++函数可以返回一个引用，方式与返回一个指针类似</p><p>当函数返回一个引用时，则返回一个指向返回值的隐式指针，这样，函数就可以放在赋值语句的左边</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">double</span> vals[] = &#123;<span class="number">10.1</span>, <span class="number">12.6</span>, <span class="number">33.1</span>, <span class="number">24.1</span>, <span class="number">50.0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> &amp;<span class="title">setValues</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="type">double</span> &amp;ref = vals[i];</span><br><span class="line">    <span class="keyword">return</span> ref;</span><br><span class="line">    <span class="comment">// 返回第i个元素的引用，ref是一个引用变量，ref引用vals[i]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;改变前的值&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;vals[&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;] = &quot;</span>;</span><br><span class="line">        std::cout &lt;&lt; vals[i] &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">setValues</span>(<span class="number">1</span>) = <span class="number">20.23</span>; <span class="comment">// 改变第2个元素</span></span><br><span class="line">    <span class="built_in">setValues</span>(<span class="number">3</span>) = <span class="number">70.8</span>;  <span class="comment">// 改变第4个元素</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;改变后的值&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;vals[&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;] = &quot;</span>;</span><br><span class="line">        std::cout &lt;&lt; vals[i] &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202402052007862.png"></p><p>当返回一个引用时，要注意被引用的对象不能超出作用域</p><p>所以返回一个对局部变量的引用是不合法的，但是，可以返回一个对静态变量的引用：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> &amp;<span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> q;</span><br><span class="line">    <span class="comment">//! return q; // 在编译时发生错误</span></span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> x;</span><br><span class="line">    <span class="keyword">return</span> x;     <span class="comment">// 安全，x在函数作用域外依然是有效的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单元模块开发入门实例Heater</title>
      <link href="/posts/5e4b42e2/"/>
      <url>/posts/5e4b42e2/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401292022446.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>那么我们在单元模块开发入门篇中草草的就结束了计算实现部分，当然是因为我技术不行，还没吃透，而且实际上的单元模块双击之后的编辑界面也没有实现</p><p>本篇就是单元模块开发入门篇的一个番外篇，将直接从一个换热器模块实例来入手</p><blockquote><p>建议不要直接从本篇开始，循序渐进从物性包开发再到单元模块开发入门，再到本篇</p><p>这样有一个简单的理解过程，并且本篇的代码是基于单元模块开发篇的，并<strong>不会</strong>直接<strong>从零开始</strong>写</p><p>不用怕，本文所有的代码直接开源，文章最后我会放上项目源码地址！</p></blockquote><h2 id="获取物流对象部分"><a href="#获取物流对象部分" class="headerlink" title="获取物流对象部分"></a>获取物流对象部分</h2><p>在单元模块开发入门篇3的基础上</p><p>首先来修改一下 <code>BlockPort.h</code> 中我们获取物流对象的方式：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401292032632.png"></p><p>从直接使用热力学接口更改为智能指针</p><p>更改端口名字和描述的转换方式：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401302026858.png"></p><p>这里更改为了wstring类型，继续更改下方获取名字和描述的方法：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401302027711.png"></p><p>其余部分不变</p><h2 id="调用物流对象部分"><a href="#调用物流对象部分" class="headerlink" title="调用物流对象部分"></a>调用物流对象部分</h2><p>回到 <code>MyBlockPortsArray.h</code> 文件中</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401302024741.png"></p><p>完善进出口流股的调用，其余部分不变</p><blockquote><p>注意调用是使用指针返回函数</p></blockquote><h2 id="函数封装"><a href="#函数封装" class="headerlink" title="函数封装"></a>函数封装</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401152104645.png"></p><p>在物性包开发入门篇中我们讲过，在本篇的获取物流对象部分也可以看到，获取物流对象使用的是 <code>ICapeThermoMaterial</code> 接口，那么在计算调用的时候，想要获取到物流对象中的参数，就使用的是该接口的 <code>GetOverallProp()</code> 函数，那么在标准文档中，对该函数的定义是这样的：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401302034783.png"></p><p>三个参数分别是参数名称、参数单位以及值，而且也给出了参数的类型，那么我们获取的话就可以这样写：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">GetOverallProp</span>(<span class="built_in">CBSTR</span>(_T(<span class="string">&quot;temperature&quot;</span>)), <span class="literal">NULL</span>, &amp;myValue.value);<span class="comment">// 获取温度</span></span><br></pre></td></tr></table></figure><p><code>NULL</code> 表示使用模拟软件的默认温度， <code>myValue</code> 是一个临时存放值的变量</p><p>那么我们接下来就写获取各个参数的方法</p><p>首先我们要解决一个CAPE-OPEN遗留的问题，就是在 <code>Variant.h</code> 文件中对于 <code>VARIANT value</code> 的定义是类的私有成员，会导致我们在获取value的时候访问不到值的情况，来到 <code>Variant.h</code> 文件中：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401302044873.png"></p><p>接着就来到 <code>MyBlock.h</code> 文件中，进行参数的获取和计算</p><p>在单元模块开发入门篇3中我们简单的实现过一次所谓的计算：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401282150638.png"></p><p>可以看到是比较复杂的，那么对于每一个参数，每一个流股都要写这么一长串，代码是非常冗余且不规范的</p><p>实际上获取参数的步骤都是统一的，那么我们可以把获取参数的方法封装成一个我们自己的函数，在需要获取参数的时候直接进行调用就行了，这样就会简单和规范很多</p><p>首先是获取入口流股参数的函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取进口流股物流对象中的参数，主要为温度、压力、摩尔流量、摩尔组成</span></span><br><span class="line"><span class="function">BOOL <span class="title">GetOverallTPFlowComposition</span><span class="params">(<span class="type">double</span>&amp; temperature, <span class="type">double</span>&amp; pressure, <span class="type">double</span>&amp; totalMoleFlow, CVariant&amp; moleComposition)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 定义临时变量</span></span><br><span class="line">HRESULT hr;</span><br><span class="line">std::wstring error;</span><br><span class="line">CVariant myValue;</span><br><span class="line"><span class="comment">// 获取温度</span></span><br><span class="line">hr = myPortArray-&gt;<span class="built_in">getInlet</span>()-&gt;<span class="built_in">GetOverallProp</span>(<span class="built_in">CBSTR</span>(_T(<span class="string">&quot;temperature&quot;</span>)), <span class="literal">NULL</span>, &amp;myValue.value);</span><br><span class="line">myValue.<span class="built_in">CheckArray</span>(VT_R8, error);</span><br><span class="line">temperature = myValue.<span class="built_in">GetDoubleAt</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 获取压力</span></span><br><span class="line">hr = myPortArray-&gt;<span class="built_in">getInlet</span>()-&gt;<span class="built_in">GetOverallProp</span>(<span class="built_in">CBSTR</span>(_T(<span class="string">&quot;pressure&quot;</span>)), <span class="literal">NULL</span>, &amp;myValue.value);</span><br><span class="line">myValue.<span class="built_in">CheckArray</span>(VT_R8, error);</span><br><span class="line">pressure = myValue.<span class="built_in">GetDoubleAt</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 获取总摩尔流量</span></span><br><span class="line">hr = myPortArray-&gt;<span class="built_in">getInlet</span>()-&gt;<span class="built_in">GetOverallProp</span>(<span class="built_in">CBSTR</span>(_T(<span class="string">&quot;totalFlow&quot;</span>)), <span class="built_in">CBSTR</span>(_T(<span class="string">&quot;mole&quot;</span>)), &amp;myValue.value);</span><br><span class="line">myValue.<span class="built_in">CheckArray</span>(VT_R8, error);</span><br><span class="line">totalMoleFlow = myValue.<span class="built_in">GetDoubleAt</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 获取组分的摩尔分率</span></span><br><span class="line">VARIANT v;</span><br><span class="line">v.vt = VT_EMPTY;</span><br><span class="line">hr = myPortArray-&gt;<span class="built_in">getInlet</span>()-&gt;<span class="built_in">GetOverallProp</span>(<span class="built_in">CBSTR</span>(_T(<span class="string">&quot;fraction&quot;</span>)), <span class="built_in">CBSTR</span>(_T(<span class="string">&quot;mole&quot;</span>)), &amp;v);</span><br><span class="line">myValue.<span class="built_in">CheckArray</span>(VT_R8, error);</span><br><span class="line">moleComposition.<span class="built_in">Set</span>(v, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么既然有了获取流股参数的函数，同样，我们给出口流股赋值的时候也是一样的，也可以封装成一个函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将计算完毕的参数赋值给流股并执行一次闪蒸</span></span><br><span class="line"><span class="function">BOOL <span class="title">SetOverallTPFlowCompositionAndFlash</span><span class="params">(<span class="type">double</span> temperature, <span class="type">double</span> pressure, <span class="type">double</span> totalMoleFlow, CVariant&amp; moleComposition)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 定义临时变量</span></span><br><span class="line">HRESULT hr;</span><br><span class="line">CVariant myValue;</span><br><span class="line"><span class="comment">// 设置温度</span></span><br><span class="line">myValue.<span class="built_in">MakeArray</span>(<span class="number">1</span>, VT_R8);</span><br><span class="line">myValue.<span class="built_in">SetDoubleAt</span>(<span class="number">0</span>, temperature);</span><br><span class="line">hr = myPortArray-&gt;<span class="built_in">getOutlet</span>()-&gt;<span class="built_in">SetOverallProp</span>(<span class="built_in">CBSTR</span>(<span class="string">L&quot;temperature&quot;</span>), <span class="literal">NULL</span>, myValue);</span><br><span class="line"><span class="comment">// 设置压力</span></span><br><span class="line">myValue.<span class="built_in">MakeArray</span>(<span class="number">1</span>, VT_R8);</span><br><span class="line">myValue.<span class="built_in">SetDoubleAt</span>(<span class="number">0</span>, pressure);</span><br><span class="line">hr = myPortArray-&gt;<span class="built_in">getOutlet</span>()-&gt;<span class="built_in">SetOverallProp</span>(<span class="built_in">CBSTR</span>(<span class="string">L&quot;pressure&quot;</span>), <span class="literal">NULL</span>, myValue);</span><br><span class="line"><span class="comment">// 设置总摩尔流量</span></span><br><span class="line">myValue.<span class="built_in">MakeArray</span>(<span class="number">1</span>, VT_R8);</span><br><span class="line">myValue.<span class="built_in">SetDoubleAt</span>(<span class="number">0</span>, totalMoleFlow);</span><br><span class="line">hr = myPortArray-&gt;<span class="built_in">getOutlet</span>()-&gt;<span class="built_in">SetOverallProp</span>(<span class="built_in">CBSTR</span>(<span class="string">L&quot;totalFlow&quot;</span>), <span class="built_in">CBSTR</span>(<span class="string">L&quot;mole&quot;</span>), myValue);</span><br><span class="line"><span class="comment">// 设置组分摩尔分率</span></span><br><span class="line">hr = myPortArray-&gt;<span class="built_in">getOutlet</span>()-&gt;<span class="built_in">SetOverallProp</span>(<span class="built_in">CBSTR</span>(<span class="string">L&quot;fraction&quot;</span>), <span class="built_in">CBSTR</span>(<span class="string">L&quot;mole&quot;</span>), moleComposition);</span><br><span class="line"><span class="comment">// 执行一次闪蒸，确定出口流股的相态</span></span><br><span class="line"><span class="built_in">CalcEquilibriumByTemperatureAndPressure</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里可以看到有不一样的地方，就是在设置出口流股参数的时候我们进行了一次闪蒸，那么闪蒸的目的是什么呢，就是必须要确定出口流股的相态，这是模拟软件中所规定的</p><p>这个闪蒸的函数如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 闪蒸函数</span></span><br><span class="line"><span class="function">BOOL <span class="title">CalcEquilibriumByTemperatureAndPressure</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 定义临时变量</span></span><br><span class="line">CVariant flashSpec1, flashSpec2;</span><br><span class="line"><span class="function">CBSTR <span class="title">overall</span><span class="params">(<span class="string">L&quot;overall&quot;</span>)</span></span>;</span><br><span class="line"><span class="comment">// 获取温度</span></span><br><span class="line">flashSpec1.<span class="built_in">MakeArray</span>(<span class="number">3</span>, VT_BSTR);</span><br><span class="line">flashSpec1.<span class="built_in">AllocStringAt</span>(<span class="number">0</span>, <span class="string">L&quot;temperature&quot;</span>);</span><br><span class="line">flashSpec1.<span class="built_in">SetStringAt</span>(<span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">flashSpec1.<span class="built_in">SetStringAt</span>(<span class="number">2</span>, overall);</span><br><span class="line"><span class="comment">// 获取压力</span></span><br><span class="line">flashSpec2.<span class="built_in">MakeArray</span>(<span class="number">3</span>, VT_BSTR);</span><br><span class="line">flashSpec2.<span class="built_in">AllocStringAt</span>(<span class="number">0</span>, <span class="string">L&quot;pressure&quot;</span>);</span><br><span class="line">flashSpec2.<span class="built_in">SetStringAt</span>(<span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">flashSpec2.<span class="built_in">SetStringAt</span>(<span class="number">2</span>, overall);</span><br><span class="line"><span class="comment">// 创建一个闪蒸计算的实例</span></span><br><span class="line">CComPtr&lt;ICapeThermoEquilibriumRoutine&gt; capeThermoEquilibriumRoutine;</span><br><span class="line"><span class="comment">// 获取赋值完毕的出口流股信息</span></span><br><span class="line">myPortArray-&gt;<span class="built_in">getOutlet</span>()-&gt;<span class="built_in">QueryInterface</span>(IID_ICapeThermoEquilibriumRoutine, (LPVOID*)&amp;capeThermoEquilibriumRoutine);</span><br><span class="line"><span class="comment">// 执行闪蒸</span></span><br><span class="line">HRESULT hr = capeThermoEquilibriumRoutine-&gt;<span class="built_in">CalcEquilibrium</span>(flashSpec1, flashSpec2, <span class="built_in">CBSTR</span>(_T(<span class="string">&quot;unspecified&quot;</span>)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将这三个函数依次定义在 <code>Calculate()</code> 函数之前即可</p><h2 id="实现计算"><a href="#实现计算" class="headerlink" title="实现计算"></a>实现计算</h2><p>在 <code>Calculate()</code> 函数内，直接调用上述我们封装好的函数：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401302113923.png"></p><p>现在基本上已经实现了一个将进口参数赋值给出口参数的一个什么都没有计算的模块</p><p>但是实际上这个模块bug是很多的，比如在Aspen中运行会报错，在COFE中运行虽然可以得到结果，但是依然会有警告，没有输入参数的窗口等</p><p>没关系，我们慢慢来完善</p><p>我们先简单的直接给定一个参数来试试计算结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401302118143.png"></p><p>也就是说，我们获取了进口的参数之后，让出口在300K，201325Pa下进行闪蒸，这就是一个简单的Heater模块</p><p>编译一下，编译通过，但是COFE测试发现还是有bug</p><p>那么回到 <code>BlockPort.h</code> 文件中：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401302151331.png"></p><p>在 <code>MyBlockPortsArray.h</code> 中：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401302152845.png"></p><p>编译一下，在Aspen中还是无法计算，在COFE中虽然可以计算并且得出结果如下图，但是一旦查看结果，第二次查看结果的时候，结果就直接为空了，说明还是有bug</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401302154058.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401302154459.png"></p><blockquote><p>这个时候点击下方的这些详细结果是有结果的，但是再点击一次就会闪退，还是有bug啊，头好疼</p></blockquote><p>先更新到这里，我去想想办法</p><h2 id="暂时停更"><a href="#暂时停更" class="headerlink" title="暂时停更"></a>暂时停更</h2><p>因为物流对象设置失败这个bug迟迟解决不了，暂时停更一段时间吧，源码地址放在下面了，希望有大佬能解答，联系方式Q：1395404299</p><p>源码地址：<a href="https://github.com/laugh0608/myBlockTest">https://github.com/laugh0608/myBlockTest</a></p><p>现在的主要问题有两个：</p><p>第一就是在获取物流对象的参数时，value已在Variant.h文件中注册私有成员无法访问</p><p>第二就是在端口获取连接对象时，一旦加上 <code>(*connectedObject)-&gt;AddRef();</code> 计数语句就会直接闪退</p><p>很头疼，还是没吃透</p><h3 id="20240203更新"><a href="#20240203更新" class="headerlink" title="20240203更新"></a>20240203更新</h3><p>第一个问题已经解决，在 <code>Variant.h</code> 中定义：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202402031543482.png"></p><p>在 <code>MyBlock.h</code> 中调用：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202402031543491.png"></p><blockquote><p>源码已更新上传</p></blockquote><p>第二个bug，静待有缘人大佬能给我解答，我现在也去看看cape文档，研究研究</p>]]></content>
      
      
      <categories>
          
          <category> 化工流程模拟开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CAPE-OPEN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单元模块开发入门3</title>
      <link href="/posts/2bfc8469/"/>
      <url>/posts/2bfc8469/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281945116.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在单元模块开发入门篇1和2里，我们主要实现了单元模块的注册、端口的创建与流股的连接</p><p>本文着重的讲述一下单元模块计算方法的实现</p><h2 id="获取流股信息"><a href="#获取流股信息" class="headerlink" title="获取流股信息"></a>获取流股信息</h2><p>在前文中我们说过，单元模块获取物流对象的信息实际上是什么，是获取流股的热力学接口，那么我们再看一下热力学的接口图：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401152104645.png"></p><p>在热力学部分的接口中 <code>ICapeThermoMaterial</code> 接口就是主要负责获取和连接物流对象中的各个信息，那么我们也是使用这个接口来调取流股</p><p>实际上单元模块的流股端口是不止一个的，但我们为了学习和方便理解，定义了我们这个单元模块中只有一进一出，那么调取流股就很简单</p><blockquote><p>实际上多个端口的时候就是按照端口的数量去获取，也就是下方代码的 <code>getInlet(1)</code> 、 <code>getInlet(2)</code> 等，出口流股也类似</p></blockquote><p>在 <code>MyBlockPortsArray.h</code> 文件中：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401282145162.png"></p><blockquote><p>下面这个 <code>getOutlet()</code> 函数内应该是port2哈，这里我忘了改了</p></blockquote><p>我们还需要修改 <code>BlockPort.h</code> 文件中获取物流对象的方法：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401282146249.png"></p><p>这里原本是通过 <code>IDispatch</code> 指针来获取的，我们更改为 <code>IID_ICapeThermoMaterial</code> 方法</p><p>紧接着在文件头部实现获取物流对象的函数，同时更改我们物流对象的类型：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401282148552.png"></p><p>这样我们就完成了物流对象的暴露与调用，紧接着来实现计算部分</p><h2 id="计算实现"><a href="#计算实现" class="headerlink" title="计算实现"></a>计算实现</h2><p>返回到 <code>MyBlock.h</code> 文件中，开始写 <code>ICapeUnit</code> 接口的 <code>Calculate</code> 部分：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401282150638.png"></p><blockquote><p>这里看起来很复杂，实际上就是各种类型之间的转换而已</p></blockquote><p>实际上我们这里只是举了一个调用入口流股总流量的例子</p><p>点击运行之后会有一个弹窗显示我们当前入口流股的一个总流量，如图所示：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401282143612.png"></p><p>我们虽然写了获取port2的物理对象，但是实际上并没有返回给出口流股，所以只是实现了一个调用流股流量的一个方法，这算是一个抛砖引玉，后面需要自己去写相对应的一些算法</p><p>需要注意的是：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401291909706.png"></p><p>我们这里使用的获取物流对象的这个方法 <code>ICapeThermoMaterial</code> 是CAPE-OPEN1.1版本的接口，但是部分模拟软件的标准很可能是1.0版本，并不兼容该接口</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>没想到单元模块开发入门篇就这么草草结束了，奈何本人实属技术有限，很多东西我都没有琢磨透，但是希望这只是个灯塔（博主如此自恋的想到），能够引发更多的、技术比我牛逼的、天赋比我好的人去做这件事，希望国产模拟软件能够越来越好，越来越强！</p><p>当然也希望我自己在熟悉之后能继续完善入门篇，那么，拜拜~</p><blockquote><p>源码地址在Heater实例开发篇中</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 化工流程模拟开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CAPE-OPEN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单元模块开发入门2</title>
      <link href="/posts/5cfbb4ff/"/>
      <url>/posts/5cfbb4ff/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401271421205.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>入门篇1中成功的注册了所开发的单元模块，并在COFE软件中成功实现了一个端口的连接，但在aspen软件中无法进行流股连接</p><p>本篇将继续来完善这个单元模块</p><h2 id="完善ICapeUnit接口"><a href="#完善ICapeUnit接口" class="headerlink" title="完善ICapeUnit接口"></a>完善ICapeUnit接口</h2><p>上一篇中我们在 <code>MyBlock.h</code> 文件中写了获取端口数组的函数 <code>get_ports</code> ，现在来继续完善这个接口的其他函数</p><p>按照我们之前在物性包开发入门篇的方法，引入下列两个头文件：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401271731786.png"></p><blockquote><p>在单元模块开发入门第一篇中我们下载的示例文件中就有这两个头文件，然后复制到项目根目录下，右键项目解决方案管理器，添加现有项，添加进来即可</p></blockquote><p>添加头文件：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401271742766.png"></p><p>补充下方函数：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401271743320.png"></p><p>此时编译有错误，是wstring类型语法错误，这里我们物性包开发篇也遇到过，需要修改 <code>Variant.h</code> 文件：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401271745390.png"></p><p>再更改第318行：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401271745260.png"></p><p>现在编译已经没有问题了，但是此时还是有问题的，在aspen无法连接流股，双击没有反应</p><h2 id="双击模块的逻辑"><a href="#双击模块的逻辑" class="headerlink" title="双击模块的逻辑"></a>双击模块的逻辑</h2><p>我们在aspen中新建一个别的软件的CAPE-OPEN模块：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401271808435.png"></p><p>双击这个模块之后可以看到，弹出来了一个弹窗用来输入参数，但是我们的模块丝毫没有反应，是因为我们并没有实现这个功能</p><p>双击模块打开参数输入窗口的逻辑就是我们上文提到过的 <code>ICapeUtilities</code> 接口来实现的</p><p>同样，这个接口也是有对应的文档的，文档文件名是：Utilities_Common_Interface.pdf</p><p>接口解释图如下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401271818811.png"></p><p>添加该接口：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401271823950.png"></p><p>添加完成之后重新编译一下，没什么问题，这个接口导入进来终于是正常的了</p><p>继续在 <code>MyBlock.h</code> 文件中编写该接口的函数：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401271841423.png"></p><p>继续完善 <code>ICapeUtilities</code> 接口的函数：（还是本文件）</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401271953001.png"></p><p>编译一下，没毛病，用COFE测试一下也没问题：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401271959644.png"></p><h2 id="ICapeUtilities接口"><a href="#ICapeUtilities接口" class="headerlink" title="ICapeUtilities接口"></a>ICapeUtilities接口</h2><p>继续来完善 <code>ICapeUtilities</code> 接口的 <code>get_parameters</code> 函数，这个函数的参数和前文中的 <code>MyBlockPortsArray</code> 一样，是个数组，所以还是需要创建一个ATL对象来实现这个数组</p><p>添加ATL对象：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401272016847.png"></p><blockquote><p>报错解决不再赘述，看前文</p></blockquote><p>添加完毕之后编译保存一下，和之前的 <code>MyBlockPortsArray</code> 一样，还需要给它添加 <code>ICapeCollection</code> 接口：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401272023741.png"></p><p>添加完再编译保存一下，没啥毛病</p><p>为了方便理解和学习，我们现在只是给流程模拟软件返回这个数组即可，所以这里只返回一个空数组</p><p>在新建的 <code>MyParameterArray.h</code> 文件中：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401272030170.png"></p><p>回到 <code>MyBlock.h</code> 文件中，首先添加头文件：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401272032969.png"></p><p>创建parameters参数数组：（当前文件）</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401272039158.png"></p><p>实例化：（当前文件）</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401272039513.png"></p><blockquote><p>实际上在这里要强调一下，在当前文件中 <code>ICapeUnit</code> 接口的 <code>myPortArray</code> 数组和刚才写的 <code>ICapeUtilities</code> 接口的 <code>parameterArray</code> 数组都是不能在函数内进行实例化的，必须要在头部的 <code>pbulic:CMyBlock()&#123;&#125;</code> 里进行实例化</p><p>但是我们为了演示其用法临时在函数内进行了实例化，这是不对的，但能临时骗过编译器，后面我们会更改这个错误用法的</p></blockquote><p>这个时候编译是没问题的，同样模拟软件获取到端口1也是没问题，但是我们这里用了取巧的办法骗过了编译器和模拟软件，接下来通过断点调试来找一下正确写法里我们的bug出在哪里了，给大家提供一种找错误的思路</p><h2 id="简单断点调试"><a href="#简单断点调试" class="headerlink" title="简单断点调试"></a>简单断点调试</h2><p>首先呢，我们把代码恢复到一个正常的写法里，我们把 <code>MyBlock.h</code> 文件中 <code>ICapeUnit</code> 接口的 <code>myPortArray</code> 数组和 <code>ICapeUtilities</code> 接口的 <code>parameterArray</code> 数组实例化转移到头部的 <code>pbulic:CMyBlock()&#123;&#125;</code> 里：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281437343.png"></p><p>注释掉函数内的实例化：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281438490.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281438809.png"></p><p>添加断点信息：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281445170.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281445644.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281445322.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281446800.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281446979.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281447330.png"></p><p>现在重新编译，并使用COFE软件进行添加测试，当我们在COFE软件中点击了添加单元模块之后，就会弹出每一个步骤相对应的信息：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281449200.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281449818.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281450380.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281450937.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281450941.png"></p><p>前几个步骤都没有问题，但是当到Get_ports步骤的时候，我们会发现Get_ports弹出了两次，并且在两次之后COFE软件闪退，那么问题就是出现在了Get_ports步骤</p><p>那么我们在Get_ports步骤再添加一个断点信息：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281454885.png"></p><p>重新编译，测试：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281455774.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281455244.png"></p><p>这个时候我们发现，当第一个 <code>Get_ports, Start</code> 出现之后紧接着已经出现了 <code>Get_ports, End</code> ，也就是说第一个端口确实是获取到了，紧接着又出现了  <code>Get_ports, Start</code> 但没有出现 <code>Get_ports, End</code> 软件就闪退了</p><p>也就是说，错误出现在了get_ports这个过程中，对应的也就是我们之前添加的 <code>MyBlockPortsArray</code> 数组对象中出现了问题</p><h2 id="添加端口2"><a href="#添加端口2" class="headerlink" title="添加端口2"></a>添加端口2</h2><p>在上文中，我们在 <code>MyBlockPortsArray.h</code> 文件中只定义了一个端口1，那么在模拟软件获取端口数组的过程中两次返回了同一个端口，但是在模拟软件的定义中，一个单元模块应该至少具有两个端口，也就是至少应该是一进一出</p><p>前文中为了方便理解我们只添加了一个端口1，现在就来完善它，添加第二个端口</p><p>我们定义端口数组是在 <code>MyBlockPortsArray.h</code> 文件中，但是端口的实例是由 <code>BlockPort.h</code> 文件传入的，所以需要在 <code>BlockPort.h</code> 文件中添加另一个端口实例</p><p>创建私有成员端口方向：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281513252.png"></p><p>创建端口的时候，就需要给端口定义一个方向，也就是这个端口是进口还是出口，给定一个方向的参数：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281516144.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281517625.png"></p><p>编译一下，哦吼，报错了，原来是 <code>CapePortDirection myPortDirection</code> 参数不能这么传递，稍稍修改一下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281525395.png"></p><p>接下来自然就要在 <code>MyBlockPortsArray.h</code> 文件中添加端口2：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281531465.png"></p><p>修改端口数：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281531382.png"></p><p>接下来就应该是给端口赋值获取端口了，那么我们如何让 <code>Item</code> 函数知道获取的是哪个接口呢，就需要给端口进行命名</p><p>给端口进行命名就是 <code>ICapeIdentification</code> 这个接口所要干的活儿了</p><p>在官方文档集里对应的是这个文件： <code>Identification_Common_Interface.pdf</code> 文件中该接口的内容如下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281540822.png"></p><p>实际上就是定义了一个对象所具有的名字和描述，现在来添加这个接口：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281546804.png"></p><p>添加完毕之后编译一下，没啥毛病，继续</p><p>接下来在 <code>BlockPort.h</code> 文件中定义上述端口的名字和描述，首先添加头文件支持：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281601594.png"></p><p>创建名字和描述变量：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281554061.png"></p><p>创建设置名字和变量的函数：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281558516.png"></p><p>在 <code>ICapeIdentification</code> 接口中获取值：（还是本文件）</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281613978.png"></p><blockquote><p>注：这里需要添加下列两个头文件以提供 <code>CA2W</code> 支持：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加string转const OLECCHAR*类型支持</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;atlbase.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;atlconv.h&gt;</span></span></span><br></pre></td></tr></table></figure></blockquote><p>接下来回到 <code>MyBlockPortsArray.h</code> 文件中继续完善两个端口</p><p>首先为了方便学习和理解，我们直接指定两个端口的名字和描述：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281629374.png"></p><p>完善 <code>ICapeCollection</code> 接口的 <code>Item()</code> 函数获取端口的逻辑：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281647427.png"></p><p>编译一下，没啥毛病，到这里我们的端口2就已经添加完了，但是呢，在获取第二个端口的时候依然会崩溃闪退，那么下面就来分析一下到底是什么原因导致的</p><h2 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h2><p>首先对比了一下官方提供的示例，发现是 <code>MyBlock.h</code> 文件中 <code>myPortArray</code> 的获取方式有问题，我们来修改一下，直接做一个强制转换：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281706973.png"></p><p>其次 <code>myPortArray</code> 也应该具有一个 <code>ICapeIdentification</code> 接口定义这个数组的名字，添加接口：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281710921.png"></p><p>然后在 <code>MyBlockPortsArray.h</code> 文件中：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281718663.png"></p><blockquote><p>这里就不需要引入支持 <code>CA2W</code> 的头文件了，因为已经在 <code>BlockPort.h</code> 文件中引用过了，而当前文件已经引入了 <code>BlockPort.h</code> </p></blockquote><p>回到 <code>BlockPort.h</code> 文件，在获取端口的语句上添加一个断点：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281722935.png"></p><p>启动COFE软件，将COFE附加到进程中：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281729107.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281730635.png"></p><p>然后在COFE中添加我们的单元模块，当COFE闪退时触发断点：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281731757.png"></p><p>可以看到传过来的 <code>*ports</code> 多余了一个空值，那么我们直接拦截住这个空值：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281744937.png"></p><p>重新编译一下，再用COFE测试，发现已经可以添加了：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281746273.png"></p><h2 id="修复流股连接"><a href="#修复流股连接" class="headerlink" title="修复流股连接"></a>修复流股连接</h2><p>如上文所述，我们虽然成功创建了单元模块，但是呢发现流股连接不上了，出现新的bug了</p><p>查找了一下示例代码，发现我们在 <code>MyBlock.h</code> 文件中实例化 <code>myPortArray</code> 和 <code>parameterArray</code> 数组的时候忘了添加引用计数函数 <code>AddRef()</code> 了，现在添加上：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281907717.png"></p><p>上文中，我们拦截了第二次返回空值的 <code>*post</code> 参数，这样是不行的，不能一刀切直接拦截，修改一下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281926565.png"></p><p>然后呢，把我们的 <code>parameterArray</code> 数组赋值的方式改成和 <code>myPortArray</code> 一样：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281918091.png"></p><p>再修改 <code>MyBlockPortsArray.h</code> 文件中匹配端口id的方式：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281946352.png"></p><p>编译一下，再测试一下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281945116.png"></p><p>可以看到，现在出入口已经可以成功的连接上了，并且也获取到了我们的两个端口信息，同样的，Aspen也是可以的：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281954312.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401281954768.png"></p><p>完美！</p><h2 id="添加模块标识符"><a href="#添加模块标识符" class="headerlink" title="添加模块标识符"></a>添加模块标识符</h2><p>在上文中，我们给端口数组，端口都加上了唯一标识符，为了保险起见，我们也需要给单元模块加上标识符这个接口：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401282003994.png"></p><p>同样，在 <code>MyBlock.h</code> 文件中添加上模块名字和描述：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401282008869.png"></p><p>编译一下，再测试一下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401282010388.png"></p><p>没什么问题，完美！</p>]]></content>
      
      
      <categories>
          
          <category> 化工流程模拟开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CAPE-OPEN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++学习笔记之三</title>
      <link href="/posts/e7033a53/"/>
      <url>/posts/e7033a53/</url>
      
        <content type="html"><![CDATA[<h2 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h2><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><p>if语句的判断时一个布尔表达式，C语言把任何非零和非空的值假定为true，把零或null假定为false，示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">if</span>( a &lt; <span class="number">20</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;a 小于 20&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;a 的值是 &quot;</span> &lt;&lt; a &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">if</span>( b &lt; <span class="number">20</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;b 小于 20&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;b 的值是 &quot;</span> &lt;&lt; b &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401252223589.png"></p><h3 id="if-else语句"><a href="#if-else语句" class="headerlink" title="if else语句"></a>if else语句</h3><p>一个if语句后可跟一个可选的else语句，else语句在布尔表达式为假时执行，示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">if</span>( a &lt; <span class="number">20</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;a 小于 20&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;a 大于 20&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;a 的值是 &quot;</span> &lt;&lt; a &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401252224290.png"></p><p>类似于循环嵌套，条件判断也可以叠加，示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">if</span>(a == <span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;a 的值是 10&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(a == <span class="number">20</span>) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;a 的值是 20&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(a == <span class="number">30</span>) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;a 的值是 30&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;没有匹配的值&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;a 的准确值是 &quot;</span> &lt;&lt; a &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401252226113.png"></p><h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><p>（没错，是NS的那个switch）</p><p>switch语句可以测试一个变量等于多个值时的情况，每个值称为一个case，且被测试的变量会对每个switch case进行检查，语法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(expression)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> constant-expression:</span><br><span class="line">        <span class="built_in">statement</span>(s);</span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">// 可选的</span></span><br><span class="line">    <span class="keyword">case</span> constant-expression:</span><br><span class="line">        <span class="built_in">statement</span>(s);</span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">// 可选的</span></span><br><span class="line">    <span class="comment">// 可以有任意数量的case语句</span></span><br><span class="line">    <span class="keyword">default</span> : <span class="comment">// 可选的</span></span><br><span class="line">    <span class="built_in">statement</span>(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>switch语句必须遵循下面的规则：</p><ul><li>switch语句中的expression必须是一个整型或枚举类型，或者是一个class类型，其中class有一个单一的转换函数将其转换为整型或枚举类型</li><li>在一个switch中可以有任意数量的case语句，每个case后跟一个要比较的值和一个冒号</li><li>case的constant-expression必须与switch中的变量具有相同的数据类型，且必须是一个常量或字面量</li><li>当被测试的变量等于case中的常量时，case后跟的语句将被执行，直到遇到break语句为止</li><li>当遇到break语句时，switch终止，控制流将跳转到switch语句后的下一行</li><li>不是每一个case都需要包含break，如果case语句不包含break，控制流将会 继续 后续的case，直到遇到break为止。</li><li>一个switch语句可以有一个可选的default case，出现在switch的结尾。default case可用于在上面所有case都不为真时执行一个任务，default case中的break语句不是必需的</li></ul><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> grade = <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">    <span class="keyword">switch</span>(grade) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;很棒！&quot;</span> &lt;&lt; std::endl; </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;做得好&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;您通过了&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;F&#x27;</span>:</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;最好再试一下&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;无效的成绩&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;您的成绩是 &quot;</span> &lt;&lt; grade &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401270851149.png"></p><p>和if语句一样，switch也可以嵌套，语法如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(ch1) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>: </span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;这个 A 是外部 switch 的一部分&quot;</span>;</span><br><span class="line">        <span class="keyword">switch</span>(ch2) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;这个 A 是内部 switch 的一部分&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>: <span class="comment">// 内部 B case 代码</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>: <span class="comment">// 外部 B case 代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">200</span>;</span><br><span class="line">    <span class="keyword">switch</span>(a) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">100</span>: </span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;这是外部 switch 的一部分&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">            <span class="keyword">switch</span>(b) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">200</span>:</span><br><span class="line">                    std::cout &lt;&lt; <span class="string">&quot;这是内部 switch 的一部分&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;a 的准确值是 &quot;</span> &lt;&lt; a &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;b 的准确值是 &quot;</span> &lt;&lt; b &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401270856938.png"></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数是一组一起执行一个任务的语句，每个C++程序都至少有一个函数，即主函数 <code>main()</code> ，所有简单的程序都可以定义其他额外的函数。</p><p>函数声明告诉编译器函数的名称、返回类型和参数，函数定义提供了函数的实际主体</p><p>一般函数的结构如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">return_type <span class="title">function_name</span><span class="params">( parameter list )</span> </span>&#123;</span><br><span class="line">    body of the function</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>return_type</code> 返回类型：一个函数可以返回一个值，return_type是函数返回的值的数据类型，有些函数执行所需的操作而不返回值，那么return_type就是关键字 <code>void</code> </li><li><code>function_name</code> 函数名称：这是函数的实际名称，函数名和参数列表一起构成了函数签名</li><li><code>parameter list</code> 参数列表：参数就像是占位符，当函数被调用时，向参数传递一个值，这个值被称为实际参数，参数列表包括函数参数的类型、顺序、数量，函数也可以不包含参数</li><li>函数主体：函数主体包含一组定义函数执行任务的语句</li></ul><p>函数可以先声明后定义，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">myMax</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span></span>;</span><br><span class="line"><span class="comment">// 主函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">200</span>;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调用函数，将a和b的值传入myMax()函数，并将该函数的返回值赋给ret变量</span></span><br><span class="line">    ret = <span class="built_in">myMax</span>(a, b);</span><br><span class="line">    </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Max value is : &quot;</span> &lt;&lt; ret &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// myMax()函数实现返回两个数中较大的那个数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">myMax</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> result;</span><br><span class="line">    <span class="keyword">if</span>(num1 &gt; num2) &#123;</span><br><span class="line">        result = num1;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result = num2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回较大值</span></span><br><span class="line">    <span class="keyword">return</span> result; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401270902325.png"></p><p>如果函数要使用参数，则必须声明接受参数值的变量，这些变量就是函数的形式参数，形式参数就像函数内的其他局部变量，在进入函数时被创建，退出函数时被销毁。</p><p>当调用函数时，有三种向函数传递参数的方式</p><h3 id="传值调用"><a href="#传值调用" class="headerlink" title="传值调用"></a>传值调用</h3><p>向函数传递参数的传值调用方法，把参数的实际值复制给函数的形式参数，在这种情况下，修改函数内的形式参数不会影响实际参数</p><p>默认情况下，C++使用传值调用方法来传递参数，一般来说，这意味着函数内的代码不会改变用于调用函数的实际参数，示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mySwap</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span>;<span class="comment">// 无返回值函数用void</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">200</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;交换前，a 的值：&quot;</span> &lt;&lt; a &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;交换前，b 的值：&quot;</span> &lt;&lt; b &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调用函数来交换值</span></span><br><span class="line">    <span class="built_in">mySwap</span>(a, b);</span><br><span class="line">    </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;交换后，a 的值：&quot;</span> &lt;&lt; a &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;交换后，b 的值：&quot;</span> &lt;&lt; b &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数定义</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mySwap</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    temp = x;<span class="comment">// 保存 x 的值 */</span></span><br><span class="line">    x = y;<span class="comment">// 把 y 赋值给 x</span></span><br><span class="line">    y = temp;<span class="comment">//把 x 赋值给 y</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401270905279.png"></p><blockquote><p>为什么没有成功交换呢？是因为虽然 <code>mySwap()</code> 函数交换了a和b的值，但是并没有返回，也就是主函数并没有获得 <code>mySwap()</code> 函数交换后的值，这个函数只是进行了交换，并没有返回结果</p></blockquote><h3 id="指针调用"><a href="#指针调用" class="headerlink" title="指针调用"></a>指针调用</h3><p>把<strong>实际参数</strong>的<strong>地址</strong>赋值给形式参数。在函数内，该地址用于访问调用中要用到的<strong>实际参数</strong>，这意味着，修改形式参数<strong>会影响</strong>实际参数</p><p>把上面的那个示例稍稍修改一下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> *x, <span class="type">int</span> *y)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">200</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;交换前，a 的值：&quot;</span> &lt;&lt; a &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;交换前，b 的值：&quot;</span> &lt;&lt; b &lt;&lt; std::endl;</span><br><span class="line">    <span class="comment">// 调用函数来交换值</span></span><br><span class="line">    <span class="comment">// &amp;a 表示指向 a 的指针，即变量 a 的地址 </span></span><br><span class="line">    <span class="comment">// &amp;b 表示指向 b 的指针，即变量 b 的地址 </span></span><br><span class="line">    <span class="built_in">swap</span>(&amp;a, &amp;b);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;交换后，a 的值：&quot;</span> &lt;&lt; a &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;交换后，b 的值：&quot;</span> &lt;&lt; b &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> *x, <span class="type">int</span> *y)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    temp = *x;<span class="comment">// 保存地址 x 的值</span></span><br><span class="line">    *x = *y;<span class="comment">// 把 y 赋值给 x</span></span><br><span class="line">    *y = temp;<span class="comment">// 把 x 赋值给 y</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202402041953715.png"></p><p>可以看到，这里即使 <code>swap()</code> 函数没有返回交换后的值，但是a和b的值也成功交换了，这是因为交换的并不是a和b的值，而是他们的内存地址，这样在函数外也能成功访问到</p><h3 id="引用调用"><a href="#引用调用" class="headerlink" title="引用调用"></a>引用调用</h3><p>把参数的<strong>引用赋值</strong>给形式参数，在函数内，该引用用于访问调用中要用到的<strong>实际参数</strong>，这意味着，修改形式参数<strong>会影响</strong>实际参数</p><p>和指针调用类似：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> &amp;x, <span class="type">int</span> &amp;y)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">200</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;交换前，a 的值：&quot;</span> &lt;&lt; a &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;交换前，b 的值：&quot;</span> &lt;&lt; b &lt;&lt; std::endl;</span><br><span class="line">    <span class="comment">// 调用函数来交换值</span></span><br><span class="line">    <span class="built_in">swap</span>(a, b);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;交换后，a 的值：&quot;</span> &lt;&lt; a &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;交换后，b 的值：&quot;</span> &lt;&lt; b &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数定义</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> &amp;x, <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    temp = x; <span class="comment">// 保存地址 x 的值</span></span><br><span class="line">    x = y;    <span class="comment">// 把 y 赋值给 x</span></span><br><span class="line">    y = temp; <span class="comment">// 把 x 赋值给 y</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202402041954513.png"></p><h3 id="参数的默认值"><a href="#参数的默认值" class="headerlink" title="参数的默认值"></a>参数的默认值</h3><p>当定义一个函数，可以为参数列表中后边的每一个参数指定默认值，当调用函数时，如果实际参数的值留空，则使用这个默认值，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b = <span class="number">20</span>)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> result;<span class="comment">// 函数内局部变量</span></span><br><span class="line">    result = a + b;</span><br><span class="line">    <span class="keyword">return</span> (result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">200</span>;</span><br><span class="line">    <span class="type">int</span> result;<span class="comment">// 函数内局部变量</span></span><br><span class="line">    <span class="comment">// 调用函数来添加值</span></span><br><span class="line">    result = <span class="built_in">sum</span>(a, b);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Total value is :&quot;</span> &lt;&lt; result &lt;&lt; std::endl;</span><br><span class="line">    <span class="comment">// 再次调用函数，result重新被赋值</span></span><br><span class="line">    result = <span class="built_in">sum</span>(a);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Total value is :&quot;</span> &lt;&lt; result &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202402041956162.png"></p><h3 id="Lambda函数与表达式"><a href="#Lambda函数与表达式" class="headerlink" title="Lambda函数与表达式"></a>Lambda函数与表达式</h3><p>C++11提供了对匿名函数的支持,称为Lambda函数（也叫Lambda表达式）</p><p>Lambda表达式把函数看作对象，让函数可以像对象一样使用，比如可以将它们赋给变量和作为参数传递，还可以像函数一样对其求值，Lambda表达式本质上与函数声明非常类似，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 标准格式</span></span><br><span class="line">[capture](parameters)-&gt;<span class="keyword">return</span>-type&#123;body&#125;</span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line">[](<span class="type">int</span> x, <span class="type">int</span> y)&#123; <span class="keyword">return</span> x &lt; y ; &#125;</span><br><span class="line"><span class="comment">// 无返回值标准格式</span></span><br><span class="line">[capture](parameters)&#123;body&#125;</span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line">[]&#123; ++global_x; &#125;</span><br><span class="line"><span class="comment">// 复杂示例</span></span><br><span class="line">[](<span class="type">int</span> x, <span class="type">int</span> y) -&gt; <span class="type">int</span> &#123; <span class="type">int</span> z = x + y; <span class="keyword">return</span> z + x; &#125;</span><br></pre></td></tr></table></figure><p>如果Lambda函数没有传回值（例如 void），其返回类型可被完全忽略，在Lambda表达式内可以访问当前作用域的变量，这是Lambda表达式的闭包（Closure）行为。 与JavaScript闭包不同，C++变量传递有传值和传引用的区别，可以通过前面的 <code>[ ]</code> 来指定：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[]      <span class="comment">// 沒有定义任何变量。使用未定义变量会引发错误</span></span><br><span class="line">[x, &amp;y] <span class="comment">// x以传值方式传入（默认），y以引用方式传入</span></span><br><span class="line">[&amp;]     <span class="comment">// 任何被使用到的外部变量都隐式地以引用方式加以引用</span></span><br><span class="line">[=]     <span class="comment">// 任何被使用到的外部变量都隐式地以传值方式加以引用</span></span><br><span class="line">[&amp;, x]  <span class="comment">// x显式地以传值方式加以引用。其余变量以引用方式加以引用</span></span><br><span class="line">[=, &amp;z] <span class="comment">// z显式地以引用方式加以引用。其余变量以传值方式加以引用</span></span><br></pre></td></tr></table></figure><p>另外有一点需要注意，对于 <code>[=]</code> 或 <code>[&amp;]</code> 的形式，lambda表达式可以直接使用this指针，但是对于 <code>[ ]</code> 的形式，如果要使用this指针，必须显式传入：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">this</span>]() &#123; <span class="keyword">this</span>-&gt;<span class="built_in">someFunc</span>(); &#125;();</span><br></pre></td></tr></table></figure><h2 id="数字与数学运算"><a href="#数字与数学运算" class="headerlink" title="数字与数学运算"></a>数字与数学运算</h2><p>C++中的几个基本数字类型：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">short</span>  s;</span><br><span class="line">    <span class="type">int</span>    i;</span><br><span class="line">    <span class="type">long</span>   l;</span><br><span class="line">    <span class="type">float</span>  f;</span><br><span class="line">    <span class="type">double</span> d;</span><br><span class="line">    </span><br><span class="line">    s = <span class="number">10</span>;</span><br><span class="line">    i = <span class="number">1000</span>;    </span><br><span class="line">    l = <span class="number">1000000</span>; </span><br><span class="line">    f = <span class="number">230.47</span>;  </span><br><span class="line">    d = <span class="number">30949.374</span>;</span><br><span class="line">    </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;short  s :&quot;</span> &lt;&lt; s &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;int    i :&quot;</span> &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;long   l :&quot;</span> &lt;&lt; l &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;float  f :&quot;</span> &lt;&lt; f &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;double d :&quot;</span> &lt;&lt; d &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202402041958037.png"></p><p>C++中可以通过引用数学头文件 <code>&lt;cmath&gt;</code> 来引用下面一些内置的数学函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">double</span> <span class="title">cos</span><span class="params">(<span class="type">double</span>)</span></span>;<span class="comment">// 该函数返回弧度角（double型）的余弦</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">sin</span><span class="params">(<span class="type">double</span>)</span></span>;<span class="comment">// 该函数返回弧度角（double型）的正弦</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">tan</span><span class="params">(<span class="type">double</span>)</span></span>;<span class="comment">// 该函数返回弧度角（double型）的正切</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">log</span><span class="params">(<span class="type">double</span>)</span></span>;<span class="comment">// 该函数返回参数的自然对数</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">pow</span><span class="params">(<span class="type">double</span>, <span class="type">double</span>)</span></span>;<span class="comment">// 假设第一个参数为x，第二个参数为y，则该函数返回x的y次方</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">hypot</span><span class="params">(<span class="type">double</span>, <span class="type">double</span>)</span></span>;<span class="comment">// 该函数返回两个参数的平方总和的平方根，也就是说，参数为一个直角三角形的两个直角边，函数会返回斜边的长度</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">sqrt</span><span class="params">(<span class="type">double</span>)</span></span>;<span class="comment">// 该函数返回参数的平方根</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">abs</span><span class="params">(<span class="type">int</span>)</span></span>;<span class="comment">// 该函数返回整数的绝对值</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">fabs</span><span class="params">(<span class="type">double</span>)</span></span>;<span class="comment">// 该函数返回任意一个浮点数的绝对值</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">floor</span><span class="params">(<span class="type">double</span>)</span></span>;<span class="comment">// 该函数返回一个小于或等于传入参数的最大整数</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 数字定义</span></span><br><span class="line">    <span class="type">short</span> s = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">-1000</span>;</span><br><span class="line">    <span class="type">long</span> l = <span class="number">100000</span>;</span><br><span class="line">    <span class="type">float</span> f = <span class="number">230.47</span>;</span><br><span class="line">    <span class="type">double</span> d = <span class="number">200.374</span>;</span><br><span class="line">    <span class="comment">// 数学运算</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;sin(d) :&quot;</span> &lt;&lt; <span class="built_in">sin</span>(d) &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;abs(i)  :&quot;</span> &lt;&lt; <span class="built_in">abs</span>(i) &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;floor(d) :&quot;</span> &lt;&lt; <span class="built_in">floor</span>(d) &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;sqrt(f) :&quot;</span> &lt;&lt; <span class="built_in">sqrt</span>(f) &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;pow( d, 2) :&quot;</span> &lt;&lt; <span class="built_in">pow</span>(d, <span class="number">2</span>) &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202402042001456.png"></p><p>在许多情况下，需要生成随机数，可以使用 <code>rand()</code> 函数，它只返回一个伪随机数，且生成随机数之前必须先调用 <code>srand()</code> 函数</p><p>示例：使用了 <code>time()</code> 函数来获取系统时间的秒数，通过调用 <code>rand()</code> 函数来生成随机数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="comment">// 设置种子</span></span><br><span class="line">    <span class="built_in">srand</span>((<span class="type">unsigned</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="comment">// 生成 10 个随机数</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 生成实际的随机数</span></span><br><span class="line">        j= <span class="built_in">rand</span>();</span><br><span class="line">        std::cout &lt;&lt;<span class="string">&quot;随机数： &quot;</span> &lt;&lt; j &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202402042010758.png"></p><blockquote><p>可以自己试试哦，每次执行生成的数字都是不一样的</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单元模块开发入门1</title>
      <link href="/posts/c5f2e545/"/>
      <url>/posts/c5f2e545/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401221913534.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>单元模块：Block&#x2F;Unit Operations Block</p><p>建议看此篇之前先看物性包开发入门篇，对ATL项目有个基础</p></blockquote><p>在我们物性包开发入门篇中，我们说过了在流程模拟软件计算过程中，界面流股、单元模块以及物流对象之前的关系，如下图所示：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401151945176.png"></p><p>我们来把这个简化一下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401242016520.png"></p><p>实际上在流程模拟软件里的流程是这样的：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401242020304.png"></p><p>我们在计算的时候所输入的信息，比如输入入口流股的信息，下面这个界面：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401242020580.png"></p><p>这就是界面流股，我们在界面流股中输入的信息，就会保存在这个入口界面流股的物流对象中</p><p>同样，单元模块也是的：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401242021850.png"></p><p>这些信息都会储存在单元模块的物流对象中，在单元计算完毕之后，同样会生成一个出口界面流股的物流对象，然后出口界面流股会将物流对象中的计算结果显示在流股结果中</p><p>单元模块的物流对象也会将单元模块的计算结果显示在单元模块的结果中</p><p>那么单元模块是怎么调用到物流对象的信息的，在C++中是使用了指针Pointer（实际上就是内存地址），单元模块中有一个指针，指向了物流对象，同样物流对象中也有指针指向了单元模块</p><p>在物性包开发入门篇我们也学习了，物流对象实际上就是一个ATL COM对象，然后这个对象里可以添加很多接口，这些接口的公共的基类就是一个IDispatch指针，那么也就意味着我们只需要在单元模块中保留一个IDispatch指针指向物流对象，那么单元模块就可以访问到物流对象中的所有接口</p><h2 id="单元模块中的接口"><a href="#单元模块中的接口" class="headerlink" title="单元模块中的接口"></a>单元模块中的接口</h2><p>在CAPE-OPEN官网的文档集里有这么一个文件： <code>CO_Unit_Operations_v6.25.pdf</code> ，和物性包的文档类似，它就是单元模块的一个文档，其中规定了如下接口：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401242039863.png"></p><p>同样，单元模块也是一个ATL COM对象，如果在物流对象中保留一个IDispatch指针指向单元模块，那么物流对象也可以去访问到上述单元模块中的所有接口</p><p>也就是说，单元模块开发完毕，并且加载到流程模拟软件里之后，单元模块和物流对象之间就是一个交换指针，也就是交换内存地址的一个过程</p><p><strong>ICapeUnit接口：</strong> 单元模块</p><p>第一个函数 <code>GetValStatus()</code> ，val就是validation，这个函数的意思就是判断单元模块是否可用，也就是看模块的参数是否输入完毕</p><p><code>Calculate()</code> ，顾名思义，就是执行计算</p><p><code>GetPorts()</code> ，是获取流股的端口，流程模拟软件在执行单元模块连接的时候需要获取单元模块的端口，有几个输入口，有几个输出口等，这个接口是供流程模拟软件来调用的</p><p><code>Validate()</code> ，是进行单元模块是否可用的判断函数，和第一个接口的功能实际上有点重复</p><p><strong>ICapeUnitPort接口：</strong> 单元模块端口，负责单元模块端口连接流股的连接与断开，实际上该接口与第一个接口并不是一个平级的关系，而应该是包含在单元模块中的</p><p>后面两个接口现在来说并不重要，不在入门篇中讨论</p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>如上文所述，单元模块也是一个ATL COM对象，那么也是创建一个ATL项目：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401242047407.png"></p><p>名字自己定义，后面默认创建：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401242050986.png"></p><blockquote><p>创建的这个只是一个项目，名字叫MyBlockTest，并不是说这就是一个单元模块，这个项目中会包含单元模块、物流对象等</p><p>下面要创建的ATL对象，才是真正的单元模块</p></blockquote><p>创建好之后，我们第一步就是添加一个ATL对象：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401242056897.png"></p><p>添加之后的弹窗默认即可，添加完成之后编译一下，这里编译应该是没有问题的，如果编译报错逐用户重定向问题，更改项目属性即可：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401242059742.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401242100513.png"></p><h2 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h2><p>回到上文中的接口图：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401242039863.png"></p><p>在上文的理解中，对于CAPE-OPEN的单元模块来说，其实最重要的就是第一个 <code>ICapeUnit</code> 接口，那么现在就来学习和实现这一个接口</p><p>首先呢，CAPE-OPEN和物性包开发类似，也提供了一个单元模块的示例用来学习和示例，在官网上下载下来：<a href="https://colan.repositoryhosting.com/trac/colan_examples/downloads">https://colan.repositoryhosting.com/trac/colan_examples/downloads</a></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401242121236.png"></p><p>下载下来后解压备用</p><p>和物性包开发一样，添加接口就需要将CAPE-OPEN的标准接口文件进行导入，在下载好的示例文件中找到下面这个文件，复制到项目根目录中：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401242123543.png"></p><p>然后添加实现接口：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401242125192.png"></p><p>导入进来之后会发现，编译是不通过的，同时编辑器也会提醒错误：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401242129794.png"></p><p>这并不是说导入接口的方式是错误的，看过物性包开发入门篇的，应该都知道，这是CAPR-OPEN标准自己的定义问题，所以还是老方法，从CAPE-OPEN标准提供的示例中，找和现在导入的接口方法有什么不同，就是错误之处</p><p>第一处错误：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401242142160.png"></p><p>第二处错误：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401242143823.png"></p><p>更改了这两处错误之后可以发现，编译虽然还是有警告，但已经通过了</p><h2 id="注册单元模块"><a href="#注册单元模块" class="headerlink" title="注册单元模块"></a>注册单元模块</h2><p>和热力学物性包类似，新开发的单元模块要被流程模拟软件识别到，就需要给单元模块加上“特征码”</p><p>同样我们也不需要自己写，直接使用CAPE-OPEN的模板即可：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;Implemented Categories&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">    &#123;<span class="number">678</span>C09A5<span class="number">-7</span>D66<span class="number">-11</span>D2-A67D<span class="number">-00105</span>A42887F&#125; </span><br><span class="line">    &#123;<span class="number">678</span>C09A1<span class="number">-7</span>D66<span class="number">-11</span>D2-A67D<span class="number">-00105</span>A42887F&#125;</span><br><span class="line">    &#123;<span class="number">4150</span>C28A-EE06<span class="number">-403f</span>-A871<span class="number">-87</span>AFEC38A249&#125;</span><br><span class="line">    &#123;<span class="number">0</span>D562DC8-EA8E<span class="number">-4210</span>-AB39-B66513C0CD09&#125;</span><br><span class="line">    &#123;<span class="number">4667023</span>A<span class="number">-5</span>A8E<span class="number">-4</span>CCA-AB6D<span class="number">-9</span>D78C5112FED&#125;</span><br><span class="line">&#125;</span><br><span class="line">CapeDescription </span><br><span class="line">&#123;</span><br><span class="line">    val Name =  s <span class="string">&#x27;CPP Mixer Splitter Example&#x27;</span></span><br><span class="line">        val Description = s <span class="string">&#x27;Microsoft Visual C++ 2005 Mixer and Splitter Example according to CAPE-OPEN Unit Operation specification&#x27;</span></span><br><span class="line">        val CapeVersion = s <span class="string">&#x27;1.0&#x27;</span></span><br><span class="line">        val ComponentVersion = s <span class="string">&#x27;1.0.2&#x27;</span></span><br><span class="line">        val VendorURL = s <span class="string">&#x27;http://www.colan.org/&#x27;</span></span><br><span class="line">        val About = s <span class="string">&#x27;See http://www.colan.org/ for more information&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401242156451.png"></p><p>编译一下，没啥毛病</p><h2 id="调用单元模块"><a href="#调用单元模块" class="headerlink" title="调用单元模块"></a>调用单元模块</h2><p>以AspenV11为例，之前在物性包开发入门篇中也讲到了如何使用aspen调用CAPE-OPEN的模块，重新来实现一下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401252001201.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401252003290.png"></p><p>可以看到图中已经成功的创建了一个上文中写的单元模块，但是此时这个单元模块是没有任何界面和功能的，也无法进行流股的连接，这是因为这些功能在示例中还没有实现，下面就来实现这些功能</p><h2 id="单元模块端口"><a href="#单元模块端口" class="headerlink" title="单元模块端口"></a>单元模块端口</h2><p>在实际开发中，可能这个单元模块的端口并不只是一个，所以在本文中导入的函数中：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401252009441.png"></p><p><code>ports</code> 是一个数组类型的，但是普通的C++数组是无法实现这个功能的，它是一个ATL规定的数组类型，该类型在CAPE-OPEN标准中也进行了规定</p><p>在CAPE-OPEN标准文档里有这个文件： <code>Collection_Common_Interface.pdf</code> ，这个文档规定了开放集合公共接口，如图：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401252017006.png"></p><p>可以看到，是很简单的，<code>Count()</code> 函数用于获取数组的长度，<code>Item</code> 则是获取特定位置的数组成员。这里我们试着来实现它也就是说要编写的ATL数组必须要遵循 <code>ICapeCollection</code> 这个接口规范才可以，那么就来实现这个ATL数组，首先给项目添加一个ATL对象：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401252034828.png"></p><p>点击添加之后的弹窗默认即可</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401252051602.png"></p><blockquote><p>如果这里弹出了idl文件路径报错，请参考物性包开发入门篇2中的报错处理</p></blockquote><p>编译一下，没啥毛病，继续添加 <code>ICapeCollection</code> 接口：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401252057428.png"></p><p>添加完成之后编译一下，没毛病，继续在 <code>MyBlockPortsArray.h</code> 中编写实现端口的代码：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401252109670.png"></p><p>可以看到，本文在这里修改了参数的变量名，因为在C++语法里，是不允许函数名和变量名同名的，但是在CAPE-OPEN标准导入进来的接口中是同名的Cont，所以要进行修改一下</p><p>接下来在 <code>MyBlock.h</code> 中编写获取端口数，首先添加头文件：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401252112754.png"></p><p>写入创建实例：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401252121895.png"></p><p>编译一下，没啥毛病，已经获取到了端口数，那么接下来肯定就是要让流程模拟软件知道去连接哪个端口，在上文的接口图中已经了解到 <code>ICapeUnitPort</code> 接口就是用来描述单元模块端口的</p><p>那么继续添加这个接口ATL对象：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401252131588.png"></p><p>再给BlockPort添加 <code>ICapeUnitPort</code> 实现接口：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401252142560.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401252141247.png"></p><p>编译一下，果不其然又报错了，同样啊，导入的这个接口是有问题的，还是老方法，按照CAPE-OPEN提供的示例对照一下，看是哪里又写错了：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401252150347.png"></p><p>好的，纠正了这两个参数类型之后编译已经没有问题了，现在来编写获取端口的方法</p><p>回到 <code>MyBlockPortsArray.h</code> ：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401252155074.png"></p><p>由于 <code>Item()</code> 函数实现起来比较麻烦，入门篇暂时先搁置，本文现在假设该单元模块仅有一个流股端口，那么怎么实现端口的获取呢，为了方便学习和理解，本文直接在文件头部进行声明：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401252202324.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401252204105.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401252207406.png"></p><p>编译一下，没啥毛病，但是现在在aspen中发现还是无法连接流股，猜测是上文中的 <code>CMyBlockPortsArray</code> 实例和端口1一样，不能每次临时在方法中进行创建，应该在头部全局创建，回到文件 <code>MyBlock.h</code> 文件，将 <code>CMyBlockPortsArray</code> 在头部全局创建：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401271331978.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401271331494.png"></p><blockquote><p>和上文的端口1不一样，这里还是在函数内实例化</p></blockquote><p>然后再来到 <code>BlockPort.h</code> 文件，给上述创建的端口1赋值：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401271322215.png"></p><p>编译一下，没啥毛病，再来aspen里试一下，好吧，aspen还是识别不到，但是可以看到COFE已经成功识别到了刚才创建的这个端口：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401271332173.png"></p><p>没有实现流股连接是因为目前 <code>BlockPort.h</code> 接口中的 <code>Connect</code> 函数还没有实现，下文再讲，现在来总结一下</p><p>在上文中提到，单元模块中包含一个 <code>BlockArray</code> 的数组，这个数组中又有多个 <code>BlockPort</code> 端口，而这个端口中就储存着对应的物流对象的指针，也就是内存地址，要做到对物流对象的连接，就需要让 <code>Connect</code> 函数记录下该物流对象</p><h2 id="物理对象的连接"><a href="#物理对象的连接" class="headerlink" title="物理对象的连接"></a>物理对象的连接</h2><p>同样，为了方便理解，还是在 <code>BlockPort.h</code> 文件的头部创建一个物流对象实例：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401271355034.png"></p><p>修改上文中的连接方式：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401271407601.png"></p><p>编译一下，没毛病，aspen测试还是不行，但是COFE已经可以成功连接上流股了：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401271406378.png"></p><p>aspen为什么不可以连接呢，aspen对于单元模块的流股连接规定的更为严格，不只是要通过 <code>ICapeUnit</code> 这一个接口，还要通过 <code>ICapeUtilities</code> 等接口来继承</p><p>本篇到这里就暂告一段落，等待下一篇再来完善这个模块~</p>]]></content>
      
      
      <categories>
          
          <category> 化工流程模拟开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CAPE-OPEN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>热力学物性包开发入门3</title>
      <link href="/posts/5155db96/"/>
      <url>/posts/5155db96/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401211008330.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这一篇应该算是完结篇了吧（应该），主要是来解决之前两篇文章中的一些遗留问题</p><h2 id="ThermoPropertyRoutine接口"><a href="#ThermoPropertyRoutine接口" class="headerlink" title="ThermoPropertyRoutine接口"></a>ThermoPropertyRoutine接口</h2><p>第一个呢，就是我们之前在创建物流对象模板的时候导入的 <code>ICapeThermoPropertyRoutine</code> 接口导致编译不通过的问题</p><p>首先先取消注释这个接口，重新引入进来：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401211424665.png"></p><blockquote><p>需要注意的是，这一行取消注释之后，记得在上一行的末尾加上英文逗号</p></blockquote><p>继续取消注释：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401211425642.png"></p><p>继续取消注释：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401211426262.png"></p><p>这里的内容是第二篇中学习如何实现物性计算写的，我们现在暂时注销掉我们自己写的内容，将接口重新初始化，如下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401211429547.png"></p><p>修改 <code>CalcAndGetLnPhi</code> 函数中 <code>fFlags</code> 参数的类型为 <code>int</code> ：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401211432504.png"></p><p>现在我们重新编译一下，发现编译已经通过了，接口也可以正常使用了</p><p>也就是说，编译不通过，其实是在导入CAPE-OPEN标准接口的时候，这个参数的类型错误导致编译不通过，从这个问题可以看出来，标准有时候也是会有错误的</p><p>那么这个错误我是怎么解决的呢？还记得我们第一篇中从官网下载的那个示例文件吗，没错，就是通过示例文件代码和自己写的代码对比，看哪里不同，哪里就可能会有错误</p><h2 id="GetCompoundList函数"><a href="#GetCompoundList函数" class="headerlink" title="GetCompoundList函数"></a>GetCompoundList函数</h2><p>在上一篇中，我们简单示例了 <code>GetCompoundList</code> 函数如何使用， 如何获取到组分列表和组分信息，但是讲的比较简单，并且COFE软件并没有调用成功，这一篇我们来详细讲一下这个函数的使用</p><p>首先我们注释掉之前写的简单代码，重新来进行编写：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401211442313.png"></p><p>首先我们可以看到，这个函数共有6个参数，我们就需要创建6个变量来存储对应的信息：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401211459711.png"></p><p>由于我们的组分ID要兼容中文，类似于我们在Aspen中输入组分的时候对组分进行重命名，所以需要修改为宽字符类型 <code>wstring</code> ：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401211500090.png"></p><p>接下来给参数赋值并返回：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401211512719.png"></p><p>修改一下返回的组分数：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401211513944.png"></p><p>修改一下我们在 <code>FuildPackageManager.h</code> 中定义的组分的类型：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401211514527.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401211515622.png"></p><p>编译一下，没啥问题，OK，接下来测试一下：</p><blockquote><p>需要注意的是，我们在VS中生成的文件时x64位的所以COFE测试也需要是64位的才可以</p></blockquote><p>首先物性包调用是没有问题的：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401211520943.png"></p><p>选中PR方程，创建一个流股：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401211521018.png"></p><p>可以看到组分也是成功调用到了！</p><p>到这里，我们的物性包开发入门篇到这里就结束了，在整个过程中，实现了对CAPE-OPEN标准接口的调用，实现了自定义状态方程的输入，自定义组分的输入，自定义热力学计算方法，唯一的遗憾是并没有实现直接从物性数据库中调用对应的组分数据</p><p>当然这只是入门篇，后续我将继续努力，完善这个物性包，本入门篇更重要的目的是让自己真正的跨入从使用流程模拟软件到开发流程模拟软件的这一步，更多的是一个抛砖引玉的作用，同时也希望自己能保持这一份热爱，继续为国产化工工艺流程模拟软件开发去做一点点自己的贡献</p><p>至此，不忘初心，方得始终。</p><blockquote><p>特别鸣谢：B站up主：bcbooo</p></blockquote><p>源码地址：<a href="https://github.com/laugh0608/myThermoTest">https://github.com/laugh0608/myThermoTest</a></p>]]></content>
      
      
      <categories>
          
          <category> 化工流程模拟开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CAPE-OPEN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>热力学物性包开发入门2</title>
      <link href="/posts/2652eb00/"/>
      <url>/posts/2652eb00/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401162020680.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在之前的文章中，我们已经说过了流程模拟软件是如何去调用和计算的，并且自己写了一个空的物性包管理者接口，今天我们就来实现<strong>物流对象模板和配置好的物流对象</strong></p><p>在C++中，物流对象模板就类似于class类，而配置好的物流对象就是对象</p><p>前文中的物性包管理者接口我们是通过ATL简单对象来添加的，同样，物流对象模板也是一个ATL对象，不过是储存在物性包管理者内部的</p><h2 id="添加物流模板类"><a href="#添加物流模板类" class="headerlink" title="添加物流模板类"></a>添加物流模板类</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401162026517.png"></p><p>如果这里出现了idl文件路径错误，如下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401162215851.png"></p><h2 id="报错处理"><a href="#报错处理" class="headerlink" title="报错处理"></a>报错处理</h2><p>那么恭喜你，这是VS2022的傻逼bug，此时不要慌，首先把我们新建失败的ATL对象进行一个删除，选择查找，在所有文件中查找新建ATL对象的名字，在下列两个文件中删除新建ATL对象的引用：</p><p>第一个就是我们的idl文件，删除下面新增的这一行：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401162220904.png"></p><blockquote><p>这个箭头指错了，应该是右上角那个rc文件</p></blockquote><p>第二在Resource这个头文件中，删除新增的这一行：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401162221367.png"></p><p>最后，再删除新增的rgs文件：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401162222832.png"></p><p>这样我们就成功的删除了添加失败的ATL对象，现在开始重新添加</p><p>首先需要将我们项目的这个idl文件，重新换一个位置，比如在项目根目录下新建一个文件夹，把这个idl文件复制进去，然后点击添加现有项，导入复制的idl文件</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401162217036.png"></p><p>然后就会发现我们有两个idl文件：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401162223522.png"></p><p>这个时候需要进入项目根目录，直接删除根目录中的这个idl文件，此时VS里会提示该文件已被删除：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401162227104.png"></p><p>然后我们直接再解决方案资源管理器中删除这个idl文件，再重新添加ATL对象，就可以发现可以成功添加了：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401162229229.png"></p><p>而且此时可以看到，我们的idl文件又在项目根目录下生成了，这时候回到我们刚才新建的idl文件夹内，将我们已经注册新的ATL对象的idl文件，直接剪切，然后替换项目根目录下的idl文件就可以了</p><blockquote><p>后面如果还要添加新ATL对象的话，还是得这么操作，很莫名其妙，不知道是我自己电脑的bug还是其他人也会遇到</p><p>多说一嘴，我在下面添加接口的时候遇到了同种类问题：</p><p>如果这里报错 <code>pch.cpp</code> 文件问题，是一次性添加多个接口的问题，不知道为什么VS2022不允许一次性添加多个，可是我看的教程明明人家可以添加多个，如果要解决这个错误只能添加一个接口，重新编译整个项目，保存，再添加一个再重新编译一次，好麻烦啊，不知道是哪里我没设置好还是什么</p><p>建议一个一个接口进行添加，如果一次性添加多个接口可能会出现一个接口被重复添加的错误</p><p><strong>大胆猜测</strong>是idl文件或者pch文件在被自动更改之后触发VS的文件保护了，需要重新加载一次，也就是重新编译、保存一次就好了</p></blockquote><p>记得对照一下左边的项目目录，如果有多出来的其他文件，估计是刚才新建ATL对象失败所产生的文件：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401162250220.png"></p><p>编译了一下，没啥毛病：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401162253700.png"></p><h2 id="添加物流模板中的接口"><a href="#添加物流模板中的接口" class="headerlink" title="添加物流模板中的接口"></a>添加物流模板中的接口</h2><p>在新建好物流对象之后就需要给物流对象继续添加接口，切换到类视图，找到新建的 <code>MaterialObject</code> ，添加接口，我们要添加什么接口呢，回到之前我们的文章，找到接口列表：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401152104645.png"></p><p>上篇文章中我们已经添加了第一个 <code>ICapeThermoPropertyPackageManager</code> ，也就是物性包管理者，那么我们的物流对象需要添加哪些接口呢，除了物性包管理者之外的所有：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401171904163.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401171907571.png"></p><blockquote><p><code>ICapeThermoMaterialContext</code> 和 <code>ICapeThermoUniversalConstants</code> 暂时不用管，后续再讲</p><p>这里建议 <code>ICapeThermoPropertyRoutine</code> 接口也不添加哈，后面会报错，报错原因下文会说</p></blockquote><blockquote><p>如果这里报错 <code>pch.cpp</code> 文件问题，是一次性添加多个接口的问题，不知道为什么VS2022不允许一次性添加多个，可是我看的教程明明人家可以添加多个，如果要解决这个错误只能添加一个接口，重新编译整个项目，保存，再添加一个再重新编译一次，好麻烦啊，不知道是哪里我没设置好还是什么</p></blockquote><p>可以看到哈，已经添加成功了：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401172129567.png"></p><p>此时我们编译一下，会发现有如下的报错：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401172130013.png"></p><p>不要慌哈，这是由于 <code>ICapeThermoPropertyRoutine</code> 接口出现的问题，CAPE-OPEN标准已经比较久远了，出现了部分代码上的bug，我们暂时不用管哈</p><p>那么我们就暂时不适用这个接口了，需要注释掉下面几行：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401172133648.png"></p><blockquote><p>这里注意要删掉上面一行最后的逗号，否则会出现报错的哈</p></blockquote><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401172134482.png"></p><p>最后注释掉这一整个类：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401172136281.png"></p><p>这个时候重新编译一下，已经没有问题了，接着学习</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401172141859.png"></p><h2 id="添加物性集列表"><a href="#添加物性集列表" class="headerlink" title="添加物性集列表"></a>添加物性集列表</h2><p>前文中我们已经知道了，当流程给物性包管理者发出请求之后，会返回一个物性包的列表，也就是 <code>VARIANT *GetPropertyPackageList</code> 这个 <code>VARIANT</code> 在COM中就是一个数组，后面自然就是这个数组的名字</p><p>那么返回的这个数组怎么实现呢，我们也不用自己去研究，CAPE已经写好了，我们只需要调用即可，打开我们之前下载好的源文件目录，找到下列两个头文件：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401172146286.png"></p><p><code>BSTR.h</code> 和 <code>Variant.h</code> 这两个文件，都在这个目录下，然后复制到我们的项目根目录下，添加到项目头文件中：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401172147866.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401172148069.png"></p><p>在 <code>FulidPackageManager.h</code> 中添加引用：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401172151871.png"></p><blockquote><p>BSTR.h文件已经在Variant中引用了</p></blockquote><p>接下来就应该有返回的物性集列表了，如果一个物性包是在其他软件导出的，那么这个列表其实应该在软件中已经创建好了，我们这里是自己开发的，所以物性集列表我们现在直接写在代码中，方便学习和理解：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401172301781.png"></p><p>但是此时如果编译的话会产生错误，形参传输不正确，主要是因为我们这里的参数类型和标准里的不一致</p><p>为了学习和理解方便，我们对标准的 <code>Variant.h</code> 文件进行修改：</p><p>文件开头添加：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401172303662.png"></p><p>第246行给参数添加命名空间声明：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401172304943.png"></p><p>这样就可以编译通过啦</p><h2 id="返回物性集列表"><a href="#返回物性集列表" class="headerlink" title="返回物性集列表"></a>返回物性集列表</h2><p>上文中我们为了方便学习和理解，手动用代码写了一个物性集列表，中含有两个状态方程，接下来我们开始学习如何返回这个列表</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401201225219.png"></p><p>现在软件就可以访问到我们返回的这个数组了，重新编译，测试一下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401201229208.png"></p><p>可以看到COFE已经成功访问到我们这个物性集列表了，接下来就是实现选择某个物性集和调用了</p><h2 id="选择物性集并创建物流对象"><a href="#选择物性集并创建物流对象" class="headerlink" title="选择物性集并创建物流对象"></a>选择物性集并创建物流对象</h2><p><code>FluidPackageManager.h</code> 先写好选择了我们返回的物性集列表中的一个物性集的操作逻辑：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401201245524.png"></p><blockquote><p>根据BSTR.h文件中的规则，这里不能使用 <code>==</code> 来对比物性包名的值，而是使用 <code>.Same()</code> 方法</p></blockquote><p>接下来我们要干什么呢，在前文的流程里，我们说过，当流程&#x2F;工段获取到了物性集列表之后，会进行选择，然后物性包管理者会将你选择的这个物性集加载（或者说安装）到物流模板中，也就是我们前文创建的 <code>MaterialObject</code> 中，生成一个含有固定组分、物性集的物流对象</p><p>那么现在就是要生成一个含有固定组分、物性集的物流对象，创建这个物流对象是很复杂且麻烦的，为了方便学习和理解这个过程，我们对这个步骤进行简化</p><p>首先，当我们选择了物性集列表之后，我们需要创建一个ATL对象来存储组分、用的什么状态方程等这些信息，CAPE-OPEN标准（ <code>PropertyPackageManager.h</code> ）里是通过下列代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">STDMETHOD</span>(GetPropertyPackage)(BSTR PackageName, LPDISPATCH *Package)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ((!PackageName)||(!Package)) <span class="keyword">return</span> E_POINTER;</span><br><span class="line">    CComObject&lt;CPropertyPackage&gt; *p;</span><br><span class="line">    CComObject&lt;CPropertyPackage&gt;::<span class="built_in">CreateInstance</span>(&amp;p);</span><br><span class="line">    p-&gt;name=PackageName;</span><br><span class="line">    p-&gt;<span class="built_in">QueryInterface</span>(IID_IDispatch,(LPVOID*)Package);</span><br><span class="line"><span class="keyword">return</span> NOERROR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到CAPE-OPEN是通过 <code>CComObject</code> 函数来创建ATL对象的，<code>CPropertyPackage</code> 对应的就是我们之前创建的ATL对象（物流对象） <code>MaterialObject</code> 中的 <code>CMaterialObject</code> ，这样我们创建的这个 <code>*p</code> 就是一个物流对象的实例</p><p>那么是怎么返回到物流对象中的呢，我们创建的这个物流对象实际上是一个ATL对象，它是通过 <code>IID_IDispatch</code> 这个接口继承的，自然就可以将要返回的物流对象（ATL对象）转换成一个 <code>IDispatch</code> 对象</p><p>这样有什么作用呢，就是通过 <code>*Package</code> 这个指针记录我们物流对象中所赋值的内容，也就是 <code>p-&gt;name=PackageName;</code> 语句中写的，以达到返回这些数据的目的</p><p>最后 <code>return NOERROR;</code> 返回返回成功的状态码，那么我们现在来写我们自己的实例：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401201356056.png"></p><blockquote><p>实际上我们的组分列表在获取的时候并不是直接获取组分名称，组分在创建的时候就会创建唯一的key值，我们调用组分是通过这个key值进行的，这里为了示例，直接使用111、222来代替H2O和CO2</p><p>同样，下方的SRK与这部分代码大同小异：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CComObject&lt;CMaterialObject&gt;* p;</span><br><span class="line">CComObject&lt;CMaterialObject&gt;::<span class="built_in">CreateInstance</span>(&amp;p);</span><br><span class="line">p-&gt;myEos = <span class="string">&quot;SRK&quot;</span>;</span><br><span class="line">p-&gt;myCompounds.<span class="built_in">push_back</span>(<span class="string">&quot;333&quot;</span>);</span><br><span class="line">p-&gt;myCompounds.<span class="built_in">push_back</span>(<span class="string">&quot;444&quot;</span>);</span><br><span class="line">p-&gt;myCompounds.<span class="built_in">push_back</span>(<span class="string">&quot;555&quot;</span>);</span><br><span class="line">p-&gt;<span class="built_in">QueryInterface</span>(IID_IDispatch, (LPVOID*)GetPropertyPackage);</span><br><span class="line"><span class="keyword">return</span> S_OK;</span><br></pre></td></tr></table></figure></blockquote><p>同时为了让我们的物性包管理者访问到物流对象模板，需要通过头文件进行引用：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401201358437.png"></p><p>在 <code>MaterialObject.h</code> 文件中添加对应的头文件和类：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401201405940.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401201401912.png"></p><p>编译一下，好，没问题，用COFE测试一下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401201413407.png"></p><p>OK，COFE成功连接到了我们的物性包</p><h2 id="实现接口中的函数"><a href="#实现接口中的函数" class="headerlink" title="实现接口中的函数"></a>实现接口中的函数</h2><p>我们回到之前的CAPE标准接口图：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401152104645.png"></p><p>举个例子， <code>ICapeThermoPropertyRoutine</code> 接口的 <code>CalcSinglePhaseProp()</code> 函数，函数名直译过来就是计算单相工具，也就是一个单相态计算函数</p><p>那么什么是单相态计算呢，例如密度计算，就是液态或气态单相去计算的</p><p>现在来做一个示例，填充一下 <code>ICapeThermoCompounds</code> 接口的 <code>GetCompoundList()</code> 函数，在 <code>MaterialObject.h</code> 文件中找到该接口的该函数：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401201925778.png"></p><p>可以看到该函数有很多参数，我们不一一详细写了，只是做个示例，去怎么补充这些接口里的函数</p><p>实际上我们应该都清楚，获取组分列表以及相关参数已经是需要调用数据库了，但我们这里也是为了学习和理解方便，直接在代码里写上相应的数据：</p><p>先引入头文件：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401202102661.png"></p><p>再补充函数逻辑：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401202102136.png"></p><p>再返回组分数：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401202103416.png"></p><p>编译一下，没啥问题，OK</p><p>实际上现在我们的软件还只是可以访问到物性包列表，还是访问不到我们创建的两个组分的，因为补充的函数太少了，实际上可以看到空白的函数是非常多的，目前只是做一个示例，尤其是 <code>ICapeThermoPropertyRoutine</code> 这个接口还导入失败了，后面再继续进行深入学习</p><h2 id="实现物性计算"><a href="#实现物性计算" class="headerlink" title="实现物性计算"></a>实现物性计算</h2><p>在上文中，我们添加了一个 <code>ICapeThermoPropertyRoutine</code> 接口，但是因为报错的原因暂时注释掉了，没有使用，现在暂时没办法解决，但是不妨碍我们演示如何进行单相物性计算</p><p>我们先取消这个接口的函数注释：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401210915155.png"></p><p>在前文中我们讲过，单元模块执行计算，是通过单元模块中输入的参数，如温度、压力等，然后将这些参数传给物流对象，物流对象再去调用热力学部分进行计算</p><p>那么我们首先来实现单元模块如何告诉物流对象你要进行什么计算：</p><p>在 <code>MaterialObject.h</code> 文件中，先创建两个全局变量存放温度、压力：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401210949727.png" alt="image-20240121094938685"></p><p>在 <code>CalcTwoPhaseProp</code> 函数中写入密度的计算公式：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401210951229.png"></p><p>这里的温度，压力是通过 <code>ICapeThermoMaterial</code> 接口的 <code>SetOverallProp</code> 函数来设置的：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401210952117.png"></p><p>这样，就简单完成了一个指定温度、压力的密度计算，但是这里的密度公式是需要自己去写相对应的算法的</p><blockquote><p>密度计算肯定缺不了组分，但是这里为了简化，没有设置组分，所以运行起来肯定是不对的</p></blockquote><h2 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h2><p>现在看来，从0开发一个物性包是非常非常困难的，在这个过程中会遇到各种各样的问题，开发环境的问题、标准老旧问题、接口失效问题等等等等，而且并不是说我们开发一个物性包只实现某一个单一的物性计算，而是需要我们将所有的，一个完成的物性计算系统全部补充进去才可以去用其他软件调用来验证这个物性包是否可以使用</p><p>庞大、复杂、交织</p><p>所以我们只是示例去使用或者开发这个标准提供的一些东西，而并不是直接真正的开发一个物性包，这是非常非常复杂的事情，我一个人的精力根本就不可能完成~</p>]]></content>
      
      
      <categories>
          
          <category> 化工流程模拟开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CAPE-OPEN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>热力学物性包开发入门1</title>
      <link href="/posts/bf5bbaba/"/>
      <url>/posts/bf5bbaba/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401151941322.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>别的不说了，纯粹是因为热爱，偶然间知道了CAPE-OPEN标准，同时喜欢化工和编程，自然就沉迷化工流程模拟开发了，在这里记录一下自己的学习过程。</p><p>CAPE-OPEN是基于COM组件来的，在C++中ATL，Active Template Library活动（动态）模板库，是一种微软程序库，支持利用C++语言编写ASP代码以及其它ActiveX程序。通过活动模板库，可以建立COM组件，然后通过ASP页面中的脚本对COM对象进行调用。这种COM组件可以包含属性页、对话框等控件。</p><h2 id="热力学物性包是什么"><a href="#热力学物性包是什么" class="headerlink" title="热力学物性包是什么"></a>热力学物性包是什么</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401151945176.png"></p><p>上图是Aspen、HYSYS、PROII等流程模拟软件的简单计算过程图，接下来逐步分解它的一个计算过程和构成。</p><p>首先一个最简单的工艺流程应该包含三个元素：一个进口物流，一个单元模块，一个出口物流，我们称进出口物料这个对象为界面流股，单元模块就是单元模块，包括混合器、换热器、塔器、泵等。</p><p>整个计算过程主要有下面三个步骤：</p><ul><li>进口流股闪蒸：主要参数有组成、温度、压力</li><li>单元模块根据进料计算，计算完毕之后设置出口流股</li><li>出口流股闪蒸：主要参数有组成、温度、压力</li></ul><p>在每一步计算的过程中，是离不开状态方程的，也就是我们说的热力学部分，实际上我们在模拟的时候输入的参数，比如组分、温度、压力这些并不是直接就赋予到状态方程中去计算了，单元模块也不是直接会调用热力学部分进行计算，而是引入了一个中间层：物流对象。</p><p>为什么需要中间层呢？在实际计算过程中，整个流程可能根据分区&#x2F;工段的不同，而采用的物性方法不同，所以需要不同的物流对象来访问不同的热力学部分（物性集）。</p><p>每个流股或单元模块都会产生一个物流对象，这个物流对象中存储着对应的物性集。</p><p>界面流股也会储存一部分参数，比如组成、温度、压力，但实际上大部分参数例如密度、焓等都会储存在物流对象中，这并不冲突。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401151947155.png"></p><p>上图是在我们新建一个模拟文件时，物性包是如何被访问和调用的。</p><p>在创建一个流程或者工段的时候，软件首先会访问物性包管理者（PropertyPackageManager），物性包管理者有一个物性包（FluidPackage&#x2F;PropertyPackage）的列表，比如NRTL、SRK、UNIFAC等；</p><p>我们选择了一个需要的物性包之后，软件会将这个物性包加载到物流对象模板中，从而产生出指定了物性包的物流对象；</p><p>这个时候我们的流程就可以去调用一个个物流对象进行计算，需要注意的是，该过程在一个流程&#x2F;工段的模拟过程中只会进行一次，也就是创建流程的时候才会进行一次（添加组分，更改物性包都算新建流程的概念，因为会更新物流对象）。</p><p>在正常的模拟计算过程中，计算流程是如下图这样的：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401151947403.png"></p><p>工艺流程和物流对象首先进行交互，向物流对象发送初始参数，例如流量、组分、温度、压力等，这个时候物流对象就有了属性，有哪些组分、具有哪个状态方程、允许的相态是什么，物流对象是不具有计算功能的，只是一个参数的存储和中转站；</p><p>物流对象紧接着将所有参数交给热力学部分，通过热力学部分中的相平衡&#x2F;闪蒸模块、焓计算、密度计算等等，去按照要求计算所需要的值，计算完毕之后再返回给物流对象，物流对象存储之后再反馈给界面流股，也就是工艺流程中的计算结果。</p><p>在整个过程中热力学部分是固定的，在创建过程中是一次性创建好的，但是物流对象是随着工艺流程&#x2F;工段中流股或单元模块的改变而改变的。</p><p>现在来回答标题的问题，热力学物性包是什么？它是一个含有一个流程&#x2F;工段中所有组分，以及所设定的状态方程，固定的，不随流程而改变的数据集。</p><h2 id="物性包的导出及使用"><a href="#物性包的导出及使用" class="headerlink" title="物性包的导出及使用"></a>物性包的导出及使用</h2><blockquote><p>以Aspen V11和COFE V3.7为例</p></blockquote><p>需要提前说明的是Aspen对CAPE-OPEN的物性包支持度或者说是兼容度是很差的，甚至在高版本的软件中已经取消了物性包的导入功能（我反正是没找到）</p><p>虽然说Aspen目前（V11版本）来看是支持导出的，但是其物性包在其他软件中并不好用，本文只是做一个示例，其他严格执行CAPE-OPEN标准的软件如COFE、DWSIM等还是很好的</p><blockquote><p>如果是针对Aspen来进行物性包开发的话，Aspen官方提供了一套叫做User Model的接口，可以通过软件的帮助文件学习一下，但是如果是针对跨平台开发，或者定制开发，建议还是使用CAPE-OPEN标准</p></blockquote><p>虽然但是，Aspen对CAPE开发的单元模块是支持或兼容度很高的，在这里可以引用其他软件开发的单元模块：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401152015571.png"></p><p>那么物性包的导入导出有什么意义呢？比如我们使用Aspen导出一个含有组分、状态方程的一个物性包，使用COFE软件导入那么意味着在COFE软件中构建的流程里，我们使用的单元模块是COFE软件的，但是计算过程中的热力学方法使用的是我们Aspen中的；</p><p>或者在不同的软件里使用同一个CAPE开发的单元模块，这样可以达到对某些流程的高度自定义，可以更接近真实流程，可以输入更多的修正值，让模拟计算结果更加准确。</p><p>Aspen的物性包导出：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401152022966.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401152023420.png"></p><blockquote><p>注：在第一个分节热力学物性包是什么里我们已经讲了，所以导出物性包时请务必已经选择好了组分和状态方程</p></blockquote><p>可以看到，Aspen导出的物性包其实就是一个 <code>*.cota</code> 文件，同时会默认放在这个路径里，这是约定俗成的，其他的软件读取的时候也会直接在该路径下去找该文件</p><p>对于COFE，导入我们刚才导出的物性包如下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401152027836.png"></p><p>这样就可以在COFE里使用Aspen的状态方程和组分物性数据了</p><blockquote><p>但是实际上会出问题的，因为我们已经说了，Aspen对CAPE的兼容是很差的，推荐使用其他软件来使用，本文这里仅作示例</p></blockquote><h2 id="物性包的开发"><a href="#物性包的开发" class="headerlink" title="物性包的开发"></a>物性包的开发</h2><p>前文我们已经了解过了，物性包实际上就是ATL项目，也就是动态链接库，推荐使用VisualStudio来开发，当然用其他的IDE也行，不过配置环境是非常麻烦的</p><p>打开VS2022，选择创建新项目：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401152038866.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401152040246.png"></p><p>名字自定义，点击创建：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401152041169.png"></p><p>直接点确定，这样就创建好了一个ATL项目，可以看到部分源文件和头文件已经自动添加进来了：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401152043147.png"></p><p>创建好项目之后就要开始添加接口了，那么添加什么接口，怎么添加，这些CAPE标准里都有相对应的文档，可以通过这个链接去下载到CAPE-OPEN的所有文档：</p><p><a href="https://www.colan.org/version-1-1-of-the-cape-open-standards/">CAPE-OPEN官网</a> ：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401152054077.png"></p><p>解压之后可以得到所有的标准文档，本文是热力学物性包开发，对应的文档名称为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CO_Thermo_1.1_Specification_311.pdf</span><br></pre></td></tr></table></figure><p>打开文档，可以看到标准的调用时序图：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401152056482.png"></p><p>可以看到 <code>:PME</code> 为最高也就是初始一级，全称为Process Model Environment，意为流程建模环境，也就是我们的工艺流程部分，次级就是S1:Stream，也就是我们上文中的界面流股，再接下来到 <code>:PMEPropertySystem</code> 也就是中间层：物流对象，物流对象再去调用更深层次的计算。在整个过程中要实现热力学部分所用到的接口如下图所示：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401152104645.png"></p><p>可以看到第一个接口就是 <code>ICapeThermoPropertyPackageManager</code> ，这就是上文所说的物性管理者，他包含了两个接口，一个是获取物性包列表，一个是选择物性包，那么，我们第一个接口自然就是物性包管理者了。</p><p>接下来我们添加第一个接口：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401152044868.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401152046648.png"></p><p>名字自定义，点击添加：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401152046799.png"></p><p>这里默认即可，直接点击完成</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401152113764.png"></p><p>这样我们就添加了一个简单的接口，这里的报错不用管，是因为我们定义了接口，但没有使用，接下来直接编译一下，看看源文件是否齐全：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401152114503.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401152115262.png"></p><p>可以看到报了一个错误：error MSB8011: 未能注册输出。请尝试启用“逐用户重定向”</p><p>不要慌，我们需要手动开启逐用户重定向：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401152117433.png"></p><p>然后再重新生成一下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401152119172.png"></p><p>可以看到已经编译通过了，1已跳过不用担心，是因为我们创建接口但没有调用导致的</p><p>接下来就可以直接去写调用接口的部分了，但是我们自己手写是非常麻烦且繁琐的，CAPE-OPEN直接给了一个现成的模板，可以直接去使用，通过下列链接去下载示例：</p><p><a href="https://colan.repositoryhosting.com/trac/colan_examples/downloads">CAPE-OPEN示例：</a> </p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401152122848.png"></p><p>下载好直接直接对exe文件进行解压，解压后可以看到文件夹中有一个 <code>*.tlb</code> 文件，对于COM组件开发来讲，tlb文件就是规定了的接口，直接将该tlb文件复制到我们的项目根目录下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401152126788.png"></p><p>接下来我们就可以直接导入我们需要的接口：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401152131847.png"></p><p>在类视图中找到我们刚才添加的 <code>CFluidPackageManager</code> ，点击添加实现接口：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401152133259.png"></p><p>位置选择文件，选择刚才复制过来的标准文件，打开：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401152135714.png"></p><p>左侧就是CAPE-OPEN的所有接口，找到我们所需要的 <code>ICapeThermoPropertyPackageManager</code> ，点击导入</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401152137903.png"></p><p>可以看到已经导入进来了，重新编译一下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401152138555.png"></p><p>正常编译通过，可以看到导入了下面两个类：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401152141740.png"></p><p>到这里的话，流程模拟软件已经可以访问我们写的这个所谓的物性包了，尽管我们这个物性包里什么都没有，但是软件要真正的访问到我们写的这个物性包，还需要有一个敲门砖，也就是我们得告诉模拟软件，你可以访问我。</p><p>那么如何告诉模拟软件你可以访问我这个物性包呢，CAPE进行了规定，可以在自己的模块中写入固定的UUID，写入这个ID之后，其他软件就可以通过注册表来找到这个物性包，我们不需要去理解为什么是这个ID，这是CAPE-OPEN规定好的，例如：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401152152879.png"></p><p>在项目目录资源文件中可以看到，有我们创建的 <code>*.rgs</code> 文件，这就是注册表文件：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401152154615.png"></p><p>那么这个文件中的内容怎么写，CAPE-OPEN也提供了标注的模板，可以在我们刚才下载的示例里找到：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401152156742.png"></p><p>首先这部分：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;Implemented Categories&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">678</span>C09A1<span class="number">-7</span>D66<span class="number">-11</span>D2-A67D<span class="number">-00105</span>A42887F&#125;</span><br><span class="line">&#123;CF51E383<span class="number">-0110</span><span class="number">-4</span>ed8-ACB7-B50CFDE6908E&#125;</span><br><span class="line">&#125;</span><br><span class="line">CapeDescription </span><br><span class="line">&#123; </span><br><span class="line">    val Name =  s <span class="string">&#x27;CPP Ideal Property Package Manager&#x27;</span></span><br><span class="line">val Description = s <span class="string">&#x27;CO-LaN Example Ideal Thermo Property Package Manager CPP implementation&#x27;</span></span><br><span class="line">val CapeVersion = s <span class="string">&#x27;1.1&#x27;</span></span><br><span class="line">val ComponentVersion = s <span class="string">&#x27;1.0.0.0&#x27;</span></span><br><span class="line">val VendorURL = s <span class="string">&#x27;http://www.colan.org/&#x27;</span></span><br><span class="line">val About = s <span class="string">&#x27;CPP Ideal Property Package Manager - Copyright 2011 CO-LaN&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写入的位置如下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401152202513.png"></p><p><code>&#39;Implemented Categories&#39;</code> 部分就是我们该模块的ID，是固定的，不能修改的</p><p><code>CapeDescription</code> 部分的内容是可以自己定义的，这部分是对模块的描述部分</p><p>更改完之后重新编译，需要注意的是，这里编译之后就会将我们解决方案生成的dll文件<strong>直接注册到注册表</strong>里，以方便流程模拟软件去调用。</p><h2 id="物性包的调用"><a href="#物性包的调用" class="headerlink" title="物性包的调用"></a>物性包的调用</h2><p>经过上述的注册之后，现在我们这个一穷二白的物性包已经可以被其他软件访问到了，比如使用COFE来尝试调用一下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401152213484.png"></p><p>可以看到，COFE已经成功找到了我们的物性包，并且描述也展示到了，看到 <code>Written By laugh</code> 成就感满满的！</p><p>同样DWSIM也可以调用到我们的物性包！：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401152218665.png"></p><p>PROII也可以调用到，这里就不多赘述了</p><p>虽然说我们的物性包里现在啥都没有，但这已经是一个非常好的开头了，接下来我们就学习如何给我们一穷二白的物性包里添加东西。</p>]]></content>
      
      
      <categories>
          
          <category> 化工流程模拟开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CAPE-OPEN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++学习笔记之二</title>
      <link href="/posts/a55fac5e/"/>
      <url>/posts/a55fac5e/</url>
      
        <content type="html"><![CDATA[<h2 id="存储类"><a href="#存储类" class="headerlink" title="存储类"></a>存储类</h2><p>存储类定义C++程序中变量&#x2F;函数的范围（可见性）和生命周期。这些说明符放置在它们所修饰的类型之前。</p><h3 id="static存储类"><a href="#static存储类" class="headerlink" title="static存储类"></a>static存储类</h3><p><code>static</code> 存储类指示编译器在程序的生命周期内保持局部变量的存在，而不需要在每次它进入和离开作用域时进行创建和销毁。因此，使用 <code>static</code> 修饰局部变量可以在函数调用之间保持局部变量的值。</p><p><code>static</code> 修饰符也可以应用于全局变量。当 <code>static</code> 修饰全局变量时，会使变量的作用域限制在声明它的文件内。</p><p>在C++中，当 <code>static</code> 用在类数据成员上时，会导致仅有一个该成员的副本被类的所有对象共享。</p><p>举个例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">void</span>)</span></span>;    <span class="comment">// 函数声明 </span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> count = <span class="number">10</span>;    <span class="comment">// 全局变量</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(count--) &#123;</span><br><span class="line">        <span class="built_in">func</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;    <span class="comment">// 函数定义</span></span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> i = <span class="number">5</span>;    <span class="comment">// 局部静态变量</span></span><br><span class="line">    i++;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;变量 i 为 &quot;</span> &lt;&lt; i ;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot; , 变量 count 为 &quot;</span> &lt;&lt; count &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401092053522.png"></p><p>那么假如我们去掉 <code>static</code> 修饰符呢：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">void</span>)</span></span>;    <span class="comment">// 函数声明 </span></span><br><span class="line"><span class="type">int</span> count = <span class="number">10</span>;    <span class="comment">// 全局变量</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(count--) &#123;</span><br><span class="line">        <span class="built_in">func</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;    <span class="comment">// 函数定义</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">5</span>;    <span class="comment">// 局部静态变量</span></span><br><span class="line">    i++;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;变量 i 为 &quot;</span> &lt;&lt; i ;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot; , 变量 count 为 &quot;</span> &lt;&lt; count &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401092055886.png"></p><p>只有全局变量还在正常运行，但局部静态变量的值每一轮下来都只会＋1，第二轮的时候还是会恢复到初始值</p><h3 id="extern存储类"><a href="#extern存储类" class="headerlink" title="extern存储类"></a>extern存储类</h3><p><code>extern</code> 存储类用于提供一个全局变量的引用，全局变量对所有的程序文件都是可见的。当您使用 <code>extern</code> 时，对于无法初始化的变量，会把变量名指向一个之前定义过的存储位置。</p><p>当有多个文件且定义了一个可以在其他文件中使用的全局变量或函数时，可以在其他文件中使用 <code>extern</code> 来得到已定义的变量或函数的引用。可以这么理解，<code>extern</code> 是用来在另一个文件中声明一个全局变量或函数。</p><p><code>extern</code> 修饰符通常用于当有两个或多个文件共享相同的全局变量或函数的时候，例如：</p><p><strong>main.cpp：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;./test/support.cpp&quot;</span></span></span><br><span class="line"><span class="type">int</span> count;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="type">void</span> <span class="title">write_extern</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    count = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">write_extern</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>support.cpp：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> count;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_extern</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Count is &quot;</span> &lt;&lt; count &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401092109779.png"></p><p>在main.cpp文件中通过 <code>extern</code> 关键字引入了support.cpp文件中的 <code>write_extern()</code> 函数</p><p>在support.cpp文件通过 <code>extern</code> 关键字引入了main.cpp文件中的 <code>count</code> 变量</p><h3 id="thread-local存储类"><a href="#thread-local存储类" class="headerlink" title="thread_local存储类"></a>thread_local存储类</h3><p>使用 <code>thread_local</code> 说明符声明的变量仅可在它在其上创建的线程上访问。 变量在创建线程时创建，并在销毁线程时销毁。 每个线程都有其自己的变量副本。</p><p><code>thread_local</code> 说明符可以与 <code>static</code> 或 <code>extern</code> 合并。</p><p>可以将 <code>thread_local</code> 仅应用于数据声明和定义，<code>thread_local</code> 不能用于函数声明或定义。</p><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">thread_local</span> <span class="type">int</span> x;  <span class="comment">// 命名空间下的全局变量</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">X</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="keyword">thread_local</span> std::string s; <span class="comment">// 类的static成员变量</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">static</span> <span class="keyword">thread_local</span> std::string X::s;  <span class="comment">// X::s 是需要定义的</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">thread_local</span> std::vector&lt;<span class="type">int</span>&gt; v;  <span class="comment">// 本地变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p>加 <code>+</code>  、减 <code>-</code>  、乘 <code>*</code>  、除 <code>/</code>  就不说了，取模运算符 <code>%</code> 是取除法后的余数，自增 <code>++</code> 和自减 <code>--</code> 指整数值+1或者-1，示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">21</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> c;</span><br><span class="line">    c = a + b;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Line 1 - c 的值是 &quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">    c = a - b;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Line 2 - c 的值是 &quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">    c = a * b;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Line 3 - c 的值是 &quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">    c = a / b;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Line 4 - c 的值是 &quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">    c = a % b;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Line 5 - c 的值是 &quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">    <span class="type">int</span> d = <span class="number">10</span>;    <span class="comment">// 测试自增、自减</span></span><br><span class="line">    c = d++;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Line 6 - c 的值是 &quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">    d = <span class="number">10</span>;    <span class="comment">// 重新赋值</span></span><br><span class="line">    c = d--;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Line 7 - c 的值是 &quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401101937824.png"></p><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><ul><li><code>==</code> 两数值相等为真</li><li><code>!=</code> 两数值不相等为真</li><li><code>&gt;</code> 左大于右为真</li><li><code>&lt;</code> 左小于右为真</li><li><code>&gt;=</code> 左大于等于右为真</li><li><code>&lt;=</code> 左小于等于右为真</li></ul><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">21</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> c ;</span><br><span class="line">    <span class="keyword">if</span>(a == b) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Line 1 - a 等于 b&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Line 1 - a 不等于 b&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; b) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Line 2 - a 小于 b&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Line 2 - a 不小于 b&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Line 3 - a 大于 b&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Line 3 - a 不大于 b&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 改变 a 和 b 的值</span></span><br><span class="line">    a = <span class="number">5</span>;</span><br><span class="line">    b = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">if</span> (a &lt;= b) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Line 4 - a 小于或等于 b&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (b &gt;= a) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Line 5 - b 大于或等于 a&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401101948536.png"></p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ul><li><code>&amp;&amp;</code> 逻辑运算： <strong>与</strong> 运算符</li><li><code>||</code> 逻辑运算： <strong>或</strong> 运算符</li><li><code>!</code> 逻辑运算： <strong>非</strong> 运算符</li></ul><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> c = <span class="number">15</span>;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; b &amp;&amp; a &lt; c) &#123;    <span class="comment">// 两个条件都为真</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Line 1 - 条件为真&quot;</span>&lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; b || a &gt; c) &#123;    <span class="comment">// 任意一个条件为真</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Line 2 - 条件为真&quot;</span>&lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Line 3 - 条件不为真&quot;</span>&lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( !(a &gt; b) ) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Line 4 - 条件为真&quot;</span>&lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401102003984.png"></p><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p>位运算符作用于位，并逐位执行操作，各个运算符的真值表如下：</p><table><thead><tr><th>p</th><th>q</th><th>p&amp;q</th><th>p|q</th><th>p^q</th><th>~p</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td></tr><tr><td>0</td><td>1</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>1</td><td>1</td><td>1</td><td>1</td><td>0</td><td>0</td></tr><tr><td>1</td><td>0</td><td>0</td><td>1</td><td>1</td><td>0</td></tr></tbody></table><p>假设A&#x3D;60，B&#x3D;13，现在以二进制格式表示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A = 0011 1100</span><br><span class="line">B = 0000 1101</span><br></pre></td></tr></table></figure><p><code>(A &amp; B)</code> 的值为 <code>0000 1100</code> ，即为12；</p><p><code>(A | B)</code> 的值为 <code>0011 1101</code> ，即为61；</p><p><code>(A ^ B)</code> 的值为 <code>0011 0001</code> ，即为49；</p><p><code>(~A)</code> 的值为 <code>1100 0011</code> ，即为-61，一个有符号二进制数的补码形式；</p><p>位移运算符：</p><ul><li><code>&lt;&lt;</code> 二进制左移运算，将一个运算对象的各二进制位全部左移若干位，左边的二进制位丢弃，右边补0，<code>A &lt;&lt; 2</code> 的值为 <code>1111 0000</code> ，即为240；</li><li><code>&gt;&gt;</code> 二进制右移运算符，将一个数的各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃，<code>A &gt;&gt; 2</code> 的值为 <code>0000 1111</code> ，即为15。</li></ul><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><table><thead><tr><th>符号</th><th>举例</th><th>等同于</th></tr></thead><tbody><tr><td><code>=</code></td><td>c &#x3D; 2或c &#x3D; a + b</td><td>把2赋值给c或把a+b的值赋给c</td></tr><tr><td><code>+=</code></td><td>c +&#x3D; a</td><td>c &#x3D; c + a</td></tr><tr><td><code>-=</code></td><td>c -&#x3D; a</td><td>c &#x3D; c -a</td></tr><tr><td><code>*=</code></td><td>c *&#x3D; a</td><td>c &#x3D; c * a</td></tr><tr><td><code>/=</code></td><td>c &#x2F;&#x3D; a</td><td>c &#x3D; c &#x2F; a</td></tr><tr><td><code>%=</code></td><td>c %&#x3D; a</td><td>c &#x3D; c % a</td></tr><tr><td><code>&lt;&lt;=</code></td><td>c &lt;&lt;&#x3D; 2</td><td>c &#x3D; c &lt;&lt; 2</td></tr><tr><td><code>&gt;&gt;=</code></td><td>c &gt;&gt;&#x3D; 2</td><td>c &#x3D; c &gt;&gt; 2</td></tr><tr><td><code>&amp;=</code></td><td>c &amp;&#x3D; 2</td><td>c &#x3D; c &amp; 2</td></tr><tr><td><code>^=</code></td><td>c ^&#x3D; 2</td><td>c &#x3D; c ^ 2</td></tr></tbody></table><p>还有一个，不过因为转义，打不出来，只能截图了：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401111901925.png"></p><h3 id="杂项运算符"><a href="#杂项运算符" class="headerlink" title="杂项运算符"></a>杂项运算符</h3><p><code>sizeof()</code> ：返回变量的大小，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Size of char : &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">char</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Size of int : &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">int</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Size of short int : &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">short</span> <span class="type">int</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Size of float : &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">float</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Size of double : &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">double</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Size of wchar_t : &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">wchar_t</span>) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401111903845.png"></p><p><code>Condition ? X : Y</code> ：如果 Condition 为真，则值为X，否则值为Y，等同于：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Condition) &#123;</span><br><span class="line">    var = X;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    var = Y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反过来，下面这段代码也可以简写：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (y &lt; <span class="number">10</span>) &#123; </span><br><span class="line">    var = <span class="number">30</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    var = <span class="number">40</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等同于：</span></span><br><span class="line">var = (y &lt; <span class="number">10</span>) ? <span class="number">30</span> : <span class="number">40</span>;</span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是，一般在实际开发中尽量避免使用三元运算符！</p></blockquote><h3 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符"></a>逗号运算符</h3><p>顾名思义，就是英文逗号，使用逗号运算符是为了把几个表达式放在一起，整个逗号表达式的值为系列中最后一个表达式的值，从本质上讲，逗号的作用是将一系列运算按顺序执行，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    j = <span class="number">10</span>;</span><br><span class="line">    i = (j++, j+<span class="number">100</span>, <span class="number">999</span>+j);    <span class="comment">// 示例逗号运算符</span></span><br><span class="line">    cout &lt;&lt; i;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401111958907.png"></p><h3 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h3><p><code>.</code> （点）运算符和 <code>-&gt;</code> （箭头）运算符用于引用类、结构和共用体的成员，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例结构体</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line"><span class="type">char</span> first_name[<span class="number">16</span>];</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">&#125; emp;</span><br><span class="line"><span class="comment">// 下面的代码把值 &quot;zara&quot; 赋给对象 emp 的 first_name 成员：</span></span><br><span class="line"><span class="built_in">strcpy</span>(emp.first_name, <span class="string">&quot;zara&quot;</span>);</span><br><span class="line"><span class="comment">// 如果 p_emp 是一个指针，指向类型为 Employee 的对象，则要把值 &quot;zara&quot; 赋给对象 emp 的 first_name 成员，需要编写如下代码：</span></span><br><span class="line"><span class="built_in">strcpy</span>(p_emp-&gt;first_name, <span class="string">&quot;zara&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="指针运算符"><a href="#指针运算符" class="headerlink" title="指针运算符"></a>指针运算符</h3><p><code>&amp;</code> 是一元运算符，返回操作数的内存地址。例如，如果 <code>var</code> 是一个整型变量，则 <code>&amp;var</code> 是它的地址。该运算符与其他一元运算符具有相同的优先级，在运算时它是从右向左顺序进行的。可以把 <code>&amp;</code> 运算符读作”取地址运算符”，这意味着，<code>&amp;var</code> 读作”var变量的地址”。</p><p>第二个运算符是间接寻址运算符 <code>*</code>，它是 <code>&amp;</code> 运算符的补充。<code>*</code> 是一元运算符，返回操作数所指定地址的变量的值。示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> var;</span><br><span class="line">    <span class="type">int</span> *ptr;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    var = <span class="number">3000</span>;</span><br><span class="line">    <span class="comment">// 获取 var 的地址</span></span><br><span class="line">    ptr = &amp;var;</span><br><span class="line">    <span class="comment">// 获取 ptr 的值</span></span><br><span class="line">    val = *ptr;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Value of var :&quot;</span> &lt;&lt; var &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Value of ptr :&quot;</span> &lt;&lt; ptr &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Value of val :&quot;</span> &lt;&lt; val &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401112001975.png"></p><h2 id="C-循环"><a href="#C-循环" class="headerlink" title="C++循环"></a>C++循环</h2><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>举例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">while</span> (a &lt; <span class="number">20</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;a 的值：&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">        a++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果条件为真，则执行循环中的语句，执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401131301946.png"></p><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>for循环的标准格式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (init; condition; increment) &#123;</span><br><span class="line">   <span class="built_in">statement</span>(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>init</code> 会首先被执行，且<strong>只会执行一次</strong>。这一步可以声明并初始化任何循环控制变量，也可以留空，只要有一个分号出现即可；</p><p>接下来，会判断 <code>condition</code>，如果为真，则执行循环主体；</p><p>在执行完for循环主体后，控制流会跳回上面的 <code>increment</code> 语句，该语句可以更新循环控制变量，可以留空，只要在条件后有一个分号出现即可；</p><p>条件再次被判断，如果为真，则执行循环，这个过程会不断重复（循环主体，然后增加步值（<code>increment</code> 语句），再然后重新判断条件），在条件变为假时，for 循环终止。示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> a = <span class="number">10</span>; a &lt; <span class="number">20</span>; a = a + <span class="number">1</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;a 的值：&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401131303219.png"></p><p>下面是一个范围循环的例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> my_array[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>&amp; x : my_array) &#123;    <span class="comment">// 或者int &amp;x : my_array</span></span><br><span class="line">        x *= <span class="number">2</span>;</span><br><span class="line">        cout &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401131305323.png"></p><p>可以看到，循环只遍历了整个数组每个元素后就结束了</p><blockquote><p>注：<code>&amp;</code>在这里不是取址符，是引用</p></blockquote><h3 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do while循环"></a>do while循环</h3><p>for和while循环是在循环开始前测试循环条件，而do while 循环是在循环的尾部检查它的条件，所以 do while循环会确保至少执行一次循环，语法如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="built_in">statement</span>(s);</span><br><span class="line">&#125; <span class="keyword">while</span> ( condition );</span><br></pre></td></tr></table></figure><p>举个栗子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;a 的值：&quot;</span> &lt;&lt; a &lt;&lt; std::endl;</span><br><span class="line">        a = a + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span> (a &lt; <span class="number">20</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401171842598.png"></p><h3 id="循环嵌套"><a href="#循环嵌套" class="headerlink" title="循环嵌套"></a>循环嵌套</h3><p>顾名思义，就是套娃，示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt; <span class="number">20</span>; i++) &#123;    <span class="comment">// 2-20的质数</span></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">2</span>; j &lt;= (i / j); j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!(i % j)) &#123;</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// 如果找到，则不是质数</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j &gt; (i / j)) &#123;</span><br><span class="line">            std::cout &lt;&lt; i &lt;&lt; <span class="string">&quot; 是质数&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401171844108.png"></p><h3 id="循环控制语句"><a href="#循环控制语句" class="headerlink" title="循环控制语句"></a>循环控制语句</h3><p><strong>break语句：</strong></p><p>break语句有以下两种用法：</p><ul><li>当break语句出现在一个循环内时，循环会立即终止，且程序流将继续执行紧接着循环的下一条语句；</li><li>可用于终止switch语句中的一个case</li></ul><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401252214742.png"></p><p>举例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;a 的值：&quot;</span> &lt;&lt; a &lt;&lt; std::endl;</span><br><span class="line">        a++;</span><br><span class="line">        <span class="keyword">if</span>(a &gt; <span class="number">15</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span>(a &lt; <span class="number">20</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401252217738.png"></p><blockquote><p>可以看到循环并没有循环到19，而是到15就结束了，因为执行到了break语句，至于为什么输出的a值最后是15而不是16，是因为a执行了a++之后就出发了break语句跳出了循环，所以循环内的打印a值的语句并没有执行，所以a最终的值是15</p></blockquote><p><strong>continue语句：</strong></p><p>continue会跳过当前循环中的代码，强迫开始下一次循环。对于for循环，continue语句会导致重新执行条件测试和循环增量部分。对于while和do while循环，continue语句会导致程序控制回到条件测试上</p><p>用法：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401252218287.png"></p><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a == <span class="number">15</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            a++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;a 的值：&quot;</span> &lt;&lt; a &lt;&lt; std::endl;</span><br><span class="line">        a++;</span><br><span class="line">    &#125; <span class="keyword">while</span>( a &lt; <span class="number">20</span> );</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401252219777.png"></p><blockquote><p>可以看到当a等于15时进入了if语句，执行a++之后遇到continue语句，此时a&#x3D;16，并直接执行了打印a的值，所以执行结果里没有a&#x3D;15</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Aspen导出物性数据至HRTI</title>
      <link href="/posts/d4320c07/"/>
      <url>/posts/d4320c07/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401061741849.png"></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><blockquote><p>Aspen版本：V11.0</p><p>HTRI版本：7.0</p><p>系统版本：Windows 11</p></blockquote><p>前情提要，在Aspen中，Heater模块和HeatX模块都可以模拟换热器，且这两种模块模拟的换热器都支持导出物性数据至HTRI中，但本人比较推荐使用HeatX模块</p><p>本文中不使用第三方工具，用的是Aspen官方自带的插件Customize</p><p>同时需要提醒的是 <code>*.edr</code> 文件HTRI是直接可以打开的哦</p><h2 id="模拟文件建立"><a href="#模拟文件建立" class="headerlink" title="模拟文件建立"></a>模拟文件建立</h2><p>回到正题，首先创建一个模拟文件，新建一个换热器，本文为了演示，同时创建两种换热器模块。如图所示：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401061751789.png"></p><p>案例中的两个换热器E101和E102都是将300 <code>kg/h</code> ，90 <code>℃</code> ，1.5 <code>bar</code> 的水进行冷却，降温到50摄氏度，压降为0.2 <code>bar</code> </p><blockquote><p>途中流股3的压力为笔误，实为1.5bar</p></blockquote><p>运行模拟，将案例文件保存为 <code>0106.bkp</code> ，保存位置为桌面上的一个<strong>英文路径</strong>文件夹中</p><h2 id="创建物性集"><a href="#创建物性集" class="headerlink" title="创建物性集"></a>创建物性集</h2><p>将需要导入到HTRI的物性种类创建为一个新的物性集，操作如下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401061758468.png"></p><p>点击确定</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401061759880.png"></p><p>输入需要导出的物性以及单位，需要注意的是，在设置某些物性的时候需要输入限定符。比如第二行的热导率K，输入限定符：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401061801092.png"></p><p>并不一定需要输入所有数据，Aspen需要什么输入什么，或者你想要什么就输入什么即可</p><blockquote><p>需要注意的是，创建物性集时请务必按照HTRI软件规定的需要的物性数据进行输入，否则后续导出时可能会报错找不到某物性</p><p>本案例为演示如何使用工具，故只输入该两个物性以作演示</p></blockquote><h2 id="创建冷热曲线"><a href="#创建冷热曲线" class="headerlink" title="创建冷热曲线"></a>创建冷热曲线</h2><p>创建冷热曲线是导出数据的必须选择，否则Customize插件会无法识别和导出该换热器</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401061805097.png"></p><p>对于Heater模块，没有冷热曲线的选择，但是对于HeatX模块来说，是可以分开进行设定的</p><p><strong>对于Heater模块：</strong></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401061808006.png"></p><p>点击确定：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401061808458.png"></p><p>将我们新建的物性集选中，移动到所选物性组中</p><p>对于设置界面中的选项，按照所需求的进行设置即可，本案例默认设置</p><p>对于HeatX模块，我们是模拟冷凝器，故应该设定热流股曲线，设置步骤同上</p><p>设置完成后，重置，运行，得到模拟结果，保存，关闭模拟</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401061812073.png"></p><h2 id="导出数据"><a href="#导出数据" class="headerlink" title="导出数据"></a>导出数据</h2><p>打开开始菜单 - Aspen Plus - Customize Aspen Plus V11</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401061814407.png"></p><p>打开了一个命令行界面，命令行如何操作这里不进行赘述，请自行百度</p><p><code>cd</code> 到我们刚才保存 <code>0106.bkp</code> 的目录下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401061816632.png"></p><p>执行 <code>htxint [文件名]</code> 命令，在本案例中就是：<code>htxint 0106.bkp</code> ：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401061818713.png"></p><p>再次输入文件名，但不需要带后缀扩展名</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401061819474.png"></p><p>输入要导出的目标软件，这里选择输入 <code>HTRI</code> </p><p>输入允许的最大曲线点，按照你HTRI的版本进行选择，这里选择输入 <code>30</code> </p><p>输入使用的单位制，按照个人喜好即可，这里选择输入 <code>SI</code> </p><p>接下来是输入要导出的文件名，可以进行自己定义，格式为 <code>*.dat</code> 即可，当然也可以不进行输入，直接回车，会以bkp文件的文件名默认输出，这里选择默认输出</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401061824477.png"></p><p>可以看到，插件已经成功识别到了我们bkp文件中的两个换热器，输入我们要选择导出的换热器模块名称，这里选择输入 <code>E101</code> </p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401061826727.png"></p><p>现在显示了该E101换热器下所有的热曲线，我们选择进行输入需要的曲线序号，这里选择了输入 <code>1</code> </p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401061828817.png"></p><p>接下来是让你选择是否对该曲线的数据进行预览，是输入 <code>Y</code> ，不进行预览输入 <code>N</code> 即可，这里是输入了 <code>Y</code> 对数据进行了预览</p><p>接下来是让你选择是否将该曲线输出到接口文件中，这里也输入 <code>Y</code> </p><p>选择了输出到接口文件中后，接下来是让你写一段70字符以内的对“问题”的描述，就是对该换热器的备注，这里本案例输入 <code>HeaterTest</code> </p><p>接下来是输入一行70字符以内的换热器的名称，这里本案例输入 <code>E101</code> </p><p>接下来是输入12个字符以内的热流股的名称，这里本案例输入 <code>WATER</code> </p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401061839891.png"></p><blockquote><p>如果某个换热器中同时具有冷&#x2F;热曲线，这里输入完成后还会选择继续导出另一曲线，但本案例中只有一个热曲线，故到这里已经输入完毕了</p></blockquote><p>可以看到这个时候已经导出完毕了，下方的选项是提醒你是否继续其他换热器的输出，这里选择 <code>N</code> 之后程序就会结束了</p><p>同时需要注意的是，这里程序对你进行了提醒，你导出的数据中，缺少这么多相对应的物性数据，故在创建物性集的时候请务必完全包括HRTI软件所需要的物性数据</p><p>导出另一个HeatX模块E102的步骤一模一样，这里就不赘述了</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401061851825.png"></p><p>这是对于HeatX模块同时拥有冷热曲线的导出过程，仅供参考</p><p>导出数据完成之后可以看到在当前目录下已经生成了dat文件，该文件就直接可以使用HTRI软件进行打开了</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401061852430.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401061854506.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401061854011.png"></p><p>可以看到很多数据已经导出过来了，但很多关键数据都是缺失的，所以在创建物性集时是非常有必要导出完全的！这一点务必要注意！</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><blockquote><p>注意，up主本人今天也是才学会这种导出数据的办法，所以可能说的不是很详尽，请读者谅解，如有问题可以联系QQ1395404299进行讨论和互相学习</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 化工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Aspen </tag>
            
            <tag> HTRI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clion输出中文乱码问题</title>
      <link href="/posts/2de750a5/"/>
      <url>/posts/2de750a5/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401032043385.png"></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>请注意，这是在Windows平台遇到的问题，其他平台可能解决方法不一样</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202401032030394.png"></p><p>如图所示，Clion在输出中文字符时乱码，是因为文件编码的问题</p><p>打开设置-文件编码：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202401032031327.png"></p><p>更改为GBK之后点击应用</p><p>会提示进行编码转换，进行转换即可</p><p>回到主窗口，按下快捷键 <code>shift+ctrl+alt+/</code> ，选择第一个注册表：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202401032033665.png"></p><p>取消该值的勾选，重启IDE即可正常显示中文：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202401032024854.png"></p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Clion </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++学习笔记之一</title>
      <link href="/posts/9edf82f7/"/>
      <url>/posts/9edf82f7/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本来是准备一直更新Go语言笔记的了，但是突然发现CAPE-OPEN好像只能用C++语言来写（官方说也可以用VB，但是我觉得吧，VB就算了）</p><p>因为CAPE-OPEN应该是要进行COM组件的注册以及操作的，故C++较为适宜，当然Java也是可以的，但是不推荐，理论上支持<strong>COM组件</strong>以及可以编译为<strong>动态链接库</strong>的语言都是可以的</p><p>所以又得继续拾起C++了，so，开始学习吧骚年，加油！</p><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>    <span class="comment">// 引入标准库</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;    <span class="comment">// 程序开始</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Hello World!&quot;</span> &lt;&lt; std::endl;    <span class="comment">// 输出HelloWorld！字符串并换行</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;    <span class="comment">// main函数结束，调用进程返回值0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><p>现在我们通过解析上述的例子来学习一下C++程序的语法</p><p>首先第一行 <code>#include &lt;iostream&gt;</code> 是引入C++的标准库 <code>iostream</code> ，以用来可以输入&#x2F;出信息，从库名字也可以看出来，<code>I/O</code> 和 <code>stream</code> 就是输入&#x2F;出信息流嘛；如果要引入一些本地库或第三方库，可以通过使用 <code>#include &quot;[path]&quot;</code> 格式，其中 <code>path</code> 就是头文件&#x2F;库所在的路径。</p><p>第二行 <code>int main() &#123; &#125;</code> 是主函数，程序从这里开始执行，<code>int</code> 是函数类型，<code>main()</code> 是函数名称和传入参数，函数内容放在大括号中。</p><p>第三行 <code>std::cout &lt;&lt; &quot;Hello World!&quot; &lt;&lt; std::endl;</code> 是在屏幕中输出信息，其中 <code>std::</code> 这是个名称空间标示符，是用来声明使用的是标准库中的函数&#x2F;对象，以防止出现同名的函数&#x2F;对象产生冲突；</p><p><code>&lt;&lt;</code> 符号在cpp中既可以用来执行位运算，又可以做输入&#x2F;出流，<code>&lt;&lt;</code> 和 <code>cout</code> 一起使用就是输出，<code>cin</code> 和 <code>&gt;&gt;</code> 一起使用就是输入；</p><p>双引号表示字符串就不用说了，后面的 <code>endl</code> 是换行符，这里进行了简略缩写，实际上可以写成如下所示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">std::cout &lt;&lt; <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; std::endl;</span><br><span class="line"><span class="comment">// 或者：</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Hello World!&quot;</span>; std::cout &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><p>在这里可以看到，C++并不是以行末为语句的结束的，而是以 <code>;</code> 分号为准的。</p><p>第四行 <code>return 0;</code> 一般用作表示程序的结束，实际上这个语句根据函数类型的不同而不同，而且 <code>return 0;</code> 在不同的情境下可能含义也是不同的，这个之后再进行深究。</p><blockquote><p>C++标准库（C++ Standard Library），是类库和函数的集合，其使用核心语言写成，由C++标准委员会制定，并不断维护更新。C++强大的功能来源于其丰富的类库及库函数资源。在C++开发中，要尽可能地利用标准库完成，这样可以降低成本，提高编程效率，保证程序质量，又能保持编程风格一致性。C++标准库又分为标准函数库和面向对象类库。</p><p><strong>标准函数库包括：</strong>输入&#x2F;输出IO、字符串和字符处理、数学、时间、日期和本地化、动态分配、其他、宽字符函数。</p><p><strong>面向对象类库包括：</strong>标准的C++ IO类、String类、数值类、STL容器类、STL算法、STL函数对象、STL迭代器、STL分配器、本地化库、异常处理类、杂项支持库。</p></blockquote><p>哦对，别忘了注释格式哦：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是单行注释，以行末为结束</span></span><br><span class="line"><span class="comment">/* 这是</span></span><br><span class="line"><span class="comment">   多行</span></span><br><span class="line"><span class="comment">   注释</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="声明命名空间"><a href="#声明命名空间" class="headerlink" title="声明命名空间"></a>声明命名空间</h2><p>在上述例子中，可以看到大量且频繁的使用 <code>std::</code> 命名空间标示符，是比较繁琐的，实际上有一种简单的声明方式可以解决：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; <span class="comment">// 声明命名空间</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Hello World!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过命名空间的声明，可以默认该程序内部使用的都是该库下的函数&#x2F;对象；也可以只声明需要使用的部分：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout; <span class="comment">// 声明命名空间</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Hello World!&quot;</span> &lt;&lt; std::endl;  </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，命名空间是可以自定义的，格式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册命名空间</span></span><br><span class="line"><span class="keyword">namespace</span> [namespaceName] &#123;</span><br><span class="line">   <span class="comment">// 声明内容</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用该命名空间，类似于 std::cout</span></span><br><span class="line">[namespaceName]::&lt;code&gt;;  <span class="comment">// &lt;code&gt; 可以是变量或函数</span></span><br></pre></td></tr></table></figure><p>举个例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> first_space &#123; <span class="comment">// 注册第一个命名空间</span></span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">funcTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      std::cout &lt;&lt; <span class="string">&quot;Inside first_space&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> second_space &#123; <span class="comment">// 注册第二个命名空间</span></span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">funcTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      std::cout &lt;&lt; <span class="string">&quot;Inside second_space&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">   first_space::<span class="built_in">funcTest</span>(); <span class="comment">// 调用第一个命名空间中的函数</span></span><br><span class="line">   second_space::<span class="built_in">funcTest</span>(); <span class="comment">// 调用第二个命名空间中的函数</span></span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202312311621338.png"></p><p>可以看到，调用指定命名空间中的函数需要在函数前增加命名空间标示符，这样即使出现同名函数，也不会互相冲突，所以在实际开发过程中，是非常推荐使用命名空间标示符的，再举个例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> first_space &#123; <span class="comment">// 注册第一个命名空间</span></span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">funcTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      std::cout &lt;&lt; <span class="string">&quot;Inside first_space&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> second_space&#123; <span class="comment">// 第二个命名空间</span></span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">funcTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      std::cout &lt;&lt; <span class="string">&quot;Inside second_space&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> first_space; <span class="comment">// 使用第一个命名空间</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="built_in">funcTest</span>(); <span class="comment">// 调用第一个命名空间中的函数</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202312311622173.png"></p><p>可以看到，在主函数 <code>main()</code> 前面进行了命名空间的声明，所以主函数中的同名函数 <code>funcTest()</code> 执行输出的结果是第一个命名空间中的函数，<strong>当然C++程序执行时有严格的顺序要求，如果将命名空间的注册语句或者使用语句放在main函数后，那么就会报错</strong>，例如：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202312311622354.png"></p><blockquote><p>请严格记住，C++程序的执行顺序必然是从上到下，所以主函数 <code>main()</code> 中的其他函数、变量、方法、对象等必须在主函数前进行注册或声明。</p><p>同样，函数中的语句也是要严格遵守这一点的。</p></blockquote><h2 id="变量与常量"><a href="#变量与常量" class="headerlink" title="变量与常量"></a>变量与常量</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>C++七大基本类型：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202312311624436.png"></p><p>其中的 <code>wchar_t</code> 其实是利用了 <code>typedef</code> 声明，使用方法如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> &lt;type&gt; &lt;newname&gt; <span class="comment">// 标准格式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例：</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">short</span> <span class="type">int</span> <span class="type">wchar_t</span>;</span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> feet; <span class="comment">// 将int类型定义为feet</span></span><br><span class="line">feet test; <span class="comment">// 使用刚才定义的feet来声明一个变量test</span></span><br></pre></td></tr></table></figure><p>一些基本类型可以使用一个或多个类型修饰符进行修饰：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">signed</span> <span class="type">unsigned</span> <span class="type">short</span> <span class="type">long</span></span><br></pre></td></tr></table></figure><blockquote><p>默认情况下，int、short、long都是带符号的，即signed</p></blockquote><p>具体的占用空间大小和长度就不赘述了，下面这个例子可以直接体现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;type: \t\t&quot;</span> &lt;&lt; <span class="string">&quot;************size**************&quot;</span>&lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;bool: \t\t&quot;</span> &lt;&lt; <span class="string">&quot;所占字节数：&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">bool</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t最大值：&quot;</span> &lt;&lt; (numeric_limits&lt;<span class="type">bool</span>&gt;::max)();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t最小值：&quot;</span> &lt;&lt; (numeric_limits&lt;<span class="type">bool</span>&gt;::min)() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;char: \t\t&quot;</span> &lt;&lt; <span class="string">&quot;所占字节数：&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">char</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t最大值：&quot;</span> &lt;&lt; (numeric_limits&lt;<span class="type">char</span>&gt;::max)();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t最小值：&quot;</span> &lt;&lt; (numeric_limits&lt;<span class="type">char</span>&gt;::min)() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;signed char: \t&quot;</span> &lt;&lt; <span class="string">&quot;所占字节数：&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">signed</span> <span class="type">char</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t最大值：&quot;</span> &lt;&lt; (numeric_limits&lt;<span class="type">signed</span> <span class="type">char</span>&gt;::max)();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t最小值：&quot;</span> &lt;&lt; (numeric_limits&lt;<span class="type">signed</span> <span class="type">char</span>&gt;::min)() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;unsigned char: \t&quot;</span> &lt;&lt; <span class="string">&quot;所占字节数：&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">unsigned</span> <span class="type">char</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t最大值：&quot;</span> &lt;&lt; (numeric_limits&lt;<span class="type">unsigned</span> <span class="type">char</span>&gt;::max)();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t最小值：&quot;</span> &lt;&lt; (numeric_limits&lt;<span class="type">unsigned</span> <span class="type">char</span>&gt;::min)() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;wchar_t: \t&quot;</span> &lt;&lt; <span class="string">&quot;所占字节数：&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">wchar_t</span>);</span><br><span class="line">    <span class="comment">//cout &lt;&lt; &quot;\t最大值：&quot; &lt;&lt; (numeric_limits&lt;wchar_t&gt;::max)();</span></span><br><span class="line">    <span class="comment">//cout &lt;&lt; &quot;\t\t最小值：&quot; &lt;&lt; (numeric_limits&lt;wchar_t&gt;::min)() &lt;&lt; endl;</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;short: \t\t&quot;</span> &lt;&lt; <span class="string">&quot;所占字节数：&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">short</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t最大值：&quot;</span> &lt;&lt; (numeric_limits&lt;<span class="type">short</span>&gt;::max)();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t最小值：&quot;</span> &lt;&lt; (numeric_limits&lt;<span class="type">short</span>&gt;::min)() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;int: \t\t&quot;</span> &lt;&lt; <span class="string">&quot;所占字节数：&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t最大值：&quot;</span> &lt;&lt; (numeric_limits&lt;<span class="type">int</span>&gt;::max)();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t最小值：&quot;</span> &lt;&lt; (numeric_limits&lt;<span class="type">int</span>&gt;::min)() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;unsigned: \t&quot;</span> &lt;&lt; <span class="string">&quot;所占字节数：&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">unsigned</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t最大值：&quot;</span> &lt;&lt; (numeric_limits&lt;<span class="type">unsigned</span>&gt;::max)();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t最小值：&quot;</span> &lt;&lt; (numeric_limits&lt;<span class="type">unsigned</span>&gt;::min)() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;long: \t\t&quot;</span> &lt;&lt; <span class="string">&quot;所占字节数：&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">long</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t最大值：&quot;</span> &lt;&lt; (numeric_limits&lt;<span class="type">long</span>&gt;::max)();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t最小值：&quot;</span> &lt;&lt; (numeric_limits&lt;<span class="type">long</span>&gt;::min)() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;unsigned long: \t&quot;</span> &lt;&lt; <span class="string">&quot;所占字节数：&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">unsigned</span> <span class="type">long</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t最大值：&quot;</span> &lt;&lt; (numeric_limits&lt;<span class="type">unsigned</span> <span class="type">long</span>&gt;::max)();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t最小值：&quot;</span> &lt;&lt; (numeric_limits&lt;<span class="type">unsigned</span> <span class="type">long</span>&gt;::min)() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;double: \t&quot;</span> &lt;&lt; <span class="string">&quot;所占字节数：&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">double</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t最大值：&quot;</span> &lt;&lt; (numeric_limits&lt;<span class="type">double</span>&gt;::max)();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t最小值：&quot;</span> &lt;&lt; (numeric_limits&lt;<span class="type">double</span>&gt;::min)() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;long double: \t&quot;</span> &lt;&lt; <span class="string">&quot;所占字节数：&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">long</span> <span class="type">double</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t最大值：&quot;</span> &lt;&lt; (numeric_limits&lt;<span class="type">long</span> <span class="type">double</span>&gt;::max)();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t最小值：&quot;</span> &lt;&lt; (numeric_limits&lt;<span class="type">long</span> <span class="type">double</span>&gt;::min)() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;float: \t\t&quot;</span> &lt;&lt; <span class="string">&quot;所占字节数：&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">float</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t最大值：&quot;</span> &lt;&lt; (numeric_limits&lt;<span class="type">float</span>&gt;::max)();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t最小值：&quot;</span> &lt;&lt; (numeric_limits&lt;<span class="type">float</span>&gt;::min)() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;size_t: \t&quot;</span> &lt;&lt; <span class="string">&quot;所占字节数：&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">size_t</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t最大值：&quot;</span> &lt;&lt; (numeric_limits&lt;<span class="type">size_t</span>&gt;::max)();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t最小值：&quot;</span> &lt;&lt; (numeric_limits&lt;<span class="type">size_t</span>&gt;::min)() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;string: \t&quot;</span> &lt;&lt; <span class="string">&quot;所占字节数：&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(string) &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; &quot;\t最大值：&quot; &lt;&lt; (numeric_limits&lt;string&gt;::max)();</span></span><br><span class="line">    <span class="comment">//cout &lt;&lt; &quot;\t最小值：&quot; &lt;&lt; (numeric_limits&lt;string&gt;::min)() &lt;&lt; endl;</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;type: \t\t&quot;</span> &lt;&lt; <span class="string">&quot;************size**************&quot;</span>&lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202401032024854.png"></p><p><strong>枚举类型：</strong> 是C++中的一种派生数据类型，它是由用户定义的若干枚举常量的集合。如果一个变量只有几种可能的值，可以定义为枚举（enumeration）类型。所谓”枚举”是指将变量的值一一列举出来，变量的值只能在列举出来的值的范围内。</p><p>用法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> 枚举名&#123;</span><br><span class="line">     标识符[=整型常数],</span><br><span class="line">     标识符[=整型常数],</span><br><span class="line">     标识符[=整型常数]</span><br><span class="line">&#125; 枚举变量;</span><br></pre></td></tr></table></figure><p>如果枚举没有初始化, 即省掉 <code>=整型常数</code> 时, 则从第一个标识符开始。</p><p>默认情况下，第一个名称的值为 0，第二个名称的值为 1，第三个名称的值为 2，以此类推</p><p>举个例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">color</span> &#123; red, green, blue &#125; c;</span><br><span class="line">c = blue;</span><br><span class="line"><span class="comment">// 本示例定义了一个颜色枚举，变量c的类型为color，以及c被赋值为&quot;blue&quot;</span></span><br></pre></td></tr></table></figure><p>在该示例中，<code>red</code> 的值为 <code>0</code> 、<code>green</code> 的值为 <code>1</code> 、<code>blue</code> 的值为 <code>2</code> </p><p>当然也可以给名称直接赋予值，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">color</span> &#123;</span><br><span class="line">red,</span><br><span class="line">green = <span class="number">6</span>,</span><br><span class="line">blue</span><br><span class="line">&#125; c;</span><br><span class="line">c = blue;</span><br></pre></td></tr></table></figure><p>此时，<code>red</code> 的值依然为 <code>0</code> ，但是 <code>green</code> 的值为 <code>6</code> ，同时 <code>blue</code> 的值自增1，为 <code>7</code> </p><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>C++中有四种类型转换：静态转换、动态转换、常量转换和重新解释转换。</p><p><strong>静态转换（Static Cast）：</strong></p><p>静态转换是将一种数据类型的值强制转换为另一种数据类型的值，通常用于比较类型相似的对象之间的转换，例如将 <code>int</code> 类型转换为 <code>float</code> 类型。静态转换不进行任何运行时类型检查，因此可能会导致运行时错误。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 静态将int类型转换为float类型</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">float</span> b = <span class="built_in">static_cast</span>&lt;<span class="type">float</span>&gt;(a);</span><br></pre></td></tr></table></figure><p><strong>动态转换（Dynamic Cast）：</strong></p><p>动态转换通常用于将一个基类指针或引用转换为派生类指针或引用。动态转换在运行时进行类型检查，如果不能进行转换则返回空指针或引发异常。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将基类指针转换为派生类指针</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> : <span class="keyword">public</span> Base &#123;&#125;;</span><br><span class="line">Base* ptr_base = <span class="keyword">new</span> Derived;</span><br><span class="line">Derived* ptr_derived = <span class="built_in">dynamic_cast</span>&lt;Derived*&gt;(ptr_base);</span><br></pre></td></tr></table></figure><blockquote><p>什么是指针后续再讲，这里先不做具体描述</p></blockquote><p><strong>常量转换（Const Cast）：</strong></p><p>常量转换用于将 <code>const</code> 类型的对象转换为 <code>非const</code> 类型的对象，且只能用于<strong>转换掉const属性，不能改变对象的类型</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常量转换，将const int转换为int</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>&amp; b = <span class="built_in">const_cast</span>&lt;<span class="type">int</span>&amp;&gt;(a);</span><br></pre></td></tr></table></figure><p><strong>重新解释转换（Reinterpret Cast）：</strong></p><p>重新解释转换将一个数据类型的值重新解释为另一个数据类型的值，通常用于在不同的数据类型之间进行转换。</p><p>重新解释转换不进行任何类型检查，因此可能会导致未定义的行为。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重新解释将int类型转换为float类型</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">float</span> b = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">float</span>&amp;&gt;(a);</span><br></pre></td></tr></table></figure><h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><p>变量其实只不过是程序可操作的存储区的名称，在C++中，有多种变量类型可用于存储不同种类的数据。</p><p>C++中每个变量都有指定的类型，类型决定了变量存储的大小和布局，该范围内的值都可以存储在内存中，运算符可应用于变量上。</p><p>变量的名称可以由字母、数字和下划线字符组成。它必须以字母或下划线开头，且大写字母和小写字母是不同的。</p><p>C++常见的变量类型有如下几种：</p><ul><li>整数类型：<code>int</code> <code>short</code> <code>long</code> <code>long long</code> ；用于表示整数、短整数、长整数、更长整数。</li><li>浮点类型：<code>float</code> <code>double</code> <code>long double</code> ；用于表示单精度、双精度、更高精度的浮点数。</li><li>字符类型：<code>char</code> <code>wchar_t</code> <code>char16_t</code> <code>char32_t</code> ；用于表示字符、宽字符、16位Unicode字符、32位Unicode字符。</li><li>布尔类型：<code>bool</code> ；用于表示布尔值，只能取true或false。</li><li>枚举类型：<code>enum</code> ；用于定义一组命名的整数常量。</li><li>指针类型：<code>type*</code> ，<code>type</code> 是其他的类型；用于表示指向类型为type的对象的指针。</li><li>数组类型：<code>type[]</code> 或 <code>type[size]</code> ；用于表示具有相同类型的元素组成的数组。</li><li>结构体类型：<code>struct</code> ；用于定义包含多个不同类型成员的结构。</li><li>类 类型：<code>class</code> ；用于定义具有属性和方法的自定义类型。</li><li>共用体类型：<code>union</code> ；用于定义一种特殊的数据类型，它可以在相同的内存位置存储不同的数据类型。</li></ul><blockquote><p>每种类型占用多少字节不赘述</p></blockquote><h3 id="变量定义与声明"><a href="#变量定义与声明" class="headerlink" title="变量定义与声明"></a>变量定义与声明</h3><p>举例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i, j, k;</span><br><span class="line"><span class="type">char</span> c, ch;</span><br><span class="line"><span class="type">float</span> f, salary;</span><br><span class="line"><span class="type">double</span> d;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> d = <span class="number">3</span>, f = <span class="number">5</span>;<span class="comment">// d和f的声明 </span></span><br><span class="line"><span class="type">int</span> d = <span class="number">3</span>, f = <span class="number">5</span>;<span class="comment">// 定义并初始化d和f</span></span><br><span class="line">byte z = <span class="number">22</span>;<span class="comment">// 定义并初始化z</span></span><br><span class="line"><span class="type">char</span> x = <span class="string">&#x27;x&#x27;</span>;<span class="comment">// 变量x 的值为 &#x27;x&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>关键字 <code>extern</code> 是用来引用在函数后面或另一个文件中的变量</p></blockquote><p>变量赋值举例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> a, b;    <span class="comment">// 变量声明</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> c;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">float</span> f;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b;    <span class="comment">// 变量定义</span></span><br><span class="line">    <span class="type">int</span> c;</span><br><span class="line">    <span class="type">float</span> f;    <span class="comment">// 实际初始化</span></span><br><span class="line">    a = <span class="number">10</span>;</span><br><span class="line">    b = <span class="number">20</span>;</span><br><span class="line">    c = a + b;</span><br><span class="line">    cout &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    f = <span class="number">70.0</span>/<span class="number">3.0</span>;</span><br><span class="line">    cout &lt;&lt; f &lt;&lt; endl ;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到在C++中，赋值是右值赋给左值，左值可以为变量，执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401091847153.png"></p><p>同样的，在函数声明时，提供一个函数名，而函数的实际定义则可以在任何地方进行，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">()</span></span>;    <span class="comment">// 函数声明</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="built_in">func</span>();    <span class="comment">// 函数调用</span></span><br><span class="line">    cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">()</span> </span>&#123;    <span class="comment">// 函数定义</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401091853745.png"></p><p>但是如果在main函数之前没有进行变量&#x2F;函数声明，而直接在main函数中进行调用的话，是调用不到的且编译会报错，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="built_in">func</span>();    <span class="comment">// 函数调用</span></span><br><span class="line">    cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">()</span> </span>&#123;    <span class="comment">// 函数定义</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401091853654.png"></p><p>但是可以把函数定义放在函数调用之前即可：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">()</span> </span>&#123;    <span class="comment">// 函数定义</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="built_in">func</span>();    <span class="comment">// 函数调用</span></span><br><span class="line">    cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以成功调用了，变量也是同理，在实际开发过程中，我们推荐在main函数前先给函数&#x2F;变量声明，再在main函数之后进行定义，会使代码更加工整。</p><h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><p>一般来说有三个地方可以定义变量：</p><ul><li>在函数或一个代码块内部声明的变量，称为<strong>局部变量</strong>；</li><li>在函数参数的定义中声明的变量，称为<strong>形式参数</strong>；</li><li>在所有函数外部声明的变量，称为<strong>全局变量</strong>。</li></ul><p>作用域是程序的一个区域，变量的作用域可以分为以下几种：</p><ul><li><strong>局部作用域：</strong>在函数内部声明的变量具有局部作用域，它们只能在函数内部访问。局部变量在函数每次被调用时被创建，在函数执行完后被销毁；</li><li><strong>全局作用域：</strong>在所有函数和代码块之外声明的变量具有全局作用域，它们可以被程序中的任何函数访问。全局变量在程序开始时被创建，在程序结束时被销毁；</li><li><strong>块作用域：</strong>在代码块内部声明的变量具有块作用域，它们只能在代码块内部访问。块作用域变量在代码块每次被执行时被创建，在代码块执行完后被销毁；</li><li><strong>类作用域：</strong>在类内部声明的变量具有类作用域，它们可以被类的所有成员函数访问。类作用域变量的生命周期与类的生命周期相同。</li></ul><blockquote><p>如果在内部作用域中声明的变量与外部作用域中的变量同名，则内部作用域中的变量将覆盖外部作用域中的变量</p></blockquote><p><strong>局部变量：</strong></p><p>在函数或一个代码块内部声明的变量，称为局部变量，只能被函数内部或者代码块内部的语句使用：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b;    <span class="comment">// 局部变量声明</span></span><br><span class="line"><span class="type">int</span> c;</span><br><span class="line">a = <span class="number">10</span>;    <span class="comment">// 实际初始化</span></span><br><span class="line">b = <span class="number">20</span>;</span><br><span class="line">c = a + b;</span><br><span class="line">cout &lt;&lt; c &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>全局变量：</strong></p><p>在所有函数外部定义的变量（通常是在程序的头部），称为全局变量，可以被任何函数访问，也就是说，全局变量一旦声明，在整个程序中都是可用的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> g;    <span class="comment">// 全局变量声明</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b;    <span class="comment">// 局部变量声明</span></span><br><span class="line">    a = <span class="number">10</span>;    <span class="comment">// 实际初始化</span></span><br><span class="line">    b = <span class="number">20</span>;</span><br><span class="line">    g = a + b;</span><br><span class="line">    cout &lt;&lt; g &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>局部变量和全局变量的名称可以相同，但是在函数内，<strong>局部变量</strong>的值会覆盖全局变量的值：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> g = <span class="number">20</span>;    <span class="comment">// 全局变量声明</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> g = <span class="number">10</span>;    <span class="comment">// 局部变量声明</span></span><br><span class="line">    cout &lt;&lt; g &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401091856068.png"></p><p><strong>初始化局部变量和全局变量：</strong></p><p>当局部变量被定义时，系统不会对其初始化，必须自行对其初始化。定义全局变量时，系统会自动初始化为下列值：</p><p><code>int</code> ：0；<code>char</code> ：’\0’；<code>float</code> ：0；<code>double</code> ：0；<code>pointer</code> ：NULL；</p><p>块作用域指的是在代码块内部声明的变量，例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;    <span class="comment">// 函数内局部变量，同时也是块作用域外部变量</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a = <span class="number">20</span>;    <span class="comment">// 块作用域变量</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;块变量: &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;外部变量: &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401091856206.png"></p><p><strong>类作用域：</strong></p><p>类作用域指的是在类内部声明的变量，例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> class_var;    <span class="comment">// 类作用域变量</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> MyClass::class_var = <span class="number">30</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;类变量: &quot;</span> &lt;&lt; MyClass::class_var &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401091856874.png"></p><blockquote><p>什么是类，后续再说</p></blockquote><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>常量是固定值，在程序执行期间不会改变。这些固定的值，又叫做字面量。常量可以是任何的基本数据类型，可分为整型数字、浮点数字、字符、字符串和布尔值。常量就像是常规的变量，只不过常量的值在定义后不能进行修改。</p><p>在C++中，有两种简单的定义常量的方式：</p><p><strong>使用#define预处理器：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> [identifier] [value]</span></span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LENGTH 10   </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WIDTH  5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NEWLINE <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> area;</span><br><span class="line">    area = LENGTH * WIDTH;</span><br><span class="line">    cout &lt;&lt; area;</span><br><span class="line">    cout &lt;&lt; NEWLINE;</span><br><span class="line">    cout &lt;&lt; area;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401091933313.png"></p><p><code>\n</code> 被执行了</p><p><strong>使用const关键字：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> [type] [variable] = [value];</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span>  LENGTH = <span class="number">10</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span>  WIDTH  = <span class="number">5</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> NEWLINE = <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="type">int</span> area;</span><br><span class="line">    area = LENGTH * WIDTH;</span><br><span class="line">    cout &lt;&lt; area;</span><br><span class="line">    cout &lt;&lt; NEWLINE;</span><br><span class="line">    cout &lt;&lt; area;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果同上，这里需要注意的是，使用 <code>const</code> 关键字并不是一定需要放在函数内部，它可以和 <code>#define</code> 一样作为全局变量来使用</p><blockquote><p>一般来说，在开发过程中把常量定义为全大写字母形式</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++构建简单HttpServer服务器</title>
      <link href="/posts/a19c06b7/"/>
      <url>/posts/a19c06b7/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>无聊刷B站的时候，偶尔之间看到了bcbooo大佬的视频，在做国产的类Aspen模拟软件视频，然后深深的陷入了其中，无法自拔。</p><p>然后自己也想学习一下，大佬推荐后端使用C++语言写，刚好自己有点C语言的基础，稍微折腾了一下，先实现一个简单的HttpServer，毕竟要想学会解方程，不得从1+1&#x3D;2开始学习（不是）。</p><blockquote><p>在此特别感谢我一个朋友对我的帮助，李某某。</p></blockquote><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>首先，C++构建HttpServer可以使用不同的第三方库去实现，比如我之前找资料的时候了解到的Poco库（这个库因为对小白不友好，折腾了好几天不会编译，还是放弃了）。</p><p>我们使用C++官方的httplib库来实现，引入第三方库就不赘述了，其中我还踩坑了，可以在这里看到：<a href="https://imbhj.com/posts/36728089/">Clion引入第三方库</a> ；</p><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><p>话不多说，直接上代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引用标准库</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;format&gt;</span></span></span><br><span class="line"><span class="comment">//引入第三方 httplib 库</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;./httplib/httplib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//注册一个 httpserver</span></span><br><span class="line">    httplib::Server svr;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//注册一个测试 api</span></span><br><span class="line">    svr.<span class="built_in">Get</span>(<span class="string">&quot;/test&quot;</span>, [](<span class="type">const</span> httplib::Request&amp; req, httplib::Response&amp; res) &#123;</span><br><span class="line">        <span class="comment">//取出 token 的值</span></span><br><span class="line">        <span class="keyword">auto</span> token&#123; req.<span class="built_in">get_header_value</span>(<span class="string">&quot;token&quot;</span>) &#125;;</span><br><span class="line">        <span class="comment">//打印 token 的值</span></span><br><span class="line">        std::cout &lt;&lt; token &lt;&lt; std::endl;</span><br><span class="line">        <span class="comment">//testAPI 访问成功时，返回前端 msg信息</span></span><br><span class="line">        res.<span class="built_in">set_content</span>(<span class="string">R&quot;-(&#123;&quot;message&quot;:&quot;Hello World!&quot;&#125;)-&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//当访问 test 的请求头中带有 token 参数，在后端打印 OPTIONS ACCESS 以及 token 的值</span></span><br><span class="line">    svr.<span class="built_in">Options</span>(<span class="string">&quot;/test&quot;</span>, [](<span class="type">const</span> httplib::Request&amp; req, httplib::Response&amp; res) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;OPTIONS ACCESS&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        res.status = <span class="number">200</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//注册一个停止服务器的api</span></span><br><span class="line">    svr.<span class="built_in">Get</span>(<span class="string">&quot;/stop&quot;</span>, [&amp;](<span class="type">const</span> httplib::Request&amp; req, httplib::Response&amp; res) &#123;</span><br><span class="line">        svr.<span class="built_in">stop</span>();</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="comment">//监听 localHost 的 1234 端口</span></span><br><span class="line">    svr.<span class="built_in">listen</span>(<span class="string">&quot;0.0.0.0&quot;</span>, <span class="number">1234</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>CMakeLists</code> 编写：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#cmake 版本</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.26</span>)</span><br><span class="line"><span class="comment">#项目名称</span></span><br><span class="line"><span class="keyword">project</span>(blogCppTest)</span><br><span class="line"><span class="comment">#编译版本</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">23</span>)</span><br><span class="line"><span class="comment">#引入第三方库</span></span><br><span class="line"><span class="keyword">add_subdirectory</span>(httplib)</span><br><span class="line"><span class="comment">#编译文件</span></span><br><span class="line"><span class="keyword">add_executable</span>(blogCppTest main.cpp)</span><br><span class="line"><span class="comment">#编译库链接</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(blogCppTest httplib)</span><br></pre></td></tr></table></figure><p>好的，现在我们的测试api就已经完成了，编译，运行，访问 <code>http://127.0.0.1:1234/test</code> ：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202312102050924.png"></p><p>访问 <code>http://127.0.0.1:1234/stop</code> 服务器就会停机。</p><p>但是我们发现后端并没有打印出我们想要的信息：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202312102051832.png"></p><p>这是因为我们并没有传给后端信息，接下来就写一下前端代码。</p><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p>话不多说，直接上代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    调用服务器的请求接口</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;javascript:testCpp();&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;测试服务器状态&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">testCpp</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>: <span class="string">&#x27;http://127.0.0.1:1234/test&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">headers</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&#x27;token&#x27;</span>: <span class="string">&#x27;Client Link Success&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务器已启动&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>记得引用jQuery库哦~</p></blockquote><p>接下来编译执行刚才的cpp，同时用浏览器打开该html文件，点击测试服务器状态按钮：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202312102100991.png"></p><p>报错了，原来是遇到跨域请求的问题了，什么是跨域请求问题，请自行百度；</p><p>在cpp文件中加入如下代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//解决跨域请求的问题，通过CORS声明HTTP头信息</span></span><br><span class="line">svr.<span class="built_in">set_default_headers</span>(&#123;</span><br><span class="line">    &#123; <span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="string">&quot;POST, GET, PUT, OPTIONS, DELETE&quot;</span>&#125;,</span><br><span class="line">    &#123; <span class="string">&quot;Access-Control-Max-Age&quot;</span>, <span class="string">&quot;3600&quot;</span>&#125;,</span><br><span class="line">    &#123; <span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;*&quot;</span>&#125;,</span><br><span class="line">    &#123; <span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json;charset=utf-8&quot;</span>&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>需要注意的是，由于C++代码执行顺序的问题，需要将该段代码写在api后面，也就是下图代码的下方：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202312102105385.png"></p><p>然后重新编译，运行：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202312102107901.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202312102108294.png"></p><p>已经访问成功了！！！</p><h2 id="1-1-2"><a href="#1-1-2" class="headerlink" title="1+1&#x3D;2"></a>1+1&#x3D;2</h2><p>接下来我们实现一个1+1等于2吧</p><p>直接上代码，后端：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">calc</span><span class="params">(<span class="type">const</span> httplib::Request&amp; req, httplib::Response&amp; res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 获取请求中的参数 num1 和 num2</span></span><br><span class="line">    <span class="keyword">if</span> (req.<span class="built_in">has_param</span>(<span class="string">&quot;num1&quot;</span>) &amp;&amp; req.<span class="built_in">has_param</span>(<span class="string">&quot;num2&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 获取到数值</span></span><br><span class="line">        std::string num1 = req.<span class="built_in">get_param_value</span>(<span class="string">&quot;num1&quot;</span>);</span><br><span class="line">        std::string num2 = req.<span class="built_in">get_param_value</span>(<span class="string">&quot;num2&quot;</span>);</span><br><span class="line">        <span class="comment">// 转换字符型数值为整型，并进行计算</span></span><br><span class="line">        std::string result = std::<span class="built_in">to_string</span>(std::<span class="built_in">stoi</span>(num1) + std::<span class="built_in">stoi</span>(num2));</span><br><span class="line">        <span class="comment">// 后端打印两个数值</span></span><br><span class="line">        std::cout &lt;&lt; std::format(<span class="string">&quot;num1: &#123;&#125;, num2: &#123;&#125;&quot;</span>, num1, num2) &lt;&lt; std::endl;</span><br><span class="line">        <span class="comment">// 返回数值给前端</span></span><br><span class="line">        res.<span class="built_in">set_content</span>(result, <span class="string">&quot;text/plain&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// 处理请求的逻辑结束</span></span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="built_in">set_content</span>(<span class="string">&quot;num1 or num2 not found&quot;</span>, <span class="string">&quot;text/plain&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在cpp中添加该函数，注意要在main函数前面哦；</p><p>在main函数中添加下面这个api：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svr.<span class="built_in">Post</span>(<span class="string">&quot;/calc&quot;</span>, calc);</span><br></pre></td></tr></table></figure><p>再来写个前端：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;javascript:calc_use_request_ajax();&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">name</span>=<span class="string">&quot;myForm_use_request&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;num1&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter first number&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;num2&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter second number&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Reset&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;result_from_request&quot;</span>&gt;</span>The result will be displayed here.<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">calc_use_request_ajax</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>: <span class="string">&quot;http://127.0.0.1:1234/calc&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">num1</span>: <span class="variable language_">document</span>.<span class="property">forms</span>[<span class="string">&quot;myForm_use_request&quot;</span>][<span class="string">&quot;num1&quot;</span>].<span class="property">value</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">num2</span>: <span class="variable language_">document</span>.<span class="property">forms</span>[<span class="string">&quot;myForm_use_request&quot;</span>][<span class="string">&quot;num2&quot;</span>].<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">response</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;result_from_request&quot;</span>).<span class="property">innerHTML</span> = response;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;simpleAdd success&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">error</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>让我们运行起来吧：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202312102209474.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202312102209535.png"></p><p>现在你已经学会了1+1&#x3D;2了，那么请开发一个大型的工业计算APP吧（不是）~</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>如果服务器配置语句写在另一个cpp文件中，主main.cpp文件中只是调用服务器的函数的话，主main.cpp的 <code>#include</code> 必须包含 <code>httplib.h</code> 引用，如图所示：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401091924902.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401091925042.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN5/202401091925978.png"></p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言学习笔记之一</title>
      <link href="/posts/a1ac7eb6/"/>
      <url>/posts/a1ac7eb6/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本来是打算学习C++的，用来开发web服务器后端，但是在学习过程中，发现对于新手有点难，内存管理什么的，巴拉巴拉，然后目标盯上了Rust语言，正准备学习的时候，群友推荐我尝试尝试Go语言，在尝试了Go之后确实被吸引了，打算了解了解，在此记录一下自己的学习之路。</p><h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><p>任何语言的第一个程序都应该是hello world（应该）；</p><p>Go语言的hello world如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line">    <span class="comment">// fmt.Printf(&quot;Hello World!\n&quot;)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行代码后的输出结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202312111817115.png"></p><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><p>接下来对这段代码进行一个剖析；</p><p>首先第一行 <code>package main</code> ，Go程序是通过包也就是package来组织的，这段代码说明当前的go文件是属于哪个包，在这个例子中包名为 <code>main</code> ，也就意味着这是一个独立的包，在执行编译之后会生成一个可执行文件；</p><p>如果要在该主程序中引入其他的go文件，也就是其他的包，那么只有该 <code>main</code> 主包会生成可执行文件，其他的引入的go文件编译之后只会产生 <code>*.a</code> 文件（也就是包文件）；</p><blockquote><p>需要注意的是，每个Go程序必须包含一个 <code>main</code> 主包<strong>（有且只有一个）</strong>，在这个主包内，且必须含有一个 <code>main</code> 主函数<strong>（有且只有一个）</strong>入口，该主函数无参数，无返回值。</p></blockquote><p>第二行 <code>import &quot;fmt&quot;</code> ，和其他编译类语言一样，对于C++或者C语言来说，需要 <code>#include &lt;libName&gt;</code> ，对于Go程序来说，也是需要引入“库”（Go语言中叫“包”），很多的标准函数都是可以通过引入标准包（也就是系统包）来进行调用的。示例这个程序需要进行打印信息，需要调用 <code>Println()</code> 函数，所以需要引入系统包 <code>fmt</code> 。</p><p>第三行 <code>func main() &#123; &#125;</code> ，这一行是通过<strong>关键字</strong> <code>func</code> 定义了一个 <code>main()</code> 函数，函数体（也就是函数的具体内容）被放在了 <code>&#123; &#125;</code> 大括号中。</p><p>第四行 <code>fmt.Println(&quot;Hello World!&quot;)</code> ，调用了 <code>fmt</code> 包中定义的函数 <code>Println()</code> ，需要输出的内容被引号包裹；对于第五行的代码，它和本行的代码时相似的，<code>Println()</code> 函数代替了 <code>Printf(&quot;\n&quot;)</code> 可以直接在信息被打印之后进行自动换行，不需要手动去敲换行符，这两个函数可以根据需要去选择调用。</p><blockquote><p>可以看到，Go程序的函数调用，是通过 <code>&lt;packageName&gt;.&lt;functionName&gt;</code> 的方式进行调用的，类似于C++语言中的 <code>namespace</code> 命名空间，在某些情况下可以不声明package名的，但是推荐进行声明，避免函数同名冲突。</p></blockquote><p>第五行，在Go程序内部的单行注释，是以 <code>//</code>开头的，多行注释的结构是 <code>/*  */</code> 这样的。同时可以看到，输出的内容里面包含了很多非 ASCII 码字符，Go程序是天生支持UTF-8的，任何字符都可以直接输出，甚至可以用UTF-8中的任何字符作为标识符。</p><p>需要非常注意的是，在Go语言中<strong>一行代表一个语句的结束</strong>，并不需要类似于 <code>;</code> 这样的分号来分行，Go语言编辑器会自动完成；当然也不是强制性的要求，可以将多行写在一起，用分号隔开：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(<span class="string">&quot;Hello!&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;World!&quot;</span>)</span><br><span class="line"><span class="comment">// 等同于：</span></span><br><span class="line">fmt.Println(<span class="string">&quot;Hello!&quot;</span>); fmt.Println(<span class="string">&quot;World!&quot;</span>)</span><br><span class="line"><span class="comment">//但实际开发中是非常不推荐多个语句写在一行中的</span></span><br></pre></td></tr></table></figure><p>所以在上述HelloWorld的例子中，<code>func main()</code> 是不能和 <code>&#123;</code> 在不同行中的，这必将会引起错误，示例如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 这是正确的写法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 这是错误的写法    </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>这一点非常要注意，一不小心就会写错！</strong></p></blockquote><p><strong>标识符</strong>用来命名变量、函数等程序实体，例如hello world例子中，<code>main</code> 和 <code>Println</code> 都是标识符。</p><p>一个标识符实际上就是一个或是多个字母 <code>A~Z</code> 和 <code>a~z</code> ，数字 <code>0~9</code> 以及下划线 <code>_</code> 组成的序列；</p><blockquote><p> 需要注意的是，<strong>第一个字符</strong>必须是字母或下划线，<strong>不能是数字</strong>！</p></blockquote><p>标识符的命名，非常推荐使用标准驼峰格式，例如 <code>aaaBbbCcc</code> ，不推荐使用大驼峰格式 <code>AaaBbbCcc</code> ，因为在Go语言中，与JavaScript中的 <code>export</code> 语法一样，如果变量名称以大写字母开头，则Go会导出变量，可以在外部被访问到，例如示例中 <code>fmt.Println()</code> 的 <code>Println</code> 就是 <code>fmt</code> 包中的函数，首字母就是大写的，可以通过引入包来让外部程序访问到该包内的函数&#x2F;变量等。</p><p>所有其他不以大写字母开头的变量对程序包来说都是私有的<br>Go语言中的保留关键字，也就是不能拿来作为变量&#x2F;函数的命名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">break  default  func  interface  select  case  defer  go  map  struct  chan  else  goto</span><br><span class="line">package  switch  const  fallthrough  if  var  range  type  continue  for  import  return</span><br></pre></td></tr></table></figure><p>同时还有部分预定义标识符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">append  bool  byte  cap  close  complex  complex64  complex128uint16  copy  false</span><br><span class="line">float32  float64  imag  int  int8  int16  uint32  int32  int64  iota  len  make  new  nil</span><br><span class="line">panic  uint64  print  println  real  recover  string  true  unit  uint8  uintptr</span><br></pre></td></tr></table></figure><p>对于字符串的简单拼接，可以直接使用 <code>+</code> 即可，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(<span class="string">&quot;Hello&quot;</span> + <span class="string">&quot;World!&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出：<br><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202312151413584.png"></p><p><strong>格式化字符串：</strong></p><ul><li><code>Sprintf()</code> 根据格式化参数生成格式化的字符串并返回该字符串。</li><li><code>Printf()</code> 根据格式化参数生成格式化的字符串并输出。</li></ul><p>举例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// %d 表示整型数字，%s 表示字符串</span></span><br><span class="line"><span class="keyword">var</span> stockcode = <span class="number">123</span></span><br><span class="line"><span class="keyword">var</span> enddate = <span class="string">&quot;2020-12-31&quot;</span></span><br><span class="line"><span class="keyword">var</span> url = <span class="string">&quot;Code = %d &amp; endDate = %s&quot;</span></span><br><span class="line"><span class="keyword">var</span> target_url = fmt.Sprintf(url, stockcode, enddate)</span><br><span class="line">fmt.Println(target_url)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202312311604784.png"></p><p><code>stockcode</code> 传入 <code>url</code> 中的 <code>%d</code> ，<code>enddate</code> 传入 <code>url</code> 中的 <code>%s</code> ，最后将新字符串赋值给 <code>target_url</code> ；在go程序中只能通过 <code>Sprintf()</code> 来格式化字符串，再举个例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> stockcode = <span class="number">123</span></span><br><span class="line">    <span class="keyword">var</span> enddate = <span class="string">&quot;2020-12-31&quot;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;Code = %d &amp; endDate = %s&quot;</span>, stockcode, enddate) <span class="comment">// 或者将本语句替换为下面这种写法</span></span><br><span class="line">    <span class="comment">// 也可以如下这种写法</span></span><br><span class="line">    <span class="comment">// var url=&quot;Code = %d &amp; endDate = %s&quot;</span></span><br><span class="line">    <span class="comment">// fmt.Printf(url,stockcode,enddate)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202312311606740.png"></p><p>这是 <code>Printf()</code> 的用法，且只能用 <code>Printf()</code> ，如果用 <code>Println()</code> 的话是如下的输出：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202312311607100.png"></p><p>可以看到字符串并没有被正确的加载。</p><h2 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h2><p>对于Go语言，定义变量使用的是常见的关键字 <code>var</code> ，但和C++不同的是，Go语言会将变量类型放在变量名后，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义了一个名字叫number，类型为int的变量</span></span><br><span class="line"><span class="keyword">var</span> number <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义了三个名字不同但类型为int的变量</span></span><br><span class="line"><span class="comment">// 注意逗号和空格的使用</span></span><br><span class="line"><span class="keyword">var</span> num1, num2, num3 <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个名字叫number，类型为int，初始值为1的变量</span></span><br><span class="line"><span class="keyword">var</span> number <span class="type">int</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义三个有初始值的相同类型变量</span></span><br><span class="line"><span class="comment">// 注意逗号和空格的使用</span></span><br><span class="line"><span class="keyword">var</span> num1, num2, num3 <span class="type">int</span> = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br></pre></td></tr></table></figure><p>当然，这是标准的变量定义和赋值方式，go语言里为了方便可以进行简化，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1, num2, num3 <span class="type">int</span> = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line"><span class="comment">// 可以简化为：</span></span><br><span class="line"><span class="keyword">var</span> num1, num2, num3 = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line"><span class="comment">// go语言中可以自动识别变量类型对变量进行声明，根据等号右边的表达式自动推导出等号左边变量的类型，完成变量定义和声明</span></span><br><span class="line"><span class="comment">// 可以继续简化为：</span></span><br><span class="line">num1, num2, num3 := <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br></pre></td></tr></table></figure><p>在最终的变量定义语句中，可以看到 <code>:=</code> 代替了 <code>var</code> 和 <code>int</code> 的作用，可以直接对变量进行定义，但是该种方法只能用在函数内部，在函数外部还是需要使用 <code>var</code> 关键字。<br>特殊的变量名：下划线 <code>_</code> ，当下划线作为一个变量名的时候，表示对其赋的值进行丢弃，相当于说是个垃圾场，但不可回收，举个例子，现在有一串数字 <code>1, 2, 3</code> 我只需要收到 <code>2</code> 和 <code>3</code> ，那么可以这样写：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_, num1, num2 = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br></pre></td></tr></table></figure><p><code>1</code> 的值赋给了下划线，表示被丢弃，<code>2</code> 的值赋给了 <code>num1</code> ，<code>3</code> 的值赋给了 <code>num2</code> 。<br>Go语言中的变量，就和喜欢的姑娘一样，请务必负责到底，如果你和她在一起了（定义了这个变量），却没有负责到底（使用这个变量），那么就会挨打（编译器会报错）！例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := <span class="number">1</span></span><br><span class="line"><span class="comment">// fmt.Println(x)</span></span><br><span class="line">fmt.Println(<span class="string">&quot;Hello!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202312151414818.png"></p><blockquote><p>注意，在上述例子中，我们为什么要多此一举去写一句 <code>fmt.Println(&quot;Hello!&quot;)</code> ，因为和变量一样，如果我们引用了 <code>fmt</code> 这个包，但是没有去使用这个包，编译器同样也会报错！</p></blockquote><h2 id="鸽子"><a href="#鸽子" class="headerlink" title="鸽子"></a>鸽子</h2><p>临时被安排了其他开发任务，要开始主攻 <code>C++/CAPE-OPEN</code> 方向了，Go语言的学习先暂告一段落~</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WSL安装Docker与密钥排错</title>
      <link href="/posts/e5f6a19a/"/>
      <url>/posts/e5f6a19a/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在学习go语言，在社区里看到一篇用docker部署go语言的帖子，很是有趣，便想着自己折腾一下试试，刚好win下面有WSL，可以很方便的部署与测试，但是过程中还是踩坑了不少，所以来记录一下。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><strong>（1）卸载老版本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure><blockquote><p>如果是首次安装，请忽略。</p></blockquote><p><strong>（2）更新apt包索引</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p><strong>（3）安装 apt 依赖包，用于通过HTTPS来获取仓库</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg-agent \</span><br><span class="line">    software-properties-common</span><br></pre></td></tr></table></figure><p><strong>（4）添加Docker的官方GPG密钥</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><h2 id="排错"><a href="#排错" class="headerlink" title="排错"></a>排错</h2><p>添加docker的GPG密钥之后，或者更新apt包索引，会出现一个警告：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202312101030686.png"></p><p>这个警告大概的意思是我们把软件包的秘钥保存到了 <code>/etc/apt/trusted.gpg</code> 这个老版本系统的文件里。</p><p>这里系统提示只是告诉你新版系统不能把秘钥放在 <code>/etc/apt/trusted.gpg</code> 里，但是没告诉我们新版系统的秘钥究竟要放在那里。</p><p>其实答案很简单，就在 <code>/etc/apt/trusted.gpg.d</code> 目录下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202312101032078.png"></p><p>在执行完第4步添加密钥之后，可以看到上述目录中出现了一个 <code>trusted.gpg</code> 文件，这就是我们添加的密钥。</p><p>可以通过 <code>sudo apt-key list</code> 来查看当前系统中的密钥：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202312101036704.png"></p><p>每个秘钥的第二行都有一串十六进制的编码，这个编码就是这个秘钥的 <code>id</code> 。</p><p>导出我们添加的docker的密钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-key <span class="built_in">export</span> 0EBFCD88 | gpg --dearmour -o /etc/apt/trusted.gpg.d/docker.gpg</span><br></pre></td></tr></table></figure><blockquote><p>1、使用root用户执行， <code>sudo</code> 命令权限是不够的。</p><p>2、导出时的秘钥只需要后8位的 <code>id</code> 即可，而且 <code>id</code> 之间没有空格。</p></blockquote><p>将秘钥导出后就可以把 <code>/etc/apt</code> 目录下 <code>trusted.gpg</code> 文件删除了。</p><h2 id="继续正文"><a href="#继续正文" class="headerlink" title="继续正文"></a>继续正文</h2><p><strong>（5）验证密钥</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-key fingerprint 0EBFCD88</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202312101040028.png"></p><p><strong>（6）设置稳定版仓库</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository \</span><br><span class="line">   <span class="string">&quot;deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/ \</span></span><br><span class="line"><span class="string">  <span class="subst">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">  stable&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202312101041694.png"></p><blockquote><p>设置完之后请更新apt包索引： <code>sudo apt-get update</code> 。</p></blockquote><p><strong>（7）安装最新版本的Docker Engine-Community</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><blockquote><p>要安装特定版本的 Docker Engine-Community，请在仓库中列出可用版本，然后选择一种安装。列出您的仓库中可用的版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ apt-cache madison docker-ce</span><br><span class="line"></span><br><span class="line">  docker-ce | 5:18.09.1~3-0~ubuntu-xenial | https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu  xenial/stable amd64 Packages</span><br><span class="line">  docker-ce | 5:18.09.0~3-0~ubuntu-xenial | https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu  xenial/stable amd64 Packages</span><br><span class="line">  docker-ce | 18.06.1~ce~3-0~ubuntu       | https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu  xenial/stable amd64 Packages</span><br><span class="line">  docker-ce | 18.06.0~ce~3-0~ubuntu       | https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu  xenial/stable amd64 Packages</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">$ sudo apt-get install docker-ce=&lt;VERSION_STRING&gt; docker-ce-cli=&lt;VERSION_STRING&gt; containerd.io</span><br></pre></td></tr></table></figure></blockquote><p><strong>（8）测试是否安装成功</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure><blockquote><p>请确保电脑联网，会自动下载该测试镜像。</p></blockquote><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202312101045217.png"></p><p><strong>（9）为普通用户增加权限</strong></p><p>docker默认普通用户是没有权限的，可以通过下列命令为普通用户增加docker运行的权限。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#添加你的用户进docker用户组</span></span><br><span class="line">sudo usermod -aG docker &lt;username&gt;</span><br><span class="line"><span class="comment">#更新docker用户组</span></span><br><span class="line">newgrp docker</span><br><span class="line"><span class="comment">#测试普通用户权限</span></span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WSL </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WSL更改安装位置</title>
      <link href="/posts/3471cb80/"/>
      <url>/posts/3471cb80/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202312091837233.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>WSL默认安装在C盘，工作时间长了，或者随着docker的使用会变得越来越大，系统盘不堪重负，所以百度了一下子怎么迁移，好像只能导出重载，记录一下过程。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><strong>（1）首先查看一下WSL的状态：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl <span class="literal">-l</span> <span class="literal">--all</span> <span class="literal">-v</span></span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202312091840480.png"></p><blockquote><p>确保你的WSL状态为关闭。</p></blockquote><p><strong>（2）导出分发版到非系统盘目录：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wsl <span class="literal">--export</span> &lt;WSLname&gt; &lt;path&gt;.tar</span><br><span class="line"><span class="comment"># wsl --export deepin d:\WSL\deepin.tar</span></span><br><span class="line"><span class="comment"># wsl --export Ubuntu d:\WSL\Ubuntu.tar</span></span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202312091844898.png"></p><blockquote><p>1、确保你要导出的位置有该目录，否则请提前新建好文件夹；</p><p>2、导出文件的扩展名，必须为 <code>tar</code> 格式。</p></blockquote><p><strong>（3）注销该分发版：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wsl <span class="literal">--unregister</span> &lt;WSLname&gt;</span><br><span class="line"><span class="comment"># wsl --unregister deepin</span></span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202312091848960.png"></p><p><strong>（4）重新导入分发版到指定目录：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wsl <span class="literal">--import</span> nameWSL [<span class="type">dirA</span>] [<span class="type">dirB</span>] <span class="literal">--version</span> <span class="number">2</span></span><br><span class="line"><span class="comment"># wsl --import deepin d:\WSL\deepin d:\WSL\deepin.tar --version 2</span></span><br><span class="line"><span class="comment"># wsl --import Ubuntu d:\WSL\Ubuntu d:\WSL\Ubuntu.tar --version 2</span></span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202312091854004.png"></p><blockquote><p>1、 <code>nameWSL</code> 为导入的WSL分发版名称；</p><p>2、 <code>dirA</code> 为要导入到的位置，也就是安装位置；</p><p>3、 <code>dieB</code> 为第2步中导出的 <code>tar</code> 文件的路径；</p><p>4、请确认好自己的WSL版本号；</p><p>5、请确认好自己的目标目录是否存在。</p></blockquote><p><strong>（5）恢复默认登录用户：</strong></p><p>WSL在重新导入后默认登录用户会更改为root，更改为默认用户名：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> [<span class="type">DistributionName</span>] config <span class="literal">--default-user</span> [<span class="type">Username</span>]</span><br><span class="line"><span class="comment"># deepin config --default-user laugh</span></span><br></pre></td></tr></table></figure><blockquote><p>此命令执行于power shell，并不是WSL。</p></blockquote><p>最后，删掉导出的 <code>tar</code> 文件即可，当然不删除也行，当个备份。</p><p>Docker相关的WSL也是一样的道理。</p><blockquote><ul><li>docker-desktop</li><li>docker-desktop-data</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clion如何引入cpp的第三方库</title>
      <link href="/posts/36728089/"/>
      <url>/posts/36728089/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202311202023140.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇中讲了<a href="https://imbhj.com/posts/c6105688/">VS2022如何引入第三方库</a>，结果用了两天感觉vs还是不太适合我，改用Clion之后发现确实牛逼，简直是打开了新世界大门</p><p>Clion的安装就不赘述了，直接开始正文（推荐使用英文版，中文版可能会碰到未知问题哦，但是我目前还是装了官方的中文插件，毕竟英语渣渣）</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>还是我们的老朋友Vcpkg，第一次打开的话如图，下一次打开会直接固定在左下角的快捷工具栏里</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202311202028339.png"></p><p>点击新建：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202311202030986.png"></p><p>默认下面的是勾选的，名称也没有（1）我这里是已经安装过了</p><blockquote><p>注：强烈建议不要更改默认路径</p></blockquote><p>点击确定之后就会自动安装，因为网络情况，时间可能会比较长，耐心等待</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202311202033803.png"></p><p>建议勾选这个自动更改vcpkg的json，当然可以自己选择</p><p>然后在右边的搜索框搜索需要的第三方库，如果勾选了，会显示添加到josn中，如果没有勾选，会显示安装，同样，安装的版本可以自由选择，例如：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202311202036202.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202311202036700.png"></p><blockquote><p> 我不清楚这是因为bug还是就是这样</p></blockquote><p>安装好后会提示添加进 <code>cmake</code> 或 <code>vcpkg.json</code> </p><p>建议先添加进json</p><p>然后会在项目文件中生成一个json文件</p><p>这样安装就完成了，如果需要引入到项目中，还需要更新一下 <code>  CMakeLists.txt</code> </p><p>在安装完成的时候会提示添加进cmakelist的代码，直接复制粘贴进去就好了</p><p>如果选择了添加进json，可以打开json文件，也可以看到这段提示的代码：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202311202044689.png"></p><p>复制粘贴进 <code>  CMakeLists.txt</code> ：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202311202044740.png"></p><p>注意删除掉不必要的换行符，然后将 <code>main</code> 替换为你这个项目名称，重新加载Cmake即可引用到</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202311202046386.png"></p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>VS2022安装第三方cpp库Poco</title>
      <link href="/posts/c6105688/"/>
      <url>/posts/c6105688/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202311162043520.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在研究研究怎么开发Bowser server版的AspenPlus，找了找资料（这里感谢一下B站大佬bcbooo），决定需要严格保密的后端核心算法用C++来写</p><p>可是苦于我这个小白搞不懂C++如何与前端传回来的数据交互，一番疯狂百度，了解到了C++有Poco这个第三方库可以实现</p><p>事实存在，开始实践</p><p>但是让我万万没想到的是只是引入一个第三方库就差点让我烧脑了</p><p>这篇记录一下我的踩坑过程</p><h2 id="VS2022准备"><a href="#VS2022准备" class="headerlink" title="VS2022准备"></a>VS2022准备</h2><p>官网下载官方的免费版即可</p><p>注意安装的时候必须安装以下组件：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202311162047736.png" alt="1"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202311162048595.png" alt="2"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202311162048182.png" alt="3"></p><p>安装完成即可</p><h2 id="Vcpkg-Poco安装"><a href="#Vcpkg-Poco安装" class="headerlink" title="Vcpkg&amp;Poco安装"></a>Vcpkg&amp;Poco安装</h2><p>Vcpkg 可以在 Windows、 Linux 和 MacOS 上管理 C 和 C++ 库</p><p>在C盘根目录下建立一个 <code>src</code> 目录，在该目录下打开power shell</p><p>执行：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/microsoft/vcpkg</span><br><span class="line">.\vcpkg\bootstrap<span class="literal">-vcpkg</span>.bat</span><br></pre></td></tr></table></figure><p>等待安装完毕之后，安装Poco：</p><p>执行：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\vcpkg\vcpkg install poco</span><br></pre></td></tr></table></figure><blockquote><p>注：默认情况下安装的是32位，如果需要64位请执行下面任意一个：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.\vcpkg\vcpkg install poco:x64<span class="literal">-windows</span></span><br><span class="line">.\vcpkg\vcpkg install poco <span class="literal">--triplet</span>=x64<span class="literal">-windows</span></span><br></pre></td></tr></table></figure></blockquote><p>等待安装完成即可</p><p>查看安装的包：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\vcpkg\vcpkg list</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202311162104185.png"></p><blockquote><p>注：Vcpkg的其他用法请自行学习，这里不赘述了</p></blockquote><h2 id="VS引入POCO"><a href="#VS引入POCO" class="headerlink" title="VS引入POCO"></a>VS引入POCO</h2><p><strong>全局引入：</strong></p><p>还是在上述目录中执行：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\vcpkg\vcpkg integrate install</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202311162105367.png"></p><p>看到 <code>Applied user-wide integration for this vcpkg root.</code> 说明引入成功</p><p>移除集成：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\vcpkg\vcpkg integrate remove</span><br></pre></td></tr></table></figure><p>此时在VS里新建的项目就已经可以引用到所安装的第三方库了</p><p>但是需要注意的是，某些第三方库在VS里是存在bug了，无法自动引入，就比如咱们今天需要安装的POCO库，所以<strong>当全局引入无法生效的时候，请继续往下看</strong></p><p><strong>集成到需要的某个工程：</strong></p><p>生成NuGet配置文件：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\vcpkg\vcpkg integrate project</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202311162109538.png"></p><p>打开VS的项目</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202311162115536.png"></p><p>打开NuGet程序包管理器设置</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202311162118614.png"></p><p>点击程序包源-新建</p><p>输入名称和路径，这里需要注意的是，这个路径指的是你创建的NuGet配置文件的路径，在刚才咱们的执行结果里，生成的文件路径就是C盘下的 <code>src</code> 目录，有些包生成的目录是和这个不符的，需要自己修改</p><p>选择好路径之后点击更新，确定应用</p><p>打开工具-NuGet包管理器-管理解决方案的包：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202311162125734.png"></p><p>就可以给当前项目引入所安装的第三方库了</p><p>如果不想这么麻烦，可以直接使用以下方法对某个项目引入所安装好的第三方库</p><p>还是先执行生成配置文件：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\vcpkg\vcpkg integrate project</span><br></pre></td></tr></table></figure><p>然后打开VS，打开工具-NuGet包管理器-程序包管理器控制台</p><p>直接输入下列命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Install-Package &quot;vcpkg.C.src.vcpkg&quot; -Source &quot;C:\src&quot;</span><br></pre></td></tr></table></figure><p>也就是上一个命令执行后输出的提示</p><p>即可完成该第三方库的引入。</p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
            <tag> VisualStudio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Aspen模拟公用工程为导热油的换热器</title>
      <link href="/posts/193d62b4/"/>
      <url>/posts/193d62b4/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天在算换热器的时候，突然发现Aspen自带的公用工程：热油 无法在HeatX模块中使用，也就意味着无法导出到EDR模块中，会出现如下报错：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202308231657075.png"></p><p>但是这个公用工程是可以在Heat简洁模块中使用的</p><h2 id="自定义导热油公用工程"><a href="#自定义导热油公用工程" class="headerlink" title="自定义导热油公用工程"></a>自定义导热油公用工程</h2><p>直接搜索组分Dowtherm：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202308231513365.png"></p><p>根据需要的温度选择合适的型号即可，适用的温度范围见下图：（注意，选择型号时请看准aspen数据库中的BP（常规沸点）</p><blockquote><p>下图高糊请见谅，在网上能找到的最清晰的了</p><p>下图为陶氏化学提供的导热油型号和适用的温度范围（括号里为华氏度）</p></blockquote><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202308231509480.png"></p><p>aspen中还有其他的导热油，详情见 <code>F1</code> 帮助页面</p><p>搜索Heating Fluids：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202308231516340.png"></p><p>这里面记录了aspen数据库中其他的型号导热油，根据自己选择取用</p><p>添加了组分之后来到公用工程界面，选择新建，模板为热油</p><p>进入公用工程之后，选择更换为进出口条件</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202308231659318.png"></p><p>输入自己需要的导热油条件，然后在右边的组分列表里找到刚才添加的导热油组分，填入组分分率为1即可</p><p>这样就可以在HeatX中使用导热油公用工程了</p><h2 id="特殊导热油"><a href="#特殊导热油" class="headerlink" title="特殊导热油"></a>特殊导热油</h2><p>T350：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202308231533578.png"></p>]]></content>
      
      
      <categories>
          
          <category> 化工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Aspen </tag>
            
            <tag> EDR </tag>
            
            <tag> 换热器 </tag>
            
            <tag> 导热油 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>医药化学品中试放大产业化详细规程</title>
      <link href="/posts/16146764/"/>
      <url>/posts/16146764/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202308011458517.png"></p><blockquote><p>本文转载自公众号今日化题榜，原文链接：<a href="https://mp.weixin.qq.com/s?__biz=MzI0MTcyNjE0Ng==&mid=2247589125&idx=1&sn=bc94e3a32a977cbcd28567418910cac3&chksm=e904faa8de7373be6d8901bf311c268b4c10f344ddfcc7264dd6a508566ccda842f313d2251c&mpshare=1&scene=1&srcid=0731UNLJ2W4TJt0pWJE3Iyw7&sharer_sharetime=1690762786944&sharer_shareid=278ffc5fa8baf97c7bf8febfa4e792b0#rd">中试放大生产工艺详细规程</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>中间实验阶段是进一步研究在一定规模的装置中各步化学反应条件的变化规律，并解决实验室中所不能解决或发现的问题。虽然化学反应的本质不会因实验生产的不同而改变，但各步化学反应的最佳反应工艺条件，则可能随实验规模和设备等外部条件的不同而改变。因此，中试放大很重要。</p><blockquote><p>题主目前就是做的是某农药中间体产业化项目，负责中试到产业化的工艺开发</p></blockquote><h2 id="实验室进行中试应具备的条件"><a href="#实验室进行中试应具备的条件" class="headerlink" title="实验室进行中试应具备的条件"></a>实验室进行中试应具备的条件</h2><p>1、小试收率稳定，产品质量可靠。</p><p>2、造作条件已经确定，产品，中间体和原理的分析检验方法已确定。</p><p>3、某些设备，管道材质的耐腐蚀实验已经进行，并有所需的一般设备。</p><p>4、进行了物料衡算。三废问题已有初步的处理方法。</p><p>5、已提出原材料的规格和单耗数量。</p><p>6、已提出安全生产的要求。</p><h2 id="中试放大的方法"><a href="#中试放大的方法" class="headerlink" title="中试放大的方法"></a>中试放大的方法</h2><p>1、经验放大：主要是凭借经验通过逐级放大（小试装置－中间装置－中型装置－大型装置）来摸索反应器的特征。它也是目前药物合成中采用的主要方法。</p><p>2、相似放大：主要是应用相似原理进行放大。此法有一定局限性，只适用于物理过程放大。而不适用于化学过程的放大。</p><p>3、数学模拟放大：是应用计算机技术的放大，它是今后发展的方向。</p><p>此外，微型中间装置的发展也很迅速，即采用微型中间装置替代大型中间装置，为工业化装置提供精确的设计数据。其优点是费用低廉，建设快。</p><h2 id="中试放大的任务"><a href="#中试放大的任务" class="headerlink" title="中试放大的任务"></a>中试放大的任务</h2><p>主要有以下十点，实践中可以根据不同情况，分清主次，有计划有组织地进行</p><ul><li>1、工艺路线和单元反应操作方法的最终确定。特别当原来选定的路线和单元反应方法在中试放大阶段暴露出难以解决的重大问题时，应重新选择其他路线，再按新路线进行中试放大。</li><li>2、设备材质和型号的选择。对于接触腐蚀性物料的设备材质的选择问题尤应注意。</li><li>3、搅拌器型式和搅拌速度的考察。反应很多是非均相的，且反应热效应较大。在小试时由于物料体积小，搅拌效果好，传热传质问题不明显，但在中试放大时必须根据物料性质和反应特点，注意搅拌型式和搅拌速度对反应的影响规律，以便选择合乎要求的搅拌器和确定适用的搅拌速度。</li><li>4、反应条件的进一步研究。试验室阶段获得的最佳反应条件不一定完全符合中试放大的要求，为此，应就其中主要的影响因素，如加料速度，搅拌效果，反应器的传热面积与传热系数以及制冷剂等因素，进行深入研究，以便掌握其在中间装置中的变化规律。得到更适用的反应条件。</li><li>5、工艺流程和操作方法的确定。要考虑使反应和后处理操作方法适用工业生产的要求。特别注意缩短工序，简化操作，提高劳动生产率。从而最终确定生产工艺流程和操作方法。</li><li>6、进行物料衡算。当各步反应条件和操作方法确定后，就应该就一些收率低，副产物多和三废较多的反应进行物料衡算。反应产品和其他产物的重量总和等于反应前各个物料投量量的总和是物料衡算必须达到的精确程度。以便为解决薄弱环节。挖潜节能，提高效率，回收副产物并综合利用以及防治三废提供数据。对无分析方法的化学成分要进行分析方法的研究。</li><li>7、原材料，中间体的物理性质和化工常数的测定。为了解决生产工艺和安全措施中的问题，必须测定某些物料的性质和化工常数，如比热，黏度，爆炸极限等。</li><li>8、原材料中间体质量标准的制订。小试中质量标准有欠完善的要根据中试实验进行修订和完善。</li><li>9、消耗定额，原材料成本，操作工时与生产周期等的确定。在中试研究总结报告的基础上，可以进行基建设计，制订型号设备的选购计划。进行非定型设备的设计制造，按照施工图进行生产车间的厂房建筑和设备安装。在全部生产设备和辅助设备安装完毕。如试产合格和短期试产稳定即可制订工艺规程，交付生产。</li><li>10、从实验室研究至中试生产。</li></ul><h2 id="研究的最终目的"><a href="#研究的最终目的" class="headerlink" title="研究的最终目的"></a>研究的最终目的</h2><p>最终目的是生产出质量合格的药品，供医疗应用。研究成果投入大量生产以前，必须研制出一条成熟、稳定、适合于工业生产的技术工艺路线。研制过程分阶段进行，包括：实验研究阶段，小量试制剂段，中试生产阶段，最后才能过渡到工业生产。各个阶段前后衔接，相互促进，任务各不相同，研究的重点也有差异，制备的规模逐渐由小变大。新药申请注册前应完成中试生产。下面以合成药物为例，说明各个阶段的主要任务。</p><h3 id="1、实验室研究阶段"><a href="#1、实验室研究阶段" class="headerlink" title="1、实验室研究阶段"></a>1、实验室研究阶段</h3><p>这是新药研究的探索阶段，目的是发现先导化合物和对先导化合物的结构修饰，找出新药苗头。其主要任务是：合理设计化合物尽快完成这些化合物的合成；利用各种手段，确证化合物的化学结构；测定化合物的主要物理参数；了解化合物的一般性质，而对化合物的合成方法不作过多的研究。为了制备少量的样品供药理筛选，不惜采用一切分离纯化手段，如反复分馏，多次重结晶，各种层析技术等。显然，这样的合成方法与工业生产的距离很大。</p><h3 id="2、小量试制阶段"><a href="#2、小量试制阶段" class="headerlink" title="2、小量试制阶段"></a>2、小量试制阶段</h3><p>新药苗头确定后，应立即进行小量试制（简称小试）研究，提供足够数量的药物供临床前评价。其主要任务是：对实验室原有的合成路线和方法进行全面的、系统的改革。在改革的基础上通过实验室批量合成，积累数据，提出一条基本适合于中试生产的合成工艺路线。小试阶段的研究重点应紧紧绕影响工业生产的关键性问题。如缩短合成路线，提高产率，简化操作，降低成本和安全生产等。</p><p><strong>研究确定一条最佳的合成工艺路线</strong></p><ul><li>一个化合物往往可以用不同的路线和方法合成，实验室最初采用的路线和方法不一定是最佳者，当时对反应条件，仪器设备，原材料来源等考察不多，对产率也不作过高要求，但这些对工业生产却十分重要，应通过小试研究改掉那些不符合工业生产的合成步骤和方法。一条比较成熟的合成工艺路线应该是：合成步骤短，总产率高，设备技术条件和工艺流程简单，原材料来源充裕而且便宜。</li><li><strong>用工业级原料代替化学试剂：</strong> 实验室小量合成时，常用试剂规格的原料和溶剂，不仅价格昂贵，也不可能有大量供应。大规模生产应尽量采用化工原料和工业级溶剂。小试阶段应探明，用工业级原料和溶剂对反应有无干扰，对产品的产率和质量有无影响。通过小试研究找出适合于用工业级原料生产的最佳反应条件和处理方法，达到价廉、优质和高产。</li><li><strong>原料和溶剂的回收套用：</strong> 合成反应一般要用大量溶剂，多数情况下反应前后溶剂没有明显变化，可直接回收套用。有时溶剂中可能含有反应副产物，反应不完全的剩余原料，挥发性杂质，或溶剂的浓度改变，应通过小试研究找出回收处理的办法，并以数据说明，用回收的原料和溶剂不影响产品的质量。原料和溶剂的回收套用，不仅能降低成本，而且有利于三废处理和环境卫生。</li><li><strong>安全生产和环境卫生：</strong> 安全对工业生产至关重要，应通过小试研究尽量去掉有毒物质和有害气体参加的合成反应；避免采用易燃、易爆的危险操作，实属必要，一时又不能解决，应找出相应的防护措施。尽量不用毒性大的有机溶剂，寻找性质相似而毒性小的溶剂代替。药物生产的特点之一是原材料品种多，用量大，化学反应复杂，常产生大量的废气、废渣和废物，处理不好，将严重影响环境保护，造成公害。三废问题在选择工艺路线时就要考虑，并提出处理的建议。</li></ul><h3 id="3、中试生产阶段"><a href="#3、中试生产阶段" class="headerlink" title="3、中试生产阶段"></a>3、中试生产阶段</h3><p>中试生产是从实验室过渡到工业生产必有可少的重要环节，是二者之间的桥粱。</p><p>中试生产是小试的扩大，是工业生产的缩影，应在工厂或专门的中试车间进行。中试生产的主要任务是：</p><ul><li>考核小试提供的合成工艺路线，在工艺条件、设备、原材料等方面是否有特殊要求，是否适合于工业生产。</li><li>验证小试提供的合成工艺路线，是否成熟、合理，主要经济技术指标是否接近生产要求。</li><li>在放大中试研究过程中，进一步考核和完善工艺路线，对每一反应步骤和单元操作，均应取得基本稳定的数据。</li><li>根据中试研究的结果制订或修订中间体和成品的质量标准，以及分析鉴定方法。</li><li>制备中间体及成品的批次一般不少于３~５批，以便积累数据，完善中试生产资料。</li><li>根据原材料、动力消耗和工时等，初步进行经济技术指标的核算，提出生产成本。</li><li>对各步物料进行步规划，提出回收套用和三废处理的措施。</li><li>提出整个合成路线的工艺流程，各个单元操作的工艺规程，安全操作要求及制度。</li></ul><p>天然药物有效单体的实验研究，小试研究和中试生产基本与合成药物相似，只是用提取、分离、纯化等工序代替各步化学合成反应。中试生产的原料药供临床试验，属于人用药物。中试生产的一切活动要符合《药品生产质量管理规范》（ＧＭＰ），产品的质量和纯度要达到药用标准。美国ＦＤＡ规定，在新药申请（ＮＤＡ）时要提供原料药中试生产（或今后大规模生产）的资料。</p><h2 id="设备的选择工工艺管理的设计"><a href="#设备的选择工工艺管理的设计" class="headerlink" title="设备的选择工工艺管理的设计"></a>设备的选择工工艺管理的设计</h2><p>1、根据小试的结果，在多功能、中试车间，对设备进行选择，首先应考虑设备容量是否适宜，设备材质、管路材质与工艺介质的适应性，是否耐腐蚀，加热、冷却和搅拌速度是否符合要求。</p><p>2、物料输送的方法（投料、出料、各步之间的流转），如何防止跑料、凝固和堵塞等。</p><p>3、物料的计量和加料的方法，如滴加如何有效控制？</p><p>4、反应有无气体生成？会否冲料？如有必要，应加气液分离器，安装回流管。</p><p>5、离心，压滤等分离条件是否满足？</p><p>根据以上情况和其他工艺要求，对设备，管路进行适应性改造。</p><h2 id="投料前准备"><a href="#投料前准备" class="headerlink" title="投料前准备"></a>投料前准备</h2><p>1、对设备，尤其是新安装和技改过的设备或久置不用的设备要进行试压、试漏工作，要结合清洗工作进行联动试车，以确保投料后不用再动火，在无泄漏的前况下，进行设备管道保温。</p><p>2、做好设备的清洗和清场工作，确保不让杂物带入反应体系，防止产生交叉污染和确保有序的工作。</p><p>3、根据工艺要求和试验的需要核定投料系数，计算投料量做到原材料配套领用，质量合格，标志清楚，分类定置安放。</p><p>4、计划和准备好中间体的盛放器具和堆放场所。</p><p>5、生产条件的检查：蒸汽、油浴、冷却水和盐水是否通畅（可用手试一下阀门开启后的前后温差），阀门开关是否符合要求。</p><p>6、物料是否均相，搅拌是否足以使他们混合均匀，固体是否沉积在底阀凹处，尤其固体催化剂或难溶原料的沉积，如何采取避免沉积的措施。</p><p>7、各种仪表是否正常？估计整个过程（物料浅满发生变化和投料偏少时）温度计是否能插到物料里。</p><p>8、写好操作规程和安全规程。</p><p>9、对职工进行培训，工艺培训（尤其要讲清楚控制指标和要点，违犯操作规程的危害和管道走向，阀门的进出控制，落实超出控制指标和突发事件的应急措施）。进行安全培训和劳动保护培训。</p><p>10、明确项目的责任人，组织好班次，骨干力量安排好跟班，明确职工与骨干与上级领导之间夜间沟通联络方法。</p><p>11、做好应急措施预案和必要的准备工作。</p><h2 id="中试放大与生产工艺规程"><a href="#中试放大与生产工艺规程" class="headerlink" title="中试放大与生产工艺规程"></a>中试放大与生产工艺规程</h2><p>中试放大的目的是验证、复审和完善实验室工艺所研究确定的反应条件，及研究选定的工业化生产设备结构、材质、安装和车间布置等，为正式生产提供数据，以及物质量和消耗等。</p><h3 id="中试放大的研究内容"><a href="#中试放大的研究内容" class="headerlink" title="中试放大的研究内容"></a>中试放大的研究内容</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>工艺过程：生产过程中凡直接关系到化学合成反应或生物合成途径的次序、条件（配料比、温度、反应时间、搅拌方式、后处理方法和精制条件等）统称为工艺条件。其它过程则成为辅助过程。</p><h4 id="中试放大的重要性和形状"><a href="#中试放大的重要性和形状" class="headerlink" title="中试放大的重要性和形状"></a>中试放大的重要性和形状</h4><p>当化学制药工艺研究的实验室工艺完成后，即药品工艺路线经论证确定后，一般都需要经过一个比小型试验规模放大50~100倍的中试放大，以便进一步研究在一定规模装置中各部反应条件变化规律，并解决实验室阶段未能解决或尚未发现的问题。</p><p>新药开发中也需要一定数量的样品，以供应临床试验和作为药品检验及留样观察之用。根据该药品剂量大小，疗程长短，通常需要2~10kg数量，这是一般实验室条件所难以完成的。</p><p>确定工艺路线后，每步化学合成反应或生物合成反应不会因小试、中试放大和大型生产条件不同而有明显变化，但各步最佳工艺条件，则随试验规模和设备等外部条件的不同而有可能需要调整。</p><p>中试放大的方法有经验放大法、相似放大法和数学模拟放大法。1）经验放大法—主要凭借经验通过逐级放大（试验装置、中间装置、中型装置、大型装置）来摸索反应器的特征。在合成药物的工艺研究中，中试放大主要采用经验放大法，也是化工研究中的主要方法。2）相似放大法—主要应用相似理论进行放大。使用于物理过程，有一定局限性。3）（非线性）数学模拟放大法—应用计算机技术的放大法，它是今后发展的主要方向。（数字工厂）</p><h4 id="中试放大的研究"><a href="#中试放大的研究" class="headerlink" title="中试放大的研究"></a>中试放大的研究</h4><p><strong>生产工艺路线的复审</strong></p><p>一般情况下，单元反应的方法和生产工艺路线应在实验室阶段就基本选定。在中试放大阶段，只是确定具体工艺操作和条件以适应工业生产。但是当选定的工艺路线和工艺过程，在中试放大时暴露出难以克服的重大问题时，就需要复审实验室工艺路线，修正其工艺过程。</p><p><strong>设备材质与型式的选择</strong></p><p>开始中试放大时应考虑所需各种设备的材质和型式，并考查是否合适，尤其应注意接触腐蚀性物料的设备材质的选择。</p><p><strong>搅拌器型式与搅拌速度的考查</strong></p><p>药物合成反应中的反应大多是非均相反应，其反应热效应较大。</p><p>在实验室中由于物料体积较小，搅拌效率好，传热、传质的问题表现不明显，但是在中试放大时，由于搅拌效率的影响，传热，传质的问题就突出地暴露出来。因此，中试放大时必须根据物料性质和反应特点注意研究搅拌器的型式，考察搅拌速度对反应规律的影响，特别是在固－液非均相反应时，要选择合乎反应要求的搅拌器型式和适宜的搅拌速度。</p><p><strong>反应条件的进一步研究</strong></p><p>实验室阶段获得的最佳反应条件不一定能符合中试放大要求。应该就其中的主要的影响因素，如放热反应中的加料速度，反应罐的传热面积与传热系数，以及制冷剂等因素进行深入的试验研究，掌握它们在中试装置中的变化规律，以得到更合适的反应条件。</p><p><strong>工艺流程与操作方法的确定</strong></p><p>在中试放大阶段由于处理物料增加，因而又必要考虑使反应与后处理的操作方法如何适应工业生产的要求，特别要注意缩短工序、简化操作。</p><p><strong>原辅材料和中间体的质量控制</strong></p><p>①原辅材料、中间体的物理性质和化工参数的测定。</p><p>②原辅材料、中间体质量标准的制定。</p><h3 id="物料衡算"><a href="#物料衡算" class="headerlink" title="物料衡算"></a>物料衡算</h3><p>物料衡算是化工计算中最基本，也是最重要的内容之一。它也是能量衡算的基础。通过物料衡算，可深入分析生产过程，对生产全过程有定量了解，就可以知道原料消耗定额，揭示物料利用情况；了解产品收率是否达到最佳数值，设备生产能力还有多大潜力；各设备生产能力是否匹配等。</p><h4 id="物料衡算的理论基础"><a href="#物料衡算的理论基础" class="headerlink" title="物料衡算的理论基础"></a>物料衡算的理论基础</h4><p>物料衡算—是研究某一个体系内进、出物料及组成的变化，即物料平衡。所谓体系就是物料衡算的范围，可以是一个设备或多个设备，可以是一个单元操作或整个化工过程。</p><p>物料衡算的理论基础为质量守恒定律：</p><p>进入反应器的物料量－流出反应器的物料量－反应器中的转化量＝反应器中的积累量</p><p>在化学反应系统中，物质的转化服从化学反应规律，可以根据化学反应方程式求出物质转化的定量关系。</p><h4 id="确定物料衡算的计算基准及每年设备操作时间"><a href="#确定物料衡算的计算基准及每年设备操作时间" class="headerlink" title="确定物料衡算的计算基准及每年设备操作时间"></a>确定物料衡算的计算基准及每年设备操作时间</h4><p><strong>物料衡算的基准</strong></p><p>通常采用的基准有：</p><ul><li>以每批操作为基准，适用于间歇操作设备、标准或定型设备的物料衡算，化学制药产品的生产间歇操作居多。</li><li>以单位时间为基准，适用于连续操作设备的物料衡算。</li><li>以每公斤产品为基准，以确定原辅材料的消耗定额。</li></ul><p><strong>每年设备操作时间</strong></p><p>车间每年设备正常开工生产的天数一般以330天计算，其中余下的36天作为车间检修时间。</p><h4 id="收集有关计算数据和物料衡算步骤"><a href="#收集有关计算数据和物料衡算步骤" class="headerlink" title="收集有关计算数据和物料衡算步骤"></a>收集有关计算数据和物料衡算步骤</h4><p><strong>收集有关计算数据：</strong></p><p>反应物的配料比，原辅材料、半成品、成品及副产品等的浓度、纯度或组成，车间总产率，阶段产率，转化率。</p><p><strong>转化率：</strong></p><p>对某一组分来说，反应物所消耗的物料量与投入反应物料量之比简称该组分的转化率。一般以百分率表示。</p><p><strong>选择性：</strong></p><p>各种主、副产物中，主产物所占分率。</p><p><strong>车间总收率：车间总收率为各个工序收率的乘积</strong></p><h4 id="物料计算的步骤"><a href="#物料计算的步骤" class="headerlink" title="物料计算的步骤"></a>物料计算的步骤</h4><ul><li>1、收集合计算所必需的基本数据。</li><li>2、列出化学反应方程式，包括主反应和副反应；根据给定条件画出流程简图。</li><li>3、选择物料计算的基准。</li><li>4、进行物料衡算</li><li>5、列出物料平衡表：①输入与输出的物料平衡表；②三废排量表；③计算原辅材料消耗定额（kg）。</li></ul><h3 id="生产工艺规程"><a href="#生产工艺规程" class="headerlink" title="生产工艺规程"></a>生产工艺规程</h3><p>一个药物可以采用几种不同的生产工艺过程，但其中必有一种是在特定条件下最为合理、最为经济又最能保证产品重量的。人们把这种生产工艺过程的各项内容写成文件形式即为生产工艺规程。</p><p>生产工艺规程是指导生产的重要文件，也是组织管理生产的基本依据；更是工厂企业的核心机密。先进的生产工艺规程是工程技术人员、岗位工人和企业管理人员的集体创造，属于知识产权的范畴，要积极组织申报专利，以保护发明者和企业的合法利益。</p><p><strong>生产工艺规程的主要作用：</strong></p><ul><li>生产工艺规程是组织工业生产的指导性文件，生产的计划、调度只有根据生产工艺规程安排，才能保持各个生产环节之间的相互协调，才能按计划完成任务。</li><li>生产工艺规程也是生产准备工作的依据。</li><li>生产工艺规程又是新建和扩建生产车间或工厂的基本技术条件。</li></ul><p><strong>制订生产工艺规程的原始资料和基本内容</strong></p><p>制定生产工艺规程，需要下列原始资料和包括的基本内容：</p><p><strong>产品介绍：</strong></p><p>叙述产品规格、药理作用等，包括名称（商品名、化学名、英文名）；化学结构式，分子式、分子量；性状(物化性质)；质量标准及检验方法（鉴别方法，准确的定量分析方法、杂质检查方法和杂质最高限度检验方法等）；药理作用、毒副作用（不良反应）、用途（适应症、用法）；包装与贮存。</p><p><strong>化学反应过程：</strong></p><p>按化学合成或生物合成，分工序写出主反应、副反应、辅助反应（如催化剂的制备、副产物处理、回收套用等）及其反应原理。还要包括反应终点的控制方法和快速化验方法。</p><p><strong>生产工艺流程：</strong></p><p>以生产工艺过程中的化学反应为中心，用图解形式把冷却、加热、过滤、蒸馏、提取分离、中和、精制等物理化学过程加以描述。</p><p><strong>设备一览表：</strong></p><p>岗位名称，设备名称，规格，数量（容积、性能），材质，电机容量等。</p><p><strong>设备流程和设备检修：</strong></p><p>设备流程图是用设备示意图的形式来表示生产过程中各设备的衔接关系。</p><p><strong>操作工时与生产周期：</strong></p><p>记叙各岗位中工序名称、操作时间。</p><p><strong>原辅材料和中间体的质量标准：</strong></p><p>按岗位名称、原料名称、分子式、分子量、规格项目瞪列表。</p><p><strong>生产工艺过程：</strong></p><p>配料比；工艺操作；主要工艺条件及其说明；生产过程中的中间体及其理化性质和反应终点控制；后处理方法及收率等。</p><p><strong>生产技术经济指标：</strong></p><p>生产能力（年，月）；中间体、成品收率，分步收率和产品总收率，收率计算方法；劳动生产率及成本；原辅材料及中间体消耗定额。</p><p><strong>技术安全与防火、防爆</strong></p><p><strong>主要设备的使用与安全注意事项</strong></p><p><strong>成品、中间体、原料检验方法</strong></p><p><strong>资源综合利用和三废处理</strong></p><p><strong>附录（有关常数及计算公式等）</strong></p><h2 id="生产过程注意事项"><a href="#生产过程注意事项" class="headerlink" title="生产过程注意事项"></a>生产过程注意事项</h2><p>1、严格按操作规程、安全规程操作，不能随意更改。如发现新问题需更改，必须有充分的小试作基础。</p><p>2、严格控制反应条件如温度，PH值等，万一超标应及时进行处理（小试就应考虑到，小试应做过破坏性试验，找出处理办法）</p><p>3、注意中试，试生产温度计的传热敏感度与小试不一样，温度变化存在滞后性，应提前预计到这一点进行有关操作。</p><p>4、真空系统出现漏气如何检查和应急处理，尤其在高温情况下，应及时采取应急措施。</p><p>5、突发停电，停汽，停水，停冷冻盐水应立刻分别采取必要的应急措施（必要时配备和启用备用电源，氮气保护等）</p><p>6、注意生产中的放大效应，一般应逐步放大，不能单考虑进度，否则“欲速而不达”，要循序渐进。</p><p>7、由于不可预计因素和放大效应的存在，对单批投料量必须进行控制，实行分级审批制度。</p><p>8、对反应过程中的现象进行认真的仔细的观察，及时记好记录，并及时分析出现的现象，要做好小试的先导或跟踪验证工作。各相关人员必须有高度的责任心，密切关注整个生产过程的情况，及时采取措施解决出现的问题。</p><p>9、每一步骤的终点如何判断要有明确的指标和方法，每一步进行严格控制，可与反应中出现的现象综合起来判断。</p><p>10、正确选择后处理方法。进行萃取、结晶和重结晶等单元操作，在选择萃取剂和溶剂时，正确运用<strong>相似相溶</strong>原则来考虑杂质、产物的溶解度。选择溶剂时一定要在考虑工艺的适用性的同时，要考虑经济性和可行性，如价格，毒性及是否可回收和易回收等。小试进行后处理时就应考虑到这几方面。</p><h2 id="安全问题"><a href="#安全问题" class="headerlink" title="安全问题"></a>安全问题</h2><p>1、充分的小试是中试和试生产成功的保证，小试多化力气，多设想各方面在中试、生产时的实施方法和可操作性，考虑得越仔细，越周到，中试、试生产就会越顺利，不会出现生产事故和安全事故。</p><p>2、技改动火的安全是安全工作的关键，由于多项目在同一车间，这个项目在技改，其他项目在生产，或同一系统中前一产品生产过，现改产另一产品，或由于某一问题未事先考虑到中途进行技改。不管哪种情况，凡能移到车间外进行动火的一定要拆出去动火，尽量避免在车间内动火，不得已必须在车间内动火的，必须做好清洗和隔离工作（包括设备，容器，管道），不能留下死角，要严格动火制度。</p><p>3、职工培训和严格遵守规章制度和操作规程是安全工作的重点。</p><p>4、职责分工要明确，投料前应填写“中试试生产项目情况一览表“明确责任人，相互要及时沟通，要有严格的制度和高度的责任心，骨干力量要跟班，有情况应及时采取应对措施。</p><p>5、事先应预计到可能出现的安全问题，环保问题和劳动保护问题，并采取相应措施。</p>]]></content>
      
      
      <categories>
          
          <category> 化工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中试 </tag>
            
            <tag> 产业化 </tag>
            
            <tag> 医药化学品 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>板式塔与填料塔对比分析</title>
      <link href="/posts/f870e53e/"/>
      <url>/posts/f870e53e/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202308011448370.png"></p><blockquote><p>本文转载自化工加公众号，原文链接：<a href="https://mp.weixin.qq.com/s?__biz=Mzg4MzA5ODEyMQ==&mid=2247521220&idx=1&sn=f9ffb6d5c355137aeaf61e77b1bfb2a1&chksm=cf4e44a2f839cdb4d1682ca2bde4f1ade8169e529cb17648240c303ddc32528905fc0430b7f4&mpshare=1&scene=1&srcid=0728lIFcOamPYphtRMGcag1i&sharer_sharetime=1690506529594&sharer_shareid=278ffc5fa8baf97c7bf8febfa4e792b0#rd">板式塔与填料塔对比分析</a></p></blockquote><h2 id="表格对比分析"><a href="#表格对比分析" class="headerlink" title="表格对比分析"></a>表格对比分析</h2><table><thead><tr><th></th><th><strong>板式塔</strong></th><th><strong>填料塔</strong></th></tr></thead><tbody><tr><td><strong>生产能力</strong></td><td>塔板的开孔率一般占塔截面积的7%~13%；单位塔截面积上的生产能力低</td><td>塔内件的开孔率通常在50%以上，而填料层的孔隙率则超过90%，一般液泛点较高，单位塔截面积上的生产能力高</td></tr><tr><td><strong>分离效率</strong></td><td>一般情况下，常用板式塔每米理论级最多不超过2级。在减压、常压和低压下，效率明显不及填料塔，在高压操作下，板式塔的分离效率优于填料塔</td><td>一般情况下，工业上常用填料塔每米理论级为2~8级。在减压、常压和低压下（压力小于0.3 MPa），填料塔的分离效率明显优于板式塔，在高压下，板式塔的分离效率优于填料塔</td></tr><tr><td><strong>塔压降</strong></td><td>一般情况下，板式塔的每个理论级压降约为0.4~1.1kPa，板式塔的压降高于填料塔5倍左右</td><td>填料塔优于孔隙率高，每个理论级压降约为0.01~0.3kPa，远远小于板式塔。通常，压降低不仅能降低操作费用，节约能耗，对于精馏过程，可使塔釜温度降低，有利于热敏性物料的分离</td></tr><tr><td><strong>操作弹性</strong></td><td>板式塔因受到塔板液泛和液漏的限制而又一定的操作弹性，但设计良好的板式塔其操作弹性比填料塔大得多</td><td>填料塔的操作弹性取决于填料的润湿性能和塔内件的设计，当液相负荷较小时，即便液体分布器的设计很合理，也难以确保填料表面得到充分润湿，故填料塔的操作弹性比板式塔小</td></tr><tr><td><strong>持液量</strong></td><td>约为塔体积的8%~12%</td><td>约为塔体积的1%~6%</td></tr><tr><td><strong>液气比</strong></td><td>液气比适应范围相对较宽。小液气比时因可能造成填料润湿不良，故多采用板式塔</td><td>液气比适应范围相对较窄，大液气比时因为填料塔汽液通过能力高而多采用填料塔</td></tr><tr><td><strong>材质要求</strong></td><td>一般用金属材料制作</td><td>可用非金属耐腐蚀材料制作</td></tr><tr><td><strong>结构与制造</strong></td><td>结构比填料塔复杂，制造相对不便</td><td>结构比板式塔简单，制造相对容易</td></tr><tr><td><strong>安装、维修与清洗</strong></td><td>较方便</td><td>较不便</td></tr><tr><td><strong>造价</strong></td><td>直径大于800mm时一般比填料塔造价低</td><td>直径小于800mm时一般比板式塔造价低</td></tr><tr><td><strong>塔重</strong></td><td>较轻</td><td>较重</td></tr></tbody></table><h2 id="板式塔与填料塔的操作、调节注意事项"><a href="#板式塔与填料塔的操作、调节注意事项" class="headerlink" title="板式塔与填料塔的操作、调节注意事项"></a>板式塔与填料塔的操作、调节注意事项</h2><p>板式塔与填料塔<strong>正常的操作、调节应该是一样</strong>，但是填料塔应当注意以下几点：</p><ol><li>填料塔操作范围较小，特别是对于液体负荷的变化更为敏感。液体负荷较小时，填料表面不能很好的润湿，使传质效果急剧下降，反之，容易发生液泛。</li><li>填料塔不宜与处理易聚合或含有固体悬浮物的物料。</li><li>对于容易起泡物系，填料塔更适合，因为对泡沫有限制和破碎作用。</li><li>热敏性物系易采用填料塔，由于持液量比板式塔少，物料在塔内停留时间短。</li><li>填料塔更适合负压塔操作，压降比板式塔小，能耗损耗少。</li><li>从设备安装及检修方面来说，填料比塔板成本高，安装周期短，检修不如塔板方便。而且安装比塔板要求高。尤其是分布器的水平度，可以说一个填料塔是否能够成功开车很大程度上取决于其分布器的设计和安装好坏。</li></ol><h2 id="精馏塔原始开车操作技术"><a href="#精馏塔原始开车操作技术" class="headerlink" title="精馏塔原始开车操作技术"></a>精馏塔原始开车操作技术</h2><h3 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h3><p>按安装工艺流程图逐一进行核对检查</p><h3 id="吹扫和清除"><a href="#吹扫和清除" class="headerlink" title="吹扫和清除"></a>吹扫和清除</h3><p>在新建或大修后的塔系统所属设备和管道内，往往存在有安装过程中的灰尘、焊条铁屑等杂物。为了避免这些杂物在开车时堵塞管路或卡坏阀门，必须用压缩空气进行吹除或清扫。</p><p>吹除前应按气液流程，依次拆开与设备、阀门连接的法兰，吹除物由此排放。吹洗时用高速压缩空气分段吹尽并用木锤轻击外壁。每吹尽一段，立即装好法兰。吹洗流程应该是从设备的高处往低处吹。</p><h3 id="系统水压试验和气密性试验"><a href="#系统水压试验和气密性试验" class="headerlink" title="系统水压试验和气密性试验"></a>系统水压试验和气密性试验</h3><p>为了检查设备焊缝的致密性和机械强度，在使用前要进行水压试验。水压试验一般按设计图纸上的要求进行。水压试验要用常温下的清水，并要从设备的最低点注入，使设备内的气体由上面放尽。</p><p>为了保证开车时气体不从法兰及焊缝处泄露出来，使塔操作连续稳定，必须进行系统气密性试验。试验方法是用压缩机向系统内送入空气，并逐渐将压力提高到操作压力的1.05倍。</p><p>然后对所有设备、管线上的焊缝和法兰逐个涂抹肥皂水进行查漏。发现漏处，做好标记或记录，泄压后进行处理。如无泄漏，保压30min，压力不降为合格，最后将气体放空。</p><h3 id="单机试车和联动试车"><a href="#单机试车和联动试车" class="headerlink" title="单机试车和联动试车"></a>单机试车和联动试车</h3><p>单机试车是为了确认转动和待转动设备（如空压机和离心泵等）是否好用，是否负荷有关技术规范。单机试车是在不带物料和无负载的情况下进行的。首先断开联轴节，单独开动电动机，运转48h，观察电机是否发热，震动，有无杂音，转动方向是否正确等。</p><p>联动试车是用水或生产物料类似的其他物料，代替生产物料所进行的一种模拟生产状态的试车。目的是为了检验生产装置连续通过物料的能力。联动试车时给水加热，观察仪表是否准确地指示所通过的流量、温度和压力等数据，以及设备的运转是否正常等情况。</p><h3 id="系统的置换"><a href="#系统的置换" class="headerlink" title="系统的置换"></a>系统的置换</h3><p>在工业生产中，被分离的物质绝大部分为有机物，它们具有易燃、易爆的性质，在设备投产前，如果不驱出设备内的空气，就很容易与有机物形成爆炸混合物。因此在向系统送入混合物前，应先用惰性气体（氮气）将其中的空气置换，使置换气中含氧量不大于0.5%。</p><h3 id="系统开车"><a href="#系统开车" class="headerlink" title="系统开车"></a>系统开车</h3><p>系统置换合格后，即可进行系统开车。</p><h2 id="精馏塔正常开、停车操作技术"><a href="#精馏塔正常开、停车操作技术" class="headerlink" title="精馏塔正常开、停车操作技术"></a><strong>精馏塔正常开、停车操作技术</strong></h2><h3 id="正常开车"><a href="#正常开车" class="headerlink" title="正常开车"></a>正常开车</h3><p>系统装置置换合格后，即可进行生产的正常开车。精馏操作的正常开车分为短期停车后开车和长期停车后开车。</p><h4 id="短期停车后的开车"><a href="#短期停车后的开车" class="headerlink" title="短期停车后的开车"></a>短期停车后的开车</h4><p>检查原料库存情况，选定加料量，向塔釜加料。当看见液面后，缓慢升温，在此过程中，随着塔压的升高，塔内的惰性气体逐渐被排出，此时冷凝液应相应逐渐加大，并进行全回流操作。</p><p>当塔釜液面控制在1&#x2F;2～2&#x2F;3时，即可开始加料，当塔随升温过程已转为正常后，停止加料，让塔内自身循环，待回流液分析合格后，开始采出产品，并继续投料生产。</p><p>在自身循环过程，是全回流操作，当达到连续加料，并连续采出时，即为开车成功。</p><p>在空塔投料刚升温时，升温速度要缓慢，因为这时没有液体回流，塔板上还没有进行气液接触和物质交换，因而气体上升速度比正常操作速度快。</p><p>随着温度的升高，塔顶蒸出的气体被冷凝后，回流到塔顶并沿塔板流下，在塔板上逐渐形成液体层，塔内便将进行传质和传热过程。如不按此操作，难挥发组分就会被带到塔顶，生产出的产品就会不合格。</p><h4 id="长期停车后的开车"><a href="#长期停车后的开车" class="headerlink" title="长期停车后的开车"></a>长期停车后的开车</h4><p>长期停车后的开车，一般是指检修后的开车。</p><p>首先检查各设备、管道、阀门、各取样点、电气及仪表等是否完好正常；然后对系统进行吹净、清洗、强度和气密性试验，以及对系统置换，一切正常合格后，按短期停车后的开车操作步骤进行。</p><h3 id="停车"><a href="#停车" class="headerlink" title="停车"></a>停车</h3><p>在化工生产中停车方法与停车前的状态有关，一般有以下三种方式：</p><h4 id="正常停车"><a href="#正常停车" class="headerlink" title="正常停车"></a>正常停车</h4><p>生产进行一段时间后，设备需要进行检查或检修而有计划的停车称为正常停车。</p><p>这种停车是逐渐减少物料的加入，直到完全停止加入。</p><p>待物料蒸完后，停止供气加热、降温并卸掉系统压力，然后停止供水，将系统中的溶液排放（排到溶液贮槽）干净。</p><p>打开系统放空阀，并对系统进行清洗。若原料气中含有易燃、易爆气体，要用惰性气体对系统进行置换。</p><p> 停车后，对于某些需要进行检修的设备，必须要用盲板切断设备上的物料管线，以避免可燃物漏出而造成事故。</p><h4 id="紧急停车"><a href="#紧急停车" class="headerlink" title="紧急停车"></a>紧急停车</h4><p>生产中一些想象不到的特殊情况下的停车称为紧急停车。</p><p>如某些设备损坏，某部分电气设备的电源发生故障，某一个或多个仪表失灵等，都会造成生产装置的紧急停车。</p><p>发生紧急停车时，首先停止加料，调节塔釜加热蒸汽和凝液采出量，使设备处于待生产的状态，此时，应积极抢修，排除故障，待停车原因消除后，应按开车的程序恢复生产。</p><h4 id="全面紧急停车"><a href="#全面紧急停车" class="headerlink" title="全面紧急停车"></a>全面紧急停车</h4><p>当生产过程中突然发生停电、停水、停气或发生重大事故时，则要全面紧急停车。</p><p> 为了防止全面紧急停车，一般的化工厂均有备用电源，当第一电源断电时，第二电源应立即送电。</p>]]></content>
      
      
      <categories>
          
          <category> 化工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 板式塔 </tag>
            
            <tag> 填料塔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四足机器人开发之四（组装篇）</title>
      <link href="/posts/9597af26/"/>
      <url>/posts/9597af26/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307131833095.png"></p><h2 id="续前言"><a href="#续前言" class="headerlink" title="续前言"></a>续前言</h2><p><a href="https://imbhj.com/posts/f429c0a1/">四足机器人开发之一（食材篇）</a></p><p><a href="https://imbhj.com/posts/b72112f1/">四足机器人开发之二（开发环境篇）</a></p><p><a href="https://imbhj.com/posts/e920e948/">四足机器人开发之三（原理篇）</a></p><p>本篇就要开始正式的组装啦~</p><h2 id="程序写入"><a href="#程序写入" class="headerlink" title="程序写入"></a>程序写入</h2><p>打开Arduino，复制原理篇中的代码进去</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307131838444.png"></p><blockquote><p>注：必须安装好开发环境篇中的几个驱动和库才可以！！！</p></blockquote><p>安装程序所需要的运行库： <code>Adafruit PWM Servo Driver</code></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307131851757.png"></p><p>将开发板要链接的WiFi名称和密码写入代码：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307131841273.png"></p><p>连接好开发板，在Arduino中选择好对应的开发板</p><p>然后按下图所示进行设置：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307131846482.png"></p><p>设置好之后，进行编译，编译完成之后选择上传</p><p>编译过程中，如果遇到这个报错：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307131849861.png"></p><p>请检查你的 <code>Adafruit PWM Servo Driver</code> 库是否安装</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307131854129.png"></p><p>编译和上传完毕之后，打开工具-串口监视器，切换波特率为 <code>115200</code> ，切换完毕之后</p><p><strong>按一下板子上的reset键</strong></p><p>就可以看到如图所示：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307131900997.png"></p><p>在同局域网下的浏览器中输入该地址（可能你的地址与我不同，输入自己的）</p><p>就可以进入网页端了：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307131920587.jpg"></p><blockquote><p>注意：如果你的网页端汉字是乱码，那么是编码的问题，需要在代码中加入下面这一行：</p><p><code> client.println(&quot;&lt;meta http-equiv=&#39;Content-Type&#39; content=&#39;text/html;charset=utf-8&#39;/&gt;&quot;);</code></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307131921436.png"></p></blockquote><p>程序写入就完成了</p><h2 id="供电连接"><a href="#供电连接" class="headerlink" title="供电连接"></a>供电连接</h2><p>将电池连接到升压板输入端，升压板输出端连接舵机拓展板电源，这样就把电池的3.7V升到5V</p><p>注意正负极不要接反了，升压板使用前要先旋转几十圈再用，用万用表检测升压板输出电压是否达到5V</p><blockquote><p>两节电池为并联</p></blockquote><p>擦，忘了买万用表了，今天先更新到这，后面继续安装~</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307161521433.jpg"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307161524501.jpg"></p><p>如图所示连接升压板和电池</p><blockquote><p>注意正负极和升压板的输入输出端不要接反了！！！</p><p>PS：忽略我拙略的焊工，这破电烙铁实在是不给力</p></blockquote><p>可以加电池看一下电池的电压：（也就是输入端）</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307161524579.jpg"></p><p>可以看到，我这个满电的18650是4.09V，一般来说在3.5~4.0V之间</p><p>然后注意接下来升压板的操作！</p><blockquote><p>你可以量一下升压板输出端的电压，看是否比5V高，如果高，下面的操作可以自己酌情顺时针旋转</p></blockquote><p>拔掉电池，让升压板不接电</p><p>然后升压板如上图所示的位置一样，将蓝色的调节电位器对准自己</p><p>使用一字螺丝刀<strong>逆时针</strong>将蓝色调节电位器上的调节旋钮进行旋转，旋转到底</p><p>旋转到底之后会有”咔哒“一声，当然也可能没有，大概旋转十几圈即可</p><p>此时放上电池，量一下输出端的电压，应该是要比5V大很多，可能在30V左右，注意自己的万用表量程</p><blockquote><p>如果不是，可以拔下电池，继续逆时针旋转调节旋钮，比5V大即可</p></blockquote><p>然后不用拔下电池，再使用一字螺丝刀，慢慢顺时针旋转旋钮，调节到5V即可：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307161532686.jpg"></p><p>连接舵机驱动板：</p><blockquote><p>注意电源正负极，螺丝拧紧即可</p></blockquote><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307161539937.jpg"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307161539979.jpg"></p><h2 id="ESP8266连接"><a href="#ESP8266连接" class="headerlink" title="ESP8266连接"></a>ESP8266连接</h2><p>ESP8266通过i2c和舵机拓展板通信，使用杜邦线连接</p><p>ESP8266的供电由舵机拓展板提供，不需要再额外供电</p><p>按照板子上的针脚注释，按照以下表格进行连接即可：</p><table><thead><tr><th>ESP8266</th><th>舵机驱动板</th></tr></thead><tbody><tr><td>VIN</td><td>V+</td></tr><tr><td>3.3V</td><td>VCC</td></tr><tr><td>GND</td><td>GND</td></tr><tr><td>D2</td><td>SDA</td></tr><tr><td>D1</td><td>SCL</td></tr></tbody></table><p>ESP8266：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307161552861.png"></p><p>对应的背面：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307161553783.jpg"></p><p>舵机驱动板：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307161557225.jpg"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307161557091.jpg"></p><h2 id="安装舵机和3D打印件"><a href="#安装舵机和3D打印件" class="headerlink" title="安装舵机和3D打印件"></a>安装舵机和3D打印件</h2><blockquote><p>连接舵机和3D打印件之前务必调试一下自己的舵机，看看线路是否正常，舵机是否能正常驱动：检查方法就是找几个舵机，连接到驱动板上，按照舵机的颜色对应连接驱动板上的三根脚位，然后插上电池，连接网络，网页端随便点击一个动作，看看舵机是否会有对应的动作，如果有，说明电路方面没有问题，如果没有动作，可以从以下几个方面检测问题：</p><ul><li>检测电池是否有电，使用万用表检测电池的电压是否正常</li><li>检测电池盒是否接触良好，电池插上之后检测输出的红黑线，是否有电压</li><li>检测升压板的输入输出是否正常，线路是否虚焊，尤其是升压板输出是否是5V</li><li>检测驱动板是否正常，正常工作驱动板应该是有亮灯</li><li>检测各个驱动板之间的杜邦线是否正常，连接是否稳固</li><li>检测开发板网络连接是否正常，与网页端是否正常通信</li><li>检测舵机是否损坏，开发板、升压板、驱动板是否坏板</li></ul></blockquote><blockquote><p>突然发现3D打印的大腿尺寸和买的舵机对不上，无法安装</p><p>请期待后续解决问题</p></blockquote><blockquote><p>我胡汉三又回来啦</p><p>经过一个周末的折腾，总算解决了3D打印尺寸的问题，现在继续拼装</p></blockquote><p>把四个舵机安装到支架上， 注意线的方向全是向外，用舵机自带的螺丝安装</p><p>一共需要8个螺丝，这里只安装4个就够了，不然螺丝会不够用</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307231336875.jpg"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307231336012.jpg"></p><p>一定注意舵机的方向，不要搞反了！</p><p>接下来安装四个小腿上的舵机，每个腿需要安装2个螺丝，这里只安装1个，不然螺丝不够用</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307231339034.jpg"></p><p>注意四个小腿的舵机，是两个两个一组的，两组是不同的方向，一定要注意</p><p>如果四个腿是一个方向，那就说明打印错了，螺丝位置为支腿中间的螺丝位：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307231341468.jpg"></p><p>接下来连接舵机和驱动板，一定要按照下图所示，<strong>注意舵机的序号和顺序</strong></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307231353325.png"></p><p>每个舵机三根线，按照对应颜色连接</p><p>首先是 <code>0</code> 、 <code>1</code> 、 <code>2</code> 、 <code>3</code> 号四个舵机：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307231359709.png"></p><p>给板子插上电池，接好上述四个舵机：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307231404055.jpg"></p><p>进入网页端操作界面，点击睡觉</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307231405900.png"></p><p>等舵机动作后按照下图的摆放方式将4个腿安装上，并且用舵机自带的螺丝固定</p><p>安装过程中要保持通电，尽量按照90度直角安装，如果有倾斜也没关系，这是因为舵机齿轮精度以及安装精度不够，后期可以通过调整代码修正</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307231512033.jpg"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307231512632.jpg"></p><p>在四个大腿上安装好固定舵机的方向角，每个大腿两个一对</p><blockquote><p>忽略我用电烙铁手动扩建了尺寸槽，简单粗暴</p></blockquote><p>点击睡觉之后，等待舵机动作完成</p><p>然后安装四个大腿：（尽量按照平行的方向安装，大腿有相对长和短的两节，长的一节安装到躯体上）</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307231535489.jpg"></p><p>将剩下的 <code>4</code> 、 <code>5</code> 、 <code>6</code> 、 <code>7</code> 号舵机连接驱动板：<strong>（断电连接！）</strong></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307231539154.png"></p><p>和驱动板连接好后，上电，在网页端点击睡觉，等待舵机动作完毕之后，进行四个小腿的安装：（一样，安装的时候尽量平行安装）</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307231547768.jpg"></p><h2 id="整理线束"><a href="#整理线束" class="headerlink" title="整理线束"></a>整理线束</h2><p>可以用小轧带进行固定，方便又快捷</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307231654920.jpg"></p><p>我的差不多就这样了，线束懒得整理了，有三个舵机应该是安装有问题，无法动作，但是左边的两条腿是完全正常的，后续再优化以下程序</p><p>那么，四足机器人就先到这里了~</p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 物联网 </tag>
            
            <tag> 四足机器人 </tag>
            
            <tag> ESP8266 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四足机器人开发之三（原理篇）</title>
      <link href="/posts/e920e948/"/>
      <url>/posts/e920e948/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307112059894.png"></p><h2 id="续前言"><a href="#续前言" class="headerlink" title="续前言"></a>续前言</h2><p><a href="https://imbhj.com/posts/f429c0a1/">四足机器人开发之一（食材篇）</a></p><p><a href="https://imbhj.com/posts/b72112f1/">四足机器人开发之二（开发环境篇）</a></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><blockquote><p>参考文献：<a href="https://blog.csdn.net/qq_66813359/article/details/130633027?app_version=5.15.4&code=app_1562916241&csdn_share_tail=%7B%22type%22:%22blog%22,%22rType%22:%22article%22,%22rId%22:%22130633027%22,%22source%22:%22qq_66813359%22%7D&uLinkId=usr1mkqgl919blen&utm_source=app&ydreferer=aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzY2ODEzMzU5L2FydGljbGUvZGV0YWlscy8xMzA2MzMwMjc/YXBwX3ZlcnNpb249NS4xNS40JmNvZGU9YXBwXzE1NjI5MTYyNDEmY3Nkbl9zaGFyZV90YWlsPSU3QiUyMnR5cGUlMjIlM0ElMjJibG9nJTIyJTJDJTIyclR5cGUlMjIlM0ElMjJhcnRpY2xlJTIyJTJDJTIycklkJTIyJTNBJTIyMTMwNjMzMDI3JTIyJTJDJTIyc291cmNlJTIyJTNBJTIycXFfNjY4MTMzNTklMjIlN0QmdUxpbmtJZD11c3IxbWtxZ2w5MTlibGVuJnV0bV9zb3VyY2U9YXBw">60元成本打造esp8266四足机器人</a></p></blockquote><h3 id="PWM"><a href="#PWM" class="headerlink" title="PWM"></a>PWM</h3><p>因为使用了pca9685舵机驱动板，所以这里使用的是Adafruit_PWMServoDriver库驱动sg90舵机，原理是通过PWM来控制舵机角度，动作主要是靠PWM来写的</p><p>舵机0-180度对应的PWM数值写在表格里了，这里取的是近似值，自己进行微调也可以</p><table><thead><tr><th>角度</th><th>PWM数值</th></tr></thead><tbody><tr><td>0</td><td>100</td></tr><tr><td>45</td><td>190</td></tr><tr><td>90</td><td>280</td></tr><tr><td>135</td><td>370</td></tr><tr><td>180</td><td>510</td></tr></tbody></table><h3 id="舵机号"><a href="#舵机号" class="headerlink" title="舵机号"></a>舵机号</h3><p>图中的舵机号与代码中的舵机号是对应的，比如代码中的 <code>pwm.setPWM(4, 0, 370)</code> ，就是将4号脚置于135度</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307112114014.png"></p><h3 id="舵机角度"><a href="#舵机角度" class="headerlink" title="舵机角度"></a>舵机角度</h3><p>蓝色角度对应的是4、5、6、7脚，黄色对应的是0、1、2、3脚</p><p>这里的角度范围表示舵机能运动的范围以及最大角度</p><p>比如当4、6号脚为0度时向上，而5、7脚0度时向下，反之当4、6号脚为180度时向下，而5、7脚180度时向上</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307112115932.png"></p><h3 id="操作界面"><a href="#操作界面" class="headerlink" title="操作界面"></a>操作界面</h3><p>操作页面有用小程序的也有用软件的，这里使用的是网页</p><p>用esp8266作为网络服务器，按钮使用html写的</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307112116288.png"></p><p>原理就这么简单，期待最后的组装篇~</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;ESP8266WiFi.h&gt;</span><br><span class="line">#include &lt;Wire.h&gt;</span><br><span class="line">#include &lt;Adafruit_PWMServoDriver.h&gt;</span><br><span class="line"> </span><br><span class="line">Adafruit_PWMServoDriver pwm = Adafruit_PWMServoDriver();</span><br><span class="line"> </span><br><span class="line">const char* ssid = &quot;WIFI名称&quot;;     </span><br><span class="line">const char* password = &quot;WIFI密码&quot;; </span><br><span class="line"> </span><br><span class="line">WiFiServer server(80);  //http的服务端口</span><br><span class="line"> </span><br><span class="line">void setup() &#123;</span><br><span class="line">  pinMode(16, OUTPUT);  //用于连接Wi-Fi的LED指示灯</span><br><span class="line">  digitalWrite(16, LOW);</span><br><span class="line">  Serial.begin(115200);</span><br><span class="line">  pwm.begin();</span><br><span class="line">  pwm.setPWMFreq(60); //伺服电机以60hz刷新率工作</span><br><span class="line">  delay(1000);</span><br><span class="line"> </span><br><span class="line">  //连接到无线网络</span><br><span class="line">  Serial.println();</span><br><span class="line">  Serial.println();</span><br><span class="line">  Serial.print(&quot;Connecting to &quot;);</span><br><span class="line">  Serial.println(ssid);</span><br><span class="line"> </span><br><span class="line">  WiFi.begin(ssid, password);</span><br><span class="line"> </span><br><span class="line">  while (WiFi.status() != WL_CONNECTED) &#123;</span><br><span class="line">    delay(500);</span><br><span class="line">    Serial.print(&quot;-&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  Serial.println(&quot;&quot;);</span><br><span class="line">  Serial.println(&quot;WiFi connected&quot;);</span><br><span class="line"> </span><br><span class="line">  //启动服务器</span><br><span class="line">  server.begin();</span><br><span class="line">  Serial.println(&quot;Server started&quot;);</span><br><span class="line"> </span><br><span class="line">  //打印IP地址</span><br><span class="line">  Serial.print(&quot;Use this URL to connect: &quot;);</span><br><span class="line">  Serial.print(&quot;http://&quot;);</span><br><span class="line">  Serial.print(WiFi.localIP());</span><br><span class="line">  Serial.println(&quot;/&quot;);</span><br><span class="line"> </span><br><span class="line">  digitalWrite(16, HIGH);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void loop() &#123;</span><br><span class="line">  //检查客户端是否已连接</span><br><span class="line">  WiFiClient client = server.available();</span><br><span class="line">  if (!client) &#123;</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  //等到客户端发送一些数据</span><br><span class="line">  Serial.println(&quot;new client&quot;);</span><br><span class="line">  while (!client.available()) &#123;</span><br><span class="line">    delay(1);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  //阅读请求的第一行</span><br><span class="line">  String request = client.readStringUntil(&#x27;\r&#x27;);</span><br><span class="line">  Serial.println(request);</span><br><span class="line">  client.flush();</span><br><span class="line"> </span><br><span class="line">  //匹配请求</span><br><span class="line">  if (request.indexOf(&quot;/S&quot;) != -1) &#123;</span><br><span class="line">    sleep();</span><br><span class="line">  &#125;</span><br><span class="line">  if (request.indexOf(&quot;/W&quot;) != -1) &#123;</span><br><span class="line">    normal();</span><br><span class="line">  &#125;</span><br><span class="line">  if (request.indexOf(&quot;/F&quot;) != -1) &#123;</span><br><span class="line">    normal();</span><br><span class="line">    forward();</span><br><span class="line">    forward();</span><br><span class="line">    forward();</span><br><span class="line">    forward();</span><br><span class="line">  &#125;</span><br><span class="line">  if (request.indexOf(&quot;/B&quot;) != -1) &#123;</span><br><span class="line">    normal();</span><br><span class="line">    backward();</span><br><span class="line">    backward();</span><br><span class="line">    backward();</span><br><span class="line">    backward();</span><br><span class="line">  &#125;</span><br><span class="line">  if (request.indexOf(&quot;/L&quot;) != -1) &#123;</span><br><span class="line">    normal();</span><br><span class="line">    left();</span><br><span class="line">    left();</span><br><span class="line">  &#125;</span><br><span class="line">  if (request.indexOf(&quot;/R&quot;) != -1) &#123;</span><br><span class="line">    normal();</span><br><span class="line">    right();</span><br><span class="line">    right();</span><br><span class="line">  &#125;</span><br><span class="line">  if (request.indexOf(&quot;/H&quot;) != -1) &#123;</span><br><span class="line">    normal();</span><br><span class="line">    hello();</span><br><span class="line">  &#125;</span><br><span class="line"> if (request.indexOf(&quot;/C&quot;) != -1) &#123;</span><br><span class="line">    normal();</span><br><span class="line">    come();</span><br><span class="line">  &#125;</span><br><span class="line">  //返回响应</span><br><span class="line">  client.println(&quot;HTTP/1.1 200 OK&quot;);</span><br><span class="line">  client.println(&quot;Content-Type: text/html&quot;);</span><br><span class="line">  client.println(&quot;&quot;); //  do not forget this one</span><br><span class="line">  client.println(&quot;&lt;!DOCTYPE HTML&gt;&quot;);</span><br><span class="line">  client.println(&quot;&lt;html&gt;&quot;);</span><br><span class="line">  client.println(&quot;&lt;head&gt;&quot;);</span><br><span class="line">  client.println(&quot;&lt;style&gt;&quot;);</span><br><span class="line">  client.println(&quot;.button&#123;&quot;);</span><br><span class="line">/*----------网页设计----------*/</span><br><span class="line">  client.println(&quot;background-color: #4CAF50; /* GREEN */&quot;);</span><br><span class="line">  client.println(&quot;width: 48%;&quot;);</span><br><span class="line">  client.println(&quot;border: none;&quot;);</span><br><span class="line">  client.println(&quot;color: white;&quot;);</span><br><span class="line">  client.println(&quot;padding: 50px 40px;&quot;);</span><br><span class="line">  client.println(&quot;text-align: center;&quot;);</span><br><span class="line">  client.println(&quot;text-decoration: none;&quot;);</span><br><span class="line">  client.println(&quot;display: inline-block;&quot;);</span><br><span class="line">  client.println(&quot;font-size: 50px;&quot;);</span><br><span class="line">  client.println(&quot;margin: 4px 2px;&quot;);</span><br><span class="line">  client.println(&quot;cursor: pointer;&quot;);</span><br><span class="line">  client.println(&quot;border-radius: 12px;&quot;);</span><br><span class="line">  client.println(&quot;&#125;&quot;);</span><br><span class="line"> </span><br><span class="line">  client.println(&quot;&lt;/style&gt;&quot;);</span><br><span class="line">  client.println(&quot;&lt;/head&gt;&quot;);</span><br><span class="line">  client.println(&quot;&lt;body bgcolor=black&gt;&quot;);</span><br><span class="line"> </span><br><span class="line">  client.println(&quot;&lt;button class=\&quot;button\&quot; onclick=\&quot;window.location.href=&#x27;/F&#x27;;\&quot;&gt;前进&lt;/button&gt;&quot;);</span><br><span class="line">  client.println(&quot;&lt;button class=\&quot;button\&quot; onclick=\&quot;window.location.href=&#x27;/B&#x27;;\&quot;&gt;后退&lt;/button&gt;&quot;);</span><br><span class="line">  client.println(&quot;&lt;br&gt;&lt;/br&gt;&quot;);</span><br><span class="line">  client.println(&quot;&lt;button class=\&quot;button\&quot; onclick=\&quot;window.location.href=&#x27;/L&#x27;;\&quot;&gt;左转&lt;/button&gt;&quot;);</span><br><span class="line">  client.println(&quot;&lt;button class=\&quot;button\&quot; onclick=\&quot;window.location.href=&#x27;/R&#x27;;\&quot;&gt;右转&lt;/button&gt;&quot;);</span><br><span class="line">  client.println(&quot;&lt;br&gt;&lt;/br&gt;&quot;);</span><br><span class="line">  client.println(&quot;&lt;button class=\&quot;button\&quot; onclick=\&quot;window.location.href=&#x27;/S&#x27;;\&quot;&gt;睡觉&lt;/button&gt;&quot;);</span><br><span class="line">  client.println(&quot;&lt;button class=\&quot;button\&quot; onclick=\&quot;window.location.href=&#x27;/W&#x27;;\&quot;&gt;正常&lt;/button&gt;&quot;);</span><br><span class="line">  client.println(&quot;&lt;br&gt;&lt;/br&gt;&quot;);</span><br><span class="line">  client.println(&quot;&lt;button class=\&quot;button\&quot; onclick=\&quot;window.location.href=&#x27;/H&#x27;;\&quot;&gt;你好&lt;/button&gt;&quot;);</span><br><span class="line">  client.println(&quot;&lt;button class=\&quot;button\&quot; onclick=\&quot;window.location.href=&#x27;/C&#x27;;\&quot;&gt;来啊&lt;/button&gt;&quot;);</span><br><span class="line">  client.println(&quot;&lt;/body&gt;&quot;);</span><br><span class="line">  client.println(&quot;&lt;/html&gt;&quot;);</span><br><span class="line"> </span><br><span class="line">  delay(1);</span><br><span class="line">  Serial.println(&quot;Client disconnected&quot;);</span><br><span class="line">  Serial.println(&quot;&quot;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/*----------动作函数----------*/</span><br><span class="line"> </span><br><span class="line">// |   7  |             |   6  |</span><br><span class="line">//  ----- -----   ----- -----</span><br><span class="line">//       |  3   | |  2   |</span><br><span class="line">//        -----   -----</span><br><span class="line">//       |   1  | |  0   |</span><br><span class="line">//  ----- -----   ----- -----</span><br><span class="line">// |  5   |             |  4   |</span><br><span class="line"> </span><br><span class="line">void sleep() </span><br><span class="line">&#123;</span><br><span class="line">  pwm.setPWM(4, 0, 280);</span><br><span class="line">  delay(100);</span><br><span class="line">  pwm.setPWM(5, 0, 280);</span><br><span class="line">  delay(100);</span><br><span class="line">  pwm.setPWM(6, 0, 280);</span><br><span class="line">  delay(100);</span><br><span class="line">  pwm.setPWM(7, 0, 280);</span><br><span class="line">  delay(100);</span><br><span class="line">  pwm.setPWM(0, 0, 510);</span><br><span class="line">  delay(100);</span><br><span class="line">  pwm.setPWM(1, 0, 100);</span><br><span class="line">  delay(100);</span><br><span class="line">  pwm.setPWM(2, 0, 100);</span><br><span class="line">  delay(100);</span><br><span class="line">  pwm.setPWM(3, 0, 510);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void normal() </span><br><span class="line">&#123;</span><br><span class="line">  pwm.setPWM(0, 0, 370);</span><br><span class="line">  delay(100);</span><br><span class="line">  pwm.setPWM(1, 0, 190);</span><br><span class="line">  delay(100);</span><br><span class="line">  pwm.setPWM(2, 0, 190);</span><br><span class="line">  delay(100);</span><br><span class="line">  pwm.setPWM(3, 0, 370);</span><br><span class="line">  delay(100);</span><br><span class="line">  pwm.setPWM(4, 0, 510);</span><br><span class="line">  delay(100);</span><br><span class="line">  pwm.setPWM(7, 0, 100);</span><br><span class="line">  delay(100);</span><br><span class="line">  pwm.setPWM(6, 0, 510);</span><br><span class="line">  delay(100);</span><br><span class="line">  pwm.setPWM(5, 0, 100);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void left()</span><br><span class="line">&#123;</span><br><span class="line">  pwm.setPWM(4, 0, 370);</span><br><span class="line">  delay(100);</span><br><span class="line">  pwm.setPWM(0, 0, 510);</span><br><span class="line">  delay(100);</span><br><span class="line">  pwm.setPWM(4, 0, 510);</span><br><span class="line">  delay(100);</span><br><span class="line">  pwm.setPWM(6, 0, 370);</span><br><span class="line">  delay(100);</span><br><span class="line">  pwm.setPWM(2, 0, 280);</span><br><span class="line">  delay(100);</span><br><span class="line">  pwm.setPWM(6, 0, 510);</span><br><span class="line">  delay(100);</span><br><span class="line">  pwm.setPWM(7, 0, 190);</span><br><span class="line">  delay(100);</span><br><span class="line">  pwm.setPWM(3, 0, 510);</span><br><span class="line">  delay(100);</span><br><span class="line">  pwm.setPWM(7, 0, 100);</span><br><span class="line">  delay(100);</span><br><span class="line">  pwm.setPWM(5, 0, 190);</span><br><span class="line">  delay(100);</span><br><span class="line">  pwm.setPWM(1, 0, 280);</span><br><span class="line">  delay(100);</span><br><span class="line">  pwm.setPWM(5, 0, 100);</span><br><span class="line">  delay(100);</span><br><span class="line">  pwm.setPWM(0, 0, 370);</span><br><span class="line">  pwm.setPWM(2, 0, 190);</span><br><span class="line">  pwm.setPWM(3, 0, 370);</span><br><span class="line">  pwm.setPWM(1, 0, 190);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void right()</span><br><span class="line">&#123;</span><br><span class="line">  pwm.setPWM(5, 0, 190);</span><br><span class="line">  delay(100);</span><br><span class="line">  pwm.setPWM(1, 0, 100);</span><br><span class="line">  delay(100);</span><br><span class="line">  pwm.setPWM(5, 0, 100);</span><br><span class="line">  delay(100);</span><br><span class="line">  pwm.setPWM(7, 0, 190);</span><br><span class="line">  delay(100);</span><br><span class="line">  pwm.setPWM(3, 0, 280);</span><br><span class="line">  delay(100);</span><br><span class="line">  pwm.setPWM(7, 0, 100);</span><br><span class="line">  delay(100);</span><br><span class="line">  pwm.setPWM(6, 0, 370);</span><br><span class="line">  delay(100);</span><br><span class="line">  pwm.setPWM(2, 0, 100);</span><br><span class="line">  delay(100);</span><br><span class="line">  pwm.setPWM(6, 0, 510);</span><br><span class="line">  delay(100);</span><br><span class="line">  pwm.setPWM(4, 0, 370);</span><br><span class="line">  delay(100);</span><br><span class="line">  pwm.setPWM(0, 0, 190);</span><br><span class="line">  delay(100);</span><br><span class="line">  pwm.setPWM(4, 0, 510);</span><br><span class="line">  delay(100);</span><br><span class="line">  pwm.setPWM(1, 0, 190);</span><br><span class="line">  pwm.setPWM(3, 0, 370);</span><br><span class="line">  pwm.setPWM(2, 0, 190);</span><br><span class="line">  pwm.setPWM(0, 0, 370);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void forward()</span><br><span class="line">&#123; </span><br><span class="line">  pwm.setPWM(5, 0, 190);</span><br><span class="line">  delay(50);</span><br><span class="line">  pwm.setPWM(1, 0, 100);</span><br><span class="line">  delay(50);</span><br><span class="line">  pwm.setPWM(5, 0, 100);</span><br><span class="line">  delay(50);</span><br><span class="line">  pwm.setPWM(4, 0, 370);</span><br><span class="line">  delay(50);</span><br><span class="line">  pwm.setPWM(0, 0, 510);</span><br><span class="line">  delay(50);</span><br><span class="line">  pwm.setPWM(4, 0, 510);</span><br><span class="line">  delay(50);</span><br><span class="line">  pwm.setPWM(6, 0, 370);</span><br><span class="line">  delay(50);</span><br><span class="line">  pwm.setPWM(2, 0, 280);</span><br><span class="line">  delay(50);</span><br><span class="line">  pwm.setPWM(6, 0, 510);</span><br><span class="line">  delay(50);</span><br><span class="line">  pwm.setPWM(7, 0, 190);</span><br><span class="line">  delay(50);</span><br><span class="line">  pwm.setPWM(3, 0, 280);</span><br><span class="line">  delay(50);</span><br><span class="line">  pwm.setPWM(7, 0, 100);</span><br><span class="line">  delay(50);</span><br><span class="line">  pwm.setPWM(0, 0, 370);</span><br><span class="line">  pwm.setPWM(1, 0, 190);</span><br><span class="line">  pwm.setPWM(2, 0, 190);</span><br><span class="line">  pwm.setPWM(3, 0, 370);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void backward()</span><br><span class="line">&#123; </span><br><span class="line">  pwm.setPWM(7, 0, 190);</span><br><span class="line">  delay(50);</span><br><span class="line">  pwm.setPWM(3, 0, 510);</span><br><span class="line">  delay(50);</span><br><span class="line">  pwm.setPWM(7, 0, 100);</span><br><span class="line">  delay(50);</span><br><span class="line">  pwm.setPWM(6, 0, 370);</span><br><span class="line">  delay(50);</span><br><span class="line">  pwm.setPWM(2, 0, 100);</span><br><span class="line">  delay(50);</span><br><span class="line">  pwm.setPWM(6, 0, 510);</span><br><span class="line">  delay(50);</span><br><span class="line">  pwm.setPWM(5, 0, 190);</span><br><span class="line">  delay(50);</span><br><span class="line">  pwm.setPWM(1, 0, 280);</span><br><span class="line">  delay(50);</span><br><span class="line">  pwm.setPWM(5, 0, 100);</span><br><span class="line">  delay(50);</span><br><span class="line">  pwm.setPWM(4, 0, 370);</span><br><span class="line">  delay(50);</span><br><span class="line">  pwm.setPWM(0, 0, 280);</span><br><span class="line">  delay(50);</span><br><span class="line">  pwm.setPWM(4, 0, 510);</span><br><span class="line">  delay(50);</span><br><span class="line">  pwm.setPWM(3, 0, 370);</span><br><span class="line">  pwm.setPWM(2, 0, 190);</span><br><span class="line">  pwm.setPWM(1, 0, 190);</span><br><span class="line">  pwm.setPWM(0, 0, 370);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void hello()</span><br><span class="line">&#123;</span><br><span class="line">  pwm.setPWM(0, 0, 510);</span><br><span class="line">  delay(100);</span><br><span class="line">  pwm.setPWM(4, 0, 100);</span><br><span class="line">  delay(500);</span><br><span class="line">  pwm.setPWM(4, 0, 190);</span><br><span class="line">  delay(500);</span><br><span class="line">  pwm.setPWM(4, 0, 100);</span><br><span class="line">  delay(500);</span><br><span class="line">  pwm.setPWM(4, 0, 190);</span><br><span class="line">  delay(500);</span><br><span class="line">  pwm.setPWM(4, 0, 100);</span><br><span class="line">  delay(500);</span><br><span class="line">  pwm.setPWM(4, 0, 510);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void come()</span><br><span class="line">&#123;</span><br><span class="line">  pwm.setPWM(0, 0, 280);</span><br><span class="line">  delay(100);</span><br><span class="line">  pwm.setPWM(4, 0, 100);</span><br><span class="line">  delay(500);</span><br><span class="line">  pwm.setPWM(4, 0, 190);</span><br><span class="line">  delay(500);</span><br><span class="line">  pwm.setPWM(4, 0, 100);</span><br><span class="line">  delay(500);</span><br><span class="line">  pwm.setPWM(4, 0, 190);</span><br><span class="line">  delay(500);</span><br><span class="line">  pwm.setPWM(4, 0, 100);</span><br><span class="line">  delay(500);</span><br><span class="line">  pwm.setPWM(4, 0, 510);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 嵌入式开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 物联网 </tag>
            
            <tag> 四足机器人 </tag>
            
            <tag> ESP8266 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四足机器人开发之二（开发环境篇）</title>
      <link href="/posts/b72112f1/"/>
      <url>/posts/b72112f1/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307112055403.png"></p><h2 id="续前言"><a href="#续前言" class="headerlink" title="续前言"></a>续前言</h2><p>请看：<a href="https://imbhj.com/posts/f429c0a1/">四足机器人开发之一（食材篇）</a></p><h2 id="Arduino-IDE下载"><a href="#Arduino-IDE下载" class="headerlink" title="Arduino IDE下载"></a>Arduino IDE下载</h2><p>esp8266的开发方式有多种：可以使用C&#x2F;C++语言进行开发，使用的开发环境为Arduino</p><p>可也可以使用Micropython，开发环境为Pycharm</p><p>本篇文章介绍如何使用Arduino+ <code>C/C++</code> 语言开发esp8266应用</p><blockquote><p>参考文献：<a href="https://blog.csdn.net/oLiShuTong/article/details/126229905?ydreferer=aHR0cHM6Ly9wYXNzcG9ydC5naXRjb2RlLm5ldC9jcm9zcz90aWNrZXQ9YzQ5Y2RhMDgtYTUwMC00YzMzLTlmZDktOTJlMzIwNTUzMDEzJnJlZGlyZWN0VXJsPWh0dHBzJTNBJTJGJTJGYmxvZy5jc2RuLm5ldCUyRm9MaVNodVRvbmclMkZhcnRpY2xlJTJGZGV0YWlscyUyRjEyNjIyOTkwNQ==">ESP8266开发实战之（一）-开发环境配置</a></p></blockquote><p>Arduino官网：<a href="https://www.arduino.cc/">https://www.arduino.cc/</a></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307112026998.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307112026799.png"></p><p>根据自己的需要去下载对应的版本</p><p>下载完成之后直接安装即可</p><h2 id="切换语言"><a href="#切换语言" class="headerlink" title="切换语言"></a>切换语言</h2><p>安装好Arduino IDE打开之后是英文，不过有中文可以切换</p><blockquote><p>我已经切换好了中文，但是步骤是一样的</p></blockquote><p>打开左上角首选项</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307112026763.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307112027112.png"></p><p>点击确定之后即可</p><h2 id="安装ESP8266开发板"><a href="#安装ESP8266开发板" class="headerlink" title="安装ESP8266开发板"></a>安装ESP8266开发板</h2><p>打开首选项，在 <code>其他开发板管理器地址</code> 的地方输入：<a href="https://arduino.esp8266.com/stable/package_esp8266com_index.json">https://arduino.esp8266.com/stable/package_esp8266com_index.json</a></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307112029977.png"></p><p>输入完毕之后点击确定，就会自动下载对应的ESP8266包信息</p><blockquote><p>如果下载失败请切换网络，或者科学上网</p></blockquote><p>打开开发板管理器，搜索ESP8266</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307112030459.png"></p><p>我这是已经安装好了，如果没有安装的话，这里显示的就是安装</p><blockquote><p>注意：可能大概率情况下是安装失败，就是网络问题，需要科学上网</p><p>如果科学上网之后还是失败，直接手动从Github下载对应的包，然后<strong>不要解压</strong></p><p>直接将下载好的压缩包放在下面这个位置：</p><p><code>C:\Users\用户名\AppData\Local\Arduino15\staging\packages</code></p><p>然后重启Arduino，搜索ESP8266，点击安装，秒安装成功</p><p>需要注意的是，手动下载包时并不是一个，应该是好几个</p></blockquote><p>安装完成之后就可以在工具-开发板里看到ESP8266NodeMCU了：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307112035042.png"></p><h2 id="调试开发板"><a href="#调试开发板" class="headerlink" title="调试开发板"></a>调试开发板</h2><p>购买开发板的时候应该板子上都已经自带串口驱动了，一般是CP2102或者CH340</p><p>拿到板子之后，打开Arduino，用数据线连接板子</p><p>是可以在设备管理器里看到板子的驱动的：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307112038433.png"></p><p>在Arduino里选择开发板：</p><p>和上面一样，选择好对应自己板子的版本：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307112035042.png"></p><p>我的是1.0，我就选择1.0</p><p>端口选择COM3：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307112041690.png"></p><p>然后就可以选择示例程序测试板子是否正常</p><p>打开Blink示例：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307112044990.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307112045563.png"></p><p>等待左下角index加载完毕之后，点击编译</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307112046254.png"></p><p>等待编译完成，点击上传，等待上传完毕之后就可以看到自己的板子上LED灯在稳定的闪烁，频率为1秒一次</p><blockquote><p>注意，是稳定的闪烁，如果闪烁不稳定，或者亮光微小，闪烁频繁，说明程序正在上传，请不要断开链接</p></blockquote><p>这样就完成了开发板的调试和前期的准备工作啦</p><p>请期待下一篇~</p><h2 id="写给纯小白的话"><a href="#写给纯小白的话" class="headerlink" title="写给纯小白的话"></a>写给纯小白的话</h2><p>我遇到的两个小问题</p><p>第一：ESP8266使用Arduino写入程序的方式是覆盖式写入，当第一个程序写入完毕之后，第二次再写入不同的程序，那么第一个就会被覆盖掉清除掉</p><p>第二：当程序写入完毕之后，就可以直接拔了板子了，对，没错，直接拔</p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 物联网 </tag>
            
            <tag> 四足机器人 </tag>
            
            <tag> ESP8266 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四足机器人开发之一（食材篇）</title>
      <link href="/posts/f429c0a1/"/>
      <url>/posts/f429c0a1/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307111931697.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前几天刷B站的时候，无意中看到了这样一个四足机器人的视频，顿时来了兴趣，特别想自己做一个</p><p>但是我是纯小白，一点儿都没接触过嵌入式开发</p><p>还好有博主的详细教程，就自己准备折腾折腾</p><p>顺便记录一下这个折腾的过程</p><blockquote><p>这里是原博主的视频链接：<a href="https://www.bilibili.com/video/BV1fz4y1E7P7?vd_source=389e76469ad931017f6dc81e47d3e30f">【用oled屏幕变化表情的四足机器人(・ω&lt; )★ esp8266】</a></p><p>这里是参考大佬的博文：<a href="https://blog.csdn.net/qq_66813359/article/details/130633027?app_version=5.15.4&code=app_1562916241&csdn_share_tail=%7B%22type%22:%22blog%22,%22rType%22:%22article%22,%22rId%22:%22130633027%22,%22source%22:%22qq_66813359%22%7D&uLinkId=usr1mkqgl919blen&utm_source=app&ydreferer=aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzY2ODEzMzU5L2FydGljbGUvZGV0YWlscy8xMzA2MzMwMjc/YXBwX3ZlcnNpb249NS4xNS40JmNvZGU9YXBwXzE1NjI5MTYyNDEmY3Nkbl9zaGFyZV90YWlsPSU3QiUyMnR5cGUlMjIlM0ElMjJibG9nJTIyJTJDJTIyclR5cGUlMjIlM0ElMjJhcnRpY2xlJTIyJTJDJTIycklkJTIyJTNBJTIyMTMwNjMzMDI3JTIyJTJDJTIyc291cmNlJTIyJTNBJTIycXFfNjY4MTMzNTklMjIlN0QmdUxpbmtJZD11c3IxbWtxZ2w5MTlibGVuJnV0bV9zb3VyY2U9YXBw">60元打造四足机器人</a></p></blockquote><h2 id="食材准备"><a href="#食材准备" class="headerlink" title="食材准备"></a>食材准备</h2><p>因为没有经验，自己也不知道能不能成功，所以打算写个“连续剧”</p><p>本篇就是需要准备的东西，也就是材料准备</p><h3 id="ESP8266"><a href="#ESP8266" class="headerlink" title="ESP8266"></a>ESP8266</h3><p>四足机器人（以下简称小可爱）的大脑就是ESP8266<strong>（NodeMCU）</strong>物联网模块，它长这样：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307111935084.jpg"></p><p>不必拘泥于哪个型号，只要是ESP8266都行，购买价格：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307111939418.jpg"></p><h3 id="电池"><a href="#电池" class="headerlink" title="电池"></a>电池</h3><p>电池推荐使用2节18650电池，当然也可以用其他电池代替，1节也ok，长这样：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307111942837.jpg"></p><p>顺带一提，最好充电仓和电池盒也要哦，购买价格：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307111945463.jpg"></p><blockquote><p>电池盒（带正负极）随便找个店铺买就行</p></blockquote><h3 id="PCA9685"><a href="#PCA9685" class="headerlink" title="PCA9685"></a>PCA9685</h3><p>pca9685控制板是用来控制舵机的，建议使用16路PWM Servo舵机驱动板，它长这样：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307111949375.jpg"></p><p>购买价格：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307111949846.jpg"></p><h3 id="升压板"><a href="#升压板" class="headerlink" title="升压板"></a>升压板</h3><p>电源方案：两节18650并联后升压到5V，其实一节也可以</p><p>主要是将电池的3.7V升到5V，用来<strong>驱动舵机板</strong></p><p>建议使用SX1308 2A DC-DC可调升压板</p><p>升压板长这样：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307111954371.jpg"></p><blockquote><p>小提示，请记得买一点杜邦线用来焊接电源哦~</p></blockquote><p>购买价格：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307111955662.jpg"></p><h3 id="SG90舵机"><a href="#SG90舵机" class="headerlink" title="SG90舵机"></a>SG90舵机</h3><p>舵机就是用来让小可爱动起来的东西啦</p><p>必须使用SG90 9g经典舵机，方向180度，只有180度的舵机才可以固定角度，360度的舵机只能控制方向和旋转速度</p><p>注意舵机数量要使用8个哦~</p><p>舵机长这样：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307112000653.jpg"></p><p>购买价格（8个一共的价格，还有上面的电池盒）：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307112000370.jpg"></p><h3 id="3D打印外壳"><a href="#3D打印外壳" class="headerlink" title="3D打印外壳"></a>3D打印外壳</h3><p>小可爱的外壳和四肢都是使用PLA耗材进行3D打印，身体打印一只，其余部件均打印两只</p><blockquote><p>打印模型文件和本项目所有的代码文件可以按照原文链接去寻找，同时我也会放在我的GitHub里：<a href="https://github.com/laugh0608/SiZuJiQiRen">四足机器人开发</a></p></blockquote><blockquote><p><strong>特别注意：该3D打印的尺寸是某一种舵机的专用尺寸，我打印回来后发现与我买的舵机不对应，安装不上，所以请一定先购买舵机，然后根据你买的舵机对3D打印件的尺寸进行修正！！！</strong></p></blockquote><p>尺寸图：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307112003672.png"></p><p>至于3D打印，可以随便找闲鱼或者淘宝上的代打印服务，我不是很懂这个价格，所以应该是有点吃亏了，不过还好</p><p>实物图：</p><p>（暂时没实物图，明天到了我再补上）</p><p>补上实物图：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307131544864.png"></p><p>可以看到其实3D打印的细节处理的并不好，后续自己组装的时候可以进行微调，打磨等</p><p>打印服务+包邮价格：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307112007571.jpg"></p><p>食材就准备完毕啦~</p><p>敬请期待下一篇哦~</p><blockquote><p>PS：别忘了买电烙铁，当然要是家里有就不用单独买啦</p><p>再来补充一条，记得买万用表，家里有的话就不用买</p><p>顺带一提，要是有轧带和杜邦线（母对母）就更好了</p></blockquote><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307131948860.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 物联网 </tag>
            
            <tag> 四足机器人 </tag>
            
            <tag> ESP8266 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>评论系统Valine更新为Waline</title>
      <link href="/posts/a1984408/"/>
      <url>/posts/a1984408/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>昨天突然有个大佬留言友链，提醒了我原因：<a href="https://ttys3.dev/post/please-stop-using-valine-js-comment-system-until-it-fixed-the-privacy-leaking-problem/">请马上停止使用 Valine.js 评论系统，除非它修复了用户隐私泄露问题</a></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307091026734.png"></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>Waline文档：<a href="https://waline.js.org/">https://waline.js.org</a></p><p> 如果是第一次使用Waline的话，LeanCloud 设置就不赘述了，可以看文档</p><p>现在我们是从Valine迁移到Waline，由于 Waline 在存储上完全复用了 Valine 的数据结构，所以LeanCloud数据库可以不用新建，可以直接使用Valine的应用实例</p><blockquote><p>但是建议做好数据备份</p></blockquote><h2 id="Vercel部署"><a href="#Vercel部署" class="headerlink" title="Vercel部署"></a>Vercel部署</h2><p>按照Waline文档进行Vercel部署</p><p>部署完毕之后拿到自定义的vercel自定义域名</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307091058477.png"></p><h2 id="引入Waline"><a href="#引入Waline" class="headerlink" title="引入Waline"></a>引入Waline</h2><p>导入 Waline 样式 <code>https://unpkg.com/@waline/client@v2/dist/waline.css</code>。</p><p>创建 <code>&lt;script&gt;</code> 标签使用来自 <code>https://unpkg.com/@waline/client@v2/dist/waline.mjs</code> 的 <code>init()</code> 函数初始化，并传入必要的 <code>el</code> 与 <code>serverURL</code> 选项</p><blockquote><p><code>el</code> 选项是 Waline 渲染使用的元素，你可以设置一个字符串形式的 CSS 选择器或者一个 HTMLElement 对象。</p><p><code>serverURL</code> 是服务端的地址，即上一步获取到的值</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">    <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">href</span>=<span class="string">&quot;https://unpkg.com/@waline/client@v2/dist/waline.css&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;waline&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; init &#125; <span class="keyword">from</span> <span class="string">&#x27;https://unpkg.com/@waline/client@v2/dist/waline.mjs&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">init</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#waline&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">serverURL</span>: <span class="string">&#x27;https://your-domain.vercel.app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Valine数据导入"><a href="#Valine数据导入" class="headerlink" title="Valine数据导入"></a>Valine数据导入</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307091102245.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;//unpkg.com/valine/dist/Valine.min.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">+ <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;//unpkg.com/@waline/client@v2/dist/waline.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">+ <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&#x27;//unpkg.com/@waline/client@v2/dist/waline.css&#x27;</span> <span class="attr">rel</span>=<span class="string">&#x27;stylesheet&#x27;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">-  <span class="keyword">new</span> <span class="title class_">Valine</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">+  <span class="title class_">Waline</span>.<span class="title function_">init</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#vcomments&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">-   <span class="attr">appId</span>: <span class="string">&#x27;Your appId&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">-   <span class="attr">appKey</span>: <span class="string">&#x27;Your appKey&#x27;</span></span></span><br><span class="line"><span class="language-javascript">+   <span class="attr">serverURL</span>: <span class="string">&#x27;YOUR SERVER URL&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307091102459.png"></p><p>配置好自己的SERVERURL就可以了，就是Vercel部署完毕之后自己的自定义域名</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307091116869.png"></p><h2 id="评论管理"><a href="#评论管理" class="headerlink" title="评论管理"></a>评论管理</h2><ol><li>部署完成后，请访问 <code>&lt;serverURL&gt;/ui/register</code> 进行注册。首个注册的人会被设定成管理员。</li><li>管理员登陆后，即可看到评论管理界面。在这里可以修改、标记或删除评论。</li><li>用户也可通过评论框注册账号，登陆后会跳转到自己的档案页。</li></ol><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307091117754.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307091119832.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307091119979.png"></p><h2 id="开启文章反应"><a href="#开启文章反应" class="headerlink" title="开启文章反应"></a>开启文章反应</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307091124864.png"></p><p>效果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202307091124481.png"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Valine </tag>
            
            <tag> Waline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PROII模拟压缩机时报错无蒸汽熵和液体熵的问题</title>
      <link href="/posts/749fa72/"/>
      <url>/posts/749fa72/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天在模拟压缩机的时候突然遇到这个报错：压缩机模型要求蒸汽熵和液体熵的方法包含于热力学方法的设置，如图所示：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202306191540377.png"></p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>热力学方法的选项未设置汽液相熵没单独设置热力学方法</p><p>应该是PROII对UNIFAC的方法中汽液相熵需要单独计算</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>打开首页选项栏的热力学数据选项卡</p><p>双击最右边的自己选择的热力学方法</p><p>在Liquid entropy和Vapor entropy后面选下合适的物性方法</p><p>保存，重新计算即可</p><p>如图所示：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202306191540512.png"></p>]]></content>
      
      
      <categories>
          
          <category> 化工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PROII </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Aspen/HYSYS/ProII如何输入自定义组分</title>
      <link href="/posts/78dc3dab/"/>
      <url>/posts/78dc3dab/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202306151013455.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>通常在工艺设计中我们会使用到aspen&#x2F;hysys&#x2F;proii等稳态模拟软件来计算一些工艺参数</p><p>对于已知的体系，数据库中现有的物质组分，可以很好的输入相关的参数</p><p>但是总会遇到一些数据库中没有的组分，这个时候就需要自己去输入相关的参数来估算其性质</p><p>本文就以aspen&#x2F;hysys&#x2F;proii为例，简单说明一下如何输入自定义组分</p><blockquote><p>注意：为了方便理解，本文三个软件中都以对氯甲苯举例，实际按照自己需要的组分进行设置即可</p></blockquote><h2 id="Aspen"><a href="#Aspen" class="headerlink" title="Aspen"></a>Aspen</h2><p>新建aspen文件，来到组分输入界面：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202306151016890.png"></p><p>打开用户定义：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202306151042351.png"></p><p>输入组分名称DLJB后点击下一步：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202306151045553.png"></p><p>点击绘制结构：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202306151046406.png"></p><p>绘制好结构之后直接点击右上角关闭即可，如果需要保存这个分子结构也可以点击左上角另存为一个分子结构的文件</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202306151047893.png"></p><p>此时会显示结构可用</p><p>继续输入参数：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202306151048672.png"></p><p>aspen要求至少输入分子量和常规沸点这两个参数，当然其他参数如果也有输入进去会估算的更准确</p><p>输入完毕之后点击下一步：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202306151050893.png"></p><p>上面的1-5参数也是同理，如果有，点击输入，如果没有，不用输入也可以</p><p>输入完成之后点击立即评估，点击确定</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202306151051884.png"></p><p>此时aspen会估算出大致的物性并显示出来，点击保存参数，确定即可输入完毕</p><p>如果物性不全，或者偏差较大，可以继续使用UNIFAC基团贡献法继续估算</p><p>打开组分-分子结构：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202306151053703.png"></p><p>右侧功能组的方法选择UNIFAC</p><p>选择分子结构中的基团进行添加，如图所示：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202306151100436.png"></p><blockquote><p>aspen中好像不用单独输入苯环基团</p></blockquote><p>对于其他分子结构的组分也是同理，输入物质中含有的基团和数量即可</p><p>选择好热力学方法之后点击运行，即可估算出相对应的物质参数，完成模拟</p><p>例如PL饱和蒸汽压：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202306151104512.png"></p><h2 id="HYSYS"><a href="#HYSYS" class="headerlink" title="HYSYS"></a>HYSYS</h2><p>新建文件：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202306151113037.png"></p><p>点击添加，左上角点击虚拟组分，点击创建或编辑虚拟组分：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202306151114318.png"></p><p>点击新建组分：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202306151115225.png"></p><p>双击组分，进入编辑界面，输入组分名称：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202306151116179.png"></p><p>点击结构生成器，输入结构：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202306151124928.png"></p><blockquote><p>这里我只是举例，所以输入的不准确，一般来说自由键应该是刚刚好的才最准确</p></blockquote><p>继续输入沸点和分子量：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202306151130344.png"></p><p>点击下方的估算未知，然后点击添加组分：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202306151131907.png"></p><p>然后选择物性方法就可以进行模拟了</p><h2 id="ProII"><a href="#ProII" class="headerlink" title="ProII"></a>ProII</h2><p>打开proii，新建文件，选择组分选择：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202306151138358.png"></p><p>选择user-defined：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202306151138926.png"></p><p>输入组分名称，点击add：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202306151139648.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202306151143957.png"></p><p>点击OK关闭即可</p><p>打开输入-组分性质页面</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202306151144673.png"></p><p>打开fixed页面，输入沸点和分子量：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202306151144647.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202306151145676.png"></p><p>点击ok关闭，回到上一个界面，点击fill from structure，把自定义组分添加到估算列表里：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202306151146976.png"></p><p>点击ok关闭，回到上一个页面，可以看到UNIFAC是红框，点击UNIFAC输入界面：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202306151149415.png"></p><p>点击ok关闭，选择热力学方法即可开始模拟</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽然今天举得例子不太恰当，但是也完美的演示了如何进行自定义组分的输入，但是这并不代表估算的性质就一定准确，后面会继续更新如何准确的估算物质性质，敬请期待，嘻嘻</p>]]></content>
      
      
      <categories>
          
          <category> 化工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Aspen </tag>
            
            <tag> HYSYS </tag>
            
            <tag> ProII </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ProII入门和输出简洁规范报告</title>
      <link href="/posts/a13ccbb4/"/>
      <url>/posts/a13ccbb4/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202306051613114.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Aspen&#x2F;HYSYS和PROII，这两大化工过程模拟的巨头，做化工工艺设计的应该没有人还不会用吧（狗头</p><p>Aspen已经孰能生巧了，HYSYS也略有小成，唯独PROII我还没怎么接触过，最近在机缘巧合之下，我正在参与的这个项目的某个塔器设计刚好是由某设计院设计的，他们就采用的是PROII，突然就对这个老大哥来了兴趣</p><p>网上自己找了一点资源，看了看，鼓捣鼓捣了一天，也算有点点能入门了，最起码常规单元操作和物性估算算是会了，也突然想起自己很长时间没更新博客了，就来总结一下如何操作，如何输出规范的简洁单元操作和流股报告</p><p>这篇文章通篇以乙醇-水体系分离作为案例来分享如何完成一个简单的PROII模拟</p><blockquote><p>本人电脑上PROII  10.0&#x2F;10.2版本都有，区别不大，以10.2版本为例</p></blockquote><h2 id="创建文件，输入组分"><a href="#创建文件，输入组分" class="headerlink" title="创建文件，输入组分"></a>创建文件，输入组分</h2><p>打开PROII，主界面会出现欢迎界面，简单的描述了不同颜色对应的状态和一个查看手册的按钮（手册为英文）</p><p>点击ok进入主界面</p><p>点击左上角新建一个文件，进入新建文件主界面</p><p>主界面主要分为四大区域，如图所示</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202306051624818.png"></p><p>红色框框亮起代表需要用户自己输入的地方，绿色代表程序默认的参数</p><p>那么就要开始第一步操作了，输入组分</p><p>在功能区找到亮着红色框框的组分选择按钮，点开</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202306051626440.png"></p><p>点击Select from Lists</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202306051628480.png"></p><p>和Aspen类似，选择要查找的数据库，推荐使用SIMSCI官方数据库</p><p>选择需要查找的类型，推荐使用CAS号来查询，非常准确</p><p>输入CAS号，点击查找</p><p>选择目标组分，点击Add Components添加到组分列表</p><p>点击OK完成组分输入</p><blockquote><p>对于数据库中没有的组分，我会单独出一期文章来说明Aspen&#x2F;HYSYS&#x2F;PROII这三个软件如何输入自定义组分</p></blockquote><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202306051633025.png"></p><p>如图所示，蓝色框框就代表已经输入完成</p><p>右边的功能按钮可以对组分列表进行编辑，例如重命名组分，或者对组分进行排序等操作</p><p>点击OK完成组分输入</p><h2 id="热力学方法选择"><a href="#热力学方法选择" class="headerlink" title="热力学方法选择"></a>热力学方法选择</h2><p>热力学方法选择，是过程模拟逃不开的步骤，物性方法选择的准确与否，直接关系到模拟结果是否可信</p><p>点击功能区的热力学数据</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202306051637860.png"></p><p>物性方法如何选择就不赘述了，可以参考Aspen的方法助手，或者查阅相关的热力学文献</p><p>对于本案例乙醇-水体系，采用NRTL或Wilson活度系数法是很不错的，故选择NRTL方法</p><p>左边的红框框是物性方法分类，我一般直接选择ALL，在全部方法里找到自己要选择的即可，如果你比较懂，可以选择适合的分类以便于更快的查找到自己想要的方法</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202306051641888.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202306051641404.png"></p><p>选择好方法，点击Add添加时弹出的这个弹框，是让我们选择是否有第二液相，如果没有，选择默认OK就行</p><p>对于物性方法下方的选项，是针对焓流计算的修正，无特殊需要的话，默认即可</p><p>点击OK完成热力学方法的选择</p><h2 id="搭建流程"><a href="#搭建流程" class="headerlink" title="搭建流程"></a>搭建流程</h2><p>完成简单的组分输入和热力学方法选择之后，我们就已经完成了前期的准备工作，可以进行流程搭建了</p><p>主界面最右边为模型选项板，模型选项板最上方为流股</p><p>开始搭建流程：</p><p>注意，在输入塔模块的时候会有相应的弹窗：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202306051647755.png"></p><p>很显然，condenser为冷凝器，reboiler为再沸器，需要输入的红框是塔板数，而下方的选项是选择进料方式</p><p>进口闪蒸（汽液混合相进料）选择第二个（上图所示），泡点进料（液相进料）选择第一个</p><p>搭建好流程后如图：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202306051651394.png"></p><p>红框也就是S1，E1，T1都是需要输入参数的地方 </p><h2 id="参数输入"><a href="#参数输入" class="headerlink" title="参数输入"></a>参数输入</h2><p>首先输入进料S1的数据</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202306051653680.png"></p><p>点击S1，会出现左边的对话框，点击选择默认的流股输入格式后出现右边的对话框</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202306051654872.png"></p><p>三种输入模式，第一种是输入总流量，再输入组分分率；第二种是直接输入各组分流量；第三种为混合输入</p><p>推荐使用第二种</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202306051656583.png"></p><p>当鼠标光标停留在需要输入的地方时，注意左上角可以选择UOM选项来更改需要输入的单位，这里我们更改为质量流量</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202306051657308.png"></p><h2 id="单位制选择"><a href="#单位制选择" class="headerlink" title="单位制选择"></a>单位制选择</h2><p>当出现刚才那样需要更换单位的情况时，可以选择一个一个去更改（如果你不嫌弃麻烦</p><p>也可以选择直接更改全局单位</p><p>在主界面上方功能区有一个计量单位的按钮，打开它</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202306051659824.png"></p><blockquote><p>这是10.2版本的界面，其他版本可能略有不同</p></blockquote><p>最上方的Initialize from UOM按钮可以更换单位制</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202306051701992.png"></p><p>从上到下依次为，英制单位，米制单位，国际单位</p><p>推荐使用米制单位</p><p>然后在下方的每个选框里可以更换自己想要的单位，最下方是计量基准，可以更换为摩尔、质量、标准体积等</p><p>推荐使用质量基准</p><p>选择OK即可</p><h2 id="继续参数输入"><a href="#继续参数输入" class="headerlink" title="继续参数输入"></a>继续参数输入</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202306061503879.png"></p><p>输入组分质量流量</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202306061504713.png"></p><p>这里是需要输入流股S1的工艺参数，至少设置两个</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202306061505961.png"></p><p>这里第一个我们选择压力，可以看到，单位不是我们想要的，就可以通过左上角的UOM修改为自己想要设置的单位</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202306061507813.png"></p><p>10kpag微正压进料，第二个限制条件我们选择泡点温度，也就是bubble point</p><p>当然也可以根据条件输入温度，或者露点，气相分率等</p><p>点击ok输入完成，可以在流程图中看到S1由红色变成了黑色，代表输入完成</p><p>接下来输入E1进料预热器的条件</p><blockquote><p>注意，这里的进料预热器是为了保证塔进料条件的，一般常规选择下，我们使用泡点进料，S1的状态已经规定了泡点温度，所以这里的换热器设置泡点温度是为了冗余设计，可以根据自己塔器选择的进料形式调节换热器的条件</p></blockquote><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202306061512430.png"></p><p>绿色框框是程序默认值，一般无特殊情况不需要修改</p><p>蓝色框框是已经输入的或者流股连接的已知值，一般也不需要修改</p><p>打开specification</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202306061514008.png"></p><p>这里需要规定换热器的制定工艺参数</p><blockquote><p>注意，可以看到这里都是热流股的相关参数，如果需要更改为冷凝器，可以在上一个界面的蓝色框也就是 process stream里进行更改为冷流股</p></blockquote><p>这里我们选择hot product liquid fraction，也就是液相分率</p><p>定义为1，也就是泡点</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202306061518539.png"></p><p>其他两个参数分别就是换热面积和传热UA系数，对于我们简洁模拟来说不需要考虑</p><p>ok之后可以看到E1也变为了黑色</p><p>接下来输入最复杂的塔器</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202306061520254.png"></p><p>可以看到，最右边的蓝色框和绿色框分别是20和30</p><p>20代表我们初始输入的塔板数为20个，30则是计算迭代次数</p><p>最左边的一列，两个红框，第一个是塔压力设置，第二个则是进料点和采出量设置，最下方的蓝色框是再沸器相关参数设置</p><p>右边的一列，蓝色框是冷凝器相关形式和参数设置，红色框为塔器主要工艺参数设置</p><p>需要注意的是，在本次案例中为简洁精馏，蓝色框和绿色框不需要单独输入，都是系统已经设置好的</p><p>只需要输入三个红色框即可</p><p>第一个，塔压力设置：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202306061526230.png"></p><p>塔顶压力10kpag，全塔压降0kpa</p><blockquote><p>per tray是塔板压降，右侧可以定义每块塔板的压力</p></blockquote><p>第二个：进料点和采出量设置：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202306061528328.png"></p><blockquote><p>在这里也可以设置进料形式哦，塔板上进料或者闪蒸进料</p></blockquote><p>设置进料点为第十块塔板，塔顶采出量为500kg&#x2F;h</p><p>在点击OK之后，会出现下面的对话框：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202306061530141.png"></p><p>这里是指是否需要把S3也就是塔顶采出量作为设计规范来执行计算，类似于aspen中的设计规范变量</p><p>这里我们选择是，固定塔顶采出为500kg&#x2F;h</p><p>最后一个红色框，主要参数设定，点击之后也会出现一个对话框：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202306061535272.png"></p><p>这里是指是否需要把默认的回流比作为设计规范值</p><p>我们选择是</p><p>就会出现塔器的主要约束参数表</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202306061536690.png"></p><p>可以看到，上方为主要设计规范的约束，也就是我们刚才输入的塔顶采出500kg，默认回流比为3</p><p>下方代表需要同时计算塔顶冷凝器和再沸器</p><p>注意，这里是可以对这些参数进行修改的，点击对应的参数就会出现修改的页面，或者在右边取消计算某个约束</p><p>点击ok之后就完成了塔的参数输入</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202306061539277.png"></p><h2 id="运行和查看结果"><a href="#运行和查看结果" class="headerlink" title="运行和查看结果"></a>运行和查看结果</h2><p>主界面的上方默认功能区就有运行模拟的按钮，全称为运行模拟计算，执行输出计算</p><p>也可以在运行的选项卡里点击运行模拟计算，执行输出计算</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202306061541072.png"></p><p>可以看到，模块都为蓝色，说明计算完成，并且无错误，左边的消息框会显示计算过程和计算结果</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202306061542577.png"></p><p>这就和aspen的0error和0waring一样</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202306061544396.png"></p><p>对于模块和流股，都可以使用右键，打开数据查看窗口，或者查看结果摩尔&#x2F;质量单位来进行查看结果</p><p>打开数据查看窗口这一功能，我们下文再介绍，先简单的说一下查看结果和查看Excel结果</p><p>例如，塔T1的查看结果质量单位：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202306061547472.png"></p><p>他是会单独打开一个notepad++来查看一个数据文件，同理，打开Excel也是一样，单独打开一个文件查看结果</p><h2 id="格式化结果输出"><a href="#格式化结果输出" class="headerlink" title="格式化结果输出"></a>格式化结果输出</h2><p>接下来我说一下我个人最推荐的结果查看方式，那就是右键选项的第一个，数据查看窗口</p><p>例如塔T1的结果查看窗口：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202306061554326.png"></p><p>可以看到默认的情况下，塔的结果只有冷凝器和再沸器的负荷，没有其他我们想要的数据</p><p>这个时候我们就需要用到这三个功能：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202306061556848.png"></p><p>顾名思义，第一个就是更改单位制，这个之前也说过了，就不详细赘述了</p><p>第二个是流股性质列表，也就是编辑右键流股的数据查看窗口所输出的数据</p><p>同理，第三个就是编辑模块右键的数据查看窗口的数据</p><p>首先来编辑一个流股性质列表，打开流股性质列表：</p><p>点击new</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202306061558779.png"></p><p>输入列表名称和使用的模板，模板可以选择无</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202306061559783.png"></p><p>然后在左边的备选框中把所需要输出的参数添加进右边的表格中</p><p>左边的备选框支持搜索哦</p><p>然后再左边的表格中选择需要修改单位的参数，可以在下面修改单位，修改完成之后点击保存即可</p><p>（可以按照我的这个模板进行设置）</p><p>打开单元操作性质清单</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202306061602996.png"></p><p>在unit type框中选择想要修改的模块类型，模块类型见主界面最右侧的模型选项板</p><p>我们以塔的为例，选择为Column</p><p>点击new新建，输入名称和模板</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202306061605718.png"></p><p>然后和上述的一样，添加参数，修改单位</p><p>保存即可</p><p>现在我们再看塔T1的结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202306061606435.png"></p><blockquote><p>在左下角选择自己刚才新建的模板</p></blockquote><p>可以看到负荷，回流比，回流质量流量</p><p>还有一个使用方法，例如</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202306061607837.png"></p><p>点击流股或单元性质表，添加到主流程中：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202306061608008.png"></p><p>双击列表，添加自己想要查看数据的流股或模块</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202306061612520.png"></p><blockquote><p>别忘了更换为自己新建的列表哦</p></blockquote><p>是不是很方便就能查看结果了呢~</p><p>今天的PROII入门就分享到这里啦~期待下一篇文章。</p>]]></content>
      
      
      <categories>
          
          <category> 化工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Aspen </tag>
            
            <tag> HYSYS </tag>
            
            <tag> ProII </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于使用FastGitHub出现的两个小问题</title>
      <link href="/posts/aee2403/"/>
      <url>/posts/aee2403/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202304011938508.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>fastGitHub是一个非常好用的小工具，用来解决GitHub访问慢，无法git clone、push等问题，但是在使用过程中会更改SSL证书，导致一些小问题</p><h2 id="在浏览器访问GitHub会提醒网站不安全"><a href="#在浏览器访问GitHub会提醒网站不安全" class="headerlink" title="在浏览器访问GitHub会提醒网站不安全"></a>在浏览器访问GitHub会提醒网站不安全</h2><p>如图所示，开了fastGitHub之后访问GitHub由于SSL证书没有验证过，导致无法访问</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202304011941535.jpg"></p><blockquote><p>浏览器：火狐</p></blockquote><p>在火狐地址栏输入：<code>about:config</code> </p><p>搜索：<code>security.enterprise_roots.enabled</code> </p><p>将该项改为<code>true</code> 即可</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202304011944836.png"></p><h2 id="在git-clone时由于SSL安全性问题无法clone"><a href="#在git-clone时由于SSL安全性问题无法clone" class="headerlink" title="在git clone时由于SSL安全性问题无法clone"></a>在git clone时由于SSL安全性问题无法clone</h2><p>和火狐浏览器遇到的问题一样，都是https证书的问题</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202304011945505.png"></p><p>在git bash输入<code>git config --global http.sslverify false</code> 即可</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>不论是火狐浏览器还是git修改这两个安全项，都有一定的安全风险，可能会遭到中间人攻击，或者被恶意网站攻击，遇到假SSL证书等，请慎重考虑</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202304011950512.png"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FastGitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Aspen使用SFE助手辅助液固相转化模拟</title>
      <link href="/posts/d2cc9aba/"/>
      <url>/posts/d2cc9aba/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202303311614940.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前我们讲过的涉及到固液平衡的领域基本上是电解质（盐），也即通过使用电解质向导（<a href="https://imbhj.com/posts/5bd536a4">Aspen电解质向导使用</a>）来完成</p><p>但不可否认的是，还有很多液固相转化并不涉及离子，比如精细化工、制药等行业，很多固体产品都是通过结晶获取，但它们很多都是有机分子，而非离子</p><p>这种情况下电解质向导就无法实现上述目标了，Aspen在V11版本以上中更新了一个SFE助手</p><blockquote><p>SFE: solid-fluid equilibrium，即流固相平衡</p></blockquote><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202303311614681.png"></p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>我们用一个案例来说明一下SFE助手的使用，比电解质向导简单很多</p><p>香兰素（vanillin，C8H8O3，CAS:121-33-5）是一种香料、化工原料和医药中间体，可以通过溶液降温结晶的手段获得</p><p>我们需要模拟在正丙醇溶剂中降温结晶（60℃→25℃）得到香兰素</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202303311614747.png" alt="香兰素结构"></p><blockquote><p>画的有点丑，不过应该就是这个</p></blockquote><p>输入香兰素和正丙醇物质</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202303311614550.png"></p><p>使用SFE助手，选择香兰素常规组分</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202303311614638.png"></p><p>点击下一步生成化学反应，最后点击完成。这样软件就自动生成了固体组分和固-液转化反应</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202303311614216.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202303311614665.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202303311615920.png"></p><p>接下来，我们进入反应C-1，输入参考文献**[1]**提供的反应平衡常数（也就是溶解度拟合方程）</p><blockquote><p>[1]赵海平. 香兰素结晶过程研究[D]. 天津大学. 2013.</p></blockquote><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202303311615496.png"></p><p>因为文献原始数据浓度以摩尔分数为基准，因此需要在规定当中确认浓度计准为<strong>摩尔分率</strong></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202303311615187.png"></p><p>然后，进入平衡常数界面，文献使用Apelblet方程拟合，因此软件修改平衡常数拟合方程为第一个，然后输入正丙醇溶剂下的拟合数值即可</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202303311615857.png"></p><p>建立流程（结晶器在固体模块中）</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202303311615424.png"></p><p>输入S1进料信息<img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202303311615542.png"></p><p>设置结晶器模块参数，饱和度计算方法为化学反应，盐组分选择为香兰素固体，这样结晶过程即按照化学反应C-1的平衡数据来进行</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202303311615189.png"></p><p>运行模拟，得到模拟结果：结晶香兰素固体的质量流量</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202303311615149.png"></p><p>以上就是非电解质固液相平衡过程的模拟和SFE助手的使用演示</p><blockquote><p>SFE助手的作用目前来看也就是自动生成固体组分和平衡方程</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 化工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Aspen </tag>
            
            <tag> SFE助手 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Aspen电解质向导使用以及表观或真实组分选择</title>
      <link href="/posts/5bd536a4/"/>
      <url>/posts/5bd536a4/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202303311501784.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在流程模拟的过程中，有一类物质，是较为特殊的，那就是电解质。电解质过程在酸气洗涤、无机盐结晶等方面较为常见。气液相接触或者液固相接触时不仅仅发生相平衡过程，同时伴随着溶解、电离或者电离平衡的过程，也可以说是反应平衡过程。</p><p>使用Aspen进行电解质过程的模拟时，首先遇到的第一个困难就是电解质或者说离子的输入。</p><p>当然Aspen数据库中会有一些离子的数据，比如最常见的Na+和Cl-，直接输入ID的话Aspen是可以识别到的</p><p>但是我们输入电解质的目的是为了生成电离（电离平衡）或者溶解平衡的方程式</p><p>手动输入组成的ID是没有办法从数据库中自动提取相关的方程式的（如果数据库当中有的话）</p><p>因此需要用到一个工具：电解质向导</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202303311501792.png"></p><h2 id="电解质向导"><a href="#电解质向导" class="headerlink" title="电解质向导"></a>电解质向导</h2><blockquote><p>Aspen版本：V11</p></blockquote><p>以氯化钠结晶为案例，我们需要氯化钠的溶解平衡和电离方程式相关数据</p><p>首先输入常规组分氯化钠和水：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202303311501709.png"></p><p>选择氯化钠，点击电解质向导，数据源选择默认数据库</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202303311502709.png"></p><p>点击下一步，选择电解质组分，水会默认为电解质</p><p>将氯化钠选择到电解质一列，选择氢离子的表现形式，规定反应的类型，选择好之后点击下一步</p><blockquote><p>如果需要就勾选，不需要就不勾选，这里我们不需要考虑水的解离和冰的生成，因此不勾选</p></blockquote><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202303311502584.png"></p><p>Aspen会自动在数据库中检索涉及规定组分的方程式以及生成的物质，包括固体氯化钠的生成（氯化钠的溶解平衡）和氯化钠的电离，对于生成的反应，如果我们不需要就可以选中然后点击移除</p><p>其次还需要选择物性方法，电解质组成常规的模拟方法为ELECNRTL，选择好之后点击下一步</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202303311502516.png"></p><p>最后一步，选择电解质模拟方法，包括真实组分方法和表观组分方法</p><p>这两个方法其实并不会影响模拟过程和结果，只会影响模拟结果的报告形式</p><p>如果选择真实组分，那么结果报告就会以例如Na+、Cl-、NaCl(S)等组分的真实存在形式输出结果，而如果选择表观组分方法，则只会按照电离之前的形式，例如NaCl进行结果的报告，不会显示离子</p><p>所以，一般而言我们会选择真实组分进行模拟</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202303311502363.png"></p><p>在这个时候也可以输入亨利组分，也可以检查反应方程和平衡常数，当然这都不是必须的，可以点击完成输入</p><p>这个时候我们需要的离子、固体就已经自动输入完成了</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202303311502996.png"></p><p>同时，点击化学反应，我们可以看到体系的电离和溶解反应，以及溶解平衡的数据（因为氯化钠在水中完全电离，所以没有电离平衡）</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202303311502565.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202303311502498.png"></p><p>电解质向导的重要之处就在于拿到电离或者溶解平衡的数据</p><p>不管是酸气洗涤、净化，还是结晶，我们都需要用到平衡数据，如果没有这个数据，那么软件就不认为模拟的体系存在上述平衡，那么模拟是无法成功的</p>]]></content>
      
      
      <categories>
          
          <category> 化工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Aspen </tag>
            
            <tag> 电解质 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开源化工流程模拟软件分享</title>
      <link href="/posts/3568366/"/>
      <url>/posts/3568366/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202302092006430.png"></p><p>我们最常使用的流程模拟软件，主要有Aspen Plus、Aspen HYSYS、Pro II，其他的也有包括ChemCAD、gPROMS等等，但是这些都是商用的化工流程模拟软件，一般也都买不起。目前各个领域都有很多开源的软件被开发出来，比如说CFD流场模拟领域的OpenFOAM和FastCAE，那么有人可能会问了，化工流程模拟有没有开源的免费软件呢？</p><p>今天，我们就来介绍两款开源化工流程模拟软件：DWSIM和COCO</p><h2 id="DWSIM"><a href="#DWSIM" class="headerlink" title="DWSIM"></a>DWSIM</h2><p>作为一个开源软件来说，DWSIM的功能是比较全的，基本满足了日常的需求。与下文要介绍的COCO相比，热力学模型更多更全，因为可以从第三方公开数据库导入物性数据，扩展了适用范围。单元操作版块的功能也比COCO更全。他的开发者是来自巴西Daniel Medeiros，有丰富的工程咨询经验。</p><p>DWSIM特性：</p><ul><li>遵循CAPE-OPEN规范</li><li>支持多变量优化、敏感性分析</li><li>支持通过Python自定义单元操作。可以用来扩展成模拟动态过程。</li><li>支持从第三方来导入物性数据，下文提到了一些公开的物性数据库。</li><li>支持多核 CPU和GPU并行计算 (CUDA&#x2F;OpenCL)。这对于模拟的流程体系庞大，或者要进行复杂的优化来说，是非常棒的功能。</li></ul><p><strong>软件框架：</strong></p><ul><li><strong>热力学模型:</strong> CoolProp, Peng-Robinson, Soave-Redlich-Kwong, Lee-Kesler,  Lee-Kesler-Plöcker, UNIFAC, Modified UNIFAC (Dortmund), UNIQUAC, NRTL,  Extended UNIQUAC, Chao-Seader, Grayson-Streed, Raoult’s Law, IAPWS-IF97  Steam Tables, IAPWS-08 Seawater, Black-Oil and Sour Water;</li><li><strong>单元操作:</strong> 混合器，分流器，分离器，泵，压缩机，管道，阀门，膨胀器，换热器，孔板，反应器，塔器，固体分离器，过滤器等。</li><li><strong>实用工具:</strong> 相图，水合物计算，压力安全阀计算，纯组分物性查询，临界点查询，容器计算等。</li><li><strong>工具:</strong> 数据回归，自定义化合物等。</li><li><strong>过程分析:</strong> 多变量有约束优化、敏感性分析。</li><li>可以加插件。</li></ul><p>软件官网：<a href="https://dwsim.fossee.in/">https://dwsim.fossee.in/</a>          <a href="https://dwsim.org/">https://dwsim.org/</a></p><p>GitHub项目：<a href="https://github.com/DanWBR/dwsim">https://github.com/DanWBR/dwsim</a></p><p>流程界面：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202302092019353.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202302092019546.png"></p><p>还支持动态模拟：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202302092019974.png"></p><h2 id="COCO"><a href="#COCO" class="headerlink" title="COCO"></a>COCO</h2><p>软件名称COCO是APE-OPEN to CAPE-OPEN的缩写，即遵循CAPE-OPEN规范的开源软件。COCO可以用于稳态过程模拟，支持常见的热力学模型，自带430种化工常见物质。开发者主要是荷兰、德国、英国的学者组成，有很强的化学、化工背景。<strong>开发者</strong>有Jasper van Baten（首席开发者，欧洲化工顶尖大学，荷兰代尔夫特理工博士），Richard Baur，Harry Kooijman，Ross Taylor，Frank Eckert，William M. Barrett Jr。</p><p>DWSIM特性：</p><ul><li>轻量级，简洁</li><li>遵循CAPE-OPEN规范，可以被其他流程模拟软件调用</li></ul><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202302092021230.png"></p><p><strong>软件框架：</strong></p><p>COCO由四个部分构成，即COFE，TEA，COUSCOUS，CORN。（作者取的名字很可爱lol）</p><ul><li>COFE（Flowsheet Environment），是图形用户界面模块，用来显示模拟的化工过程的流程图，基于序贯模块算法。</li><li>TEA（Thermodynamics for Engineering Applications），是热力学模块，算法来源于开发团队中两个成员的开源软件ChemSep（一款开源的柱分离模拟软件） ，涵盖430种常用的物质。</li><li>COUSCOUS（Unit-operations Simple package） ，是单元操作模块，含分离器、混合器、换热器、泵、反应器等模块。</li><li>CORN（Reaction Numerics package），自定义反应模块。用户可以自定义反应动力学，含一些基本的反应器，平推流、全混流等。</li></ul><p>此外还有一些可以添加的插件和模块，从而实现更多的功能，像水模块、微软电子表格输入模块。</p><p>同时还支持在COCO里面使用DWSIM！！！</p><p>软件官网：<a href="https://www.cocosimulator.org/">https://www.cocosimulator.org/</a></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202302092022081.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202302092022554.png"></p>]]></content>
      
      
      <categories>
          
          <category> 化工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 化工模拟 </tag>
            
            <tag> DWSIM </tag>
            
            <tag> COCO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见塔设备工作原理及特点</title>
      <link href="/posts/bf9b8246/"/>
      <url>/posts/bf9b8246/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202301191937482.png"></p><blockquote><p>文章转载自化工加公众号，原文链接：<a href="https://mp.weixin.qq.com/s/5bHf7mh_nqOtBp6px45g2w">动画演示多种塔设备工作原理及特点</a></p></blockquote><h2 id="气体冷却塔"><a href="#气体冷却塔" class="headerlink" title="气体冷却塔"></a>气体冷却塔</h2><p>热气体由塔底进入，与冷水在塔中鼓泡接触传热，塔顶出口是被冷却了的气体，塔底出口是被加热了的水。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202301191939026.gif"></p><p><strong>适用范围：</strong></p><p>工业生产或制冷工艺过程中产生的废热，一般要用冷却水来导走。冷却塔的作用是将挟带废热的冷却水在塔内与空气进行热交换，使废热传输给空气并散入大气中。例如：火电厂内，锅炉将水加热成高温高压蒸汽，推动汽轮机做功使发电机发电，经汽轮机作功后的废汽排入冷凝器，与冷却水进行热交换凝结成水，再用水泵打回锅炉循环使用。这一过程中乏汽的废热传给了冷却水，使水温度升高，挟带废热的冷却水，在冷却塔中将热量传递给空气，从风筒处排入大气环境中。</p><p>冷却塔应用范围：主要应用于空调冷却系统、冷冻系列、注塑、制革、发泡、发电、汽轮机、铝型材加工、空压机、工业水冷却等领域，应用最多的为空调冷却、冷冻、塑胶化工行业。</p><h2 id="筛板萃取塔"><a href="#筛板萃取塔" class="headerlink" title="筛板萃取塔"></a>筛板萃取塔</h2><p>塔底引入轻相（分散相）经筛孔分散后，在重相（连续相）中上升，到上一层筛板下部聚成一层轻液，再分散，再聚集。分散的过程即萃取传质过程。塔顶和塔底分别得到萃取相和萃余相。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202301191941323.gif"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202301191941199.png"></p><p><strong>性能特点：</strong></p><p>筛板萃取塔由于其处理量大、结构简单、造价低廉而被广泛应用于化工生产过程中。塔内液液两相的流动结构对传质效率有着重要影响，同时连续相的流动结构又与塔内件结构密切相关。</p><h2 id="填料萃取塔"><a href="#填料萃取塔" class="headerlink" title="填料萃取塔"></a>填料萃取塔</h2><p>萃取塔（英文名称extraction column）又名抽提塔，一种化学工业、石油炼制、环境保护等工业部门常用的液-液质量传递设备。液-液萃取是质量传递的一种方式，将混合物溶液中某一种或几种化合物组分，用另外一种液体（称作溶剂，与混合物溶液的溶剂互不相溶）将其提取出来，使其得到分离、富集、提纯。这种过程称作萃取、抽提、液-液萃取，溶剂萃取过程。所采用的设备叫做萃取器，有一次和多次萃取，有间隙和连续萃取过程之分，连续多次萃取采用的萃取器是一种塔式设备，称为萃取塔。其内部结构是利用重力或机械作用使一种液体破碎成液滴，分散在另一连续液体中，进行液-液萃取。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202301191942335.gif"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202301191942819.gif"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202301191943683.jpeg"></p><p><strong>性能特点：</strong></p><p>萃取设备种类很多，填料萃取塔是应用最广泛的萃取设备之一。它不仅具有结构简单，便于制造和安装等优点，而且由于新刮填料的开发，使填料萃取塔的处理能力大幅度提高，传质效率有所改善;因此近年来填料萃取塔的研究和应用得到了迅速的发展。但是由子液液萃取过程两相密度差小，连续相粘度较大、两相轴向返混严重、界面现象复杂。</p><p>影响萃取过程的因素非常多，而其中很多因素尚末被充分理解。大多数可用的数据是在小吧实验设备中测量的，通常实验设备只有几英寸直径和几英尺高。因而，所得关系式只能用干粗略的估算，设计时也应留有充分的余地。与梢馏和吸收等气液传质过程相比，填料萃取塔的设计具有一些不同的特点。</p><h2 id="填料吸收塔"><a href="#填料吸收塔" class="headerlink" title="填料吸收塔"></a>填料吸收塔</h2><p>被吸收的混合气由塔底进入，吸收液从塔顶喷淋而下，液体与气体在填料表面进行气-液传质。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202301191943671.gif"></p><p>填料塔是以塔内的填料作为气液两相间接触构件的传质设备。填料塔塔身是一直立式圆筒，底部装有填料支承板，填料以乱堆或整砌的方式放置在支承板上。填料的上方安装填料压板，以防被上升气流吹动。液体从塔顶经液体分布器喷淋到填料上，并沿填料表面流下。气体从塔底送入，经气体分布装置(小直径塔一般不设气体分布装置)分布后，与液体呈逆流连续通过填料层的空隙，在填料表面上，气液两相密切接触进行传质。填料塔属于连续接触式气液传质设备，两相组成沿塔高连续变化，在正常操作状态下，气相为连续相，液相为分散相。</p><p>当液体沿填料层向下流动时，有逐渐向塔壁集中的趋势，使得塔壁附近的液流量逐渐增大，这种现象称为壁流。壁流效应造成气液两相在填料层中分布不均，从而使传质效率下降。因此，当填料层较高时，需要进行分段，中间设置再分布装置。液体再分布装置包括液体收集器和液体再分布器两部分，上层填料流下的液体经液体收集器收集后，送到液体再分布器，经重新分布后喷淋到下层填料上。</p><p>填料塔具有生产能力大，分离效率高，压降小，持液量小，操作弹性大等优点。</p><p>填料塔也有一些不足之处，如填料造价高;当液体负荷较小时不能有效地润湿填料表面，使传质效率降低;不能直接用于有悬浮物或容易聚合的物料;对侧线进料和出料等复杂精馏不太适合等。</p><p><strong>性能特点：</strong></p><p>利用塔内填料，以增加吸收剂（植物油或矿物油）与尾气接触面积的溶剂回收设备。通过气液接触进行的一种气液交换设备。</p><p>填料塔由填料、塔内件及筒体构成。填料分规整填料和散装填料两大类。塔内件有不同形式的液体分布装置、填料固定装置或填料压紧装置、填料支承装置、液体收集再分布装置及气体分布装置等。与板式塔相比，新型的填料塔性能具有如下特点：生产能力大、分离效率高、压力降小、操作弹性大、持液量小等优点。</p><h2 id="往复筛板萃取塔"><a href="#往复筛板萃取塔" class="headerlink" title="往复筛板萃取塔"></a>往复筛板萃取塔</h2><p>利用曲轴，使中心轴上的筛板做上下往复运动，促进液体在筛孔喷射引起分散混合，进行接触传质。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202301191944738.gif"></p><h2 id="转盘筛板萃取塔"><a href="#转盘筛板萃取塔" class="headerlink" title="转盘筛板萃取塔"></a>转盘筛板萃取塔</h2><p>利用转盘的机械回转，带动连续相和分散相一起转动，增加相际接触面积，强化萃取传质过程。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202301191945412.gif"></p><h2 id="板式精馏塔"><a href="#板式精馏塔" class="headerlink" title="板式精馏塔"></a>板式精馏塔</h2><p>板式塔为逐级接触式气液传质设备，它主要由圆柱形壳体、塔板、溢流堰、降液管及受液盘等部件构成。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202301191945941.gif"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202301191945961.gif"></p><p>操作时，塔内液体依靠重力作用，由上层塔板的降液管流到下层塔板的受液盘，然后横向流过塔板，从另一侧的降液管流至下一层塔板。溢流堰的作用是使塔板上保持一定厚度的液层。气体则在压力差的推动下，自下而上穿过各层塔板的气体通道（泡罩、筛孔或浮阀等），分散成小股气流，鼓泡通过各层塔板的液层。在塔板上，气液两相密切接触，进行热量和质量的交换。在板式塔中，气液两相逐级接触，两相的组成沿塔高呈阶梯式变化，在正常操作下，液相为连续相，气相为分散相。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202301191946948.gif"></p><p>一般而论，板式塔的空塔速度较高，因而生产能力较大，塔板效率稳定，操作弹性大，且造价低，检修、清洗方便，故工业上应用较为广泛。</p><h2 id="泡罩塔"><a href="#泡罩塔" class="headerlink" title="泡罩塔"></a>泡罩塔</h2><p>通常用来使蒸气（或气体）与液体密切接触以促进其相互间的传质作用。塔内装有多层水平塔板，板上有若干个供蒸气（或气体）通过的短管，其上各覆盖底缘有齿缝或小槽的泡罩，并装有溢流管。操作时，液体由塔的上部连续进入，经溢流管逐板下降，并在各板上积存液层，形成液封；蒸汽（或气体）则由塔底进入，经由泡罩底缘上的齿缝或小槽分散成为小气泡，与液体充分接触，并穿过液层而达液面，然后升入上一层塔板。短管装在塔内的，称内溢流式；也有装在塔外的，称外溢流式。泡罩塔广泛用于精馏和气体吸收。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202301191946188.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202301191946033.jpeg"></p><p><strong>性能特点：</strong></p><p>泡罩塔板的优点是操作弹性较大，塔板不易堵塞；缺点是结构复杂、造价高，板上液层厚，塔板压降大，生产能力及板效率较低。泡罩塔板已逐渐被筛板、浮阀塔板所取代，在新建塔设备中已很少采用。</p><h2 id="洗涤塔"><a href="#洗涤塔" class="headerlink" title="洗涤塔"></a>洗涤塔</h2><p>洗涤塔与精馏塔类似，由塔体，塔板，再沸器，冷凝器组成。由于洗涤塔是进行粗分离的设备，所以塔板数量一般较少，通常不会超过十级。洗涤塔适用于含有少量粉尘的混合气体分离，各组分不会发生反应，且产物应容易液化，粉尘等杂质（也可以称之为高沸物）不易液化或凝固。当混合气从洗涤塔中部通入洗涤塔，由于塔板间存在产物组分液体，产物组分气体液化的同时蒸发部分，而杂质由于不能被液化或凝固，当通过有液体存在的塔板时将会被产物组分液体固定下来，产生洗涤作用，洗涤塔就是根据这一原理设计和制造的。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202301191947379.jpeg"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202301191947123.jpeg"></p><p><strong>性能特点：</strong></p><ul><li>水洗式废气处理系统，价格便宜、处理方法简单；</li><li>直立式结构最适用于经济空间安装；</li><li>适用于气态及液态污染源；</li><li>处理单一污染源；</li><li>适用于中低风量；</li></ul><h2 id="湍球塔除尘器"><a href="#湍球塔除尘器" class="headerlink" title="湍球塔除尘器"></a>湍球塔除尘器</h2><p>塔内放油一定量的聚乙烯球形填料，气速达到一定值时，小球悬浮并剧烈翻腾旋转和相互碰撞，达到传质和除尘的效果。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202301191948736.gif"></p><p><strong>性能特点：</strong></p><p>湍球除尘塔采用了先进的气体动力学“流态化理论”和“流化床流化技术”进行设计，同时采用液膜技术、紊流技术、流化技术、动力吸收技术、高效除尘技术、高效除湿技术，集多种技术为一体，表现出了优越的技术性能。它克服了传统塔器易结垢、易堵塞、脱硫效率低、运行不稳定、运行费用高等缺点，同时把液气比降至最低1～3L&#x2F;m3，把运行费用也降至到最低，是目前西方国家推出的第三代主流除尘设备。</p><h2 id="分馏塔"><a href="#分馏塔" class="headerlink" title="分馏塔"></a>分馏塔</h2><p>如果将蒸气凝成的液体重新蒸馏，即又进行一次气液平衡，再度产生的蒸气中，所含的易挥发物质组分又有增高，同样，将此蒸气再经冷凝而得到的液体中，易挥发物质的组成当然更高，这样我们可以利用一连串的有系统的重复蒸馏，最后能得到接近纯组分的两种液体。应用这样反复多次的简单蒸馏，虽然可以得到接近纯组分的两种液体，但是这样做既浪费时间，且在重复多次蒸馏操作中的损失又很大，设备复杂，所以，通常是利用分馏柱进行多次气化和冷凝，这就是分馏。而分馏塔就是对混合挥发液体（例如石油）进行分馏的一种化工设备。</p><p><strong>工作原理：</strong></p><p>在有限的空间内，尽可能的增大液相混合物的热交换面积，一般用于精馏分馏的混合物为有机共沸物，共沸物从反应釜内首先受热上升至分馏段，沸点低的继续上升，因为塔顶在受到低沸点物的传热后温度和低沸点物一致，所以低沸点物被分馏出来，而较高沸点物因为没有达到相应的沸点，故会受冷却后回流至反应釜内或分馏柱下半部分，待低沸点物被完全馏出后，较高沸点物相继被分馏，然后是高沸点物的馏出，最后反应釜底部是残渣。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202301191948591.jpeg"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202301191949232.jpeg"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202301191949619.jpeg"></p><h2 id="连续液液萃取塔"><a href="#连续液液萃取塔" class="headerlink" title="连续液液萃取塔"></a>连续液液萃取塔</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202301191949160.jpeg"></p><p>它由带有水平静环挡板垂直的筒体构成。静环挡板为中心开孔的平板，静环挡板将圆筒分成一系列萃取室。萃取室中心有一动环，动环的直径略小于静环挡板的开孔直径，一系列的动环平行的安装在转轴上，这样，动环和轴可以方便的装入塔内。中间两副法兰之间是混合段，液-液传质过程主要是在这里完成。中间上法兰至顶板部分为上分离段，用于澄清轻液；中间下法兰至底法兰部分为下分离段，用于澄清重液。在混合段上方和下方装有大孔筛板，重相从筛板下方进入塔内，轻相则从筛板上方进入塔内，筛板的作用是减少液体的搅动，以增强澄清段的分相效果。</p><p>和其它塔式萃取设备一样，工作时轻相和重相分别由塔下部和塔上部进入转盘塔，在塔内两相逆流接触，在转盘的作用下，分散相形成小液滴，增加两液间的传质面积，完成萃取过程的轻相和重相再分别由轻液出口和重液出口流出。</p><p><strong>萃取塔原理：</strong></p><p>萃取塔萃取过程是利用在两个不相混溶的液相中各种组分（包括目的产物）溶解度不同。从而达到分离的目的。它是分离液体混合物常用的单元操作，在发酵和生物工程生产上的应用相当广泛，它不仅可以提取和增浓产物，还可以除掉部分其他类似的物质，使产物获得初步纯化。</p>]]></content>
      
      
      <categories>
          
          <category> 化工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 塔设备 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>煤焦化厂生产工艺（附现场图）</title>
      <link href="/posts/18cd320e/"/>
      <url>/posts/18cd320e/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202301121945275.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文转载自化工加公众号，原文链接：<a href="https://mp.weixin.qq.com/s/-L14bLb74ZczudfzP2lSmg">最全的焦化厂生产工艺流程（附现场图）</a></p></blockquote><p>煤焦化又称煤炭高温干馏。以煤为原料，在隔绝空气条件下，加热到950℃左右，经高温干馏生产焦炭，同时获得煤气、煤焦油并回收其它化工产品的一种煤转化工艺。</p><p> 焦炭的主要用途是炼铁，少量用作化工原料制造电石、电极等。煤焦油是黑色粘稠性的油状液体，其中含有苯、酚、萘、蒽、菲等重要化工原料，它们是医药、农药、炸药、染料等行业的原料，经适当处理可以一一加以分离。</p><p>为保证焦炭质量，选择炼焦用煤的最基本要求是挥发分、粘结性和结焦性；绝大部分炼焦用煤必须经过洗选，以保证尽可能低的灰分、硫分和磷含量。选择炼焦作煤时，还必须注意煤在炼焦过程中的膨胀压力。用低挥发分煤炼焦，由于其胶质体粘度大，容易产生实高膨胀压力，会对焦炉砌体造成损害，需要通过配煤炼焦来解决。</p><p>焦化厂生产工艺主要有以下五个部分：原料、备煤工艺、炼焦工艺、化工生产工艺、化工产品。</p><h2 id="一-原料"><a href="#一-原料" class="headerlink" title="一 原料"></a>一 原料</h2><p>煤炭是炼焦的主要原料，根据成煤条件不同，自然界的煤可分为三大类，即腐植煤、残植煤和腐泥煤。</p><p><strong>腐植煤</strong>在自然界中分布最广，储量最大，在煤炭利用和化学加工方面占有主要的位置。煤炭分类及参数示例如下表：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202301121951861.jpeg"></p><h2 id="二-备煤工艺"><a href="#二-备煤工艺" class="headerlink" title="二 备煤工艺"></a>二 备煤工艺</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202301121951560.jpeg"></p><h3 id="1-备煤流程：备煤作业区操作完成"><a href="#1-备煤流程：备煤作业区操作完成" class="headerlink" title="1 备煤流程：备煤作业区操作完成"></a>1 备煤流程：备煤作业区操作完成</h3><p>备煤：对进厂的<strong>洗精煤</strong>进行处理，以达到炼焦要求，通常把原料煤在炼焦前进行的工艺处理过程称为备煤工艺过程。达到炼焦要求之后，通过<strong>皮带</strong>被输送到<strong>煤塔</strong>供炼焦作业区使用。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202301121952742.jpeg"></p><p>主要流程：洗精煤(&lt;80mm)由汽车运来（预留火车卸料系统）→螺旋卸料机卸入卸煤槽→按煤的种类分别由不同的运煤皮带输送机→堆取料机主皮带→堆存作业→上煤→堆取料机取煤经带式输送机→配煤仓→电子自动配料秤→按相应比例配给到仓下皮带和除铁器除铁后→可逆反击锤式粉碎机被粉碎至&lt;3mm占85%以上→焦炉煤塔内供炼焦用。</p><h3 id="2-设备图解"><a href="#2-设备图解" class="headerlink" title="2 设备图解"></a>2 设备图解</h3><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202301121954203.jpeg" alt="螺旋卸车机"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202301121955141.jpeg" alt="煤场和堆取料机"></p><ul><li><p><strong>卸料</strong> ：汽车来煤自卸车直接入卸煤槽，非自卸车采用桥式螺旋卸车机卸车，卸约800吨&#x2F;小时</p></li><li><p><strong>精煤堆场</strong> ：煤场贮煤面积约34000平方米，7.4万吨精煤储存量，约为炼焦17天的<strong>用煤量</strong>；堆场设两台<strong>DQ3025型堆取料机</strong>，单台堆料能力为600t&#x2F;h，取料能力300t&#x2F;h，煤场设推土机库，辅助堆取料机作业。在精煤煤场设有<strong>喷洒水和喷洒覆盖剂</strong>装置, 可防止煤尘飞扬造成对周围环境的污染。</p></li></ul><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202301121956318.jpeg" alt="配煤仓"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202301121957895.jpeg" alt="煤塔"></p><ul><li><p><strong>配煤</strong> ：按比例配合不同煤种，使<strong>配合煤</strong>达到符合炼焦用煤的要求，配煤仓为直径8米的<strong>双曲线斗嘴仓</strong>7个。每个仓的储量约为<strong>500t</strong>。煤仓<strong>双曲线钢漏斗</strong>内衬<strong>超高分子塑料板</strong>，防止棚料。仓下配煤设备采用配料稳定，配比准确，自动化程度高的<strong>电子自动配料秤</strong>，系统控制为<strong>PLC</strong>控制。</p></li><li><p><strong>粉碎</strong> ：选用<strong>可逆反击锤式粉碎机PFCK</strong>两台，其单台破粹能力为<strong>250t&#x2F;h</strong>, 一开一备。该粉碎机是在吸收德、日同类设备先进技术开发而成，具有破碎比大、能力大、转速低、粉尘少、对煤的水分适应性强等优点；采用<strong>液力偶合器</strong>，能有效防护过载且能软启动；机体外壳开闭与反击板调节均采用<strong>液压装置</strong>，检修及更换锤头方便；采用组合式锤头，使用寿命长，维护、检修费用低，节约生产成本。</p></li></ul><h3 id="3-配煤工艺、配合煤指标"><a href="#3-配煤工艺、配合煤指标" class="headerlink" title="3 配煤工艺、配合煤指标"></a>3 配煤工艺、配合煤指标</h3><p><strong>配煤炼焦</strong> ：是把几种牌号不同的单种煤按—定的比例配合起来炼焦。</p><p><strong>为什么要配煤？主要原因如下：</strong></p><ul><li>节约优质炼焦煤，扩大炼焦煤源；</li><li>充分利用各种煤的结焦特性取长补短，改善冶金焦炭质量；</li><li>也能合理利用煤炭资源，在保证焦炭质量的前提下，增加炼焦化学产品的产率和炼焦煤气的发生量；</li><li>充分利用本地资源，因地制宜发展焦化企业。</li></ul><p><strong>配煤工艺</strong> ：包括两种：即先粉后配和先配后粉，大多数焦化厂包括我公司的焦化厂都采用后者。</p><p><strong>配煤的基本原则</strong>：</p><ul><li><strong>焦炭质量</strong>达到规定指标，满足使用部门的要求；</li><li>不会产生对炉墙有危害的<strong>膨胀压力</strong>和引起<strong>推焦困难</strong>；</li><li>在满足焦炭质量的前提下，尽量<strong>多配气煤</strong>，增加化产品产率，尽量少配优质煤，多配劣质煤； </li><li>尽可能<strong>降低</strong>配煤中的<strong>灰份和硫份</strong>；</li><li>充分利用本地资源，作到运输合理，降低成本，最大限度实行<strong>区域配煤</strong>；</li><li>力求达到配煤<strong>质量稳定</strong>，有利于生产和操作。</li></ul><p>配合煤的质量要求：水分9～12%；灰份≤10%；硫份≤0.9%；挥发24～30%；粉碎细度（ 煤料被粉碎后，1mm～3mm粒度级的煤的重量占全部煤料重量的百分数称之为配煤的细度）在90%左右；G值≥68；Y值12～20</p><h2 id="三-炼焦工艺"><a href="#三-炼焦工艺" class="headerlink" title="三 炼焦工艺"></a>三 炼焦工艺</h2><p>达到炼焦要求的配合煤被送到炼焦工段进行炼焦。  </p><p> <strong>炼焦原理</strong> ：配合煤的高温干馏。即把炼焦配煤在常温下装入炭化室后，煤在隔绝空气的条件下受到来自炉墙和炉底（1000~1100℃）的热流加热。煤料即从炭化室墙到炭化室中心方向，一层一层地经过干燥、预热、分解、产生胶质体、胶质体固化、半焦收缩、转变为焦炭的过程。</p><h3 id="1-设备"><a href="#1-设备" class="headerlink" title="1 设备"></a>1 设备</h3><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202301122006409.jpeg" alt="焦炉结构简图"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202301122006705.jpeg" alt="焦炉尺寸"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202301122007193.jpeg" alt="焦炉炉顶"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202301122007660.jpeg" alt="焦炉机侧"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202301122007122.jpeg" alt="焦炉横切面"></p><h3 id="2-工艺流程"><a href="#2-工艺流程" class="headerlink" title="2 工艺流程"></a>2 工艺流程</h3><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202301122007346.jpeg"></p><p>备煤车间来的洗精煤→<strong>输煤栈桥</strong>运入煤塔→装煤车行至煤塔下方→摇动给料机<strong>均匀逐层给料</strong>→<strong>21锤固定捣固机</strong>分层捣实→捣好的<strong>煤饼</strong>→从机侧装入炭化室→在950～1050℃的温度下高温干馏越22.5小时后→成熟的焦炭被<strong>推焦车</strong>经<strong>拦焦车导焦栅</strong>→推出落入<strong>熄焦车</strong>内→送至<strong>熄焦塔</strong>用水喷洒熄焦→由熄焦车送至凉焦台→补充熄焦、凉焦后，由<strong>刮板放焦机</strong>→放至<strong>皮带送焦场</strong>。</p><p>熄焦塔处设<strong>光电自动控制器</strong>，通过控制器中的时间继电器调整喷洒时间，保证红焦熄灭。</p><p>干馏过程中产生的<strong>荒煤气</strong>经炭化室顶部、上升管、桥管，入集气管。在桥管和集气管处用压力为约0.3MPa，温度为约78℃的<strong>循环氨水</strong>喷洒冷却，使约700℃的荒煤气冷却至84℃左右，再经吸气弯管和吸气管抽吸至<strong>冷鼓工段</strong>。在集气管内冷凝下来的焦油和氨水经焦油盒、吸气主管一起至冷鼓工段。</p><p><strong>冶金焦炭标准</strong>：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202301122012949.jpeg"></p><p><strong>焦炭作用</strong>：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202301122012446.jpeg"></p><p>焦炭在炼铁中的作用：骨架作用、提供热源、还原剂、渗碳剂。</p><h2 id="四-化工生产工艺"><a href="#四-化工生产工艺" class="headerlink" title="四 化工生产工艺"></a>四 化工生产工艺</h2><h3 id="1-冷鼓、电捕工艺"><a href="#1-冷鼓、电捕工艺" class="headerlink" title="1 冷鼓、电捕工艺"></a>1 冷鼓、电捕工艺</h3><p>炼焦工段来的焦油氨水与煤气的混合物约80℃→气液分离器，分离煤气与焦油氨水→粗煤气进入<strong>横管式初冷器</strong>，初冷器分上、下两段，在上段，用23℃<strong>化产循环水</strong>将煤气冷却到45℃，化产循环水升温到40℃→然后煤气入初冷器下段与16℃<strong>制冷水</strong>换热，煤气被冷却到22℃制冷水升温到23℃→冷却后的煤气进入<strong>煤气鼓风机</strong>进行加压→加压后煤气进入<strong>电捕焦油器</strong>，捕集<strong>焦油雾滴</strong>后的煤气→送往脱硫及硫回收工段。   </p><p>初冷器的煤气<strong>冷凝液</strong>由初冷器上段和下段分别流出→分别进入各自的<strong>冷凝液循环槽</strong>，由冷<strong>凝液循环泵</strong>送至初冷器上下段喷淋，如此循环使用，多余部分由泵抽送至<strong>机械化氨水澄清槽</strong>。</p><p>从气液分离器分离的焦油氨水与焦油渣去机械化氨水澄清槽。澄清后分离成三层，上层为<strong>氨水</strong>，中层为<strong>焦油</strong>，下层为<strong>焦油渣</strong>。</p><p>氨水→<strong>循环氨水槽</strong>，然后用循环氨水泵送至炼焦车间<strong>冷却荒煤气</strong>及初冷器上段和电捕焦油器间断吹扫喷淋使用。多余的氨水去<strong>剩余氨水槽</strong>，用剩余氨水泵送至脱硫工段进行<strong>蒸氨</strong>。</p><p>焦油→焦油<strong>中间槽</strong>贮存，当达到一定液位时，用焦油泵将其送至<strong>焦油槽</strong>，焦油需外售时，用焦油泵送往焦油槽车外售。</p><p><strong>焦油渣</strong>→定期送往煤场掺混炼焦。 </p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202301122015851.jpeg" alt="初冷器"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202301122015070.jpeg" alt="电捕焦油器"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202301122015326.jpeg" alt="冷鼓工段流程图"></p><h3 id="2-脱硫工艺"><a href="#2-脱硫工艺" class="headerlink" title="2 脱硫工艺"></a>2 脱硫工艺</h3><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202301122015232.jpeg" alt="脱硫设备及工艺流程图"></p><p>来自冷鼓工段的粗煤气进入脱硫塔下部与塔顶喷淋下来的脱硫液逆流接触洗涤后，煤气中硫化氢含量小于0.2 g&#x2F;Nm3，煤气经捕雾段除去雾滴后全部送至硫铵工段。</p><p>从脱硫塔中吸收了硫化氢和HCN的脱硫液至溶液循环槽，用溶液循环泵抽送至再生塔下部与空压站来的压缩空气并流再生，再生后的脱硫液返回脱硫塔塔顶循环喷淋脱硫。硫泡沫则由再生塔顶部扩大部分排至硫泡沫槽，再由硫泡沫泵加压后送至连续熔硫釜外售。</p><p>在脱硫塔中的主要反应为：<strong>H2S+2NH3&#x3D;(NH4)2S</strong></p><h3 id="3-蒸氨工艺"><a href="#3-蒸氨工艺" class="headerlink" title="3 蒸氨工艺"></a>3 蒸氨工艺</h3><p>由冷鼓来的剩余氨水经与从蒸氨塔底来的蒸氨废水在氨水换热器换热、加碱后，进入蒸氨塔。</p><p>在蒸氨塔中被蒸汽直接蒸馏，蒸出的氨汽入氨分缩器用循环水冷却，冷凝下来的液体入蒸氨塔顶作回流，未冷凝的含NH3（约10%）氨汽进入氨冷凝冷却器，用制冷水冷凝成浓氨水送脱硫工段作为脱硫补充液。</p><p>蒸氨塔塔底排出的蒸氨废水在氨水换热器中与剩余氨水换热后，入废水槽，然后与洗脱苯工段来的粗苯分离水一并由废水泵加压经废水冷却器用循环水冷却后送生化处理。</p><h3 id="4-硫铵工艺"><a href="#4-硫铵工艺" class="headerlink" title="4 硫铵工艺"></a>4 硫铵工艺</h3><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202301122018473.jpeg"></p><p>沸腾干燥器所用的热空气，经热风器加热后送入。</p><p>沸腾干燥器排出的废气经旋风除尘器捕集夹带的细粒硫铵结晶后，由排风机抽送至雾膜水浴除尘器进行湿式再除尘，最后排入大气。</p><p>硫铵饱和器喷淋室溢流的母液入满流槽，将少量的酸焦油分离，分离酸、焦油后的母液入母液贮槽，由小母液泵加压后送喷淋室喷淋。</p><p>外购来的硫酸卸至硫酸槽用硫酸泵送至硫酸高位槽，经控制流量自流入满流槽，调节硫铵饱和器内溶液的酸度。</p><p>饱和器法生产硫铵的主要反应有：<strong>2NH3+H2SO4&#x3D;(NH4)2SO4</strong></p><h3 id="5-洗脱苯工艺"><a href="#5-洗脱苯工艺" class="headerlink" title="5 洗脱苯工艺"></a>5 洗脱苯工艺</h3><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202301122019721.jpeg"></p><p>来自硫铵工段的粗煤气， 经终冷塔上段的循环水和下段的制冷水换热后,将煤气由55℃降至23℃。</p><p>然后从洗苯塔底部入塔，由下而上经过洗苯塔填料层，与塔顶喷淋的循环洗油逆流接触，煤气中的苯被循环洗油吸收，再经过塔的捕雾段脱除雾滴后离开洗苯塔，其中一部分送焦炉做回炉煤气、一部分送粗苯管式炉作燃料、一部分送制冷站作燃料、一部分送锅炉房作燃料，剩余煤气送气柜加压站，供居民用气或工业用气。</p><h3 id="6-富油流程"><a href="#6-富油流程" class="headerlink" title="6 富油流程"></a>6 富油流程</h3><p>洗苯塔底富油由贫富油泵加压后送至粗苯冷凝冷却器，与脱苯塔塔顶出来的粗苯汽换热，将富油预热至60℃左右，然后至油油换热器与脱苯塔底出来的热贫油换热，由60℃升到110℃左右，最后进入粗苯管式加热炉被加热至180℃左右，进入脱苯塔。</p><p>从脱苯塔顶蒸出的粗苯油水混和汽进入粗苯冷凝冷却器分别被从洗苯塔底来的富油和16℃制冷水冷却至30℃左右，然后进入粗苯油水分离器进行分离，分离出的粗苯入粗苯回流槽，部分粗苯经粗苯回流泵送至脱苯塔塔顶作回流，其余部分送往粗苯贮槽，用粗苯输送泵定期送粗苯计量槽外售。</p><p>油水分离器分离出的油水混合物入控制分离器，在此分离出的洗油送入贫油槽，分离出的粗苯分离水送至脱硫工段，与蒸氨废水一并送生化处理。</p><h3 id="7-贫油及蒸汽"><a href="#7-贫油及蒸汽" class="headerlink" title="7 贫油及蒸汽"></a>7 贫油及蒸汽</h3><p>脱苯后的热贫油从脱苯塔底流出，自流入油油换热器与富油换热，使其温度降至120℃左右，入贫油槽并由贫富油泵加压送至一段贫油冷却器和二段贫油冷却器，分别被32℃循环水和16℃制冷水冷却至约30℃，送洗苯塔循环喷淋洗涤煤气。</p><p>0.5MPaG蒸汽被粗苯管式加热炉过热至400℃左右，作为洗油再生器和脱苯塔的热源。</p><p>粗苯管式炉所需燃料由洗苯后的煤气经煤气过滤器过滤后供给。</p><h3 id="8-洗油再生流程"><a href="#8-洗油再生流程" class="headerlink" title="8 洗油再生流程"></a>8 洗油再生流程</h3><p>在洗苯脱苯的操作过程中，循环洗油的质量逐渐恶化，为保证洗油质量采用洗油再生器将部分热贫油进行洗油再生。</p><p>洗油再生量为循环洗油量的1~1.5％，用过热蒸汽加热，蒸出的油汽进入脱苯塔，残渣排入残油池定期送往煤场或外售。</p><p>为了降低洗油中的含萘量，脱苯塔中部进行侧线采萘，萘油流入萘扬液槽，用蒸汽压出送冷鼓机械化氨水澄清槽。</p><p>外购来的新洗油卸入新洗油地下槽后, 再用新洗油地下槽液下泵送入贫油槽，作循环洗油的补充。</p><p>由终冷塔冷凝所得的煤气冷凝液由冷凝液输送泵送至冷鼓工段。</p><h3 id="9-气柜流程"><a href="#9-气柜流程" class="headerlink" title="9 气柜流程"></a>9 气柜流程</h3><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202301122022998.jpeg"></p><p>来自洗脱苯的净煤气经进气柜水封进入储量2.3万立方米，从气柜出来的煤气经出气柜水封进罗茨风机加压到5~15KPa，大部分送总厂作为燃气使用，另一部分送到石灰作业区作为石灰窑用燃料。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202301122023749.png"></p><p>该焦化厂气柜为浮顶式气柜，有效高度为21.2m，安全高度为7~18m。</p><h2 id="五-化工产品"><a href="#五-化工产品" class="headerlink" title="五 化工产品"></a>五 化工产品</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202301122023847.jpeg"></p><p>上图所示是焦化厂主要生产产品，整体分析由以下几个部分组成：[１吨煤（干基）可以生产]</p><ul><li>约0.75吨焦炭；</li><li>约0.18吨焦炉煤气；</li><li>约0.04吨煤焦油；</li><li>约0.01吨粗苯；</li><li>约0.0085吨硫铵；</li><li>约0.02吨其它（包括硫膏）。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 化工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 煤焦化工艺 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>化工仪表常用缩写代称</title>
      <link href="/posts/15edb4b2/"/>
      <url>/posts/15edb4b2/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202212080844778.png"></p><blockquote><p><strong>下列缩写代称一般为通用型，各个厂设计习惯和规范不同可能会导致意义不同，仅供参考使用</strong></p></blockquote><h2 id="P-ID信息缩写"><a href="#P-ID信息缩写" class="headerlink" title="P&amp;ID信息缩写"></a>P&amp;ID信息缩写</h2><table><thead><tr><th>缩写</th><th>信息</th></tr></thead><tbody><tr><td>AE</td><td>分析仪表</td></tr><tr><td>AH</td><td>分析指标高报警</td></tr><tr><td>AHH</td><td>分析指标高高报警</td></tr><tr><td>AI</td><td>分析指示</td></tr><tr><td>AIA</td><td>分析指示报警</td></tr><tr><td>AIAS</td><td>分析指示报警连锁</td></tr><tr><td>AL</td><td>指标低报警</td></tr><tr><td>AND</td><td>模拟信号变数字信号</td></tr><tr><td>AP</td><td>分析测试点</td></tr><tr><td>AT</td><td>分析远传（变送器）</td></tr><tr><td>C.S.0</td><td>铅封开</td></tr><tr><td>C.S.C</td><td>铅封关</td></tr><tr><td>ESD</td><td>紧急切断（停车）</td></tr><tr><td>FALL</td><td>流量低低报警</td></tr><tr><td>FE</td><td>流量检测元件</td></tr><tr><td>FI</td><td>流量指示</td></tr><tr><td>FIA</td><td>流量指示报警</td></tr><tr><td>FIC</td><td>流量控制阀</td></tr><tr><td>FICA</td><td>流量控制报警</td></tr><tr><td>FICQ</td><td>流量累计</td></tr><tr><td>FIQ</td><td>流量累计</td></tr><tr><td>FIQA</td><td>流量计</td></tr><tr><td>FT</td><td>流量变送器</td></tr><tr><td>FV</td><td>流量控制阀</td></tr><tr><td>FY</td><td>流量信号转换器</td></tr><tr><td>I</td><td>电信号</td></tr><tr><td>I&#x2F;P</td><td>电信号转换成气信号</td></tr><tr><td>KC</td><td>程序控制</td></tr><tr><td>KQC</td><td>程序定量控制</td></tr><tr><td>KQV</td><td>程序定量控制阀</td></tr><tr><td>KQY</td><td>程序定量控制转换器</td></tr><tr><td>KV</td><td>程控阀</td></tr><tr><td>KY</td><td>程控阀信号转换器</td></tr><tr><td>LAHS</td><td>液位高报警连锁</td></tr><tr><td>LALL</td><td>液位低低报警</td></tr><tr><td>LALS</td><td>液位低</td></tr><tr><td>LC</td><td>锁定关报警连锁</td></tr><tr><td>LG</td><td>液位计</td></tr><tr><td>LI</td><td>液位指示</td></tr><tr><td>LIA</td><td>液位指示报警</td></tr><tr><td>LIAC</td><td>液位控制报警</td></tr><tr><td>LIAS</td><td>液位指示连锁</td></tr><tr><td>LIC</td><td>液位控制</td></tr><tr><td>LICA</td><td>液位控制报警</td></tr><tr><td>LICAS</td><td>液位控制报警连锁</td></tr><tr><td>LIS</td><td>液位连锁</td></tr><tr><td>LIT</td><td>液位显示信号变送</td></tr><tr><td>LO</td><td>锁定开</td></tr><tr><td>LSH</td><td>液位高连锁</td></tr><tr><td>LSL</td><td>液位低连锁</td></tr><tr><td>LT</td><td>液位信号远传</td></tr><tr><td>LV</td><td>液位控制阀</td></tr><tr><td>LY</td><td>液位信号转换器</td></tr><tr><td>PAHH</td><td>压力高高报警</td></tr><tr><td>PDG</td><td>数字压力表</td></tr><tr><td>PDI</td><td>压差显示</td></tr><tr><td>PDIA</td><td>压差显示报警</td></tr><tr><td>PDICA</td><td>压差控制报警</td></tr><tr><td>PDT</td><td>压差远传</td></tr><tr><td>PG</td><td>压力表</td></tr><tr><td>PI</td><td>压力显示</td></tr><tr><td>PIA</td><td>压力显示报警</td></tr><tr><td>PIC</td><td>压力控制信号</td></tr><tr><td>PICA</td><td>压力控制报警</td></tr><tr><td>PICAS</td><td>压力控制报警连锁</td></tr><tr><td>PSV</td><td>压力安全阀</td></tr><tr><td>PT</td><td>压力远传</td></tr><tr><td>PV</td><td>压力控制阀</td></tr><tr><td>PY</td><td>压力信号转换器</td></tr><tr><td>SHH</td><td>速度高高报警</td></tr><tr><td>SIAS</td><td>速度报警连锁</td></tr><tr><td>ST</td><td>速度变速器</td></tr><tr><td>STOP</td><td>停止按钮</td></tr><tr><td>SV</td><td>安全阀</td></tr><tr><td>TAHH</td><td>温度高报警连锁</td></tr><tr><td>TE</td><td>温度检测元件</td></tr><tr><td>TG</td><td>温度表</td></tr><tr><td>TI</td><td>温度指示</td></tr><tr><td>TIA</td><td>温度报警</td></tr><tr><td>TICA</td><td>温度控制报警</td></tr><tr><td>TIAS</td><td>温度报警连锁</td></tr><tr><td>TIC</td><td>温度控制阀</td></tr><tr><td>TICAS</td><td>温度控制报警连锁</td></tr><tr><td>TT</td><td>温度变送器</td></tr><tr><td>TV</td><td>气动薄膜控制阀</td></tr><tr><td>TY</td><td>电气阀门定位器</td></tr><tr><td>XV</td><td>两位控制阀门</td></tr><tr><td>XY</td><td>两位控制阀转换器</td></tr><tr><td>Y</td><td>信号转换器</td></tr><tr><td>YL</td><td>指示灯</td></tr><tr><td>ZI</td><td>阀位指示</td></tr><tr><td>ZIC</td><td>阀位指示-关</td></tr><tr><td>ZIO</td><td>阀位指示-开</td></tr><tr><td>ZS</td><td>阀位连锁</td></tr><tr><td>ZSC</td><td>阀位开关-关</td></tr><tr><td>ZSO</td><td>阀位开关-开</td></tr><tr><td>ZT</td><td>阀位变送</td></tr></tbody></table><h2 id="仪表字母缩写"><a href="#仪表字母缩写" class="headerlink" title="仪表字母缩写"></a>仪表字母缩写</h2><table><thead><tr><th>英文全称</th><th>英文缩写</th><th>中文含义</th></tr></thead><tbody><tr><td>TEMPERATURE WELL</td><td>TW</td><td>温升</td></tr><tr><td>TEMPERATURE INDICATOR</td><td>TI</td><td>温度表</td></tr><tr><td>TEMPERATURE TRANSMITTER</td><td>TT</td><td>温度变送器</td></tr><tr><td>TEMP INDICATOR CONTROLLER</td><td>TIC</td><td>温度显示控制器</td></tr><tr><td>TEMPERATURE CONTROL VALVE</td><td>TCV</td><td>温度控制阀</td></tr><tr><td>TEMPERATURE SWITCH HIGH</td><td>TSH</td><td>温度高开关</td></tr><tr><td>TEMPERATURE SWITCH HIGH HIGH</td><td>TSHH</td><td>温度高高开关</td></tr><tr><td>TEMPERATURE SWITCH LOW</td><td>TSL</td><td>温度低开关</td></tr><tr><td>TEMPERATURE SWITCH LOW LOW</td><td>TSLL</td><td>温度低低开关</td></tr><tr><td>TEMPERATURE ALARM HIGH</td><td>TAH</td><td>温度高报警</td></tr><tr><td>TEMPERATURE ALARM HIGH HIGH</td><td>TAHH</td><td>温度高高报警</td></tr><tr><td>TEMPERATURE ALARM LOW</td><td>TAL</td><td>温度低报警</td></tr><tr><td>TEMPERATURE ALARM LOW LOW</td><td>TALL</td><td>温度低低报警</td></tr><tr><td>PRESSURE INDICATOR</td><td>PI</td><td>压力表</td></tr><tr><td>PRESSURE TRANSIMITTER</td><td>PT</td><td>压力变送器</td></tr><tr><td>PRESSURE INDICATOR CONTROLLER</td><td>PIC</td><td>压力显示控制器</td></tr><tr><td>PRESSURE CONTROL VALVE</td><td>PCV</td><td>压力控制阀</td></tr><tr><td>PRESSURE SWITCH HIGH</td><td>PSH</td><td>压力高开关</td></tr><tr><td>PRESSURE SWITCH HIGH HIGH</td><td>PSHH</td><td>压力高高开关</td></tr><tr><td>PRESSURE SWITCH LOW</td><td>PSL</td><td>压力低开关</td></tr><tr><td>PRESSURE SWITCH LOW LOW</td><td>PSLL</td><td>压力低低开关</td></tr><tr><td>PRESSURE ALARM HIGH</td><td>PAH</td><td>压力高报警</td></tr><tr><td>PRESSURE ALARM HIGH HIGH</td><td>PAHH</td><td>压力高高报警</td></tr><tr><td>PRESSURE ALARM LOW</td><td>PAL</td><td>压力低报警</td></tr><tr><td>PRESSURE ALARM LOW LOW</td><td>PALL</td><td>压力低低报警</td></tr><tr><td>PRESSURE DIFFERENT SWlCH HIGH</td><td>PDSH</td><td>差压高开关</td></tr><tr><td>PRESSURE DIFFERENT SWICH LOW</td><td>PDSL</td><td>差压低开关</td></tr><tr><td>PRESSURE DIFFERENT ALARM LOW</td><td>PDAL</td><td>差压低报警</td></tr><tr><td>PRESSURE DIFFERENT ALARM HIGH</td><td>PDAH</td><td>差压高报警</td></tr><tr><td>LEVEL INDICATOR</td><td>LI</td><td>液位计</td></tr><tr><td>LEVEL GLASS TUBE</td><td>LG</td><td>液位玻璃管</td></tr><tr><td>LEVEL TRANSIMITTER</td><td>LT</td><td>液位变送器</td></tr><tr><td>LEVEL INDICATOR CONTROLLER</td><td>LIC</td><td>液位显示控制器</td></tr><tr><td>LEVEL CONTROL VALVE</td><td>LCV</td><td>液位控制阀</td></tr><tr><td>LEVEL SWITCH HIGH</td><td>LSH</td><td>液位高开关</td></tr><tr><td>LEVEL SWITCH HIGH H1GH</td><td>LSHH</td><td>液位高高开关</td></tr><tr><td>LEVEL SWITCH LOW</td><td>LSL</td><td>液位低开关</td></tr><tr><td>LEVEL SWITCH LOW LOW</td><td>LSLL</td><td>液位低低开关</td></tr><tr><td>LEVEL ALARM HIGH</td><td>LAH</td><td>液位高报警</td></tr><tr><td>LEVEL ALARM LOW</td><td>LOW</td><td>液位低报警</td></tr><tr><td>LEVEL ALARM HIGH HIGH</td><td>LAHH</td><td>液位高高报警</td></tr><tr><td>LEVEL ALARM LOW LOW</td><td>LALL</td><td>液位低低报警</td></tr><tr><td>FLOW INDICATOR</td><td>Fl</td><td>流量表</td></tr><tr><td>FLOW TRNSIMITTER</td><td>FT</td><td>流量变送器</td></tr><tr><td>FLOW INDICATOR CONTROLLER</td><td>FIC</td><td>流量显示控制器</td></tr><tr><td>FLOW CONTROL VALVE</td><td>FCV</td><td>流量控制阀</td></tr><tr><td>PRESSURE SAFETY VALVE</td><td>PSV</td><td>压力安全阀</td></tr><tr><td>SHUT DOWN VALVE</td><td>SDV</td><td>关断阀</td></tr><tr><td>BLOW DOWN VALVE</td><td>BDV</td><td>排空阀</td></tr><tr><td>UNIT SHUT DOWN</td><td>USD</td><td>单元关断</td></tr><tr><td>PROCESS SHUT DOWN</td><td>PSD</td><td>系统关断</td></tr><tr><td>EMERGENCY SHUT DOWN</td><td>ESD</td><td>紧急关断</td></tr><tr><td>PROGRAMA LOGICAL CONTROLLER</td><td>PLC</td><td>可编程逻辑控制器</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 化工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 化工仪表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剪映专业版使用AI配音和扣绿幕</title>
      <link href="/posts/efe5cf83/"/>
      <url>/posts/efe5cf83/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202209201946585.png"></p><h2 id="AI配音"><a href="#AI配音" class="headerlink" title="AI配音"></a>AI配音</h2><p>其实很简单，就是使用了剪映的AI朗读功能，有很多音色可以选择，非常方便</p><p>首先导入一段素材，将素材拖动到时间轴上</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202209201951904.png"></p><p>点击上方菜单中的文本 ，选择要使用的文本模板，添加到时间轴中</p><p>可以在右边的属性栏中编辑文本内容、字体、样式、位置、大小等</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202209201952424.png"></p><p>编辑好文本内容之后 ，选中本文，点击朗读</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202209202006332.png"></p><p>选择好自己想要的音色，点击开始朗读</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202209202007612.png"></p><p>可以看到音频轨道上已经出现了配音好的音频，可以对音频和视频进行匹配啦</p><h2 id="扣绿幕"><a href="#扣绿幕" class="headerlink" title="扣绿幕"></a>扣绿幕</h2><p>在时间轴上添加一段素材，并不一定要是绿色背景，只要是纯色背景都可以的</p><p>选中该素材，点击属性框中的抠像，选中色度模式，点击取色器，对素材中的绿色背景取色</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202209202024368.png"></p><p>然后调节强度，选择好适合的强度之后就完成抠像啦</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202209202026882.png"></p><p>还有一个只能抠像模式，但是只支持人物图像的抠图哦~</p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剪映 </tag>
            
            <tag> AI配音 </tag>
            
            <tag> 扣绿幕 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接受自己的平庸，不等于彻底摆烂</title>
      <link href="/posts/32ffb141/"/>
      <url>/posts/32ffb141/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202208222155261.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天又是上班学习的一天，但是今天因为默写工艺流程图，有了点些许的感慨，所以就写了这篇随笔</p><p>结合自己的一个好朋友的亲身经历，来谈谈如何接受自己的平庸（无贬义）</p><p>自己把自己的灵感写了个大纲，当然是随手写的，可能比较乱，故事不会那么吸引人，但是能给我自己带来一些思考便是好的</p><p>介绍一下我们的故事主人公，是我在大学期间认识的一个无话不谈的好朋友，他有点像爱情公寓里的那个“万能的小黑”所以下文中以小黑代替他的名字</p><h2 id="上大学之前"><a href="#上大学之前" class="headerlink" title="上大学之前"></a>上大学之前</h2><p>在小学、初中以及高中，小黑一直是爸妈眼中的乖宝宝，成绩优秀，也很乖，听话，就是家长口中的那个“别人家的孩子”</p><p>小黑的家庭并不富裕，当然也不至于揭不开锅，在小学五年级之前，爸妈都在外地打工，对他的关照也比较少，一直在寄宿学校就读</p><p>家里不富裕的小黑比较内向，和同学们的相处也不是很顺利，经常被别人欺负，慢慢的在小黑的心里种下了自卑的种子</p><p>小黑父亲为了改善这种情况，告诉小黑，不要在乎别人的眼光，只要自己过的开心就好，为了锻炼小黑的“脸皮”，不至于让小黑一直处在别人的奇怪的眼光里，小黑的父亲让他去捡破烂，一方面在垃圾堆中行走能够让小黑不在乎别人的眼光，一方面能卖些钱给小黑当零花钱</p><p>该说不说，小黑好像确实对捡垃圾这个活动非常感兴趣，不论是学校里的那种大垃圾堆，还是放学路上小路边的那种小垃圾堆，都对他有一种莫名的吸引力，就好像里面有无名的宝藏一样等着他去发现</p><p>小黑在垃圾堆里收获了无穷的快乐，不论是别人扔掉的坏了的玩具，还是一些可以卖小钱钱的塑料瓶子，对他来说就是一种收获和快乐</p><p>慢慢的，小黑开始对那些坏掉的玩具、电器产生了浓厚的兴趣，好像天生就喜欢机械一样，尝试着拿着父亲的工具对他们进行拆解，修理</p><p>在这个过程中，小黑收获了第一份真正的荣誉，在小学六年级的时候，小黑通过改造自己捡来的一个小机器人玩具，制作了一个可以走路，可以当作风扇的小机器人，这让他获得了当年全国中小学生科技制作县级优秀奖</p><p>而且小黑的作品还被带去了县里的展览会进行展览，那一天小黑是无比开心的，同时小黑也在这次展览会上看到了更多别人的作品，更是对机械这一方面产生了浓厚的兴趣</p><p>到了初中的时候，学校的一个微机课，让小黑接触到了计算机这种伟大而又神奇的东西</p><blockquote><p>插一句，小黑的家里其实在他五年级的时候就有了电脑，但是爸妈的管教让他并没有多少接触过系统的学习，只是会看动画、打打小游戏，但是在上初中的时候爸妈为了不影响小黑的学习把电脑卖掉了</p></blockquote><p>微机课上，老师给刚上初一的他们系统的讲解了计算机的发展、组成以及软件、操作系统和编程</p><p>电脑的神秘和强大让小黑深深的着迷了，每周五都在期待着微机课，但是好景不长，学校好像意识到了这个课对于小黑他们学习好成绩来考好的高中并没有帮助，就暂停了这门课</p><p>但是小黑已经沉浸进了电脑的世界，他通过课外时间去疯狂学习相关的知识，并接触到了基础的变成语言visual base，当小黑自己通过自己的努力写成了第一个程序“同学通讯录”的时候，他真的很开心很激动，同时，他的计算机启蒙老师也就是微机老师替他再次报名了全国中小学生科技制作大赛</p><p>小黑获得了他人生中第二个荣誉，他的程序第二次获得了县级优秀奖</p><p>大概是在初一左右，手机这种东西逐渐不是大人们专有的物品了，开始有同学带着手机来玩，眼馋的小黑当然也想拥有，但是家里并没有这个经济实力给他购买</p><p>在一次偶然的机会中， 他在垃圾堆中捡到了他人生中的第一个手机，一个无名的滑盖触屏手机，但是这个手机肯定是坏的，不然也不会出现在垃圾堆中了</p><p>小黑通过上网查询和询问了一些修手机的师傅，自己摸索到了这个手机的故障所在，并神奇般的自己修好了，但是这种Java系统的手机并不能满足小黑的折腾，很快就玩腻了</p><p>这个时候，搭载安卓系统的真正的智能手机出现在了小黑的眼中</p><p>小黑依稀记得，他们班的那个同学拿着手机在教师办公室楼下偷偷蹭WiFi的样子，他也记得这种手机居然可以自己通过apk格式的安装包安装自己想要的应用程序</p><p>小黑这个时候仿佛打开了新世界的大门，安卓系统、WiFi、安装包、应用程序等等，对他来说都是一种新的事物</p><p>但是碍于经济实力，他没办法拥有</p><p>但是，他的机会来了，他们班上的那个同学手机屏幕摔碎了，但是功能还是可以使用，他毫不犹豫的从同学手里花了90块钱（小黑同学攒了好久好久的零花钱）买到了这个安卓手机</p><p>但是没折腾多久，它就寿终就寝了</p><p>这个时候，小黑的发小，他们家在买化肥的时候被赠送了一个掌上电脑，小黑就软磨硬泡从发小那里借到了这个掌上电脑</p><p>神奇的是，在和手机大小的设备上，小黑见到了在电脑上的WindowsXP系统，也能链接WiFi下载应用，但不是apk，而是exe</p><p>但没多久，三天之后，小黑的这个掌上电脑就被同学偷了，他不知道是谁偷的，他也不敢给爸妈说，他更没办法面对他的发小</p><p>只能自己默默不吃饭，攒钱给小黑的发小赔偿</p><p>这件事对小黑造成了很大的打击，甚至说是他一生的遗憾和阴影</p><blockquote><p>在初中阶段的时候，还发生了一件让小黑后悔终生的事情，因为一些原因，小黑对周围的人甚至自己的父母失去了信任，他觉得生活没有了希望，便一个人离家出走，那个时候他身上只有两块钱</p><p>但是他通过捡垃圾吃，路边摘水果吃，一个人默默的从他那个小县城走到了隔壁市里，历经七天八个夜晚</p><p>最终被警察通过监控找到送回家里，谁都不知道小黑在那种环境下是怎么活过来的，回家的时候那两块钱还完好无损</p></blockquote><p>。。。。。。</p><p>在马上要进入高中的时候，小黑自己攒钱有了自己的手机，这个故事也就暂告一个段落</p><p>。。。。。。</p><p>小黑不光是痴迷电子产品的理工男，更是拥有艺术细胞的帅小伙</p><p>高一的时候，他借同学的吉他学会了弹吉他，自己在网上看着视频学会了街舞</p><p>每周末都会去公园和小伙伴一起刷街，在这个过程中，小黑认识到了很多的志同道合的小伙伴，甚至他发展到了在他那个小县城有了众多粉丝</p><p>自己也成立了一个街舞社</p><p>但是就好像上天故意针对他一样，因为某些原因，小黑和他街舞社的创始人闹掰了，他也就再也没跳过让自己快乐的街舞了</p><p>。。。。。。</p><p>高中，对于小黑来说是平淡但是难忘的，紧张的学习之余，他还在发展自己的爱好</p><p>这次他喜欢上了视频剪辑和拍摄</p><p>小黑通过平时对生活的记录和自己的技巧，为自己的高中母校拍了一个微电影《我的XX》</p><blockquote><p>隐私原因，不公开名字</p></blockquote><p>这次，小黑又获得了XX市优秀奖</p><p>。。。。。。</p><p>中考501分，高考502分，也算挺巧合了</p><p>。。。。。。</p><p>在录取通知书下来之后，小黑的父母简直太激动了，这不光是他们家第一个一本大学生，更是他们村里唯一一个考上一本的</p><p>但是小黑的心里却很沉重，因为并没有录取到他梦想的计算机专业，而是调剂到了自己讨厌的一个专业</p><blockquote><p>此外，小黑喜欢的女生高考没有发挥好，没有在一个学校，两个人的大学虽然说在隔壁，但是距离感让小黑产生了危机感</p></blockquote><p>。。。。。。</p><p>对小黑上大学之前做一个总结，他是一个内向、腼腆但是骨子里刻着自卑的男孩子，并且伴有严重的抑郁症，虽然说小黑一直成绩优秀，在父母眼里是个乖宝宝，但是无论是在小学、初中还是高中，小黑都受过严重的校园霸凌，就好像被嫉妒一样</p><p>内心的自卑加上不愿意和父母沟通，缺少父母的关爱，小黑是一个极度缺爱的人，一些不愿提起的经历更是让他内心深处是极度扭曲的</p><p>长期的自残让小黑的身体充满了伤疤，但是他从未给父母说过，只是不想让父母担心</p><p>甚至可以说小黑是有两种人格，一种是非常优秀，乖宝宝，这是在父母和同学面前表现出来的</p><p>另一种就是非常极端，易怒，自卑，扭曲，自残等等，这是他自己独处的时候的人格</p><p>。。。。。。</p><p>2018年8月27日，小黑怀揣着父母的期望、自己的梦想以及对未来的憧憬，来到了大学生活</p><h2 id="大学四年"><a href="#大学四年" class="headerlink" title="大学四年"></a>大学四年</h2><p>在大一大二的时候，刚来大学的小黑并不是很适应，同时因为专业不喜欢而且相关课程不是很擅长的情况下，小黑挂科了，而且还不是一门两门</p><p>最多的时候小黑挂科有七门之多，学校规定的是挂科八门就给予开除或留级的处分</p><p>这给小黑带来的极大的打击，再加上和喜欢的女孩子感情不顺，失恋等因素</p><p>小黑在一个夜晚，崩溃了，他给父亲打电话说自己不想活了，留下了一封遗书，准备自己离开这个世界</p><p>但是父亲的眼泪让小黑冷静了下来，他明确的知道，自己的了结是非常非常不负责任的，不论是对父母还是关心自己的老师而言</p><p>他决定痛定思痛，改过自新，通过不断的努力学习，慢慢的补上了自己落下的课程</p><p>而且还在课余时间发展了自己的梦想，积极去学习编程相关知识，再次收获了很多和结识了很多很棒的朋友</p><p>慢慢的，小黑把自己内心的那些黑暗、消极开始进行自我治疗</p><p>开始变得乐观、阳光，虽然还是会很社恐，但不像之前那么极端了</p><p>小黑在尝试着改变自己，并且努力开始新的生活</p><p>在竞赛中获得优异成绩，帮助同学修电脑装系统等，也积极去处理自己的一些人际关系</p><p>一切都在向好的方向发展</p><p>大三大四凭借着对自己专业的理解与对专业课的学习，成绩非常优异，也获得了很多老师的称赞</p><p>甚至在毕业设计中也获得了优秀论文</p><p>大三大四这两年让小黑充分体会到了大学生活的美好，也逐渐去接受过去不堪的自己</p><p>大四临近毕业，小黑也凭借着自己出色的简历获得了好几个优秀的offer</p><p>跟父母沟通之后小黑没有选择在自己家附近的公司，而是选择了外省，想趁着年轻出去闯一闯</p><h2 id="开始工作"><a href="#开始工作" class="headerlink" title="开始工作"></a>开始工作</h2><p>孤身一人来到外地的小黑并不是很习惯，高消费和生活习惯、自然环境等都让小黑有了一些不适应</p><p>但是小黑也在积极的去克服和接受</p><p>真正到了公司开始上班之后，小黑慢慢发现似乎和自己想象中的工作不太一样</p><p>每天高强度的学习让小黑有点吃不消，同时小黑自负的觉得自己的优秀好像并没有体现出来，小黑觉得自己的才能不应该是只做这些工作</p><p>但是没办法，现实情况就是这样，再加上小黑联系了自己的一些工作了的朋友，发现大家都是这样</p><p>这就是理想与现实的残酷碰撞</p><p>小黑试着去接受这一切，毕竟家里的经济情况不怎么好，父母等着小黑的工资去解决一些燃眉之急，小黑在和父母的电话中也明白了父母的意思</p><p>父母希望他能安稳的学习和工作，年轻人不吃点苦怎么能行</p><p>小黑觉得父母说得对，想着自己应该可以慢慢接受</p><p>但是随着工作的进行，小黑觉得有些力不从心了</p><p>和小黑一起来的新同事们每次都在考核中获得了优异的成绩，而小黑自己确实一直垫底，甚至有了不及格的分数</p><p>领导的谈话让小黑显得有些焦虑，刚出大学校门的小黑还是有些稚嫩和自负，觉得工作中也能像学校那样顺利</p><p>但是实际情况给了小黑当头一棒，小黑有些气馁</p><p>小黑似乎察觉到了一些东西，也就是人和人之间是有差异的，而自己并不会一直都是优秀的，自己并不是真正的“万能”</p><p>但是小黑内心的骄傲让他无法接受，小黑陷入了深深的精神内耗中</p><p>小黑明白这样下去不是办法，自己承认自己不如别人似乎是有一点消极的意思</p><p>但事实就是事实，不会因为小黑的想法而改变</p><p>在某一刻，小黑想起了之前看到过的一篇文章，接受自己的平庸</p><p>父亲的教导也在耳边回响，平庸而不平凡</p><p>或许自己在这一个方面确实不如人呢？接受自己的平庸就一定要彻底摆烂吗？</p><p>小黑对自己的内心发问</p><h2 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h2><p>每个人都是独一无二的存在，或许在某个方面，确实是会存在技不如人的情况，这并不是说自己就不够努力</p><p>接受自己的平庸，缓解自己的精神内耗，把注意力放在自己需要努力的地方才是正解</p><p>踏踏实实走好每一步，做好自己该做的事情</p><p>当理想与现实发生碰撞的时候，就像我们做实验的时候用自来水还是用纯水</p><p>实验结果永远充满了未知，有可能是惊喜，也有可能是惊吓</p><p>人外有人，天外有天，接受自己的平庸，在做好自己能力所及的事情的同时，去尝试突破自己，才会让自己更精彩</p><p>彻底摆烂不可取，拒绝精神内耗，过好每一天，上好每一天班~</p><p>加油！</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>乙烯装置工艺过程简述</title>
      <link href="/posts/c3791ee9/"/>
      <url>/posts/c3791ee9/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文转载自公众号化工加，原文链接：<a href="https://mp.weixin.qq.com/s/CSVee5S0uKXdM8CvlBPH5Q">乙烯装置工艺流程全图详解</a></p></blockquote><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202208192335189.png"></p><h2 id="乙烯装置组成"><a href="#乙烯装置组成" class="headerlink" title="乙烯装置组成"></a>乙烯装置组成</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202208192149854.jpeg"></p><h3 id="主要工艺装置"><a href="#主要工艺装置" class="headerlink" title="主要工艺装置"></a>主要工艺装置</h3><ul><li>乙烯装置（Steam Cracker）</li><li>C4选择性加氢和烯烃转化（SHU&#x2F;OCU）</li><li>汽油加氢装置（GTU or DPG）</li></ul><h3 id="附属装置"><a href="#附属装置" class="headerlink" title="附属装置"></a>附属装置</h3><ul><li>化学品储存</li><li>中间罐（粗汽油、粗碳四）</li><li>雨水处理系统</li><li>排放系统（不包括火炬头系统）</li><li>开车用乙烯和丙烯加热器</li><li>含油污水和废水收集系统和平衡罐</li><li>污油处理系统</li><li>BFW（锅炉给水）、蒸汽和凝液系统</li><li>废碱氧化单元</li><li>碱储存和注入系统</li><li>安全淋浴&#x2F;洗眼器的水系统</li><li>燃料系统</li><li>公用水系统</li><li>PA（工厂空气）、IA（仪表空气）</li><li>N2系统（置换、充压等）</li><li>CW（冷却水系统）</li><li>消防水系统包括消防栓、消防炮等</li></ul><h2 id="工艺流程简介"><a href="#工艺流程简介" class="headerlink" title="工艺流程简介"></a>工艺流程简介</h2><h2 id="1-乙烯装置"><a href="#1-乙烯装置" class="headerlink" title="1 乙烯装置"></a>1 乙烯装置</h2><p>主要工段包括：<strong>裂解炉、急冷、压缩、冷分离、热分离、制冷、裂解气</strong></p><p>体系涉及的组分包括：<strong>H2 、 CH4 、 碳二（C2H2、C2H4、C2H6） 、碳三（C3H6、C3H8、MAPD） 、C4 、C5 、C6~C8 、C9+</strong></p><h3 id="急冷区"><a href="#急冷区" class="headerlink" title="急冷区"></a>急冷区</h3><p>包括急冷油塔、急冷水塔、稀释蒸汽发生系统</p><p>主要作用：</p><ul><li>使裂解气快速降温，防止聚合</li><li>回收热量</li><li>发生稀释蒸汽</li><li>轻重燃料油汽提塔回收轻组份并降低QO的粘度</li></ul><p>工艺流程简图：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202208192201458.jpeg"></p><h3 id="压缩区"><a href="#压缩区" class="headerlink" title="压缩区"></a>压缩区</h3><p>包括压缩机、碱洗、凝液汽提塔、裂解气干燥</p><p>主要作用：</p><ul><li>提高裂解气压力（1.4~38 kg&#x2F;cm2）</li><li>脱除酸性气CO2、H2S</li><li>脱除裂解气中的水分，防止冷区堵塞</li></ul><p>工艺流程简图：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202208192204961.png"></p><h3 id="冷区"><a href="#冷区" class="headerlink" title="冷区"></a>冷区</h3><p>包括冷箱、脱甲烷塔系、脱乙烷塔、碳二加氢、乙烯塔</p><p>主要作用：</p><ul><li>分离出氢气、甲烷、乙烯和乙烷、甲烷化</li><li>采用冷箱的目的是将板翅式换热器集成在一起，尽量减少外部配管，降低冷损失</li><li>绝对禁止固体颗粒进入冷箱，若由于痕量水引起堵塞，可采用注甲醇以溶解</li></ul><p>工艺流程简图：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202208192206347.png"></p><h3 id="热区"><a href="#热区" class="headerlink" title="热区"></a>热区</h3><p>包括脱丙烷塔、C3加氢、丙烯塔、脱丁烷塔</p><p>主要作用：</p><ul><li>生产丙烯、丙烷、混合C4、粗汽油</li><li>C3加氢用以转化MAPD为丙烷，增加产量并减少丙烷中杂质</li></ul><blockquote><p>注：MA指丙炔，PD指丙二烯</p></blockquote><p>工艺流程简图：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202208192208448.png"></p><h3 id="制冷系统"><a href="#制冷系统" class="headerlink" title="制冷系统"></a>制冷系统</h3><p>包括丙烯制冷、乙烯制冷</p><p>主要作用：</p><p>为乙烯分离提高所需冷量，其中丙烯4个温度等级，乙烯3个温度等级。通过对高压液相节流生产低温物流</p><p>工艺流程简图：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202208192211350.png"></p><h2 id="2-SHU-OCU"><a href="#2-SHU-OCU" class="headerlink" title="2 SHU&#x2F;OCU"></a>2 SHU&#x2F;OCU</h2><p>包括C4一段加氢、脱异丁烯、OCU进料处理、烯烃转化反应、脱乙烯和脱丙烯</p><p>主要作用：</p><ul><li>一、二段加氢丁二烯——&gt;1-丁烯+丁烷</li><li>1-丁烯——&gt;2-丁烯</li><li>脱异丁烯，1-丁烯，2-丁烯</li><li>异丁烯和2-丁烯分离</li><li>进料处理系统脱除催化剂毒物如氧、硫、醇等</li><li>烯烃转化反应器——&gt;2-丁烯+乙烯——&gt;丙烯</li><li>脱乙烯塔、脱丙烯塔分离出乙烯和丙烯</li></ul><p>工艺流程简图：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202208192313540.jpeg"></p><h2 id="3-汽油加氢（GTU）"><a href="#3-汽油加氢（GTU）" class="headerlink" title="3 汽油加氢（GTU）"></a>3 汽油加氢（GTU）</h2><p>包括一段加氢、稳定塔、C9切割塔（DPG  TAILING  TOWER）、二段加氢、脱戊烷塔</p><p>主要作用：</p><ul><li>一段加氢将进料中的双烯烃、苯乙烯和茚加氢饱和，苯环不加氢</li><li>稳定塔脱除物料中的轻组分，并送回乙烯装置。釜液进入C9切割塔将C9+组分与C5~C8分离</li><li>C5~C8组分在二段加氢中反应使其中的烯烃和含硫组分分别转化为饱和烃和H2S</li><li>加氢后液相进入脱戊烷塔，将C5与C6~C8分离</li></ul><p>工艺流程简图：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202208192316664.jpeg"></p><h2 id="4-废碱处理"><a href="#4-废碱处理" class="headerlink" title="4 废碱处理"></a>4 废碱处理</h2><p>包括乙烯装置内的废碱洗涤和废碱处理系统的废碱储罐，废碱氧化系统和废碱中和槽</p><p>主要作用：</p><p>自碱洗塔的废碱用汽油溶解其中的重油组分，然后经过两个聚结器将油&#x2F;碱分离。碱液进入废碱储罐进 一步分离夹带的油组分，之后进入废碱氧化系统， 废碱氧化将其中的Na2S氧化为可溶解的Na2SO4。空气压缩机提供所需的高压氧气，氧化后的废碱进入中和槽与硫酸中和，中和后废碱送入废碱处理系统</p><p>工艺流程简图：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202208192320269.jpeg"></p><h2 id="5-火炬系统"><a href="#5-火炬系统" class="headerlink" title="5 火炬系统"></a>5 火炬系统</h2><p>包括干火炬排放、干火炬缓冲罐和汽化器、湿火炬排放、湿火炬缓冲罐、火炬总管</p><p>装置主要有三类排放点：</p><ul><li>安全阀</li><li>压力控制阀</li><li>液体排放</li></ul><p>干火炬系统收集常压下泡点低于4℃和不含水的排放物料。不能进入水份，否则会引起冻堵。排放的低温物料加热后送入总管与湿火炬气合并。湿火炬系统收集常压下泡点高于4℃的排放烃物料，然后送入汇聚总管</p><p>工艺流程简图：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202208192322557.png"></p><h2 id="设备仪表类型及数量统计"><a href="#设备仪表类型及数量统计" class="headerlink" title="设备仪表类型及数量统计"></a>设备仪表类型及数量统计</h2><p> <img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202208192327223.jpeg"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202208192327359.jpeg"></p>]]></content>
      
      
      <categories>
          
          <category> 化工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 乙烯装置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈Aspen/HYSYS在实际化工生产中的应用</title>
      <link href="/posts/d8c128c1/"/>
      <url>/posts/d8c128c1/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202208182004308.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>距离自己上班已经快有一个月了，期间一直在学习相关的知识，最近更是在学习乙烯装置的工艺和PFD图，在学习的过程中，结合自己之前在学校和项目上的经历，浅谈一下自己对于化工工艺流程模拟软件在实际化工生产过程中的应用，博主能力不够，如有错误请指正，</p><h2 id="什么是过程模拟"><a href="#什么是过程模拟" class="headerlink" title="什么是过程模拟"></a>什么是过程模拟</h2><p>化工过程模拟有稳态模拟和动态模拟两种，其中动态模拟主要针对自动控制阀门对某些设备的动态影响，更常用的是稳态模拟。稳态模拟本质上是根据化工过程的一些数据，通过合适的计算机模拟软件，将一个完整的工艺流程分割为不同单元模块之间的联系，并用数学模型描述，模拟实际工厂中的生产过程，在模拟的过程中，可以通过改变各种有效条件计算出所需要的工况下各个单元模块的工艺数据。</p><h2 id="过程模拟与实际化工生产的区别"><a href="#过程模拟与实际化工生产的区别" class="headerlink" title="过程模拟与实际化工生产的区别"></a>过程模拟与实际化工生产的区别</h2><p>过程模拟是使用数学模型对某个工艺过程的各个单元操作、设备、流股在理想状态下进行解算，工艺中涉及到的组分和其物性是非常复杂的，完全使用计算机数学模型进行精确解算是非常困难的</p><p>其解算结果往往具有理想性，和实际化工生产中我们所谓的“工厂数据”是有一定的区别的，毕竟实际工厂中的生产、设备的运行会受到更多的因素影响，且其中某些因素往往具有严重的随机性</p><p>个人认为，过程模拟中的解算数据更具有理想性和“标准性”，而实际化工生产中的工厂数据更具有随机性和真实性</p><p>但是他们两者却又不是对立的，是相辅相成的，过程模拟可以通过添加影响因素、优化数学模型等方法使数据无限接近于工厂数据，给实际化工生产提供可靠的数据支撑和参考；而工厂数据反过来也能给过程模拟提供计算的依据，优化和佐证其过程</p><h2 id="现阶段下过程模拟的应用"><a href="#现阶段下过程模拟的应用" class="headerlink" title="现阶段下过程模拟的应用"></a>现阶段下过程模拟的应用</h2><h3 id="稳态模拟"><a href="#稳态模拟" class="headerlink" title="稳态模拟"></a>稳态模拟</h3><p>在我个人的了解中，目前过程模拟只有在化工项目的初步设计阶段才会使用，是对整个工艺过程进行初步解算，得出初步的物料平衡、能量平衡、大致设备数据等参考数据，为后续的可行性报告、初步设计报告、经济核算等提供数据参考</p><p>在装置建设、开车、稳定运行的过程中，看起来过程模拟似乎发挥不上用场，毕竟其模拟结果数据只是理想化的</p><p>实际上在装置稳定运行的过程中，通过工厂数据去优化初步模拟数据，得出更精确，更贴近真实化工生产的解算结果，可以为装置或者设备的优化提供合理化的参考，比如优化设备能耗负荷，优化进料比等</p><p>举个例子来说，今天我学习了我们乙烯装置的碳三加氢单元，其中涉及到氢气的进料量问题</p><p>氢气不足，碳三加氢不完全，丙烯产率过低，后续分离工段和物料循环负荷增加</p><p>氢气过量，产生了过加氢的情况，目标产物丙烯被转化为丙烷，同样会导致装置负荷增加</p><p>此时就存在一个相对于来说最优的氢气进料量，整个进料量可以通过比例控制来根据碳三进料量的改变而改变</p><p>那么怎么确定和去优化这个氢气进料量呢，就需要通过调整氢气进料量，监测加氢反应器出口丙烯、丙炔、丁二烯等组分的量，以达到目标产物产率最高，产品单耗最低的优化目的</p><p>在装置运行中频繁改变进料量是非常不合理且危险的，此时就需要通过过程模拟软件，对加氢反应器通过反应动力学进行模拟建模，输入相对应的流股工厂数据，在模拟过程中调整氢气进料量，以获得自己想要的目标结果，通过这个结果为该反应器实际运行过程中的进料量做参考进行调整</p><p>这个过程就是单因素灵敏度分析的典型应用</p><p>举例：在二氧化碳加氢制甲醇工艺中对加氢反应器的单因素分析</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202208182037826.png"></p><h3 id="动态模拟"><a href="#动态模拟" class="headerlink" title="动态模拟"></a>动态模拟</h3><p>动态模拟是指对某些自动控制系统的相应曲线做模拟，以得到其在响应过程中的设备、物料变化过程</p><p>最理想的控制系统响应曲线应该为衰减震荡过程，如图所示</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202208182042131.png"></p><p>其代表了在自动控制系统从开始执行到稳定的一个过程，响应时间越短说明该控制系统的滞后性越小，控制越精准</p><p>举一个例子，使用动态模拟某储罐通过控制出料阀开度来控制罐内液位的过程</p><p>工艺流程如下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210828173343.png"></p><p>将阀门从0%开到50%，稳定后再调节到30%的响应时间曲线如下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210828175814.png"></p><p>具体的模拟过程见本博客文章：<a href="https://imbhj.com/6ed60290/">HYSY实现动态模拟</a></p><h2 id="项目展示"><a href="#项目展示" class="headerlink" title="项目展示"></a>项目展示</h2><p>晒一下自己做过的两个项目，感受一下化工过程模拟的美~</p><h3 id="丙烯水合法年产6万吨异丙醇项目"><a href="#丙烯水合法年产6万吨异丙醇项目" class="headerlink" title="丙烯水合法年产6万吨异丙醇项目"></a>丙烯水合法年产6万吨异丙醇项目</h3><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202208182052306.png"></p><h3 id="二氧化碳直接加氢年产5万吨甲醇项目"><a href="#二氧化碳直接加氢年产5万吨甲醇项目" class="headerlink" title="二氧化碳直接加氢年产5万吨甲醇项目"></a>二氧化碳直接加氢年产5万吨甲醇项目</h3><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202208182053000.png" alt="29"></p><p>学习不停，进步不止~</p>]]></content>
      
      
      <categories>
          
          <category> 化工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Aspen </tag>
            
            <tag> HYSYS </tag>
            
            <tag> 化工生产 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于自己第一次上班的感慨</title>
      <link href="/posts/104242f2/"/>
      <url>/posts/104242f2/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202207301149392.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今年7月份，终于迎来了自己的毕业典礼：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202207301158477.jpg"></p><p>在毕业的这个期间里，还是很迷茫的，和朋友的离别，离开了自己生活了四年的地方</p><p>未来的工作、生活是什么样的，都是未知数</p><h2 id="到达江苏"><a href="#到达江苏" class="headerlink" title="到达江苏"></a>到达江苏</h2><p>我是大四的第一学期，也就是秋招的时候找到的工作，当时是手里大概有3个offer，一个在家里的那个县城，离家近但是工资低了点，一个是在浙江，一个药企，工资一般，但是工作环境舒服，比较轻松，最后一个就是我现在的这个公司，在江苏泰兴，是个大厂，工资给的很高</p><p>当时面试的时候HR说的天花乱坠，没经历过社会毒打的我信了她的花言巧语</p><p>工资高、晋升空间大、工作符合自己的预期，完完全全就是给自己量身定做的</p><p>（事实表明，这种理想的工作总是会经历现实的毒打）</p><p>其实我也纠结了很久，离家近，工资低点完全不是事，但是我这22年都没出过陕西省，年轻的我还是很向往去其他地区闯荡闯荡</p><p>跟自己父母也商量了很久，最终还是决定去江苏闯一闯（其实现在后悔的也不是那么多）</p><p>7月14日踏上了南下的路途，15号下午到的泰兴，下车的第一印象就是热</p><p>真的热，完全不同于北方的那种燥热，是一种潮湿的闷热，感觉比北方难受</p><h2 id="开始培训"><a href="#开始培训" class="headerlink" title="开始培训"></a>开始培训</h2><p>到了公司安排的酒店，（后来才知道公司的人才公寓要到年底才能装修完毕），这个时候已经感觉到有点落差了</p><p>然后开始为期一周的岗前培训，大概就是一些企业文化，安全常识什么的</p><p>大概了解了一些自己以后的工作内容之后，这个时候还没意识到事情的严重性，觉得其实也就和HR说的有点差距，但是工资确实高，这些什么考核多，倒班啥的也都能接受</p><p>培训完了之后有个考试，100分的卷子80分及格（公司里的其他考试也是这样），自己刚刚好80分飘过</p><p>签了劳动合同，其实跟自己想象中的劳动合同不太一样，上面只有一些空话和法律条款，实际上一些详细的薪资、工作内容啥的都没有，我就只着重关注了一下如果需要离职，提前30天通知公司就行</p><h2 id="进入岗位"><a href="#进入岗位" class="headerlink" title="进入岗位"></a>进入岗位</h2><p>培训完了之后才算（其实也不算）进入岗位，就是根据自己的意向选择想去的厂区或者部门，我去了比较难的烯烃厂，因为自己的相关方向就是有机，对烯烃这方面还是有点了解和兴趣的</p><p>然后开始二级安全培训，这个时候我已经意识到不对劲了，每天八小时工作，但是实际上我们六点半就要起床，7点赶上公司的班车，七点半到公司吃早点，然后8点上班，晚上五点半下班，加上吃饭和通勤时间大概七点多到宿舍，算下来就是早六晚七，大概十二个小时</p><p>下了班之后进行洗漱啥的，基本上就八九点了，稍微玩一会，就该睡觉了，因为第二天还要早起</p><p>大概就是这么紧张，感觉心里落差很大，这还没开始倒班呢</p><p>在岗位培训期间，大概了解到了自己的具体工作，这个时候我就发现，原来自己被HR骗了，当时面试的时候说的是倒班6个月，然后工作岗位是工艺工程师，是长白班，周末双休</p><p>实际上到了岗位发现就是操作工，需要倒班，节假日无休息，但是算双倍工资</p><p>这个时候自己已经很难受了，因为全年无休，自己跑这么远来到江苏，发现年假只有3天，连过年回家的时间都没有</p><p>而且考核很多，每周考核，每个月考核，年中考核，年终考核等等</p><p>上班强度非常高，压力很大，甚至不能碰手机，上班是要交手机的</p><h2 id="感慨"><a href="#感慨" class="headerlink" title="感慨"></a>感慨</h2><p>大多数毕业生都面临的问题，很多人想去外面闯荡，觉得外面好</p><p>待的时间长了就发现工作了你不但没有自己的时间，而且还要面临着复杂的人际关系，甚至还有点卑躬屈膝，更重要的是呆的久了你觉得自己的才干可能不是自己想象的那么能让自己实现自己的抱负</p><p>（这个算是我最大的感慨了，以为本科毕业自己能干工程师，实际上就是一操作工，自己四年学的技能、专业知识，没一个能用得上的）</p><p>而且身心俱疲的同时，反而越来越向往回家工作</p><p>起码能面对面亲近的人的日常倾诉，不用一直呆在一个压抑的地方。面对陌生的环境，说话还要瞻前顾后，做事小心翼翼</p><p>怎么说呢，每个人有自己的路，有的人热闹，有的人喜欢安逸平凡，慎重每做出一个决定，如果真的难以抉择，在有条件的情况下，选择自己认为对的决定，起码你原地踏步好</p><p>不要让不良情绪或者摆烂的心态让自己失去青年人的潮气蓬勃，不能失去自己的独立思考的想法不要妄自菲薄变的人云亦云，不能一棵树上吊死，要保持头脑清醒，因为现在就业形势严峻，清楚自己需求，真正觉得与自己预期相差大，不符合个人职业规划发展的时候，想好后路在改变</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>希望每个本科毕业生都能找到自己心仪的工作</p><p>希望你们在做决定的时候三思而后行，一旦决定，就要果断</p><p>梦想与现实是必然会有差距的，当这种强烈的落差感来到自己的身上时，一定要冷静，不要做冲动的选择，结合自己的身边环境，家庭因素，以及自己的意愿，考虑周全</p><p>（很多事情，用文字是无法描述的，只希望大家慎言慎行，不要失去自己的朝气，也不要一味的忍让）</p><p>想清楚自己想要的什么，想清楚自己的能力能不能给自己带来想要的，想清楚自己该不该妥协</p><p>最后附上自己的壁纸，也算是自己在职场里总结的几个非常非常重要的“保命条款”：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202207301232259.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 打工人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决OBS捕获BongoCat黑屏或者背景不透明的问题</title>
      <link href="/posts/c5bcbdca/"/>
      <url>/posts/c5bcbdca/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202202121952277.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>系统：Win10 21H2</p><p>OBS：27.1.3</p><p>BongoCatMver：0.1.6</p><h2 id="使用游戏源来捕获"><a href="#使用游戏源来捕获" class="headerlink" title="使用游戏源来捕获"></a>使用游戏源来捕获</h2><p>首先要保证使用管理员身份启动OBS</p><p>打开BongoCatMver</p><p>设置为桌宠模式（也就是无边框透明背景模式）</p><p>在OBS里添加游戏源，如图所示：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202202122005550.png"></p><blockquote><p>记得把允许窗口透明打钩哦，不然会是黑色背景</p></blockquote><p>这样就完成了bongocat的捕获</p><p>推荐使用游戏源来捕获，当然要是不喜欢，也可以使用窗口源来捕获</p><h2 id="使用窗口源来捕获"><a href="#使用窗口源来捕获" class="headerlink" title="使用窗口源来捕获"></a>使用窗口源来捕获</h2><p>使用OBS添加窗口采集，选择到bongocat，如下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202202122010450.png"></p><p>添加之后可以发现，bongocat的背景是黑色的，不是透明的</p><p>这个时候就要用到自动抠图了</p><p>在bongocat的设置里将背景色改成绿色：（先取消桌宠模式）</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202202122012455.png"></p><p>使用OBS窗口采集捕获到带有绿幕的bongocat</p><p>右键窗口采集，选择滤镜</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202202122014184.png"></p><p>左下角点击添加滤镜，选择色值</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202202122015270.png"></p><p>可以看到背景已经被扣除了，但是边缘处有一些地方没有处理好</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202202122016206.png"></p><p>这个时候只需要将相似度拉大即可：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202202122017331.png"></p><p>可以看到效果已经很完美啦~</p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OBS </tag>
            
            <tag> BongCatMver </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HYSYS动态模拟</title>
      <link href="/posts/6ed60290/"/>
      <url>/posts/6ed60290/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210828143650.png"></p><h2 id="什么是动态模拟"><a href="#什么是动态模拟" class="headerlink" title="什么是动态模拟"></a>什么是动态模拟</h2><p>动态模拟是相对于稳态模拟而言的，稳态模拟就是在工厂生产过程中，装置稳定运行的一种状态，而动态模拟就是在装置开停车的时候的一种动态响应，比如一个罐子从空状态到有液位再到满负荷，是一种动态的变化过程</p><p>具体的动态模拟的性能需求就是设备对于波动的响应时间以及波动的幅度，还有从产品流出到产品合格的量，装置的承受限度等</p><p>实质上动态模拟是把每一个模块设置为一个滞留模型，使用的是压力-流量求解器，在求解器中使用体积平衡方程和阻力方程</p><p>特点是只把压力和流量作为变量，压力-流量平衡的本质是容器中物料的体积在任何时刻都保持不变</p><h2 id="PID控制器"><a href="#PID控制器" class="headerlink" title="PID控制器"></a>PID控制器</h2><p>L&#x2F;P&#x2F;T&#x2F;FIC分别为液位、压力、温度、流量控制</p><p>在HYSYS中控制器模块里，Action选项主要是控制阀门方向，当阀门开度随着变量的增大而增加时，选择Direct模式，反之选择Reverse</p><p>模式选项主要有四种，OFF、MAN、AUTO、Indicator，分别是关闭、手动模式、自动模式、不操作</p><p>执行选项分为两种：Internal&gt;HYSYS，External&gt;DCS</p><p>在参数设置中，SP代表设置变量的值，PV代表测量值，OP代表手动设置阀门的开度</p><blockquote><p>做过模拟仿真或者用过DCS的同学应该很熟悉</p></blockquote><h2 id="案例模拟"><a href="#案例模拟" class="headerlink" title="案例模拟"></a>案例模拟</h2><p>对于下图中这个分离罐稳态流程：</p><ul><li>构建流量控制器，调节进料流量，使进料流量保持恒定</li><li>构建压力控制器，调整气相产品流量，使罐压力保持恒定</li><li>构建液位控制器，调整液相产品流量，保持罐子的液位恒定</li></ul><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210828150747.png"></p><p>流股1的参数如下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210828150809.png"></p><p>开始动态模拟</p><p>动态模拟是压力流量求解，所以需要一个压力梯度，构建初始流程如下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210828151351.png"></p><p>初始流股4的压力是300kPa，阀门的压降为200kPa，为了保证分离罐进料的压力，需要提高流股4的压力到500kPa，同时为了调节流股4的进料流量，需要在动态模式中取消流股4的固定流量，设置如下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210828151822.png"></p><p>设置阀门压降：（其他两个阀门同理）</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210828152015.png"></p><p>设置泵的升压：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210828152150.png"></p><p>这个时候可以发现，流程已经走通了，而且液相产品也达到了规定的300kPa</p><p>但是要转换为动态模拟还差一个关键的设置，那就是分离罐的尺寸，要模拟液位的实时变化，就需要一个固定的分离罐尺寸来计算</p><p>查看液相产品的流量，是2.836m3&#x2F;h，根据液相的体积流量计算出需要的分离罐的尺寸，滞留时间为5min，罐子中保持50%的液位，计算得出直径为0.67m，高度1.34m，初始液位为0%，最大液位50%</p><p>设置分离罐尺寸如下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210828162720.png"></p><p>基础流程已经搭建完毕，通过修改流程颜色方案，让不同的流股显示不同的颜色：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210828170450.png"></p><p>启用流股5和6的压降：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210828170711.png"></p><p>完成：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210828170748.png"></p><p>打开动态模拟助手，进行动态模拟前的模型检查：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210828170857.png"></p><p>可以看到助手提示泵的压力降需要移除，但是泵的压力是我们规定的，所以不用管：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210828171148.png"></p><p>点击动态模式，进入动态模拟模式，进入动态模式之后就要根据题目要求增加三个PID控制器</p><p>第一个控制器是控制进料的量，所以PV选择流股4的质量流量：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210828171437.png"></p><p>OP对应的就是阀门VLV100的开度：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210828171553.png"></p><p>设置控制器参数：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210828171852.png"></p><p>构建第二个PID控制器，通过VLV101阀门开度控制罐子的压力，所以PV就是罐子的压力，OP还是阀门开度</p><p>控制器参数设置：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210828172251.png"></p><p>构建第三个控制器，通过控制阀门VLV102的开度来控制罐子的液位，PV就是液位，OP是阀门开度</p><p>控制器参数：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210828173252.png"></p><p>现在就完成了控制器的设置</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210828173343.png"></p><h2 id="查看曲线"><a href="#查看曲线" class="headerlink" title="查看曲线"></a>查看曲线</h2><p>在动态模式中打开“宽窄曲线图”，添加曲线</p><p>添加曲线之后点击编辑，进入参数设置界面</p><p>选择液位控制器的PV，也就是测量值：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210828173748.png"></p><p>同时再添加一个SP，也就是设定值</p><p>添加完成之后点击显示，打开曲线图形，在曲线图形中右键，点击图形控制</p><p>新建一个坐标轴：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210828174122.png"></p><p>并勾选下面的轴显示中的全部显示</p><p>将曲线的采样点改大一点：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210828174426.png"></p><p>曲线的设置就完成了</p><h2 id="设置控制器"><a href="#设置控制器" class="headerlink" title="设置控制器"></a>设置控制器</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210828174528.png"></p><p>设置运行时间，从0到60分钟，也就是运行一小时（是模拟的时间，而不是现实时间，并不需要等待1个小时）</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210828174708.png"></p><p>打开曲线的窗口，点击开始</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210828174917.png"></p><p>可以看到，在开车之后，大约15分钟左右，分离罐的液位就调整到了设定值，在25分钟左右稳定（红色为实时值，绿色为设定值）</p><p>那么当我们去更改设定值的时候，管子的液位又会如何变化呢，打开液位控制器LIC100，将液位的设定值改到30%，积分器的结束时间增加到120分钟，在积分器上点击开始，继续运行，观察曲线：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210828175814.png" alt="image-20210828175814785"></p><p>可以看到，在60分钟时调整设定值到30%，实际值在70分钟时到达设定值</p><p>当然除了液位，还能看到各种其他的参数，自己去探索吧</p><p>今天的动态模拟就到这里啦，我是乙醇，下次见~</p><blockquote><p>后天就开学了，可能很长一段时间都不来更新了，不要想我哦</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 化工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hysys </tag>
            
            <tag> 流程模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HYSYS中电子表格的应用</title>
      <link href="/posts/98481708/"/>
      <url>/posts/98481708/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210827164517.png" alt="封面"></p><p>电子表格模块是HYSYS中最基础的最简单的一个功能，却也是最实用的，最能玩出花样的模块</p><p>本文就简单的做一个电子表格应用的示意</p><p>如图所示，有两个一模一样的压缩机，但是压力不同，还有一个电子表格</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210827164922.png"></p><p>首先第一个功能就是同时查看到多种参数的状态，比如流股的温度压力等</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210827165140.png"></p><p>将变量导入表格：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210827165207.png"></p><p>添加变量在入门篇也说过，可以直接通过拖拽的方式</p><p>就可以直观的看到很多数据：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210827165814.png"></p><p>第二个功能就是对数据进行运算</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210827170129.png"></p><p>当然也可以实现一些更复杂的运算，比如平方、正余弦、平均值等，都有相对应的函数，具体可以参考HYSYS入门篇2</p><p>第三个功能就是逻辑运算</p><p>比如自动检测流股1的输入温度，当温度小于120℃时，去温度自动等于120℃，当大于120℃时，取当前温度</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210827170710.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210827170722.png"></p><p>可以看到，当流股1输入温度大于120的时候自动设置值为130，这个时候输入一个110，那么应该会自动调节至120：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210827170848.png"></p><p>当然，数值并不是只能输入，也可以输出，如果有需要的话，可以把运算结果右键，选择导出公式计算结果</p><p>例如新建一个流股5，将这个温度导出给流股5：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210827171044.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210827171105.png"></p><p>可以看到计算结果会直接赋值给流股，达到了控制的结果，这个时候如果再更改流股1输入温度，那么流股5的温度也会随之改变</p><p>电子表格模块就到这里，更多表达式和运算可以自己去探索，和Excel非常的相似</p>]]></content>
      
      
      <categories>
          
          <category> 化工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hysys </tag>
            
            <tag> 流程模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HYSYS模拟朗肯循环</title>
      <link href="/posts/5d75a35f/"/>
      <url>/posts/5d75a35f/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210827105656.png" alt="封面"></p><h2 id="什么是朗肯循环"><a href="#什么是朗肯循环" class="headerlink" title="什么是朗肯循环"></a>什么是朗肯循环</h2><p>朗肯循环是指以水蒸气作为工质的一种理想循环过程，主要包括等熵压缩、等压加热、等熵膨胀、以及一个等压冷凝过程。用于蒸汽装置动力循环</p><h2 id="模拟"><a href="#模拟" class="headerlink" title="模拟"></a>模拟</h2><p>热源选择水，物性ASME steam，工质选择异丁烷，物性PR方程</p><p>构建热源流股：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210827110827.png"></p><p>构建流程：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210827111311.png"></p><p>工质设置为异丁烷组分1</p><p>通常情况下需要在泵入口设置一个饱和液相或者过冷状态，所以设置工质的气相分率为0，温度40℃：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210827111542.png"></p><p>并且饱和压力以及被计算出来了，但是工质的流量并不知道，这个并不需要设置，因为可以通过热源换热器的换热量计算出来需要多少工质，所以流量先空着</p><p>对于朗肯循环，不仅要保证泵入口时液相状态，还要保证膨胀机入口时气相状态，所以要保证流股2为饱和或者过热状态，所以设置流股2气相分率为1，温度120℃：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210827111913.png"></p><p>饱和压力也已经计算得出</p><p>在整个循环中，最主要的就是设置热源换热器：</p><p>设置压降，加权权重：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210827112214.png"></p><p>设置一个约束条件，最小传热温度为5℃：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210827112328.png"></p><p>如果换热器不能收敛，取消Ft因子设置：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210827112552.png"></p><p>在热源换热器设置完毕之后可以看到，整个朗肯循环已经是走通了的，但是冷却水的流量是未知的：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210827113030.png"></p><p>设置流股6的初始温度和压力：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210827113352.png"></p><p>给定冷却器参数和约束条件：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210827113510.png"></p><p>此时可以看到整个循环已经解算完毕，冷却水的量也得到计算结果</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在150℃，600kPa，15kg&#x2F;s的热源下，需要的工质流量为704kmol&#x2F;h，需要的冷却水为25℃，101.3kPa，80kg&#x2F;s</p><p>泵轴功率为66kW，膨胀机做功531kW</p><h2 id="带回热的朗肯循环"><a href="#带回热的朗肯循环" class="headerlink" title="带回热的朗肯循环"></a>带回热的朗肯循环</h2><p>单纯用冷却水去冷却太浪费了，那么可以用一个换热器，将压缩机出口的流股用来加热泵出口的流股，达到回收热量，减少冷却水消耗的目的</p><p>在上面的基础上构建流程如下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210827115734.png"></p><p>设置换热器E-102：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210827115841.png"></p><p>对于换热器E102来说，冷源和热源的入口温度都是已知的，那么此时就需要给出一个热源或者冷源的出口温度</p><p>设置冷源出口温度，也就是流股1-2的温度，先假定一个温度50℃：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210827121131.png"></p><p>这个时候可以发现，流程其实已经收敛了，结果可用了</p><p>但是发现，换热器E102的最小传热温差和理想的还是有点偏差：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210827121216.png"></p><p>可以通过调节器去调节流股1-2的温度，使换热器E102的最小传热温差满足需求</p><p>新建调节器，选择变量，设置目标值：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210827121455.png"></p><p>设置自变量范围和误差：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210827121630.png"></p><p>此时再查看E102发现结果已经符合预期：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210827121717.png"></p><p>还有一种方法就是使用循环器模块，前面的流程一致，将流程构建到如下图：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210827122645.png"></p><p>这个时候，E1003换热器是缺少一个入口温度的，那么先假设他的进口温度为70℃，也就是流股1-3的温度为70：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210827122907.png"></p><p>这个时候换热器E1003已经是可用状态了</p><p>在朗肯循环中，从膨胀机出口到泵入口是一个等压的状态，那么就需要设置一下换热器E103的压降，规定为0：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210827123233.png"></p><p>泵出口到膨胀机入口的压力是相等的，那么就要给出一个泵的出口压力，也就是流股11的压力，设置为2000kPa：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210827123432.png"></p><p>同时设定换热器E103的约束条件：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210827123544.png"></p><p>这个时候可以看到流程已经收敛走通了：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210827123623.png"></p><p>这个时候可以看到流股11和流股1-3的温度分别是：50.3和70℃</p><p>添加一个循环器，通过循环器将11流股的温度传递给流股1-3，自动循环计算，直到整个循环稳定为止</p><p>只需要传递一个温度变量即可：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210827124052.png"></p><p>更改灵敏度获得一个更准确地收敛</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210827124323.png"></p><p>收敛完成，温度最终稳定在66.6℃，还挺吉利</p><p>这就是今天的朗肯循环分享啦，我是乙醇，下次见~</p>]]></content>
      
      
      <categories>
          
          <category> 化工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hysys </tag>
            
            <tag> 流程模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HYSYS入门（3）</title>
      <link href="/posts/f1675b6c/"/>
      <url>/posts/f1675b6c/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210826090555.png"></p><blockquote><p>前情提要：</p><p><a href="https://imbhj.com/27539c26/">HYSYS入门（1）</a></p><p><a href="https://imbhj.com/49db3c09/">HYSYS入门（2）</a></p></blockquote><h2 id="换热单元"><a href="#换热单元" class="headerlink" title="换热单元"></a>换热单元</h2><h3 id="LNG换热器"><a href="#LNG换热器" class="headerlink" title="LNG换热器"></a>LNG换热器</h3><p>液化天然气(Liquefied Natural Gas，简称LNG)，主要成分是甲烷，被公认是地球上最干净的化石能源。无色、无味、无毒且无腐蚀性，其体积约为同量气态天然气体积的1&#x2F;625，液化天然气的质量仅为同体积水的45%左右</p><p>HYSYS中的LNG换热器涉及到多股物流的物料平衡和能量平衡，当然如果只有两股物流时，其实和管壳式换热器相差无几</p><p>例题：在换热器中，有一股热物流，两股冷物流，热物流出口温度为-156℃，两股冷物流出口温度相同，热物流的压降为10kPa，冷物流的压降为5kPa。模型选择简易加权，物性为PR方程，求解两股冷物流的出口温度（其他条件如下表）</p><table><thead><tr><th align="center"></th><th align="center">热物流</th><th align="center">冷物流1</th><th align="center">冷物流2</th></tr></thead><tbody><tr><td align="center">温度（℃）</td><td align="center">-5</td><td align="center">-184</td><td align="center">-194</td></tr><tr><td align="center">压力（kPa）</td><td align="center">600</td><td align="center">120</td><td align="center">125</td></tr><tr><td align="center">流量（kmol&#x2F;h）</td><td align="center">250</td><td align="center">10</td><td align="center">180</td></tr><tr><td align="center">N2</td><td align="center">1</td><td align="center">1</td><td align="center">1</td></tr></tbody></table><p>输入物性，工质N2，物性PR方程</p><p>新建LNG换热器，添加流股：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210826092533.png"></p><p>更改成一股热流股，两股冷流股：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210826092641.png"></p><p>构建流程：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210826093231.png"></p><p>按照题目给的表格填写流股参数：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210826094026.png"></p><p>设置LNG换热器冷热流股压降：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210826094245.png"></p><p>设置热流股出口温度：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210826094324.png"></p><p>此时查看到LNG换热器模块的自由度是1，说明还有一个条件没有设置：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210826094456.png"></p><p>也就是题目中要求的，冷流股出口温度相同，即就是5和6流股出口温度相同，这个要怎么设置呢</p><p>在LNG换热器模块中添加一个限制条件：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210826094616.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210826094712.png"></p><p>设置5和6流股温差为0，即就是两股冷流股出口温度一致</p><p>解算完成：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210826094824.png"></p><p>冷流股出口温度：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210826094848.png"></p><h2 id="塔单元"><a href="#塔单元" class="headerlink" title="塔单元"></a>塔单元</h2><h3 id="简捷计算"><a href="#简捷计算" class="headerlink" title="简捷计算"></a>简捷计算</h3><p>HYSYS中的简捷塔计算就相当于Aspen中的DSTWU模块</p><p>和学习aspen的时候一样，简捷精馏第一个例题还是关于苯和甲苯的，是不是有了熟悉的感觉~</p><p>例题：精馏分离含苯为0.44的苯和甲苯混合液，混合液温度为20℃，压力200kPa，流量100kmol&#x2F;h，要求塔顶产品苯的含量不低于0.975，塔底产品苯含量不高于0.0235（摩尔分数），操作回流比3.5，塔顶压力120kPa，塔底压力150kPa，求解理论板数和进料位置，物性选择Antoine</p><p>构建流程：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210826104624.png"></p><p>输入进料流股数据：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210826104821.png"></p><p>设置简捷塔关键组分：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210826105008.png"></p><blockquote><p>题目中要求塔底的苯含量不高于0.0235，塔顶产品中苯含量不低于0.975，也就是说塔顶产品中甲苯含量不高于1-0.975&#x3D;0.025</p><p>其中塔底主要采出甲苯，那么塔底的轻组分就是苯</p><p>塔顶主要采出苯，那么塔顶的重组分就是甲苯</p></blockquote><p>设置塔顶塔底压力：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210826105321.png"></p><p>给出塔顶和塔底压力之后，会自动计算出最小的回流比，题目中要求回流比是3.5，所以还需要设置回流比：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210826105445.png"></p><p>设置完毕之后就可以看到已经解算完成：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210826105541.png"></p><p>查看塔的结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210826105641.png"></p><h3 id="严格计算"><a href="#严格计算" class="headerlink" title="严格计算"></a>严格计算</h3><p>简捷计算知识初步估算塔的一些基本数据，为严格计算提供一些数据依据，真正模拟用的多的还是严格塔</p><p>在上面的简捷计算基础上进行严格计算</p><p>构建流程：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210826111011.png"></p><p>设置塔板数与进料板：</p><blockquote><p>根据简捷计算的结果可知，理论板数12块，进料在第6块</p></blockquote><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210826111147.png"></p><p>点击下一步，选择再沸器：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210826111222.png"></p><p>默认即可</p><p>点击下一步，设置冷凝器和再沸器压力：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210826111317.png"></p><p>点击下一步，设置温度：</p><blockquote><p>在简捷计算中，冷凝器和再沸器估算的温度为84.85℃和123.9℃</p></blockquote><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210826111401.png"></p><p>下一步设置回流比3.5：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210826111512.png"></p><p>点击完成，查看所有参数：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210826111555.png"></p><p>查看塔的自由度和约束条件：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210826111841.png"></p><p>可以看到，虽然塔的自由度为0，但是约束条件中有一项是空的，也就是塔顶的采出量</p><p>取消启用塔顶采出量这个约束条件，自由度变为1</p><p>在约束条件中添加一个新的：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210826112038.png"></p><p>选择塔组分分率规定：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210826112912.png"></p><blockquote><p>如果提示不能添加此规定，需要进行修正，那么修改解算方法，改为修正的HYSYS I&#x2F;O方法：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210826112655.png"></p></blockquote><p>设置塔顶采出苯含量：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210826113043.png"></p><p>查看监控器，自由度为0，条件设置完毕：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210826113201.png"></p><p>点击下方的运行，进行塔的解算</p><p>查看结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210826113403.png"></p><p>结果均符合题目要求</p><p>但是其实题目中有一个条件我们没用上，也就是题目中要求的塔底产品中苯含量不高于0.0235，那么来试试用这个条件去规定塔，看看结果如何</p><p>取消刚才设置的塔顶规定，设置一个新的塔底苯含量的规定：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210826113824.png"></p><p>运行之后查看结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210826113858.png"></p><p>可以看到，实际上规定塔底之后，塔顶的苯含量达到了0.99，比之前的0.975要好了不少</p><p>但是实际上对比一下其他的结果就会发现塔底的温度从123.9升到了124.7</p><p>所以不同的规定条件会导致一些不同的结果，在实际模拟中就需要去进行一个决策，找到最适合的比如说能量最优的方案，产品质量最优的方案等</p><h2 id="关键组分的确定"><a href="#关键组分的确定" class="headerlink" title="关键组分的确定"></a>关键组分的确定</h2><p>在简捷塔模拟初始数据的过程中，关键组分的确定是一个非常重要的步骤</p><p>关键组分一般是挥发度相邻的两个物质</p><p>通过一个例子来说明：精馏含有乙烷、丙烷、正丁烷、异丁烷、异戊烷、正戊烷、正己烷的一股混合物，要求塔顶异丁烷摩尔分数小于0.01，塔底丙烷摩尔分数小于0.02</p><p>题目中要求了这两个组分的摩尔分数，那么肯定是以这两个物质作为界限来进行分离：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210826154029.png"></p><p>那么在简捷计算的时候关键组分就如下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210826154142.png"></p><h2 id="加速塔的收敛"><a href="#加速塔的收敛" class="headerlink" title="加速塔的收敛"></a>加速塔的收敛</h2><p>塔解算过程中不收敛的常见原因主要有下面三个：</p><ul><li>参数设置偏离过大</li><li>求解器选择不合适</li><li>迭代次数小</li></ul><p>解决方案：</p><p>参数设置偏离过大，就需要进行校正参数，更改初始的估算值，和Aspen相似，也就是传统的试错法，或者使用灵敏度分析去找一个合适的参数</p><blockquote><p>至于HYSYS怎么使用灵敏度分析，这一点就要吐槽一下了，HYSYS中是没有直接的灵敏度分析界面或者模块的，需要通过其他手段进行替代，这个之后专门出一期讲解吧</p></blockquote><p>第二个就是怎么选择一个合适的求解器呢，在塔参数的设置界面，有一个求解器设置，如下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210826120518.png"></p><p>这六种解算方法的适用情况如下表：</p><table><thead><tr><th align="center">解算方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">HYSYS Inside-Out</td><td align="center">通用方法，适用于大多数情况</td></tr><tr><td align="center">已修改的HYSIM Inside-Out</td><td align="center">通用方法，允许塔子流程有混合器、分流器和换热器</td></tr><tr><td align="center">Newton Raphson Inside-Out</td><td align="center">通用方法，允许塔子流程有液相反应动力学</td></tr><tr><td align="center">稀疏连续解算器</td><td align="center">基于方程求解，主要用于高度非理想的化学体系和反应精馏</td></tr><tr><td align="center">同时校正</td><td align="center">适用于化学体系和反应精馏</td></tr><tr><td align="center">OLI解算器</td><td align="center">只适用于电解质体系</td></tr></tbody></table><p>第三种解决方案就是更改迭代次数或者阻尼因子：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210826121311.png"></p><p>默认情况下最大迭代次数为一万次，一般来说，在单个塔的流程中，更改迭代次数还是可以的，但是在一些复杂流程中，不建议去更改迭代次数，因为更改迭代次数之后其他的模块很多参数也会跟着改变，会导致解算速度变得非常缓慢</p><p>主要还是阻尼因子，那么什么是阻尼因子呢</p><p>阻尼是指任何振动系统在震动中，由于外界作用或者系统本身固有的原因引起的震动幅度逐渐下降的特性，以及此特性的量化表征</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210826121802.png"></p><p>而将阻尼因子改成自适应模式的时候，可以避免调整参数和运算过程中参数和求解结果震荡过大，使塔更加稳定的运行，加快塔的收敛速度</p><p>基本上关于入门篇，就这么多了，我学的也不多，下次有什么好玩的再分享，我是乙醇，拜拜~</p>]]></content>
      
      
      <categories>
          
          <category> 化工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hysys </tag>
            
            <tag> 流程模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HYSYS入门（2）</title>
      <link href="/posts/49db3c09/"/>
      <url>/posts/49db3c09/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825101022.png"></p><blockquote><p>上一篇文章讲到逻辑单元模拟中的设置器，接着讲</p><p>上一篇文章地址：<a href="https://imbhj.com/27539c26/">HYSYS入门1</a></p></blockquote><h2 id="循环器"><a href="#循环器" class="headerlink" title="循环器"></a>循环器</h2><p>主要作用就是求解物流循环，加速循环回路收敛</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825103046.png"></p><p>也就是实际容差&#x3D;10×100×0.001&#x3D;1，也就是说循环物流在99-101kmol&#x2F;h之间都算收敛</p><p>不同的传递属性及容差：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825103449.png"></p><p>属性传递方向：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825103805.png"></p><p>可以设置向前，向后，或者不传递</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825103943.png"></p><p>采取部分步骤的意思就是在循环还没有完全建立的时候，部分流股里并没有流量，需要及时的去求解一些参数</p><p>如果不勾选的话就是等待循环建立，流股解算完毕之后把完整的参数进行传递</p><p>组分灵敏度就是对流股里某一个组分的灵敏度进行设置，达到更加容易收敛的效果，一般来说用不到</p><h2 id="案例模拟"><a href="#案例模拟" class="headerlink" title="案例模拟"></a>案例模拟</h2><p>在第一个例子中，使用循环器将分离罐顶部的气相通过循环器返回到压缩机</p><p>新建一个循环器，混合器，链接工艺流股：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825110207.png"></p><p>可以看到解算器已经解算完毕，流股状态正常，这个时候就需要把流股6链接到压缩机入口，也就是混合器上即可：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825110329.png"></p><p>可以看到循环器达到最大迭代次数，解算有警告，更改迭代次数即可：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825110453.png"></p><p>收敛完成，无警告无错误</p><h2 id="平衡器"><a href="#平衡器" class="headerlink" title="平衡器"></a>平衡器</h2><p>通用的物料平衡和能量平衡单元</p><p>平衡器有六种平衡模式</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825112450.png"></p><p>第一种是组分摩尔流量，只传递组分的摩尔流量，不做能量衡算，不传递温度压力</p><p>第二种是质量流量，可以通过质量守恒来反算在反应过程中某一位置的未知量</p><p>第三种是热流量，不传递组分，不传递流量，做热量衡算</p><p>第四种就是一和三组合，第五种就是二和三组合</p><p>第五种是通用模式，也就是几个的加和，传递组分，流量，热量等</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825112656.png"></p><p>第四种和第五种全部参数都进行传递，凡是有一些小的区别</p><p>第四种传递的是组分摩尔流量和热流量，但是它的质量流量是通过摩尔流量反算得到的，第六种就是直接传递</p><h2 id="电子表格模块"><a href="#电子表格模块" class="headerlink" title="电子表格模块"></a>电子表格模块</h2><p>执行数值逻辑运算，流程赋值</p><p>用户可以利用电子表格添加过程变量，添加公式、函数以及逻辑操作，导入和导出变量数据，数据自由传递等</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825113226.png"></p><p>变量的导入：可以直接复制粘贴，或者拖拽添加进表格中，还可以在表格中右键，选择添加输入变量，导入想要的变量</p><p>变量的导出：导出和导入基本一样</p><p>变量的删除：右键变量，选择接触导入链接</p><p>表格中的函数，必须以+、&#x3D;、@开始，&#x3D;号主要是简单的数学运算，比如&#x3D;A1+A2，@符号主要是逻辑运算，包括对数运算、三角函数等</p><p>开平方根使用<code>@SQRT</code> ，阶乘使用<code>!</code> ，Π（圆周率）使用<code>Pi</code> ，逻辑运算支持布尔逻辑</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825114203.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825114156.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825114220.png"></p><p>基本上，常用的操纵器模块就这么多，下面开始简单单元模拟的学习</p><h2 id="单元模拟"><a href="#单元模拟" class="headerlink" title="单元模拟"></a>单元模拟</h2><p>混合器、分流器就不说了，很简单，和aspen一模一样</p><h2 id="分离器"><a href="#分离器" class="headerlink" title="分离器"></a>分离器</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825115238.png"></p><p>进口压降也就是当进料为200的时候，气液两相出料都是减去这个压降，蒸汽出口压降就是只有气相出口的压降</p><p>分离器还可以加一个热负荷的流量，热负荷只会改变罐体的温度，不能改变压力，同时，当罐体的温度改变时罐子的气液两相产品流量也会改变</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825154722.png"></p><p>对雾沫夹带进行设置</p><h2 id="泵"><a href="#泵" class="headerlink" title="泵"></a>泵</h2><p>通过一个小例子来学习吧：</p><p>工质是水，物性选择NBS steam，温度25℃，压力100kPa，流量100m3&#x2F;h</p><ul><li><p>当出口压力设置为900kPa，泵绝热效率为70%时，求解泵的轴功率和有效汽蚀余量</p></li><li><p>已知泵的曲线方程为He&#x3D;300-2qv-0.005qv2，求解泵出口压力</p></li><li><p>已知泵的特性曲线如表所示，求解泵出口压力</p><table><thead><tr><th align="center">Q流量（m3&#x2F;h）</th><th align="center">H扬程（m）</th><th align="center">效率（%）</th></tr></thead><tbody><tr><td align="center">83.4</td><td align="center">54</td><td align="center">60</td></tr><tr><td align="center">111.2</td><td align="center">51</td><td align="center">64</td></tr><tr><td align="center">139</td><td align="center">48</td><td align="center">67</td></tr></tbody></table></li></ul><p>首先是第一问，设置如图：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825160915.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825160950.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825161017.png"></p><p>结果如下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825161102.png" alt="轴功率"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825161153.png" alt="汽蚀余量"></p><p>第二问设置如下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825161615.png"></p><p>结果如下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825161645.png" alt="泵出口压力"></p><p>第三问设置如下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825161802.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825161903.png"></p><blockquote><p>注意单位</p></blockquote><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825162019.png"></p><blockquote><p>使用曲线计算前将泵的参数中绝热效率删除</p></blockquote><p>结果如下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825162134.png" alt="出口压力"></p><h2 id="压缩机和膨胀机"><a href="#压缩机和膨胀机" class="headerlink" title="压缩机和膨胀机"></a>压缩机和膨胀机</h2><p>压缩机分类主要有三种：离心式、往复式、螺杆式</p><p>膨胀机主要是离心式</p><table><thead><tr><th align="center"></th><th align="center">离心式</th><th align="center">往复式</th><th align="center">螺杆式</th></tr></thead><tbody><tr><td align="center">适用范围</td><td align="center">处理量大，压比低</td><td align="center">排放压力高，流量小</td><td align="center">-</td></tr><tr><td align="center">参数设置</td><td align="center">效率，压力变量</td><td align="center">结构参数，缸数，缸径，行程，缸型等</td><td align="center">-</td></tr></tbody></table><p>螺杆式类似于往复式，是一种正位移压缩机，分为干式和喷油两种</p><p>主要使用离心式压缩机和膨胀机，这两个设置参数基本一致，选用压缩机进行介绍：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825163201.png"></p><h2 id="绝热闪蒸、绝热膨胀、节流膨胀"><a href="#绝热闪蒸、绝热膨胀、节流膨胀" class="headerlink" title="绝热闪蒸、绝热膨胀、节流膨胀"></a>绝热闪蒸、绝热膨胀、节流膨胀</h2><p>例题：将同一工质，异丁烷，温度150℃，2000kPa，100kmol&#x2F;h，进行绝热闪蒸、绝热膨胀和节流膨胀至相同压力1000kPa，比较出口温度并计算膨胀机轴功率（物性选择PR方程）</p><h3 id="绝热闪蒸"><a href="#绝热闪蒸" class="headerlink" title="绝热闪蒸"></a>绝热闪蒸</h3><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825164600.png"></p><p>设置闪蒸罐压降为1000kPa，出口结果温度为：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825165735.png"></p><p>由150℃降低到140.6摄氏度</p><h3 id="绝热膨胀"><a href="#绝热膨胀" class="headerlink" title="绝热膨胀"></a>绝热膨胀</h3><p>新建一个流股，因为数据和流股1完全一致，所以可以通过以下方法直接导入：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825164824.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825164844.png"></p><p>进行绝热膨胀设置：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825165137.png"></p><p>设置等熵效率为99.9999%（不可能达到100%故不允许设置百分百，所以设置一个接近百分百的数值即可）</p><p>设置压降为1000kPa</p><p>查看结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825165700.png"></p><p>温度从150℃降到了125.4℃</p><h3 id="节流膨胀"><a href="#节流膨胀" class="headerlink" title="节流膨胀"></a>节流膨胀</h3><p>设置节流阀压降：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825165537.png"></p><p>查看结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825165606.png"></p><p>温度由150℃降到了140.6℃</p><p>可以看到，绝热闪蒸和节流膨胀是很相似的，实际上和先经过节流再进入分离罐是一模一样的，也就是将绝热闪蒸的压差在管道中通过阀门来实现</p><p>绝热膨胀后的温度比绝热闪蒸更低，是因为在绝热膨胀过程中对外做了功，而绝热闪蒸和节流膨胀过程中物流的高压能量并没有被利用</p><p>在实际中可以使用膨胀机让物流降低到更低的温度，回收能量，典型的例子就是朗肯循环</p><h2 id="传热单元"><a href="#传热单元" class="headerlink" title="传热单元"></a>传热单元</h2><h3 id="冷却器-加热器"><a href="#冷却器-加热器" class="headerlink" title="冷却器&#x2F;加热器"></a>冷却器&#x2F;加热器</h3><p>主要用来模拟单股物流与能流的热量交换</p><p>若进口状态已知，换热器需要给出压力变化，也就是压降、出口压力以及出口温度</p><p>换热器的吸热量&#x3D;物流的质量流量×进出口的焓差</p><h3 id="空冷器"><a href="#空冷器" class="headerlink" title="空冷器"></a>空冷器</h3><p>模拟以空气为传热介质的热量交换</p><p>空冷器的吸热量&#x3D;传热系数×总的传热面积×进出口温差</p><p>例题：将80℃，100kPa，1kmol&#x2F;h的水降温至50℃，物性选择ASME steam，求解：</p><ul><li>用冷却器时，求解冷公用工程（冷却水）的用量</li><li>用空冷器时，求解在空气出口温度不大于40℃的情况下空气的用量</li></ul><p>冷却器的设置如下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825172838.png"></p><p>设置冷却器压降为0（可根据实际情况设置，一般来说为10-20kPa），出口温度设置为50℃</p><p>设置公用工程冷却水：（双击能流Q-100）</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825173757.png"></p><p>得到冷却水的用量：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825173321.png"></p><p>空冷器设置：</p><p>设置压力降为0：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825174419.png"></p><p>设置出口温度为50℃：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825174601.png"></p><p>删除默认设计空气流量：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825175847.png"></p><p>设置空气出口温度：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825175802.png"></p><p>查看结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825175914.png"></p><p>需要的空气流量为129.5方每小时</p><h3 id="管壳式换热器"><a href="#管壳式换热器" class="headerlink" title="管壳式换热器"></a>管壳式换热器</h3><p>管壳式换热器的热平衡&#x3D;冷物流的质量流量×(冷物流进出口焓值-进口焓值)&#x3D;热物流的质量流量×(热物流进口焓值-出口焓值)</p><p>管壳式换热器有五种计算模型，分别是：简易端点模型、简易加权模型、简易稳态校核模型、动态校核模型、严格模型</p><p>常用的就是前两种：</p><ul><li>简易端点模型：适用于物流无相变和Cp相对恒定的工况</li><li>简易加权模型：适用于非线性换热问题，且只适用于逆流换热</li></ul><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825180941.png"></p><p>例题：利用25℃，100kPa的冷却水来冷却200℃，2000kPa，100kmol&#x2F;h的R600a(异丁烷)流股，将其冷却到150℃，其中泵的压力增量为200kPa，泵效率为75%，换热器冷却水出口温度50℃，换热器选择简易加权模型，求解泵的消耗功</p><p>工质异丁烷物性选择为PR方程，水物性选择为ASME steam</p><p>如下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825181833.png"></p><p>搭建换热器流程：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825182120.png"></p><p>设置流股1，为异丁烷工质：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825182318.png"></p><p>设置换热器模型为简易加权：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825182409.png"></p><p>忽略换热器压降：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825182454.png"></p><p>更改流股5的物性包，换成工质水的物性：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825182557.png"></p><p>设置流股5条件，为纯工质水：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825182712.png"></p><p>设置泵压差和绝热效率：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825182842.png"></p><p>设置换热器出口流股4的温度：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825183003.png"></p><p>设置换热器出口流股2的温度：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825183038.png"></p><p>解算完成：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825183119.png"></p><blockquote><p>小技巧：</p><p>在换热器的规定界面，有一个自由度的参数，如图所示：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825183347.png"></p><p>此时已经解算完毕，所以自由度是0，当任意删除掉一个换热器出口温度的时候，这个自由度就会变成1，说明在流程中还缺少一个条件未设置</p><p>其他的模块也是同样的</p></blockquote><p>查看本题结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825183513.png"></p><p>需要的冷却水流量：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825183543.png"></p><p>今天就到这里啦，我是乙醇，下次见~</p><h2 id="2021-8-27更新"><a href="#2021-8-27更新" class="headerlink" title="2021.8.27更新"></a>2021.8.27更新</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210827104551.png"></p><p>补充一下，换热器中这个间隔的参数</p><p>在选择简易加权模型时，会有这个间隔的参数设置，一般来说不用特意去设置，但是习惯上会更改一下，一般在一百以内取值即可</p><p>那么这个参数是啥意义呢，它是加权模型的权重，权重越大模型准确度越高，当然计算也更加的缓慢，一般来说100以内足以，更大一点更容易收敛</p>]]></content>
      
      
      <categories>
          
          <category> 化工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hysys </tag>
            
            <tag> 流程模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>化工操作工设备基础知识100题</title>
      <link href="/posts/4c0d0fd6/"/>
      <url>/posts/4c0d0fd6/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210825091216.png"></p><blockquote><p>文章转载自公众号：今日化题榜</p><p>原文链接：<a href="https://mp.weixin.qq.com/s?__biz=MzI0MTcyNjE0Ng==&mid=2247530390&idx=2&sn=53463286dde4245c61bbf4b75b859ac3&chksm=e905103bde72992d1e127c7394c07855b8d5f99dac33d2476c97d044c3d78dce642a36e9c88d&mpshare=1&scene=23&srcid=0824o5bk2idWEDelWRS9bxoY&sharer_sharetime=1629794812769&sharer_shareid=a0821fbb64f9b6fe28363c8f21f6c8f8#rd">化工操作工设备基础知识100题</a></p></blockquote><ol><li><p>设备巡检的五字经是：听、摸、查、看、闻</p></li><li><p>润滑管理中</p><p>五定：定点、定质、定量、定期、定人</p><p>三过滤：领油大桶到贮油桶、从贮油桶到油壶、从油壶到润滑部位</p></li><li><p>设备管理中</p><p>四懂：懂原理、懂构造、懂性能、懂工艺流程</p><p>三会：会操作、会保养、会排除故障</p></li><li><p>压力容器的合理维修有哪些？</p><p>保持压力容器防腐完好无损，防止介质和大气对其腐蚀，安全附件按规定校验，保持齐全、灵敏、准确，固定件必须完整可靠及时清除跑、冒、滴、漏现象，减少和消除容器的振动现象</p></li><li><p>润滑剂的作用：冷却、洗涤、密封、防锈、减振、传递、润滑</p></li><li><p>谈谈你对治理跑冒滴漏的意义和认识</p><p>影响厂容厂貌，危害生产，影响无泄漏工厂的验收，化工生产易燃、易爆、易中毒，如果到处跑冒滴漏会危害人的身体健康，会造成生产不必要的损失，甚至会给职工带来伤亡事故，或造成严 重后果</p></li><li><p>滚动轴承常见的故障及原因？</p><p>轴承发热：1润滑油供应不充分或选号不对；2有杂物侵入；3安装不正确</p><p>声音不正常：1轴承滚道剥落或滚道损坏；2支架散；3轴承严重缺油；4滚道和钢球有麻点</p><p>传动不灵活：1轴承附件如密封件有松动或摩擦；2轴承被油污或污物卡住；3轴承内外环与轴承箱配合不好过松或过紧</p></li><li><p>离心泵不打液主要原因？</p><p>1介质温度过高，形成气蚀；2吸液口堵塞；3机体和密封件漏气；4叶轮螺母松动，叶轮与轴键磨损，键不起作用；5叶轮片冲刷严重；6电机反转；7泵抽空；8泵空气没排除形不成真空等</p></li><li><p>叙述齿轮油泵的工作原理</p><p>当泵启动后主动轮带动从动齿轮，从动齿轮以相反的方向旋转，齿轮与齿轮之间有很好的啮合，两个齿轮的齿将进口处的油刮走一些，于是形成低压吸入液体进入泵体的液体分成两路，在齿轮与泵壳的空隙中被齿轮推着前进，压送到排油口形成高压而排液</p></li><li><p>吹风气回收锅炉主要设备有那些？</p><p>燃烧炉、蒸汽过热器、锅炉本体、第二空气预热器、软水加热器、第一空气预热器、引风机、送风机</p></li><li><p>炉条机打滑的原因</p><p>1推动轴承坏，刹车片磨损严重；2炉条机严重缺油，各件严重磨损；3炉子结疤，灰盘移位；4链条过长，链轮磨损严重；5宝塔弹簧没压紧等</p></li><li><p>油压波动的原因</p><p>1油温过高，季节性油型不对；2油泵磨损严重；3溢流阀磨损严重；4油缸密封件坏，串油；5电磁阀磨损严重，串油；6油质脏，油中进水；7贮能器缺压；8油泵功率小，流量达不到；9系统安装贮能少；10系统油外漏；11系统油缸配套不均；12滤网脏，吸液量差等</p></li><li><p>罗茨风机响声大的原因</p><p>1出口压力高，负荷重；2电机部件出故障；3风机内焦油粘接严重；4缺油；5风机内进水；6轴承磨损严重，齿轮啮合不好；7部分部件螺栓松动；8近路阀没关好等</p></li><li><p>造气液压阀构造有阀体、阀盖、阀板、阀杆、上下涨、填料压盖、人字架、连杆及油缸等</p><p>造气液压阀起落不灵的原因：1油压过低不稳；2阀门内部件脱落或卡住；3压盖过紧；4液压阀磨损严重；5油缸密封坏；6阀杆缺油润滑不好；7阀体安装不正，油缸与液压阀不垂直、不同心等</p></li><li><p>造气液压油冬夏季各用什么型号的？</p><p>冬季用46#-68#抗磨液压油，夏季68#-100#抗磨液压油</p></li><li><p>运转设备安装时什么要求？<br>一平 、二正 、 三复核</p><p>高速设备同心度±0.06mm，一般设备同心度±0.12mm</p></li><li><p>轴承常分为滚动、滑动两类</p></li><li><p>一只电磁阀的组成：阀体、线包、阀芯、前后压盖、前后垫片、弹簧、线包筒、前后阀芯导向轴等部件</p></li><li><p>电动葫芦的组成：起重电机配电箱、滚筒、连接轴刚性联轴器、变速箱总成、运行小车总成、行起电机等组成</p></li><li><p>电动葫芦打滑的原因：</p><p>电机刹闸松、电机花键磨损、连接轴及花键磨损、花键长短不适、变速箱零件磨损严重等</p></li><li><p>罗茨风机维护保养规程</p><p>1经常检查润滑部分是否有润滑油和油箱油位是否符合标高；</p><p>2经常检查各部位温度、轴承温度不能高于80℃，传动齿轮温度不高于60℃；</p><p>3机器大修后使用48小时后应将油箱内的油全部换掉，换上规定的润滑油，以后每工作500小时换一次油；</p><p>4输煤气停车后应通蒸汽冲洗煤焦油及杂物，以防止粘附于转子上，从而破坏平衡；</p><p>5在运转过程中，就注意风机是否有不正常的摩擦和撞击声，对于运转中出现的故障要正确处理，严禁机器带病运行</p></li><li><p>大倾角皮带和平皮通常有的问题</p><p>两种皮带常见的故障就是皮带走偏磨损严重，大倾角皮带是导向辊和松紧拉丝互相配合着调整的，平皮是后辊筒拉丝调整，通常是左边松调左边，右边松调右边，要微调不大调，调后要观察等皮带走正常时方可离开。另外，轴承损坏，托辊轴承坏都可以使皮带不能正常工作，包机人员必须做到勤检查，勤发现，勤处理问题，保证正常运行</p></li><li><p>“无泄漏工厂”要求中主要设备完好率为95%，全部设备完好率90%，静密封点泄漏率是0.5‰以下，动密封点泄漏率是2‰以下，还要做到无明显偏差</p></li><li><p>设备的磨损分为：有形磨损和无形磨损</p></li><li><p>设备综合管理中的五个结合：设计制造与使用相结合，维护与计划检修相结合，修理改造与更新相结合，专业管理与技术管理相结合</p></li><li><p>一只型号3616的滚动轴承，它的内径尺寸是80mm</p></li><li><p>一只型号J11H-16-25的阀门它的口径为25mm，工作压力为1.6MPa</p></li><li><p>离心泵的主要部件：泵体、泵轴、叶轮、泵端盖、轴承</p></li><li><p>钳工在铸件上攻出一个M10×1.5的螺纹，应选用φ8.5mm的钻头</p></li><li><p>运转设备的润滑部位为什么要留间隙？间隙过大或过小对设备有什么影响？</p><p>因为滑动摩擦部位受到物理化学的变化的影响，不留出间隙各运动部位会因此损坏或不能运动，使设备不能正常生产</p><p>间隙过大会出现响声和振动；过小会因件磨损，使润滑系统不能正常运行，会使设备造成寿命率下降或影响生产，造成不应有的损失</p></li><li><p>进入容器检修要注意</p><p>必须申请办证并得到批准，必须进行安全隔绝并切断动力电源，并使用安全灯具，要进行置换通风，按时间要求进行安全分析，佩戴规定的防护面具，还得有人在器外监护并坚守岗位，必须有抢救后备措施</p></li><li><p>有色金属及其合金有：铜及铜合金：铜、黄铜、青铜，铝及铝合金，镍及镍合金，铅及铅合金，钛及钛合金，轴承合金</p></li><li><p>传动的种类：平型带传动、三角带传动、链传动、齿轮传动、蜗杆涡轮传动、齿轮齿条传动</p></li><li><p>容器按工艺作用原理分为：反应容器、换热容器、分离容器、贮运容器</p></li><li><p>滤网应符合的规定</p><p>透平油、冷冻机油、压缩机油机械油一级过滤为60目，二级为80目，三级过滤100目</p><p>汽缸油齿轮油一级过滤为40目，二级过滤为60目，三级为80目，特殊油品按特殊规定执行</p></li><li><p>齿轮传动的优点</p><p>齿轮传动传递转动准确可靠，结构紧凑，效益高、寿命长，传递的速度范围大，齿轮传动可以将在一定距离内并成任意角度的两根轴的运动联系起来，传递中转速比可保持不变，利用齿轮的不同的组合可以很容易的在主动轮转速一定的条件下，使被动轮获得多种不同的转速和不同的转动</p></li><li><p>机械密封：机械密封就是端面密封。这种密封性能可靠，泄漏量小，使用寿命长，功率损耗小，不需经常维护，可用于高温、低温、高压、高真空度、及各种易燃、易爆、腐蚀性强的机械设备的密封</p></li><li><p>化工管道上所常用的阀门：闸阀、截止阀、旋塞阀、球阀、隔膜阀、蝶阀、柱塞阀、衬里阀</p></li><li><p>阀门按介质压力可分为</p><p>低压阀门（压力＜16kgf&#x2F;cm2）</p><p>中压阀门（压力16-64kgf&#x2F;cm2）</p><p>高压阀门（压力＞100kgf&#x2F;cm2）</p></li><li><p>压力容器的基本结构：筒体、封头、法兰、支座、接管、人孔、液位计及视镜等，常见的有卧式贮运容器，立式压力容器（塔器）</p></li><li><p>化工管件有：弯头、三通、异径管、活接头、法兰盖、盲板、异径三通、管帽等</p></li><li><p>常见弯头有：90°、45°、60°、180°。弯头有倍数一般为1、1.5DN倍</p></li><li><p>制作密封垫片的材料有：特殊纸板、橡胶板、石棉板、软金属片、低碳钢金属材料、聚四氟乙烯、膨胀石墨及密封胶液等</p></li><li><p>一般泵的叶轮、普通电机转子及风机叶轮的动平衡精度等级为G6.3</p></li><li><p>动密封标准</p><p>1各类往复压缩机曲轴箱盖允许有微渗透，但要经常擦净</p><p>2各类往复压缩机填料使用初期不允许有泄漏，到运行间隔期末允许有微漏，对有毒、易燃、易爆介质的填料状态，在距离填料300mm内取样分析，有毒气体浓度不超过有毒气体规定范围，填料函不允许漏油而活塞杆应有油膜</p><p>3各种注油器允许有微漏现象，但要经常擦净</p><p>4齿轮泵允许有微漏现象，但经常擦净</p><p>5各种传动设备采用油环的轴承不允许漏油，采用注油的轴承允许微漏并应随机擦净</p><p>6水泵填料允许漏的范围初期（检修后三月）每分钟不多于20滴，末期（计划检修之前）三个月一分钟不多于40滴</p><p>7输送物料介质填料每分钟不多于15滴</p><p>8凡使用机械密封的各类泵初期不允许有泄漏，末期每分钟不超过5滴</p></li><li><p>静密封是指设备及其附件和附属管线在运动过程中，两个没有相对运动的偶合件之间的密封，如设备管线上的法兰，各种阀门、丝堵、活接头、机泵上的油标，附属管线，电气设备的变压器、油开关、电缆接头、仪表孔板、调节阀、附属引线及其他设备的结合部位</p></li><li><p>在用起重机械的定期检验周期为二年</p></li><li><p>承压特种设备的安全附件有：安全阀、爆破片、液位计、温度计、数据采集处理装置</p></li><li><p>压力容器定期检验分哪几类？其检验周期是如何规定的？<br>1外部检查，每年一次</p><p>2内部检验，安全状态等级为1、2级的每6年至少一次，安全状况为3级的每三年至少一次</p><p>3耐压试验，对固定容器，每2次内外部检验至少进行一次；对移动式每六年至少一次</p></li><li><p>特种设备安装前，应书面告知什么部门？<br>直辖市或设区的市的特种设备安全监督管理部门</p></li><li><p>压力管道安全监督的范围</p><p>1最高工作压力大于或等于0.1MPa(表压)的气体，液体，蒸汽介质管道</p><p>2可燃并易爆、有毒、有腐蚀性最高工作压力高于的等于标准沸点的液体介质管道</p><p>3公称直径大于25mm的管道</p></li><li><p>特种设备的重大违法行为</p><p>1特种设备的无证设计；2特种设备的无证使用；3特种设备的无证安装、改造、维修；4特种设备的无证操作；5特种设备的无定期检验</p></li><li><p>承压设备有：锅炉、压力容器、压力管道</p></li><li><p>压力容器按设计压力分四个等级</p><p>1低压容器0.1≤P＜1.6MPa</p><p>2中压容器1.6≤P＜10MPa</p><p>3高压容器10≤P＜100MPa</p><p>4超高压容器P≥100MPa</p></li><li><p>在用锅炉安全阀每年至少校验一次</p></li><li><p>锅炉、压力容器拟停用一年以上的使用单位应封存锅炉、压力容器。在封存30日内向登记机关申请报停，并将使用登记证交回登记机关</p></li><li><p>起重机械安全监察的范围是：1额定起重量大于或等于0.5吨的升降机；2额定起重量大于或等于1吨，但提升高度大于或等于2米的起重机；3承重形式固定的电动葫芦</p></li><li><p>压力容器应具备的条件：1最高工作压力≥0.1MPa（不含液体静压力）；2内径D≥0.15m且容积V≥0.25m3；3盛装介质为气体、液化气体、或最高工作温度高于等于沸点的液体</p></li><li><p>管道法兰密封面名称及代号</p><p>按国标规定法兰密封面名称及代号如下：<br>平面：FF<br>凸面：RF<br>凸凹面:MF<br>榫槽面:TG<br>环连接面：RJ</p></li><li><p>离心泵的启动：1离心泵启动前应使泵内充满液体，并对泵进行盘车；2启动前一般应先关闭出口阀门（轴流泵、旋塞泵除外）使流量为零，减少泵启动电流，使启动功率最小；3启动后慢慢打开出口阀门，防止液体升温发生气蚀现象</p></li><li><p>水环真空泵的主要构造原理<br>主要构造：泵体、叶轮、轴、轴承、侧盖、支架等<br>工作原理：真空泵圆形外壳中装有一偏心叶轮，叶轮周围有若干径向叶片，泵启动前注入一定量的水，当叶轮达到一定转速是，泵内的水在离心力作用下甩向周围形成具有一定厚度的水环。由于叶轮是偏心的，水环与叶片之间构成的气室容积随叶轮旋转而变化，当叶轮旋转是，气室扩大形成真空，气体由进口吸入，随着叶轮的旋转，气室逐渐缩小，气体被压缩，由出口排出，实现吸气、压缩、排气过程</p></li><li><p>离心泵的型号意义:IH 80—50—315 （A）<br>IH—标准化工泵<br>80—吸入直径（mm）<br>50—排出直径（mm）<br>315—叶轮名义直径（mm）<br>A —叶轮外径经过切割</p></li><li><p>钢材的品种有钢板、钢管、型钢等<br>钢板：钢板分薄钢板、中钢板、厚钢板三类<br>钢管：钢管分有缝钢管、无缝钢管、螺旋管三类<br>型钢：型钢有多种如圆钢、方钢、六角钢、扁钢、角钢（等边、不等边）、槽钢及工字钢、H型钢等</p></li><li><p>绝对压强&#x3D;表压+大气压强；真空度&#x3D;大气压强-绝对压强</p></li><li><p>压缩机设冷却水装置作用：气体在被压缩过程中，温度要升高，如不进行冷却，则要多消耗动力，而且会使润滑油变稀而失去润滑作用，温度过高会引起润滑油着火，所以气缸要设置冷却水夹套来冷却气缸和气体</p></li><li><p>动力设备缺油、缺水会造成什么问题？如何预防？<br>动力设备的油、水起降温、润滑和隔离的作用</p><p>如果动力设备缺油、缺水，会造成动力设备损坏（如轴承缺油会造成轴承温度高磨损，严重时会烧坏电机）影响生产，危及安全</p><p>预防：1定时巡回检查，加油。检查冷却水系统是否畅通；2开启动力设备之前，要检查是否缺油或冷却水系统是否正常，有无堵塞</p></li><li><p>如何使用和维护离心泵？<br>起动前应检查各部分润滑油是否符合要求，转动部分是否灵敏，各部分螺丝是否拧紧，泵内充满水，随时注意泵的流量、扬程、变化、轴承温度是否正常，有无噪声和震动，电流表是否在正确的读数范围内。冬季不用时，把水放净，以免结冻</p></li><li><p>电机起动操作规程及注意事项？<br>1电机在起动前必须盘车或外观检查<br>2长期不使用及容易受潮环境条件中的电机在再次使用前必须找电工检查<br>3电机必须空负荷起动，待运行正常后逐渐加负荷<br>4大型电机和减压起动电机时应注意电流表，如果不运转绝对不能加负荷，停电后找电工检查故障<br>5电机不能连续起动，最多不能超过三次。每三次的间隔时间应为15—20分钟，经三次以后要间隔4小时<br>6在运行当中，如果声音不正常、有糊味、温度过高等现象，应果断处理并及时与车间电工联系<br>7在停车过程中如果停不下来，不准再按起动电钮，应及时找电工联系<br>8电机温度不得超过75℃<br>9电机不能超负荷运行，应根据各个电机的大小及各台电机的铭牌来确定电机的额定电流，一般情况电机额定电流&#x3D;千瓦数×1.9</p></li><li><p>压缩机气缸内有严重敲击声有几种原因？<br>活门没压紧或损坏，阀片、弹簧断，活塞螺母松动或破碎及活塞环断裂，气缸间隙小，气缸带液积水多，杂物掉入缸内</p></li><li><p>缩机烧轴瓦主要有什么原因？应如何处理？<br>原因：缺油或断油，油质差、润滑部分有杂物，安装、检修质量差，轴瓦质量差。<br>处理：加大油量，提高油质，提高安装、检修质量</p></li><li><p>缩机的润滑方式有几种？各用什么油？<br>气缸和填料用注油器注油，运转部件用低压齿轮油泵供油，注油轴瓦用的是黄油，润滑循环油是10#、13#压缩机用油，冬季用19#油</p></li><li><p>压缩机曲轴箱内有敲击声的原因是什么？<br>轴瓦松动或磨损，曲轴磨损，间隙大、螺丝松，断油、传动部分烧坏</p></li><li><p>压缩机循环油压力降低的原因主要有哪些？<br>油泵本身发生故障，油过滤器、油网堵塞，油路管漏油，油位过低</p></li><li><p>压缩机连杆的作用是什么？<br>连杆是压缩机连接十字头与曲轴的机件，它把曲轴的圆周运动转变为摇摆运动并传递给十字头</p></li><li><p>压缩机十字头的作用？<br>十字头是压缩机的主要部件，它不仅起连接连杆和活塞杆的作用，更主要的是将连杆的摇摆运转变为往复式直线运转，传给活塞杆，直接使活塞在气缸内作往复运动</p></li><li><p>止逆伐的构造与作用？<br>构造：外筒、弹簧、滚柱。<br>作用：防止外工段的气体和液体倒回本岗位，造成事故和损坏设备</p></li><li><p>连杆、活塞环断裂的原因是什么？应如何处理？<br>原因：螺栓拧的过紧或紧固不均、开口销断落、螺帽松动或轴瓦太松、螺栓强度下降而断裂、活塞卡住、安装质量差、余隙太小、造成活塞杆撞弯，误操作<br>处理：发生连杆、活塞环拉断事故时，应紧急停车检修，对主要部件应有计划定时进行检修或更换</p></li><li><p>压缩机最易磨损的机件有哪些？<br>活门阀片、弹簧、垫子、铜套、曲轴、轴瓦、活塞环、活塞、缸套、填料、支承环等</p></li><li><p>活塞式压缩机的工作原理及优缺点<br>工作原理：又称往复压缩机，它是靠气缸内的活塞往复运动来压缩气缸内气体的。<br>优点：1压力范围最广，从低压到超高压都可使用；2工作效率高；3适应性强，排气量范围大<br>缺点：外形尺寸和重量较大，需要较大的基础，气流有脉动性，易损件较多</p></li><li><p>φ108×4钢管通常来说公称直径为100mm，厚度4mm</p></li><li><p>离心泵主要性能参数有流量、扬程、转速、效率等</p></li><li><p>润滑油的性能指标有粘度、油性（润滑性）、极压性、闪点、凝点等</p></li><li><p>润滑油应根据工作载荷、工作速度、工作温度、工作性质、供油方法等方面选用</p></li><li><p>压缩机的压缩分为吸气、压缩、排气三个过程</p></li><li><p>常用钢铁牌号表示方法：Q235BF<br>Q—钢材的屈服强度“屈”字的拼音首位字母<br>235—屈服点（强度）值<br>B—质量等级常见有A、B、C、D<br>F—沸腾钢（B—半镇静钢、Z—镇静钢、TZ—特殊镇静钢）</p></li><li><p>灰铸铁：HT150<br>HT—灰铸铁代号<br>150—抗拉强度</p></li><li><p>阀门类型代号用汉语拼音字母表示，写出以下字母分别代表什么阀门<br>Z—闸板阀<br>J—截止阀<br>L—节流阀<br>Q—球阀<br>D—蝶阀<br>G—隔膜阀<br>X —旋塞阀<br>A—安全阀<br>S—疏水阀<br>Y—减压阀<br>H—止回阀&#x2F;底阀</p></li><li><p>阀门连接形式代号用阿拉伯数字表示，写出以下数字代表什么形式的连接<br>1—内螺纹<br>2—外螺纹<br>4—法兰<br>6—焊接<br>7—对夹<br>8—卡箍<br>9—卡套</p></li><li><p>阀芯与阀座密封面或衬里材料代号用汉语拼音字母表示，写出以下字母分别代表什么材料<br>T—铜合金</p><p>X—橡胶</p><p>N—尼龙塑料</p><p>H—合金钢</p><p>B—巴氏合金</p><p>D—渗氮钢</p><p>Y—硬质钢</p><p>Q—衬铅</p><p>C—搪瓷</p><p>J—衬橡胶</p><p>P—渗硼钢</p></li><li><p>直接用阀体加工密封面代号用什么字母？用W表示</p></li><li><p>写出以下阀门字母数字各表示的含义：<br><strong>Q21H-40P-25</strong>: 球阀，手动外螺纹直通式，阀芯为合金钢，阀体材质为1Cr18Ni9Ti，工作压力为4.0MPa，公称直径为25<br><strong>J41H-25P-100</strong>：截止阀，法兰连接，手动式，阀芯为合金钢，阀体材料为1Cr18Ni9Ti，工作压力2.5MPa，公称直径为100<br><strong>J41B-25-50</strong>：截止阀，法兰连接，阀芯材料为锡基轴承合金，工作压力为2.5MPa，公称直径为50<br><strong>G41CJ-6-100</strong>：隔膜阀，法兰连接，阀芯材料为碳钢衬胶，压力为0.6MPa，公称直径为100<br><strong>Z744W-2.5-600</strong>：闸板阀，液动，法兰连接，双闸板，由阀体直接加工密封材料，工作压力为0.25MPa，公称直径600<br><strong>D341X-10-300</strong>：蝶阀，蜗轮传动，法兰连接，单闸板，阀芯密封为橡胶，工作压力压力为1.0MPa，公称直径为300</p></li><li><p>滚动轴承精度等级共分为多少等级？<br>五个等级：G、E、D、C、B</p></li><li><p>滚动轴承共分多少系列？分别叫什么及代号？<br>可分为9个系列：0000、1000、2000、3000、4000、6000、7000、8000、9000.<br>0000：单列向心球轴承<br>1000：双列向心球面轴承<br>2000：向心短圆柱滚子轴承<br>3000：双列向心球面滚子轴承<br>4000：滚针和长圆柱滚子轴承<br>6000：角接触球轴承<br>7000：圆锥滚子轴承<br>8000：推力球轴承<br>9000：推力滚子轴承</p></li><li><p>D206轴承内径是多少？外径及高度是多少？<br>内径为30mm，外径为62mm，高度为16mm</p></li><li><p>三角带共有多少种？<br>O（10×6）、A（12.5×9）、B（16.5×11）、C（22×14）、D（21.5×19）、E（38×25.5）、F（50×30）共七种</p></li><li><p>三角带的周长指的是外周长还内周长？内周长</p></li><li><p>三角带的夹角是多少度？40±1度</p></li></ol><p>没想到吧，只有97题，哈哈哈，我是乙醇，希望这些能在你面试的时候或者工作的时候帮到你~</p>]]></content>
      
      
      <categories>
          
          <category> 化工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作工 </tag>
            
            <tag> 设备 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HYSYS入门（1）</title>
      <link href="/posts/27539c26/"/>
      <url>/posts/27539c26/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210824095541.png" alt="封面"></p><h2 id="过程模拟的作用？"><a href="#过程模拟的作用？" class="headerlink" title="过程模拟的作用？"></a>过程模拟的作用？</h2><ul><li>新工艺的开发研究</li><li>新装置的设计</li><li>旧装置的改造，包括节能降耗、能量优化、参数优化等</li><li>故障诊断</li><li>工艺生产的科学管理</li></ul><h2 id="Hysys的优点"><a href="#Hysys的优点" class="headerlink" title="Hysys的优点"></a>Hysys的优点</h2><ul><li>工艺流程简化</li><li>热力学基础数据全面</li><li>简单易上手</li><li>内置能量优化、成本优化等</li><li>针对第三方集成过程开放环境及利用ActiveX参与编程软件，可通过matlab、python、vd等语言进行调用</li></ul><p>hysys和aspen的关系：</p><p>Aspen plus适合用于精细化工、电解质、聚合物，固体处理等流程。而Aspen  hysys则适用于石油炼制、石油化工，天然气、原油性质模拟与表征等过程的计算。在hysys中，可以直接利用其中的单元模块进行油气处理有关的模拟，比如蒸馏，裂解，延迟焦化等等</p><h2 id="界面介绍"><a href="#界面介绍" class="headerlink" title="界面介绍"></a>界面介绍</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210824102000.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210824102225.png"></p><blockquote><p>更正：蓝色应该是用户输入值</p></blockquote><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210824102341.png"></p><p>在导入物质的时候，偶尔会遇到hysys中没有的物质，但是aspen的数据库中有，也可以使用aspen的数据库进行导入：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210824102951.png"></p><h2 id="案例模拟"><a href="#案例模拟" class="headerlink" title="案例模拟"></a>案例模拟</h2><p>一烃类混合物，含有乙烷0.15（摩尔分数），丙烷0.2，异丁烷0.6，正丁烷0.05 。温度10℃，压力101.3kPa，将其先压缩至345kPa，后冷却至0℃，送入分离器进行分离，忽略冷却器压降，计算两股产品物料的流量和摩尔组成</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210824110223.png"></p><h3 id="组分输入"><a href="#组分输入" class="headerlink" title="组分输入"></a>组分输入</h3><p>和aspen一样，首先是要输入流程所用到的所有组分物性和方法</p><p>点击添加之后，进入组分添加页面（默认数据库为hysys）</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210824121310.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210824121402.png"></p><p>添加好组分，进入物性包界面：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210824121432.png"></p><p>点击添加：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210824121525.png"></p><p>点击PR方程完成物性部分设置</p><h3 id="模拟界面"><a href="#模拟界面" class="headerlink" title="模拟界面"></a>模拟界面</h3><p>点击左下角的模拟，进入模拟界面</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210824121926.png"></p><p>右边的就是模型选项版，可以放置所需要的模块</p><p>首先放置第一个物流，也就是进料口：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210824122548.png"></p><p>会自动弹出流股设置相关：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210824124012.png"></p><p>输入流股组成：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210824124206.png"></p><p>输入温度、压力、流量：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210824155230.png"></p><blockquote><p>注意单位，建议使用SI单位集</p></blockquote><p>流股变为已求解状态：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210824155343.png"></p><h3 id="搭建流程"><a href="#搭建流程" class="headerlink" title="搭建流程"></a>搭建流程</h3><p>放置压缩机，连接流股2和设备能量线（按住Ctrl键拖出）：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210824155912.png"></p><p>设置流股2压力：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210824160211.png" alt="image-20210824160211470"></p><p>放入冷凝器：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210824160615.png"></p><p>设置换热器压降：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210824160731.png"></p><p>设置流股3温度：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210824160818.png"></p><p>放置闪蒸罐：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210824161109.png"></p><h3 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h3><p>双击流股4和5查看流股组成和其他状态信息：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210824161421.png"></p><p>这样，就完成了一个简单的闪蒸模拟</p><h2 id="HYSYS中的干度问题"><a href="#HYSYS中的干度问题" class="headerlink" title="HYSYS中的干度问题"></a>HYSYS中的干度问题</h2><p>所谓<strong>干度</strong>，是指<strong>蒸汽</strong>质量与<strong>总质量</strong>的质量的比值，而湿度分为绝对湿度和相对湿度，绝对湿度指每立方米湿蒸汽中含水蒸气的质量，相对湿度指湿蒸汽中水蒸气的实际含量接近最大可能量的程度，即湿蒸汽中水蒸气的实际分压与同温度下水蒸气饱和压力之比。热力学中干度的定义如下：汽液共存物中，汽相的质量分数或摩尔分数</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210824163051.png"></p><p>在同样干度都为0的情况下，为什么会出现40和100.2℃两种温度？</p><p>在HYSYS中，输入干度为0，就代表着这个流股处于饱和液相这个状态，而求解出来的干度为0，既可以是饱和液态，也可以是过冷度</p><h2 id="调节器"><a href="#调节器" class="headerlink" title="调节器"></a>调节器</h2><p>调节器的作用主要是通过改变自变量，使模块满足单元操作&#x2F;流股因变量的需求，对应Aspen中的就是设计规范</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210824165629.png"></p><p>在单独求解模式中求解方法有两种：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210824165734.png"></p><ul><li>割线法（Secant搜索法）：计算慢，但是稳定</li><li>Broyden搜索法：速度快不稳定</li></ul><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210824170017.png"></p><p>同步求解就是将多个调节器协调共同进行求解，同步调节管理器中打开之后就是所有的调节器，选择需要同步调节的调节器，最优化控制激活之后可以提高联立求解的效率</p><h2 id="案例模拟-1"><a href="#案例模拟-1" class="headerlink" title="案例模拟"></a>案例模拟</h2><p>在上一个例子中，通过调节器调节压缩机的压力使闪蒸罐液相产物中异丁烷的摩尔分数达到0.7</p><p>添加一个调节器：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210824170427.png"></p><p>选择自变量为流股2的压力：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210824171256.png"></p><p>因变量为流股5中异丁烷的摩尔分率：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210824170837.png"></p><p>指定目标值：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210824170917.png"></p><p>设置自变量上下限及迭代次数：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210824171029.png"></p><p>解算已经完成，查看结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210824171411.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210824171437.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210824171622.png"></p><p>最终将流股2的压力调整到了318.4kPa</p><h2 id="设置器"><a href="#设置器" class="headerlink" title="设置器"></a>设置器</h2><p>设置器主要作用是基于一过程变量，设置另一个过程变量的值</p><p>在设置器的参数调节页面，可以修改线性关系式的系数，改变目标变量，线性关系为<code>Y=MX+B</code> M是系数，通常为1，B是截距</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210824173816.png"></p><h2 id="案例模拟-2"><a href="#案例模拟-2" class="headerlink" title="案例模拟"></a>案例模拟</h2><p>在上一个案例中，通过设置器模块改变流股2的压力，使其和流股1的压力成线性变化，变化量为100kPa</p><p>设置设置器模块的目标变量为流股2的压力：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210824174326.png"></p><p>源变量来自于流股1：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210824174435.png"></p><p>此时会提示一致性错误，那是因为流股2的压力本已经设置了，只需要将流股2的压力设置值删除即可：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210824174548.png"></p><p>删除流股2的压力之后，点击启用解算即可：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210824174626.png"></p><blockquote><p>每一次报错的时候HYSYS会自动停止解算，所以修改之后需要手动再次启用解算器</p></blockquote><p>将设置器截距改为要求的100kPa：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210824174808.png"></p><p>查看流股2的压力：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210824174857.png"></p><p>比流股1的101.3kPa增加了100kPa，完成了一个增量的设置，且压力显示为黑色，即是系统计算值</p>]]></content>
      
      
      <categories>
          
          <category> 化工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hysys </tag>
            
            <tag> 流程模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Aspen模拟中灵敏度分析的应用</title>
      <link href="/posts/e5d93eed/"/>
      <url>/posts/e5d93eed/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210820100059.png"></p><h2 id="什么是灵敏度分析？为什么要用它？"><a href="#什么是灵敏度分析？为什么要用它？" class="headerlink" title="什么是灵敏度分析？为什么要用它？"></a>什么是灵敏度分析？为什么要用它？</h2><p>灵敏度分析是研究与分析一个系统（或模型）的状态或输出变化对系统参数或周围条件变化的敏感程度的方法。在最优化方法中经常利用灵敏度分析来研究原始数据不准确或发生变化时最优解的稳定性。通过灵敏度分析还可以决定哪些参数对系统或模型有较大的影响</p><p>在过程模拟中，我个人用灵敏度分析用的最多的地方就是画图了吧，各种参数对某一个因变量的影响曲线，从而确定一个模块的最优参数是什么，举个例子来说吧，回流比对塔顶采出产品质量分数的影响，就可以确定在保证产品质量的情况下，需要的最小回流比是多少</p><h2 id="创建灵敏度分析"><a href="#创建灵敏度分析" class="headerlink" title="创建灵敏度分析"></a>创建灵敏度分析</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210820120521.png"></p><p>名字根据自己需要设置即可，进入设置界面</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210820120643.png"></p><h2 id="设置变量"><a href="#设置变量" class="headerlink" title="设置变量"></a>设置变量</h2><p>设置变量有两种方法，先说一种最简单方便的</p><p>变化顾名思义，就是要变化的量，也就是自变量，那么定义自然就是因变量啦，列表就是要分析的结果</p><p>新建一个变量：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210820121437.png"></p><p>比如我们要分析一个塔的进料位置对塔顶采出的质量分数的影响，那么自变量就是进料板位置参数，因变量就是塔顶采出流股中关键组分的质量分率</p><p>那么首先，怎么设置这个1变量是进料板位置呢，打开这个塔的参数设置界面：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210820121644.png"></p><blockquote><p>因为本例是一个萃取精馏塔，所以两股进料，但是物料进料是L207-2</p></blockquote><p>选中进料板的塔板，点击复制：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210820121807.png"></p><p>返回灵敏度变量设置界面，点击粘贴即可：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210820121843.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210820121942.png"></p><p>可以看到，变量已经自动设置完毕，但是为什么上方还是红色显示输入不完全呢，那是因为只设置了自变量，没有设置自变量的变化范围</p><p>要分析进料塔板位置的影响，那么进料塔板位置肯定是在一个范围之内调整， 不可能是随机的一个数值，所以需要设置它的变化范围，本例中，进料塔板为第26块板，那么我就设置一个比较小的范围作为演示：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210820122226.png"></p><p>变量范围设置，可以看到有三种类型：等距、对数、值列表，等距的意思就是每个变量取值的点之间的差值是固定的，这个最为常用，对数顾名思义，将坐标转化为对数坐标，值列表就更简单了，你可以把你需要设置的每一个点输入进去，让它计算每一个你规定的点对因变量的影响</p><p>点数和增量就不说了，应该很好理解</p><p>下来就是设置因变量了：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210820122523.png"></p><p>同样的操作，查看塔顶采出流股的结果，对关键组分的质量分率进行复制：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210820122640.png"></p><p>在灵敏度设置界面点击粘贴完成因变量的设置：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210820122726.png"></p><p>因为因变量是自变量影响的结果，所以不需要人为的设置变化范围，设置好变量就可以了</p><p>接下来是列表：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210820122848.png"></p><p>直接点击填充变量即可自动设置报告所需的变量名，也可以手动填写，这里的列表变量就是因变量，也就是定义变量</p><h2 id="得出结果"><a href="#得出结果" class="headerlink" title="得出结果"></a>得出结果</h2><p>这样，一个进料塔板位置对塔顶采出关键组分的质量分率灵敏度分析就设置完成了，点击运行</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210820153343.png"></p><p>点击结果即可查看这个灵敏度的分析结果，如图所示，VARY1就是进料塔板位置，MASSFRA就是塔顶异丙醇的质量分数</p><p>有了数据那么该如何绘图呢，Aspen自带了绘图工具：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210820153527.png"></p><p>点击结果曲线</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210820153557.png"></p><p>选择X轴和Y轴参数，点击确定开始绘图，绘图如下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210820153644.png"></p><p>就能清晰的看到变化的趋势，在保证产品质量的同时，从20到26块板都可以，选择操作弹性最大的26块</p><p>其他的参数分析步骤基本相同</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>除了复制粘贴参数之外，还可以手动设置，在设置的时候可以使用aspen自带的参数引导器来快速找到需要的参数，如图所示：可以直接搜索</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210820155736.png"></p><p>当然，变量可以是不唯一的，可以定义多个自变量对一个因变量的影响，也可以定义一个自变量和多个收到该自变量影响的因变量，然后同时作图</p><p>当然变量之间不能互相影响，不然计算会出现误差，当灵敏度分析报错的时候，一般来说首先检查变量的设置是否出现问题，取值范围是否超过可行域，取值跨度是否过大等</p><p>如果变量设置没有问题，那么就要检查变量之间的影响关系，该自变量是否会影响得到因变量，如果自变量和因变量之间的影响关系不明确或者无关系，那么会导致灵敏度分析无法计算报错</p><p>一般来说，不建议同时设置超过三个及三个以上的自变量，会导致计算周期非常非常长，可能需要好几个小时</p><p>和计算器模块一样，灵敏度分析也支持Fortran编程，通过Fortran对变量进行运算，得到自己想要的结果，举个例子来说，aspen无法直接得到反应器中关键组分的转化率，你就可以通过灵敏度分析设置好相关变量之后通过Fortran语句进行运算，自动算出转化率从而得到结果，形成温度、压力、反应器体积、催化剂重量等参数对反应转化率的影响曲线，更好的去优化反应器的参数</p><p>在做第一遍流程的时候要灵活运用灵敏度分析，可以帮你找到一个模块的最优最稳定的参数，从而减小前面的流程影响下游流程的情况</p><p>今天就到这里，我是乙醇，下次见~~</p>]]></content>
      
      
      <categories>
          
          <category> 化工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Aspen </tag>
            
            <tag> 灵敏度分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Aspen中输入反应动力学</title>
      <link href="/posts/426b67d6/"/>
      <url>/posts/426b67d6/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210819104012.png"></p><h2 id="反应动力学"><a href="#反应动力学" class="headerlink" title="反应动力学"></a>反应动力学</h2><p>反应动力学严格来说是一门学科，但是这里所说的就是化学反应速率方程，是在反应条件固定下的反应速率随着时间变化的方程，可以描述一个反应进行的程度</p><p>反应动力学方程如何输入到aspen中呢？在aspen中，反应动力学表达式主要有以下几种：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210819105030.png"></p><p>最常用的就是LHHW和POWERLAW这两种了，所以本文从这两种举例来说明反应动力学如何在aspen中输入</p><h2 id="LHHW"><a href="#LHHW" class="headerlink" title="LHHW"></a>LHHW</h2><p>刚好在竞赛的时候气相丙烯水合异丙醇的动力学就是LHHW，所以直接把推导过程放上来：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210819105657.png"></p><p>这就是查阅文献之后得到的初始方程和相关数据</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210819105746.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210819105816.png"></p><p>推导到这里，化简之后的方程已经是aspen中的标准推动力表达式了，可以得出相关数据了：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210819105942.png"></p><p>需要注意的是反应相态和反应速率基准，要以自己的反应为准，注意k的数量级和单位，注意活化能的单位转化，单位用什么不重要，数据要对</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210819110113.png"></p><p>继续推导推动力表达式，aspen中的项1就是正反应，项2就是逆反应</p><p>输入正反应相关参数：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210819110215.png"></p><p>注意速率基准</p><p>继续推导逆反应：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210819110302.png"></p><p>输入项2的数据：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210819110335.png"></p><p>本动力学方程没有吸附项，所以吸附项忽略不填</p><p>这个时候很多同学就疑惑了，推动力常数的系数中ABCD是怎么得到的</p><p>在上一步推导推动力系数的时候会得到一个式子，比如项2的式子如下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210819110529.png"></p><p>推动力系数的标准表达式：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210819110808.png"></p><p>现在知道ABCD怎么确定了吧</p><p>这是丙烯水合异丙醇的动力学推导过程，下面再来一个例子，是一段脱氢动力学，其实推导过程大同小异</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210819111125.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210819111147.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210819111210.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210819111222.png"></p><p>丙烯水合的动力学没有吸附项，这个反应有，所以要注意了哦</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210819111313.png"></p><p>在Aspen中的输入：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210819112821.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210819112838.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210819112853.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210819112911.png"></p><h2 id="POWERLAW"><a href="#POWERLAW" class="headerlink" title="POWERLAW"></a>POWERLAW</h2><p>正戊烷异构化反应动力学</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210819114231.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210819114251.png"></p><p>在Aspen中输入如下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210819114327.png" alt="正反应"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210819114347.png" alt="逆反应"></p><h2 id="LHHW方程中平衡常数与速率基准的关系"><a href="#LHHW方程中平衡常数与速率基准的关系" class="headerlink" title="LHHW方程中平衡常数与速率基准的关系"></a>LHHW方程中平衡常数与速率基准的关系</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210819114723.jpg"></p><p>水平有限，仅供参考，复杂的动力学需自己推导和拟合</p><p>我是乙醇，下次见，拜拜~</p>]]></content>
      
      
      <categories>
          
          <category> 化工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Aspen </tag>
            
            <tag> 反应动力学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Aspen流程模拟中的循环问题</title>
      <link href="/posts/a0347c02/"/>
      <url>/posts/a0347c02/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210818091313.png"></p><blockquote><p>免责声明：</p><p>本文中的内容很多都很有争议，所以全文仅代表作者乙醇个人观点及经验，不喜勿喷，也欢迎大佬的批评指正</p></blockquote><h2 id="什么是循环？为什么要循环？"><a href="#什么是循环？为什么要循环？" class="headerlink" title="什么是循环？为什么要循环？"></a>什么是循环？为什么要循环？</h2><p>在aspen流程模拟中，经常会碰到需要物料循环的情况，那么什么是循环，我们为什么要用循环呢？</p><p>循环顾名思义，就是将一部分物料，不管是未反应的原料也好，需要回收的萃取剂也好，热泵精馏的再沸蒸汽也好，循环回上一级的模块进行重新利用，在上一级的模块进行计算之后，随着有新物料的补充，循环的物料基本上属于守恒状态，让在循环内的模块达到一个稳态平衡，从而达到我们的目标。</p><p>至于为什么要使用循环，用丙烯气相水合制备异丙醇来说，单程转化率只有非常低的5-6%，如果不把未反应的原料循环回去再利用，那么原料的浪费将是非常非常大的，而且对后续的分离精制也会造成困扰，这就是循环的目的之一：寻求最优的转化率。在萃取精馏中，往往萃取剂的用量是非常大的，如果不对萃取剂进行回收循环利用，那哪个厂子能顶得住这么烧钱</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇文档我会分享自己在竞赛中打循环的经验和一些小技巧，当然我本人比较菜，很多东西也都是一知半解，甚至采取一些投机取巧的办法，可能并不是那么正确，所以本文只是做一个记录和分享，如果不符合您的观点和认知，出门左转就行，当然也欢迎您在评论区指出我的错误，但是请文明讨论</p><blockquote><p>为了不被喷，我是真的心累</p></blockquote><h2 id="未反应的物料循环"><a href="#未反应的物料循环" class="headerlink" title="未反应的物料循环"></a>未反应的物料循环</h2><p>本部分以丙烯气相水合制备异丙醇工艺为例</p><p>首先是工艺流程搭建，这就不多说了，从界外原料到反应器产物流股：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210818094712.png"></p><p>丙烯进料300kmol&#x2F;h，丙烯体积分数99.6%，水进料195kmol&#x2F;h，水丙烯摩尔比为0.65，反应温度200℃，压力20bar≈2MPa</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210818095313.png"></p><p>可以看到，以丙烯表示的转化率为：(298.886-282.917)&#x2F;298.886&#x3D;5.34%</p><p>这个时候就必须要把丙烯循环回去，不然超大量的丙烯就会被浪费掉，转化率也太不经济了</p><p>那么，要把丙烯循环回去，首先就要把丙烯分离出来，而且要达到要求的纯度，比如丙烯气相直接水合的反应丙烯进料纯度要求在99.5%体积分数以上</p><p>所以首先肯定是要做丙烯分离，这里就不多赘述了，但是这个分离并不是把丙烯分离出去，达到纯度就完事了，最最重要的是分离序列一定一定要稳定，那么什么是稳定的分离呢？</p><p>这里就要说到两个意思，什么是临界参数什么是稳定参数</p><p>临界参数就是如果你使用灵敏度分析，把这个塔或者闪蒸罐的参数调的非常优，分离效果非常好，稍微再好一点点这个模块就会报错，这种时候，你的分离设备的参数就处于临界参数状态，如果这个时候把你的这个分离设备带入循环之内，基本上大概率是要出大问题，你就会发现无论你怎么调循环，这个循环就是会报错、不收敛等，这就是因为你的分离设备处于临界状态，每一次循环计算的时候，都不可能是完全准确无误的，都是会有误差的，特别是当你的循环物流具有杂质的时候，每次循环计算的误差都会导致你这个分离设备的分离效果偏离，根本达不到你的分离效果，分离效果达不到，循环回去的物流就越容易出现误差，这就成了一个恶行循环了，所以才会导致循环根本就不收敛，疯狂报错</p><p>什么是稳定参数呢，就是当你这个分离设备确定好分离效果之后，他的某些参数还具有余量，可以上下调整，这个时候当你去改变进料条件，它的分离效果并不会收到多大影响，它自己就会把这个幅度不大的扰动归到容差里，就很容易收敛</p><p>分离做好之后就开始做循环吧：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210818105319.png"></p><p>17就是循环流股，其中丙烯质量分数98.88%，温度27℃，压力1bar</p><p>需要注意的是，循环之后的总转化率和你循环丙烯的纯度并没有直接关系，反而和你循环量的多少有关系，如图所示：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210818105535.png"></p><p>16流股就是循环外流股，也就是去往下一工段的，其中含有36.19kmol&#x2F;h的丙烯，而进料量有300kmol&#x2F;h，所以这个损失是相当大的，最后总转化率可能比较低，所以如果想要提高总转化率，就得在未反应物的分离上下功夫，我这里只做循环的演示，所以这个小细节先忽略</p><p>17循环流股要接到压缩机上，这个时候就需要我们的计算器模块了</p><h2 id="计算器模块"><a href="#计算器模块" class="headerlink" title="计算器模块"></a>计算器模块</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210818110031.png"></p><p>这两个都是计算器模块，创建一个计算器进入设置参数</p><p>在设置变量之前，我们要明白循环需要计算什么，什么守恒，哪个是自变量，哪个是因变量</p><p>首先一定要明白的是，丙烯和水的进料一定是按照水烯比来进料的，水的进料是固定的，那么丙烯的进料也就是固定的</p><p>丙烯的进料都固定了，在本例中，也就是298.886kmol&#x2F;h是固定的，当这个进料量固定的时候，反应器的转化率也就是固定的，那么反应器出来的产物中未反应的丙烯就是固定的，那么分离之后的需要循环的丙烯也就是稳定的，这就是稳态，如果分离设备的参数是出于稳定参数状态的话，那么我们是不是只需要把循环回去的丙烯接入到压缩机上，然后用298.886减去循环丙烯的量，这个差值就是需要补充的新鲜气，把新鲜气的值赋给01进料，那么这个循环肯定就已经没问题了，因为其他的参数都已经固定了</p><p>但是实际上我们在计算的过程中并没有这么顺利，很多数据都不可能是绝对的，都是微微变动的，这个时候总不能我们每一次都自己去算一下差值，然后手动输入吧，所以就需要计算器模块帮我们计算，并自动输出计算结果</p><p>那么什么是导入变量，什么是导出变量呢？顾名思义导入变量就是要输入进计算器进行计算的自变量，导出变量就是计算结果输出的变量，那么在本例中，循环丙烯的量就是导入变量，新鲜气的量就是计算之后要输出的量</p><p>进行变量设置：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210818111539.png"></p><p>计算式输入：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210818111638.png"></p><p>意思就是：新鲜气的摩尔流量&#x3D;298.886-循环气的摩尔流量</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210818111755.png"></p><p>计算序列就是变量的计算、读取、输入的顺序，默认即可</p><p>计算器模块就设置完毕了，那么就可以把17流股接入到压缩机上进行计算了：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210818111919.png"></p><p>C-1就是计算器模块，重置之后，运行模拟</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210818112049.png"></p><p>结果可以查询，但是控制面板有错误和警告</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210818112520.png"></p><p>反应器的报错是焓值的误差，还有两个模块的警告是进料为0，这都不是严重的错误，不然就不会结果可查询了，只需要将报错的相关模块前的流股右键，调和即可</p><p>调和之后重置运行，无报错无警告</p><p>那么看一下计算器的结果吧：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210818112739.png"></p><p>可以看到01流股的值被改写成了51.78，也就是新鲜的补充气需要这么多</p><p>再来看看总转化率吧：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210818112911.png"></p><p>01就是新鲜气进料流股，16就是循环外流股，进入下一工段的流股</p><p>总转化率：(51.78-36.23)&#x2F;51.78&#x3D;30.08%，太低了，主要是因为丙烯分离的那里没做好，导致流失的丙烯太多了，这个先不说，主要看循环的效果</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210818113219.png"></p><p>进反应器前的流股，可以看到循环成功，物料并没有累加，丙烯和水的比值也正确，总进料量守恒</p><p>至于总转化率问题，这是我竞赛的时候做的流程：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210818113350.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210818113417.png"></p><p>总转化率：(128.396-1.5889)&#x2F;128.396&#x3D;98.76%，相比之前的单程转化率只有5.34%好的太多了</p><p>但是实质上反应器的转化率改变了吗？并没有，如果你不看循环，只看反应器前后的原料变化来说，它的转化率还是只有5.3%，循环只是通过未反应的原料循环回去，让新鲜进料量减少，从而达到相对于新鲜进料量而言的总转化率，而循环气的作用只是为了在反应器中保持反应物远远过量的作用</p><h2 id="原料带有杂质的循环"><a href="#原料带有杂质的循环" class="headerlink" title="原料带有杂质的循环"></a>原料带有杂质的循环</h2><p>对于丙烯水合异丙醇的工艺，丙烯的纯度肯定不可能百分百，所以肯定带有一定的杂质，就是丙烷，或者其他的，那么当杂质量不少时，即使使用计算器模块，也会发生循环不收敛的情况，那么这个时候怎么办呢，其实我也不会，但是在实际工业中，循环中杂质积累的办法估计是停车排出吧，当然最好的办法肯定是在循环的时候能把杂质一并分离最好了</p><p>那么在模拟中怎么解决因为杂质而导致的循环不收敛问题呢？我这里有个投机取巧的办法，让杂质进料守恒，什么意思呢，和上面的丙烯进料298.88守恒一样，在初始进料的时候，杂质肯定有一个总量，那么用计算器模块就规定好它的杂质进料量，不让它在循环中积累，设置方法和丙烯循环一模一样，就不赘述了，说一下效果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210818114459.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210818114637.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210818114744.png"></p><p>让丙烷的进料量始终稳定在初始进料的9.6kmol&#x2F;h上即可</p><p>这样就解决了杂质积累的情况</p><p>理论上来说，只要模块的参数都在稳定参数状态下，使用计算器模块完全可以解决所有的循环问题，而且还不会产生物料累加的情况</p><p>但是有些地方使用计算器会很麻烦，比如热泵精馏中的再沸蒸汽循环、回流循环等，这些使用计算器的话，组分复杂就不说，一旦塔的参数调整，或者进料改变，就得去修正计算器的参数，很麻烦，这个时候就可以用到赋初值的办法了</p><h2 id="赋初值"><a href="#赋初值" class="headerlink" title="赋初值"></a>赋初值</h2><p>简单来说，赋初值就是计算器的手动模式，在没有连接循环的时候先得出循环物料的量，然后把这个量赋值给循环流股，用热泵做个例子吧：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210818120401.png"></p><p>0309就是塔底的流股，0312就是回流的再沸蒸汽，构成了一个小循环，在再沸器没有被拆出来之前，也就是它的最后一块板的流量</p><p>那么在没有拆这个塔之前，我们就已经有了再沸蒸汽的流量，也就是0312的流量，组成等，这个也可以在塔结果的分布组成中看到：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210818120748.png"></p><p>那么就可以直接把这个数据赋值给0312流股，让但是这个时候并没有接循环，如图所示：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210818120954.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210818132818.png"></p><p>把塔盘的结果手动输入到这个流股中，这就是赋初值</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>打循环最主要的方法还是使用计算器模块，在使用计算器模块的基础上，加上赋初值，会更加稳定</p><p>但是很多同学用了计算器，也试过赋初值，还会有警告或者报错，那么就要适当的使用调和工具，一般来说这三件套走下来，一个循环肯定是没问题的</p><p>还是不行的话，大概率是模块参数的问题，建议调整调整参数，检查流程</p><p>我是乙醇，下次见~~</p>]]></content>
      
      
      <categories>
          
          <category> 化工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Aspen </tag>
            
            <tag> 循环 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win11使用WSL2安装KaliLinux并安装图形界面</title>
      <link href="/posts/65135c46/"/>
      <url>/posts/65135c46/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210817155740.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今日闲来无事，想复习一下WebSec，然后前段时间刚装了Win11嘛，电脑空空荡荡，还没装虚拟机，就寻思去kali官网下载一波镜像，结果突然发现kali已经支持在WSL2下安装，并可以运行图形界面！</p><p>这太酷了，顶部是kali的任务栏，下面是Win，哦天哪，这太美妙了</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><blockquote><p>Windows版本必须在10&#x2F;2004以上才可以，包括Win11，我就是在Win11下安装的</p></blockquote><p>首先肯定要开启WSL子功能才能安装WSL才行：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210817160333.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210817160517.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210817160526.png"></p><p>然后重启电脑</p><p>管理员打开power shell</p><p>安装WSL-kali：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux</span><br></pre></td></tr></table></figure><p>安装完毕之后重启电脑</p><p>管理员打开power shell，设置镜像服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</span><br><span class="line">dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</span><br></pre></td></tr></table></figure><p>重启电脑</p><p>打开这个链接下载WSL内核：<a href="https://aka.ms/wsl2kernel">https://aka.ms/wsl2kernel</a></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210817160944.png"></p><p>下载好之后安装</p><p>安装完毕之后管理员打开power shell，将WSL2设置为默认版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --set-default-version 2</span><br></pre></td></tr></table></figure><p>然后打开微软商店，搜索kali，安装kaliLinux for Windows：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210817161231.png"></p><p>如果你之前使用WSL1安装过这个，执行下面的命令设置为WSL2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --set-version kali-linux 2</span><br></pre></td></tr></table></figure><p>安装完成之后打开kali，等待附属模块安装完成之后设置用户名和密码</p><p>设置好之后就可以进入下一步了</p><p>在kali中执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line"></span><br><span class="line">sudo apt install -y kali-win-kex</span><br></pre></td></tr></table></figure><p>安装过程可能比较慢，与网速和镜像站有关系，耐心等待</p><p>安装完成之后就可以使用图形界面了</p><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kex --win -s</span><br></pre></td></tr></table></figure><p>会让你设置一个密码，随意设置一个自己能记住的就可以了</p><p>然后就可以进入kali的图形界面了！！！</p><p>此时是全屏的，不用担心，按下F8（默认的）即可退出，使用窗口模式等</p><p>如果要开启声音驱动或者适配ARM，可以进入增强会话模式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kex --esm --ip -s</span><br></pre></td></tr></table></figure><p>官方还提供了一个无缝模式，但不知道是干嘛的，可以自己探索一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kex --sl -s</span><br></pre></td></tr></table></figure><p>更多的kex命令使用方法参考：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">man kex</span><br><span class="line">kex --help</span><br></pre></td></tr></table></figure><p>更多详细信息请参考官方文档：<a href="https://www.kali.org/docs/wsl/win-kex/">https://www.kali.org/docs/wsl/win-kex/</a></p><h2 id="可选功能"><a href="#可选功能" class="headerlink" title="可选功能"></a>可选功能</h2><p>可以注意到此时图形界面下的kali并没有自带的丰富的工具库，如果需要这些，就要安装kali完全版，在确保自己内存充足的情况下，执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y kali-linux-large</span><br></pre></td></tr></table></figure><p>会是一个很漫长的过程，耐心等待</p><p>官方还提供了在WindowsTerminal中选项卡的集成配置，配置文件见官方文档~</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">      &quot;guid&quot;: &quot;&#123;55ca431a-3a87-5fb3-83cd-11ececc031d2&#125;&quot;,</span><br><span class="line">      &quot;hidden&quot;: false,</span><br><span class="line">      &quot;name&quot;: &quot;Win-KeX&quot;,</span><br><span class="line">      &quot;commandline&quot;: &quot;wsl -d kali-linux kex --wtstart -s&quot;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>至于怎么配置WindowsTerminal，参考本博客的文章：<a href="https://imbhj.com/e00f009c/">《WindowsTerminal调教》</a></p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows11 </tag>
            
            <tag> WSL </tag>
            
            <tag> Linux </tag>
            
            <tag> Kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>典型设备的自控方案</title>
      <link href="/posts/1e06e98d/"/>
      <url>/posts/1e06e98d/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210816092429.png"></p><blockquote><p><strong>注意！</strong>免责声明</p><p><strong>注意！</strong>重要的事情要提醒三遍</p><p><strong>注意！</strong>我水平有限，本文只做示例和参考，不保证本文的内容就一定是正确的标准的</p></blockquote><h2 id="什么是PID什么又是P-ID？"><a href="#什么是PID什么又是P-ID？" class="headerlink" title="什么是PID什么又是P&amp;ID？"></a>什么是PID什么又是P&amp;ID？</h2><p>在实际工程中，应用最为广泛的调节器控制规律为比例P、积分I、微分控制D，简称PID控制，又称PID调节。PID控制器问世至今以其结构简单、稳定性好、工作可靠、调整方便而成为工业控制的主要技术之一</p><p>人话来说就是PID是一种控制器的逻辑，当然PID还有更多的含义，在不同的行业里有不同的意思，在计算机中PID是一种进程号，不需要了解过多，当然要是对自动化感兴趣的同学可以去学习相关知识</p><p>P&amp;ID（Piping and Instrumentation Diagram）即管道及仪表流程图、管道仪表流程图。借助统一规定的图形符号和文字代号，用图示的方法把建立化工工艺装置所需的全部设备、仪表、管道、阀门及主要管件，按其各自功能以及工艺要求组合起来，以起到描述工艺装置的结构和功能的作用。P&amp;ID的设计是在PFD的基础上完成的。它是化工厂的工程设计中从工艺流程到工程施工设计的重要工序，是工厂安装设计的依据</p><p>P&amp;ID图纸的绘制非常重要，控制方案的合不合理，控制器是否冗余，图例是不是正确等，都会成为扣分点，阀门的数量位置更是关系到后续三维配管的同学的工作</p><p>至于一些工业自动化的内容、自动控制系统的组成、分类、数学模型等理论知识本文不过多赘述，有兴趣自己学习，本文只示意一些典型设备的自动控制方案</p><blockquote><p>注意，本文所示的控制方案只是设备的自动控制方案，不包括阀门组，所以绘制P&amp;ID的时候一定要注意自己要加上阀门组、盲板等</p></blockquote><h2 id="传热设备的控制"><a href="#传热设备的控制" class="headerlink" title="传热设备的控制"></a>传热设备的控制</h2><h3 id="换热器控制"><a href="#换热器控制" class="headerlink" title="换热器控制"></a>换热器控制</h3><p>蒸汽加热器（公用工程换热器）的控制系统：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210816104019.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210816105752.png"></p><p>调节载热流体流量（流股间换热&#x2F;导热油）方案：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210816110623.png"></p><p>调节传热平均温差方案：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210816111436.png"></p><blockquote><p>画图实在是太磨人了，而且这绘图软件不怎么好用，下面开始直接给你们扫描吧</p></blockquote><p>调节传热面积的方案：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210816120237.jpg"></p><p>将工艺介质部分旁路方案：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210816120845.jpg"></p><p>换热器出口温度的串级控制方案：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210816121210.jpg"></p><p>换热器出口温度的变比值串级控制方案：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210816121255.jpg"></p><h3 id="加热炉控制"><a href="#加热炉控制" class="headerlink" title="加热炉控制"></a>加热炉控制</h3><p>加热炉控制系统：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210816121702.jpg"></p><p>燃料油与雾化蒸汽压差控制系统：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210816121756.jpg"></p><p>燃料油与雾化蒸汽压力比值控制系统：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210816122029.jpg"></p><p>炉出口温度对炉膛温度的串级控制：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210816153101.jpg"></p><p>炉出口温度对燃料油的串级控制：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210816153250.jpg"></p><p>炉出口温度对炉膛温度及燃料油流量的串级控制：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210816153354.jpg"></p><p>炉出口温度对燃料油压力的串级控制：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210816153522.jpg"></p><p>在加热炉的自动控制中，有时候会遇到生产负荷即进料量、温度变化频繁，扰动幅度又较大，采用串级控制难以满足生产要求，所以采用前馈-反馈控制：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210816153854.jpg"></p><p>加热炉的安全连锁保护系统：</p><blockquote><p>安全连锁的工作过程和原理就不赘述了，可以自己查阅相关资料</p></blockquote><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210816154246.jpg"></p><h2 id="精馏过程的控制"><a href="#精馏过程的控制" class="headerlink" title="精馏过程的控制"></a>精馏过程的控制</h2><p>精馏就是将一定浓度的溶液送入精馏装置，使其反复的进行部分汽化和部分冷凝，从而得到预期的塔顶与塔底产品的操作。完成这一操作的过程相应设备除了精馏塔之外，还有再沸器、冷凝器、回流罐、回流泵等辅助设备，目前通用的连续精馏装置如图所示：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210816155448.jpg"></p><p>精馏塔的控制目标，应该是在满足产品质量合格的前提下，使总的收益最大或者总的成本最小，因此精馏塔的控制要求，应该是从质量指标（产品纯度）、产品质量和能量消耗三个方面考虑。</p><p>精馏塔的操作原理、静态动态特性本文不赘述，请参考《化工原理》</p><h3 id="双温差控制系统"><a href="#双温差控制系统" class="headerlink" title="双温差控制系统"></a>双温差控制系统</h3><p>在进行精密精馏时，产品纯度要求很高，而且塔顶、塔底产品的沸点差距又不大时，可以采用温差控制</p><p>如图所示，设T11、T12分别为精馏段参照板和灵敏板的温度，T21、T22分别为提馏段灵敏板和参照板的温度，构成精馏段温差<code>∆T1=T12-T11</code> 与提馏段温差<code>∆T2=T22-T21</code> ，这两个温差的差值<code>∆Td=∆T1-∆T2</code> 作为控制指标，从实际应用来说，只要合理选择灵敏板和参照板位置，可使塔两端达到最大分离度：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210816160700.jpg"></p><h3 id="精馏塔的控制变量分析"><a href="#精馏塔的控制变量分析" class="headerlink" title="精馏塔的控制变量分析"></a>精馏塔的控制变量分析</h3><p>精馏塔的变量如下图所示：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210816161145.jpg"></p><p>总共6个输入变量，5个输出变量：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210816161235.jpg"></p><p>由于精馏塔具有压力、物料平衡、能量平衡等控制分类，又有提馏段和精馏段之分，所以控制方案较为复杂且繁多，下面只示意出每种控制的其中之一方案，更多方案请参阅本文最后的参考文献</p><h3 id="精馏塔压力控制"><a href="#精馏塔压力控制" class="headerlink" title="精馏塔压力控制"></a>精馏塔压力控制</h3><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210816161702.jpg"></p><h3 id="物料平衡控制方案之一"><a href="#物料平衡控制方案之一" class="headerlink" title="物料平衡控制方案之一"></a>物料平衡控制方案之一</h3><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210816161821.jpg"></p><h3 id="克服回流罐滞后的控制方案"><a href="#克服回流罐滞后的控制方案" class="headerlink" title="克服回流罐滞后的控制方案"></a>克服回流罐滞后的控制方案</h3><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210816162133.jpg"></p><h3 id="两端产品质量控制方案之一"><a href="#两端产品质量控制方案之一" class="headerlink" title="两端产品质量控制方案之一"></a>两端产品质量控制方案之一</h3><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210816162234.jpg"></p><h2 id="流体输送设备的控制"><a href="#流体输送设备的控制" class="headerlink" title="流体输送设备的控制"></a>流体输送设备的控制</h2><h3 id="泵的控制"><a href="#泵的控制" class="headerlink" title="泵的控制"></a>泵的控制</h3><p>泵的特性曲线、管路特性等基础知识，参考《化工原理》</p><p>直接节流以控制流量：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210816162558.jpg"></p><p>采用旁路以控制流量：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210816162718.jpg"></p><p>往复泵出口压力和流量控制：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210816162835.jpg"></p><h3 id="压缩机的控制"><a href="#压缩机的控制" class="headerlink" title="压缩机的控制"></a>压缩机的控制</h3><p>什么是喘振、为什么压缩机会发生喘振、防喘振回流控制的工作过程和原理是什么？</p><p>离心式压缩机：当负荷降低到一定程度的时候，气体的排放会出现强烈的震荡，因而机身出现剧烈的震动，这种现象叫做喘振。只要保证压缩机吸入流量大于喘振点临界吸入流量，即可不会发生喘振。</p><p>为了使进入压缩机的气体流量保持在临界点以上，在生产负荷下降时，必须将部分出口气体从出口旁路返回到入口或将部分出口气体防空，保证系统工作在稳定区域。</p><p>目前工业常用的有以下两种防喘振控制方案：</p><p>固定极限流量控制系统：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210816163756.jpg"></p><p>可变极限流量控制系统：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210816163845.jpg"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210816163857.jpg"></p><h2 id="反应器的控制"><a href="#反应器的控制" class="headerlink" title="反应器的控制"></a>反应器的控制</h2><h3 id="釜式反应器控制"><a href="#釜式反应器控制" class="headerlink" title="釜式反应器控制"></a>釜式反应器控制</h3><p>控制进料温度方案：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210816165010.jpg"></p><p>改变传热量控制方案：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210816165035.jpg"></p><p>反应器串级控制方案之一：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210816165126.jpg"></p><h3 id="固定床反应器控制"><a href="#固定床反应器控制" class="headerlink" title="固定床反应器控制"></a>固定床反应器控制</h3><p>改变进料浓度控制方案：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210816165223.jpg"></p><p>改变旁路流量控制方案之一：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210816165251.jpg"></p><p>改变段间进入的冷气量控制方案之一：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210816165320.jpg"></p><h3 id="流化床反应器控制方案"><a href="#流化床反应器控制方案" class="headerlink" title="流化床反应器控制方案"></a>流化床反应器控制方案</h3><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210816165343.jpg"></p><h3 id="鼓泡反应器的控制"><a href="#鼓泡反应器的控制" class="headerlink" title="鼓泡反应器的控制"></a>鼓泡反应器的控制</h3><p>反应物流量稳定控制方案：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210816165407.jpg"></p><p>液位控制：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210816165427.jpg"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这些控制方案并不完美，甚至也会有错误，但是可以做一个参考，在做P&amp;ID自控方案设计的时候一定要多思考，不要盲目的照搬别人的控制方案，要多想想为什么要这样控制，为什么要用这个阀门组</p><p>在同一条管线上，就不要去多次控制，比如在第一个设备的出口控制了流量，但是在下一个设备的进口，又控制了进口流量，这不是白控制了吗，这就是控制的冗余</p><p>在同一个压力系统下，设置多个安全阀，也是冗余，比如在塔顶设置了塔压安全阀，但是又在塔顶回流罐上设置了安全阀，塔顶压力和回流罐属于同一个压力系统呀，如果塔顶的安全阀都跳了，那么回流罐的必然会跳，如果塔顶的都不跳，回流罐的安全阀这辈子都不会跳</p><p>总而言之，希望同学们一定一定要自己去思考，自己在同一个系统里、同一个管线上是不是设置了多余的控制、为什么要设置这样的</p><p>还有反应器的SIS安全仪表系统，不要盲目的去看人家有自己就要画上，要看你的反应体系需不需要，SIS控制逻辑是否正确，下面是之前设计院老师修改过我们的SIS系统，给你们个参考：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210816170127.png"></p><p>至于SIS的逻辑，很简单，百度一下你就知道~</p><p>我是乙醇，今天的自控就分享到这里啦，下次见~~</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1]张根宝. 工业自动化仪表与过程控制[M]. 西北工业大学出版社, 2003.</p>]]></content>
      
      
      <categories>
          
          <category> 化工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> P&amp;ID </tag>
            
            <tag> 自动控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AspenAEA设计换热方案小技巧</title>
      <link href="/posts/4d163749/"/>
      <url>/posts/4d163749/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210815154421.png"></p><h2 id="什么是换热网络？"><a href="#什么是换热网络？" class="headerlink" title="什么是换热网络？"></a>什么是换热网络？</h2><p>换热是化工生产不可缺少的单元操作过程。对于一个含有换热物流的工艺流程，将其中的换热物流提取出来，组成了换热网络系统，其中被加热的物流称为冷物流，被冷却的物流称为热物流。</p><p>换热的目的不仅是为了使物流温度满足工艺要求，而且也是为了回收过程余热，减少公用工程消耗。基于这种思想进行的换热网络设计称为换热网络合成。换热网络合成的任务， 是确定换热物流的合理匹配方式，从而以最小的消耗代价，获得最大的能量利用效益 。</p><p>换热网络的消耗代价来自三个方面： 换热单元（设备）数、传热面积、公用工程消耗 。换热网络合成追求的目标，是使这三方面的消耗都为最小值。实际进行换热网络设计时，需要在某方面做出牺牲，以获得一个折中，也就是“最优化”的方案。这又涉及到最优化的问题了，就不扯那么远了，有兴趣的同学去看看《化工过程分析与合成》</p><h2 id="如何进行换热网络合成？"><a href="#如何进行换热网络合成？" class="headerlink" title="如何进行换热网络合成？"></a>如何进行换热网络合成？</h2><p>在进行化工设计中，换热网络设计是必不可少的一部分，同时也是占分比较大的一部分，换热网络一般来说都是使用夹点技术进行分析。换热网络设计的目的就是节能能量与费用，要达到两个目标：一是换热设备数最少，二是公用工程消耗量最少。</p><blockquote><p>一些理论知识这里就不多说了，自己可以去了解和学习</p></blockquote><p>夹点的意义就是换热网络中的一个能量限制点，夹点之上需要从外部获取热量，而不向外部提供任何热量，即需要加热器；夹点之下可以向外部提供热量，而不需要从外部获取热量，即需要冷却器。</p><h2 id="流股数据导入AEA"><a href="#流股数据导入AEA" class="headerlink" title="流股数据导入AEA"></a>流股数据导入AEA</h2><p>要进行换热网络合成，就先要把全流程模拟中的换热流股提取出来，导入到AEA中</p><blockquote><p>这里的前提是全流程已经可以稳定跑通，包含公用工程的设置，已经完成了塔参数优化，这个时候的换热网络就是改造前的方案，务必要保留，因为最后要做一个对比</p></blockquote><p>在全流程正确运行之后，打开能量分析按钮，分析完毕之后进入能量分析界面：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210815162431.png"></p><p>保证框选的地方全部为正确无错误，然后点上方的详细按钮</p><blockquote><p>如果有警告或者错误，检查公用工程的设置是否正确，换热器设置是否正确</p></blockquote><p>点击详细按钮之后点击是，会自动打开AEA软件并导入所有的流股信息，如图所示：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210815163336.png"></p><p>中间这花花绿绿的线就是所有的换热流股换热方案，蓝色的小球为冷却器，红色的小球为加热器，如果有黄色的小球，那就是不可用换热器，就说明这个换热器有问题，需要修改</p><p>左边的就是换热方案管理器，下面的是一些换热方案的数据和操作按钮</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210815164131.png"></p><p>这就是我们导入到AEA的初始方案，可以看到他的图标是无色的，上面那个自定义方案的图标是黄色的，无色代表方案可用，黄色代表方案不可用</p><p>如果我们遇到刚导入到AEA的方案就是黄色的，那么说明你的公用工程有些地方设置的不正确，可以尝试去修改一下然后重新导入</p><blockquote><p>这里要注意一下，每次Aspen进行能量分析的时候，会在源文件的文件夹里生成一大堆乱七八糟的缓存文件，如果要重置运行，建议全部删掉缓存，只留一个bkp文件，保证缓存不会影响后续的计算结果</p></blockquote><h2 id="分析组合曲线"><a href="#分析组合曲线" class="headerlink" title="分析组合曲线"></a>分析组合曲线</h2><p>那么什么是组合曲线呢？冷物流或热物流的热量与温差的关系可以用温焓图上的一条曲线表示，称之组合曲线</p><p>温焓图上的焓值是相对的。基准点可以任何选取。对于热物流，取所有热物流中最低温度 T 设在 T 时的 H&#x3D;H(H0) 以此作为焓基准点。从 T 开始向高温区移动，计算每一个温区的积累焓，用积累焓对 T 作图，得到热物流的组合曲线。对于冷物流，取所有冷物流中最低温度 T 设在 T 时的 H&#x3D;H(C0)， H(C0)&gt;H(H0) 以此作为焓基准点。从 T 开始向高温区移动，计算每一个温区的积累焓，用积累焓对 T 作图，得到冷物流的组合曲线。这些都是理论，当然不需要你去自己作图，AEA会给你画好</p><p>由于温焓图上的 H 值为相对值，因此曲线可以沿 H 轴平移而不会改变换热量。基于这一特点，可以用 温焓图来描述夹点。将冷物流的组合曲线沿 H 轴向左平移，这时两条曲线之间的垂直距离随曲线的移动而逐渐减小，也就是说传热温差 △T 逐渐减小，当两条曲线的垂直最小距离等于最小允许传热温差 △Tmin 时 就达到了实际可行的极限位置 。这个极限位置的几何意义就是冷 、 热物流组合曲线间垂直距离最小的位置，这个最窄的位置就是夹点</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210815165608.png"></p><p>点击方案文件夹，就会跳转到组合曲线上</p><p>两条曲线端点的水平差值分别代表最小冷、热公用工程，以及最大热回收量（即最大换热量）。</p><p>图中冷热曲线最接近的这个位置的物理意义表示为一个热力学限制点。这一点限制了冷、热物流进一步作热交换，使冷、热公用工程都达到了最小值，即就是夹点，这时物流间的匹配满足能量利用最优的要求</p><p>组合曲线中可以看到有一些平台区，就是曲线为横直线的部分，节能就主要是尽可能消除平台区或者减小平台区</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210815170240.png"></p><p>鼠标放到曲线的相对应位置上，会显示出这是哪个流股，然后就可以去做节能措施了</p><p>节能措施包括热泵精馏（最常用，几乎必用）、双效精馏、内部热耦合、隔壁塔等</p><h2 id="换热网络推荐"><a href="#换热网络推荐" class="headerlink" title="换热网络推荐"></a>换热网络推荐</h2><p>节能措施做完之后，就可以进行换热方案推荐与改造了，即就是流股间换热</p><p>打开做完节能措施的全流程模拟，流股数据导入AEA，查看组合曲线，看看前后的变化，并保留对比，写文档和制作PPT可能要用到</p><p>接下来分析最小传热温差，使用的是总费用与最小传热温差曲线，目的是让总设备和公用工程的费用最小</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210815170850.png"></p><p>在组合曲线界面点击这个进入费用曲线</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210815171153.png"></p><p>点击这个开始计算</p><p>计算之后如果发现曲线过于“挤”，看不清最小温度，可以通过如下设置更改横坐标：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210815171327.png"></p><p>第一行为最低温度，必须大于零，第二行为最高温度，第三行为每个点的温度区间，根据自己的曲线去设置</p><blockquote><p>图中我第一二行设置反了，所以软件无法运行</p></blockquote><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210815172407.png"></p><p>更改坐标之后，曲线就很清晰了，可以看到费用最小时，最合适的温度区间为14摄氏度，那么就要去设置一下，就在界面的左下角：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210815172520.png"></p><p>一般来说默认是10度，而且根据经验值，这个温度区间不能低于8度，所以取值不对的同学们要注意哦</p><p>那么夹点温度在哪看呢，在总组合曲线中：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210815172731.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210815172805.png"></p><p>夹点温度就是总组合曲线中与纵坐标相交的点，也就是能量限制为0的点</p><p>如果你的夹点不止一个，或者夹点温度很离谱，那么就要注意了，要进行修改公用工程和流程</p><p>接下来就是推荐换热方案了</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210815173025.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210815173050.png"></p><p>左边一栏中就是参与换热网络合成的冷热流股，旁边的数字是每一个流股匹配的分支数，一般来说越少越好，推荐都改成1，右上角的数字是推荐的方案数，默认即可，设置完成之后点击Solve进行运算</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210815173747.png"></p><p>可以看到，推荐出来的方案图标都是黄色的，不可用状态，那么接下来就到本文的重点了，怎么改造推荐方案让他可用</p><h2 id="改造不可用方案"><a href="#改造不可用方案" class="headerlink" title="改造不可用方案"></a>改造不可用方案</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210815174206.png"></p><p>右键一个不可用的方案，进入改造模式</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210815174345.png"></p><p>可以发现此时方案已经变为可用，同时有一个提示的弹窗，不用管它，关掉即可</p><p>如果后续确实需要自己去手动调整某个方案，那么直接点击这个弹窗里的Enter就可以进入改造模式了</p><p>同理，将所有的不可用方案改成可用，在这个改造过程中，很多数据会发生变化，所以在对比推荐方案之前要把需要对比的方案都进行改造之后才可以</p><blockquote><p>需要注意的是，这个方法属于奇技淫巧，它的正确性和合理性有待考究，所以如果通过修改流程和公用工程无法使方案可用，实在没有办法了，可以考虑使用本方法</p></blockquote><p>那么改造前后发生了什么变化呢首先是公用工程数据：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210815174805.png" alt="前"> <img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210815174838.png" alt="后"></p><p>还有就是换热器的换热面积（黄色不可用状态的）：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210815175042.png" alt="前"> <img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210815175116.png" alt="后"></p><h2 id="loop回路问题"><a href="#loop回路问题" class="headerlink" title="loop回路问题"></a>loop回路问题</h2><p>在换热网络设计中，往往在自动推荐的方案中有loop回路，这个必须要消除，不然可能会扣分，而且答辩的时候老师也可能会问道</p><p>那么什么是loop回路呢，就是在两个流股间不止有一台换热器进行换热，也就是换热器冗余了，需要消除，两条流股间进行多次换热，虽然能量利用率高，但是设备和操作费用更高，一般在实际工业中需要消除loop回路</p><p>查看换热方案有没有loop回路很简单，直接在换热网络界面鼠标右键：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210815180945.png"></p><p>就表示这个方案中有这么多回路</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210815180653.png"></p><p>例如这个就是一个loop回路，一般来说，消除loop回路的最简单最直接的办法就是直接删除一台换热器即可，但是很多时候，删除了一台换热器会导致流股变成虚线，换热量不优，如图所示，我删掉了右边那个换热器：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210815181059.png"></p><p>这个时候双击变化的换热器：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210815181717.png"></p><p>然后勾选进出口温度固定，虚线即可变成实线</p><p>如果在这个过程中换热器由绿色变成了红色，或者出现了更多的虚线，或者双击之后发现换热器的进出口温度已经固定，那么就需要自己手动去调整换热器，或者更改公用工程，这是一个非常麻烦的事情，所以在打流程和设置公用工程的时候一定要确定、谨慎、合理。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>除了自动推荐方案之外还可以自己手动设计换热方案，也就是自己去手动连接小球，设计一些换热器，创建流股分支，这里就不细说了，可以去自己了解学习一下</p><p>换热网络设计真的很费时费力，而且需要极大的耐心，请务必照顾好做换热网络设计的队友，防止他暴走~</p><p>我是乙醇，本文就到这里，如果有什么错误请批评指正，请轻点喷~<img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210815182159.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 化工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Aspen </tag>
            
            <tag> 换热网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>化工设计大赛不完全指北</title>
      <link href="/posts/79e79c63/"/>
      <url>/posts/79e79c63/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210806110403.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p><strong>本文中所有言论仅代表 <code>乙醇</code> 的个人观点，如果和你观点不一样，请轻点喷，评论区有秩序讨论和学习</strong></p><p>本文所有内容均为 <code>乙醇</code> 原创，转载请务必注明出处</p></blockquote><p>刚开始知道全国大学生化工设计竞赛是在去年的十月份吧，老师说让我们准备准备参加这个竞赛，毕竟是全国高校化工专业的盛会，难得参加一次，我们学校因为一些原因，上一次参加还是在2018年了</p><p>老师把希望都寄托在了我们这一届身上</p><p>老师说了很多这个竞赛的好处，特别能锻炼人，也能极大的掌握化工相关的专业知识，对整个化工设计过程有一个深刻的体会，更能学到很多东西（这个确实，一路回忆过来真的很不容易，自己也成长了很多）</p><p>如果能拿奖的话不论是对考研还是找工作都有很大的帮助，毕竟这个竞赛含金量还是有一些的，学校的奖金还很丰厚（不是因为钱我才这么拼的啊喂）<img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210806111221.jpg"></p><p>因为化工设计这门课也有课设，索性老师直接把课设的题目也就定成了今年化工设计竞赛的题目，既参加了竞赛也完成了课程设计，双赢（可惜老师也没想到我们专业的学生有多么**）</p><p>这算是“故事背景”了</p><p>提醒一下，这个竞赛会花费掉你大量的精力和时间，而且会从3月份一直持续到8月份，每个人的情况都不一样，对这个竞赛的体会也不一样，有的人觉得性价比不高，不值得，有的人觉得过程中学到了很多，所以因人而异，我也不能说一些绝对的话，要结合自己自身的情况慎重考虑，一定要慎重，但是如果决定了要参加，就一定要坚持下去走到最后。</p><h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><p>大概在11月份之前吧，找齐了五个队员，同时了解了一些<strong>这个竞赛都需要做些什么</strong> （划重点，这个很重要）</p><p>说到找队员，提醒各位同学一句，队友真的非常非常非常重要，能力都是次要的，首先人品一定要好，必须要有责任感，必须要有责任感，必须要有责任感（重要的事情要说三遍）</p><p>这个竞赛时间长，任务量大的惊人，坚持不下来的人早早换人，我所在的西北赛区，我记得总共有263个队伍报名，最后提交作品的也只有160个左右，我们学校总共报名了14个队伍，结果交作品的只有两个，所以队友真的很重要</p><p>题外话：我们学校本来最后冲刺阶段算上我的话还有四个种子队，结果有两个都是因为队友撒手不干了，错失了提交作品的机会，太可惜了，竞赛得国三其实很容易，只要你提交了<strong>完整的作品</strong>，（必须是达到评分细则上要求的完整作品）就可以获得国家三等奖</p><p>所以说，队友真的很重要，当然还有通过竞赛找到对象的（这我可太羡慕了）<img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210806112627.png"></p><p>队友找齐了，下一步就是了解这个竞赛都需要干什么，怎么分工，都需要学什么</p><p>这些都要提前准备，不然一边学习软件使用一边去做效率太低了</p><p>首先就是分工，一般来说，五个人都是这样安排的：</p><ul><li>文档一个人</li><li>工艺设计两个人</li><li>图纸设计一个人</li><li>设备设计一个人</li></ul><p>我不能说其中哪个比较难，因为到了后期，每个人都会很累，工作量很大很难，但是有一点可以确定的就是<strong>工艺设计的两个人一定是整个队伍的核心</strong> </p><p>前期的话其他人主要是给这两个人打下手，查阅资料，翻译文献之类的</p><h2 id="初始工艺流程设计"><a href="#初始工艺流程设计" class="headerlink" title="初始工艺流程设计"></a>初始工艺流程设计</h2><p>工艺设计作为整个作品的灵魂和核心，是最难的，也是最复杂的，至于为啥说工艺设计是核心，工艺设计决定了文档、设备、图纸这些好不好做，怎么做，做的对不对</p><p>在准备阶段就要查阅大量的文献，确定原料到产物的路线，这个工艺路线一定要稳重，不能太新，太新的话资料过少，很多东西难以确定，或者都需要自己去摸索（如果你能力够，那么推荐你选择的工艺路线越新越好，因为创新性很重要）</p><p>工艺路线也不能太老，很多参考资料会过于古老，不符合实际</p><p>最好的工艺路线就是目前国内或者国际普遍正在应用的工艺路线，这是最稳妥的，相对应的资料也会很多，会很方便的查到一些相关资料</p><p>通过知网、万方这两个国内数据库和Web of science这个国外数据库，查询关于题目的相关资料，首先就要得到用什么原料制备什么产品，从原料到产品有几种方法，然后把这些方法列一个表，详细对比各个参数，比如催化剂、反应条件、转化率、选择性、粗产品质量分数等，然后决定出一个难度最合适自己队伍的工艺（工艺并不是用的人多就好，也不是最新的就好，适合自己队伍的才是最好的，毕竟你要做出来）</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210806131712.png" alt="大佬的小技巧"></p><blockquote><p>大佬的经验</p></blockquote><p>确定了工艺就要开始确定原料方案了，首先肯定是需要文档的同学去查一些经济方面的资料，可以通过百度、前瞻网、生意社等网站，看看你们的这个产品目前国内外的缺口产量是多少，需求量是多少，一般来说，你们厂子的年产量不能超过市场需求量的一半最为合理</p><p>确定了产量之后，通过你们确定的工艺反应选择性和转化率，大概估算一下需要原料多少，需要什么纯度的，有什么样的原料要求</p><p>接下来就可以去找能给你们提供足够的原料供应的母厂，通过百度地图、高德地图、图新地球等的卫星图模式，看一下母厂周围是否有空地给你们用来建厂子，是不是足够，必须要保证这是一块空地，且必须保证附近的化工园区的政策允许你们建厂，用地必须为工业用地（接下来就是厂区设计部分的内容了，下面再说）</p><p>确定了原料方案，工艺路线，产品规格，就可以开始做模拟了，这个竞赛就算是正式开始了</p><p>说到模拟，就要说模拟用到的软件了，目前国内最常用的流程模拟软件有两个：</p><ul><li>Aspen Plus</li><li>Pro II</li></ul><p>如果是炼油相关的，其实用ProII来说更好一点，但是通常情况下，这个竞赛是用Aspen的，记得在比赛之前就要详细学习一下这个软件的使用，最起码要保证比赛开始之后正式做模拟的时候大部分的基础操作要知道怎么做，功能按键在哪，这样才能保证你问大佬问题的时候回答你能听得懂</p><p>这个软件的安装较为复杂，软件较大，所以尽量让队伍里电脑配置最好的同学安装，版本最好使用V11版本，最为稳定和好用，当然你要是用12或者8&#x2F;9&#x2F;10也没问题，只要保证能做完整个流程就行，软件可以去找一些公众号下载，由于版权原因就不细说了，如果找到安装包但是自己不会安装的话，去找万能的淘宝，30块钱直接解决</p><p>软件安装好，那么去哪里学习呢？一般来说这种专业性较强的软件教程很少，就连B站里Aspen的教程都很少，推荐一本书《化工过程模拟实训》孙兰义老师的，这本不错，很基础，例题也很多，建议买正版，是彩色的方便学习。</p><p>当然最好的学习方法就是混迹于各种aspen和竞赛交流群，往往能认识到很多大佬，找一个手把手教你，说不定还顺便找个对象，哈哈哈<img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210806132004.jpg"></p><blockquote><p>这就不得不打个小广告了，本人的小破群Q：769519680，里面都是一些经验丰富的大佬，很多这一届获奖的大佬，认准乙醇</p></blockquote><p>如果自己还是能力有限的话，下下策就是去找竞赛相关的培训机构，具体的名字就不点了，可以自己去找找，当然肯定是收费的，还不菲</p><p>个人观点，整个流程模拟最难的地方第一个就是动力学，因为竞赛规定了反应必须要有严格动力学速率模型去模拟反应，所以这一点很重要，往往很多同学选好了工艺最后却查不到该工艺的反应动力学，无奈导致更换工艺，至于反应动力学是什么，要怎么输入到aspen中，请自己学习（反应工程）相关知识，如果学校还没有开这门课，可以去请教老师或者学长，或者翻阅往年作品中的《动力学参数说明》，里面都会有动力学的严格推导过程和输入方式。如果只找到了主反应的动力学，没有副反应的，那么就给主反应的反应器模块后面串联一个化学计量反应器模块，用转化率直接规定副反应的量就行了</p><blockquote><p>如果是类似于丙烯气相水合这种单程转化率特别低的反应，建议通过反应器的串并联来减少反应物的循环</p></blockquote><p>第二个难点就是分离序列，从反应器出来的产物并不就直接可以卖了，肯定要精制，那么从这么多复杂组分中分离出纯组分的产物，这个分离序列要怎么去分离，精馏塔的关键组分要怎么确定，要不要用到特殊精馏，要不要用到膜分离等，请自己学习（化工原理、分离工程）等相关课程。这个还挺关键的，因为aspen和实际操作过程肯定有差别，我答辩的时候刚好评委就问到了这个，所以说，分离过程一定要严谨，每个塔的关键组分要确定准确</p><p>第三个难点就是循环，记得特别清楚的就是我们那个流程里的丙烯循环，折磨了我两个周，太痛苦了，简直就不是人做的，但是后来学会了怎么打循环就很轻松了，个人总结的几个方法：首先肯定就是使用计算器模块，至于什么是计算器模块，怎么设置变量，请自己学习《化工过程模拟实训》，如果用了计算器还是不收敛 ，直接改大收敛次数，这个竞赛没有要求，一般来说改到200次就顶天了，接下来就是赋初值，再然后调和，如果这几个方法还是不能让你的循环收敛，那么就必然是你的过程模块的参数有问题，有一些地方的参数设置的太过严格，导致迭代过程中稍微有一点参数变化就会导致不收敛，如果你的循环中有塔，那么建议使用设计规范固定塔的操作参数</p><p>在工艺设计开始的同时，文档的同学就可以开始写可行性研究报告和设计说明书的框架了，同时设备设计的同学根据原料方案和产品规格去设计储罐，图纸的同学可以开始绘制厂区总平面布置图了（这个属于厂区设计范围了，下面会详细说到），需要注意的是，不管是文档的编辑还是设备的计算、图纸的绘制，都必须要遵守化工相关的国家标准，同时必须要符合评分细则的相应规定，这些都可以查到</p><h2 id="厂区布置图设计"><a href="#厂区布置图设计" class="headerlink" title="厂区布置图设计"></a>厂区布置图设计</h2><p>在最原始的全流程模拟完成之后，就可以开始厂区设计了，根据产量的规模去参考往年作品中同样年产量的厂子需要多大的地皮，然后根据母厂的位置，在卫星图上选取最靠近母厂的空地，这个空地必须要符合相对应的政策，然后根据实际地形，绘制出厂区平面布置图的轮廓，图幅一般采用A1，比例一般采用1:1000，字体，线宽这些也要严格按照规定来哦</p><p>最重要的是，要有风玫瑰图，在厂区布置图的左上角必须放置该厂区所在地的风玫瑰图，然后根据风玫瑰图去布置建筑，风玫瑰图怎么读建议直接百度</p><p>还有，风玫瑰图必须是具有夏冬两季分别的风频才行，就是那种黄绿色的，别用那种黑白色的，不然会扣分（我们就被扣了，淦）</p><p>按照罐区在全年最大风频的下风向，行政区在全年最大风频的上风向等规则去设计厂区内的建筑布置，详细规则参考相关国家标准或者化工标准，如果不知道建筑该画多大，建议直接参考往年作品</p><p>建筑与建筑之间的距离符合防火设计规范，详细规则参考相关标准</p><p>罐区罐子之间的距离，防爆墙的设置，防火堤的设置，消防栓和消防水炮的设置等，参考相关标准</p><p>厂区道路的设计最好横平竖直，尽量少的转弯，转弯要画出转弯半径</p><p>水池的设计最好放在厂区的地势低洼处，路面标高最好要有</p><p>厂区内不允许设置员工宿舍，医务室等；生产装置区不允许有绿化</p><p>装卸区要考虑产品怎么装卸设置相关的装卸区，这部分影响后面的三维厂区建模</p><p>具体更多规则请参考相关标准</p><h2 id="流程参数优化"><a href="#流程参数优化" class="headerlink" title="流程参数优化"></a>流程参数优化</h2><p>基本上前期只有做工艺的两个人最痛苦最忙，因为流程不做出来其他的人没办法开始，或者是初始流程设计完成之后开始设备设计，然后发现有个东西要优化，结果设备设计的同学该数据改到麻了</p><p>所以接下来我们队的流程可能和其他队伍的顺序不一样，只做个参考吧</p><p>初始流程完毕之后就是优化了，优化之前记得另存一下，最后也要交初始流程</p><p>首先就是反应器参数优化，利用aspen中的灵敏度分析工具，分别得到温度、压力或者其他关键参数对反应转化率的影响曲线，并分别单独做一个bkp，得出反应器在最高转化率情况下的反应条件，并撰写一个反应器参数优化说明，说明反应条件是最优的，完成反应器参数优化</p><p>接下来就是塔参数优化，塔对总塔板数、回流比、进料板位置等进行灵敏度分析，得到最优参数，然后带到初始流程里，得到第二个带塔参数优化的全流程</p><p>这个时候就要做换热网络分析了，给第二个带塔参数优化的流程加上公用工程，然后通过AEA软件对流程的组合曲线进行分析，然后就可以开始做节能了</p><h2 id="集成节能部分"><a href="#集成节能部分" class="headerlink" title="集成节能部分"></a>集成节能部分</h2><p>分析了换热网络组合曲线之后就能得到流程中平台区较大的部分了，然后针对这几个部分进行节能措施的改造，利用热泵精馏、双效精馏、内部热耦合等技术对塔进行改造，得到优化之后的换热网络，这个时候平台区就较少了</p><h2 id="换热网络设计"><a href="#换热网络设计" class="headerlink" title="换热网络设计"></a>换热网络设计</h2><p>通过AEA软件对这个时候的换热网络进行流股间换热设计，得到最终的换热方案，然后确定最小传热温差，通过软件推荐方案之间的比较，得到总费用最小的换热方案，并保留对比方案</p><p>将换热网络方案带回流程中进行流股间换热设计，保留第三版带塔参数优化，带换热网络的全流程模拟，至此，流程模拟部分告一段落</p><h2 id="图纸绘制"><a href="#图纸绘制" class="headerlink" title="图纸绘制"></a>图纸绘制</h2><p>确定了全流程之后就可以开始PFD（工艺物料流程图）的绘制了，按照相关图纸的标准，分工段绘制好PFD，并从Aspen中导出相关物流节点的流股数据，得到完整的PFD图纸</p><p>塔顶和塔釜的有些数据无法直接查看，可以使用虚拟流股进行导出</p><h2 id="设备设计"><a href="#设备设计" class="headerlink" title="设备设计"></a>设备设计</h2><p>全流程模拟完成之后就可以开始非标设备的设计和标准设备的选型了</p><p>首先是反应器，通过查阅文献，得到反应器型式，催化剂等的具体参数，结合aspen中的模拟结果，进行反应器的设计，注意能创新就创新</p><p>设计完成之后进行校核，利用SW6软件进行反应器的强度校核，校核完成之后绘制反应器的工艺条件图和装配图</p><p>反应器设计完成</p><p>如果有能力，可以通过COMSOL对反应器进行CFD模拟</p><p>接下来就是换热器设计，可以使用HTRI软件，但是更推荐使用Aspen EDR模块，可以通过aspen直接将流程中的换热器导入到edr中进行详细设计</p><p>注意污垢热阻的选择，设计完成之后选择校核模式，雷诺数，设计余量等参数要符合评分细则的要求</p><p>工艺要求校核符合之后通过SW6软件进行换热器强度校核，校核合格之后绘制反应器工艺条件图，反应器装配图</p><p>换热器设计完成</p><p>接下来是塔设计，首先要使用Aspen的DSTWU简捷塔模块做一次简捷计算，得到最小回流比、塔板数这些初始数据，如果是萃取精馏塔这种特殊塔不能使用简捷模块，就需要查阅文献说明初始数据怎么得到的</p><p>然后将塔单独放一个bkp文件，把塔优化的参数记得要带入进去，进行水力学设计和校核</p><p>水力学设计和校核要分段进行，使用自动分段即可，每块塔板的液泛因子、侧壁降液管停留时间等参数必须符合评分细则的要求，填料塔同理，填料能力因子也要符合要求</p><p>然后通过aspen导出水力学校核报告，通过水力学校核得到塔径参数，塔盘参数等</p><p>通过SW6软件进行塔的强度校核，校核合格之后绘制塔的工艺条件图、装配图</p><p>塔设计完成</p><p>接下来就是一些设备的选型，比如泵、压缩机、其他换热器、罐子之类的，参考相关标准或者手册进行选型就行了</p><p>最终得到典型设备计算说明书和设备一览表即可</p><h2 id="P-ID绘制"><a href="#P-ID绘制" class="headerlink" title="P&amp;ID绘制"></a>P&amp;ID绘制</h2><p>设备确定之后就可以绘制P&amp;ID（管道仪表物料流程图）也就是自动控制部分了</p><p>参考一些书籍，（化工仪表）的知识需要自学，可以参考往年作品</p><h2 id="车间设计"><a href="#车间设计" class="headerlink" title="车间设计"></a>车间设计</h2><p>流程模拟完成之后，就可以通过Plant3D或者PDMS、PDMAX等三维配管软件进行车间建模和设计</p><p>建模完毕之后绘制车间平立面布置图，符合相关标准即可</p><h2 id="厂区三维建模"><a href="#厂区三维建模" class="headerlink" title="厂区三维建模"></a>厂区三维建模</h2><p>通过SketchUP或者3DSMAX等软件，按照厂区平面布置总图对全厂进行三维表观建模</p><h2 id="文档整理、经济分析、安全分析、环境评价"><a href="#文档整理、经济分析、安全分析、环境评价" class="headerlink" title="文档整理、经济分析、安全分析、环境评价"></a>文档整理、经济分析、安全分析、环境评价</h2><p>到这里基本上所有的主要工作就完成了，可以做文档整理了，评分细则里要求的每一条都必须要有，每一个文档统一格式，封面等</p><p>复制别人的时候记得要改清楚，文档里千万不要出现别的队的东西或者名字</p><p>在进行经济分析的时候，这方面学生又不是会计，不可能算的清楚的，所以只要你不离谱就行，总投资、静态投资回收期之类的，合理即可</p><p>安全分析，可以通过Hazop、ALOHA、ELAN等软件进行安全评价、储罐事故模拟、噪音分析等</p><p>环境评价，这个嘛，建议参考往年即可</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>在完成作品之后，一定要记住，把所有文件仔仔细细检查一遍，是否运行无错误，是否是自己的文件，是否齐全，PDF是否存了，CAD图纸是否是要求的版本等</p><p>最后写一点自己的感想吧</p><p>从2020的12月份自己开始学习软件准备竞赛，到7月20交作品，到8月2号答辩，到3号结束</p><p>这么长时间的努力，首先感谢我的队友一直以来的陪伴和支持、努力</p><p>感谢几个指导老师在最后冲刺阶段的陪伴与指导</p><p>最最最要感谢的，就是化工一家人群里的所有小伙伴，一路陪我到最后，鼓励我，教会了我很多很多东西，认识了很多很多有趣的人</p><p>酝酿了很多话，到了嘴边却不知道该说什么，整个过程，有开心，有烦恼，有无奈也有伤心</p><p>自己也是成长了很多，学到了很多，尽管最后的结果有点遗憾，但最起码不后悔，自己拼过了</p><p>写下这篇文章，是出于指导学弟的目的还是出于记录自己的目的已经不重要了</p><p>最最最重要的是享受这个过程中的人和事</p><p>终于结束了~</p><p>最后虽然自己的成绩不咋地，还是提一嘴吧，西北赛区一等奖，国家二等奖</p><p>毕竟我脸皮厚，哈哈哈哈</p><p>可能这个过程中最遗憾的事情就是自己没找到对象吧，皮一下<img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210806151900.jpg"></p><p>就这样吧，我是你们最爱的乙醇，下次再见<del>mua</del></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 化工设计大赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决GitHub推送报错443经典问题</title>
      <link href="/posts/dfa14c14/"/>
      <url>/posts/dfa14c14/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>不知道从何时起，GitHub的一道高墙时常困扰着我，就是GitHub推送的443经典难题，昂贵的梯子我又买不起，只能通过切换网络，刷新dns来一遍一遍推送，导致每次写完文章最头疼的就是推送问题了</p><p>偶然间百度的过程中，发现了一种比较有效的方法，特此在这里记录下来</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>分别打开下面三个网址：</p><ul><li><a href="https://github.com.ipaddress.com/">https://github.com.ipaddress.com/</a></li><li><a href="https://fastly.net.ipaddress.com/github.global.ssl.fastly.net#ipinfo">https://fastly.net.ipaddress.com/github.global.ssl.fastly.net#ipinfo</a></li><li><a href="https://github.com.ipaddress.com/assets-cdn.github.com">https://github.com.ipaddress.com/assets-cdn.github.com</a></li></ul><blockquote><p>注：如果这三个网址打不开了，可以通过其他的站长工具查询最优IP</p></blockquote><p>得到结果如下图：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210717190509.png" alt="1"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210717190443.png" alt="2"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210717190528.png" alt="3"></p><p>然后修改老熟人Hosts：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">140.82.113.4 github.com </span><br><span class="line">199.232.69.194 github.global.ssl.fastly.net</span><br><span class="line">185.199.108.153  assets-cdn.github.com</span><br><span class="line">185.199.109.153  assets-cdn.github.com</span><br><span class="line">185.199.110.153  assets-cdn.github.com</span><br><span class="line">185.199.111.153  assets-cdn.github.com</span><br></pre></td></tr></table></figure><p>然后就又可以愉快的PUSH了~</p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> 443报错 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>当代毕业生生存现状</title>
      <link href="/posts/45b94d53/"/>
      <url>/posts/45b94d53/</url>
      
        <content type="html"><![CDATA[<h2 id="上一次更新视频分享，还是金厂长的《你没穷过，你不懂》"><a href="#上一次更新视频分享，还是金厂长的《你没穷过，你不懂》" class="headerlink" title="上一次更新视频分享，还是金厂长的《你没穷过，你不懂》"></a>上一次更新视频分享，还是金厂长的《你没穷过，你不懂》</h2><p>视频链接：<a href="https://imbhj.com/7cefd4dd/">你没穷过，你不懂</a></p><h2 id="今天的，希望你看完能够有点收获"><a href="#今天的，希望你看完能够有点收获" class="headerlink" title="今天的，希望你看完能够有点收获"></a>今天的，希望你看完能够有点收获</h2><iframe src="//player.bilibili.com/player.html?aid=249199341&bvid=BV13v411n7W9&cid=371037069&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%" height="500px"> </iframe><p>没想到，今天无意中逛着B站，看到了金厂长更新了这一期，不知道为什么，一下子就戳到了心窝里</p><p>我不像视频中的主角那样还有一个体制内的爸爸兜底，我就是出身一个普普通通的农村家庭</p><p>家里好不容易把我供出来让我上了个大学，却上天给我开玩笑，录了一个自己根本就不喜欢的专业</p><p>大一浑浑噩噩的过去，期末成绩简直惨烈，挂了好几科</p><p>自己又混蛋的弄丢了那个女孩子，可惜世上没有后悔药</p><p>大二渐渐的懂点事了，可还是追不上，到大二第二学期期末的时候，已经挂了7科了</p><p>距离被学校强制退学只剩下了一门课</p><p>心如死灰，加上自己本身的一些疾病吧算是</p><p>写好了遗书，给爸妈打了最后一个电话，那是我见到我爸哭的最伤心的一次</p><p>我心真的超痛，我突然意识到了自己在做什么，自己是由多么的不负责任，自己以为自己成长了，但是就是个屁</p><p>大三开始努力，其实也不算开始努力，放平心态，接受自己就是个平凡人，（其实也是一种更大的不负责任和逃避心理吧）</p><p>努力学习专业课，接受化工这个专业</p><p>大三第一学期居然只挂了一科，其他科目的成绩也很可观，这一科在第二学期刚开学也补考通过了，大一大二的哪些课，除了自己是真的学不会的物理相关的</p><p>现在累计挂科是四门，最近几天也期末考完试了，有信心这学期一门都不挂</p><p>而且去参加了实习，对化工这个行业有了更深的了解，从去年12月份开始准备全国大学生化工设计大赛</p><p>一路走到现在，竞赛作品也马上做完了（这个后面我有时间会单独出一期文章分享一些竞赛的心得和经验）</p><p>大三这一年和参加这个竞赛真的给了我很大的自信心，整个人的精气神也看起来和以前不一样了，寒假在家的时候父亲还说我就跟变了个人一样</p><p>说我对这个世界看的太透彻了，让我出家算了，<img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210717165915.jpg"></p><p>9-10月份马上面临秋招了，我不知道自己何去何从，就好像感觉自己没有年轻人的那种冲劲</p><p>自己以前的梦想是做一个白帽黑客，但是后来发现自己好像并没有这方面的天赋</p><p>课外的东西付出精力多了，导致自己课程挂的很多</p><p>但是付出那么多精力，感觉自己并没有学习多少，就好像是玩闹一样</p><p>想去为自己的梦想努力，却又害怕代价太大，想毕业直接进化工厂工作，却又不甘心就这样躺平</p><p>化工厂是真的磨人，能把你的一切躁动的心磨平</p><p>日子平淡到无欲无求</p><p>我真的不知道自己该怎么去抉择，嘴上说着我要躺平，我就要安安稳稳才是福，有闲不穷离家近就是最大的成就</p><p>但是心里真的甘心吗</p><p>我也不知道了</p><p>很迷茫</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 毕业生 </tag>
            
            <tag> 工作 </tag>
            
            <tag> 创业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改Host禁止应用联网</title>
      <link href="/posts/a381b09e/"/>
      <url>/posts/a381b09e/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210406202630.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>自从最近听说Aspen官方检测变得严格之后，用Aspen就变得畏畏缩缩，不敢联网，虽然说要支持正版，但是正版那几十万的售价实在是让人望而生畏</p><p>之前通过防火墙设置出站规则禁止Aspen联网，没想到居然没起作用</p><p>就想起了可以通过修改host让它访问不到自己的验证服务器</p><h2 id="开淦"><a href="#开淦" class="headerlink" title="开淦"></a>开淦</h2><p>要修改host就得先知道Aspen的验证服务器地址，这可怎么办呢</p><p>哈，这可难不倒我这个大聪明</p><p>当然是抓包了</p><p>首推FD抓包工具，好用的一批</p><p>打开抓包工具，打开Aspen，果然，就看见了它偷偷联系他的老总，气死我了</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210406203342.png"></p><p>然后就得到了它的地址：aspenconnect2.servicebus.windows.net</p><p>然后修改host文件，添加下面的规则：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 aspenconnect2.servicebus.windows.net</span><br></pre></td></tr></table></figure><p>重启电脑，就又可以愉快的摸鱼了(呜呜呜，Aspen好难~)</p><h2 id="如何修改host"><a href="#如何修改host" class="headerlink" title="如何修改host"></a>如何修改host</h2><p>如果电脑有火绒的同学，在火绒的工具里可以直接找到修改host的工具，修改之后保存即可</p><p>如果没有，那就手动找到下面的路径：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210406203829.png"></p><blockquote><p>记得要用管理员打开哦~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> host </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>成人恋爱和校园恋爱，其实很不一样</title>
      <link href="/posts/c6fa64a9/"/>
      <url>/posts/c6fa64a9/</url>
      
        <content type="html"><![CDATA[<h2 id="成人恋爱和校园恋爱，其实很不一样"><a href="#成人恋爱和校园恋爱，其实很不一样" class="headerlink" title="成人恋爱和校园恋爱，其实很不一样"></a>成人恋爱和校园恋爱，其实很不一样</h2><iframe src="//player.bilibili.com/player.html?aid=587322680&bvid=BV1LB4y1P7sT&cid=314646966&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%" height="500px"> </iframe>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 恋爱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Aspen常见安装问题解决</title>
      <link href="/posts/af2f8cc3/"/>
      <url>/posts/af2f8cc3/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210324205746.png"></p><h2 id="安装过程出现白屏"><a href="#安装过程出现白屏" class="headerlink" title="安装过程出现白屏"></a>安装过程出现白屏</h2><p>例如：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210324205927.jpg"></p><p><strong>解决办法：</strong>若安装过程中出现白屏，回到 Product selection，把最后一选项去掉</p><h2 id="许可证检查失败"><a href="#许可证检查失败" class="headerlink" title="许可证检查失败"></a>许可证检查失败</h2><p>例如：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210324210050.jpg"></p><p><strong>解决办法：</strong>重启电脑，开机之后等待十分钟以上，再次打开Aspen，要是不奏效，见下图</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210324210302.png"></p><h2 id="初始化企业数据库失败"><a href="#初始化企业数据库失败" class="headerlink" title="初始化企业数据库失败"></a>初始化企业数据库失败</h2><p>例如：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210324210408.jpg"></p><p><strong>解决办法：</strong></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210324210705.jpg"></p><h2 id="报错AspenTech-requires-that-the-system"><a href="#报错AspenTech-requires-that-the-system" class="headerlink" title="报错AspenTech requires that the system"></a>报错AspenTech requires that the system</h2><p>如图：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210324213810.jpg"></p><p><strong>解决办法：</strong>不论是你Aspen安装在哪个盘，请保持C盘预留10G以上的存储空间</p><h2 id="其他小问题"><a href="#其他小问题" class="headerlink" title="其他小问题"></a>其他小问题</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210324210910.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 化工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Aspen </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何调节精馏塔的工艺参数</title>
      <link href="/posts/36a52bcc/"/>
      <url>/posts/36a52bcc/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210227165541.webp"></p><blockquote><p>本文转载自公众号：化工加</p><p>原文连接：<a href="https://mp.weixin.qq.com/s/kMvzODr4-rpWZ8sh9RsBIw">如何调节精馏塔的工艺参数？</a></p></blockquote><h2 id="精馏操作中怎样调节塔的压力？影响塔压变化的因素是什么？"><a href="#精馏操作中怎样调节塔的压力？影响塔压变化的因素是什么？" class="headerlink" title="精馏操作中怎样调节塔的压力？影响塔压变化的因素是什么？"></a>精馏操作中怎样调节塔的压力？影响塔压变化的因素是什么？</h2><p>塔的压力是精馏塔主要的控制指标之一。任何一个精馏塔的操作，都应把塔压控制在规定的指标内，以相应地调节其它参数。塔压波动过大，就会破坏全塔的物料平衡和气液平衡，使产品达不到所要求的质量。所以，许多精馏塔都有其具体的措施，确保塔压稳定在适宜范围内。</p><p><strong>对于加压塔的塔压，主要有以下两种调节方法：</strong></p><ul><li>塔顶冷凝器为分凝器时，塔压一般是靠气相采出量来调节的。在其它条件不变的情况下，气相采出量增大，塔压下降；气相采出量减小，塔压上升。</li><li>塔顶冷凝器为全凝器时，塔压多是靠冷剂量的大小来调节，即相当于调节回流液温度。在其它条件不变的前提下，加大冷剂量，则回流液的温度降低，塔压降低；若减少冷剂量，回流液温度上升，塔压上升。</li></ul><p><strong>对于减压精馏塔的压力控制，主要有以下两种方法：</strong></p><ul><li>当塔的真空借助于喷射泵获得时，可以用调节塔顶冷凝器之冷剂量或冷剂温度从而改变尾气量的方法来调节塔的真空度。当被分离的物料允许与空气接触时，在此控制方案中，蒸汽喷射泵在最大的能力下工作，调节阀装在通大气的管线上，用调节阀开度的大小，调节系统的尾气抽气量，从而达到调节塔的真空度的目的。</li><li>当采用电动真空泵抽真空时，调节阀装在真空泵的回流管线上，用调节阀开度的大小来调节系统的尾气抽出量，从而调节塔的真空度。</li></ul><p><strong>对于常压塔的压力控制，主要有以下三种方法：</strong></p><ul><li>对于塔顶压力的稳定性要求不高的情况下，无需安装压力控制系统，应当在精馏设备（冷凝器或回流罐）上设置一个通大气的管道，以保证塔内压力接近于大气压。</li><li>对于塔顶压力的稳定性要求较高或被分离的物料不能和空气接触时，塔顶压力的控制可采用加压塔加压的控制方法。</li></ul><p>以上调节塔压的方法未考虑不凝气实际需分析来调节塔的气相压力。</p><h2 id="精馏操作中怎样调节釜温？影响釜温波动的因素是什么？"><a href="#精馏操作中怎样调节釜温？影响釜温波动的因素是什么？" class="headerlink" title="精馏操作中怎样调节釜温？影响釜温波动的因素是什么？"></a>精馏操作中怎样调节釜温？影响釜温波动的因素是什么？</h2><p>釜温是由釜压和物料组成决定的。精馏过程中，只有保持规定的釜温，才能确保产品质量。因此釜温是精馏操作中重要的控制指标之一。</p><p><strong>当釜温变化时，通常采用改变再沸器的加热蒸汽量，将釜温调节至正常</strong>。当釜温低于规定值时，应加大蒸汽用量，以提高釜液的气化量，使釜液中重组分的含量相对增加，泡点提高，釜温提高。当釜温高于规定值时，应减少蒸汽用量，以减少釜液的气化量，使釜液中轻组分的含量相对增加，泡点降低，釜温降低。</p><p><strong>釜温波动的原因比较多</strong>。当塔压突然升高时，釜温会随之升高，而后又下降。这种釜温的升高是因为压力升高引起了釜液泡点的升高所致。因而，塔内的上升蒸气量不但不会增加，反而还会因为压力的升高而减少；这样，塔釜混合液中轻组分的蒸出就不完全，将导致釜液泡点的下降，因而使釜温又随之下降。反之，当塔压突然下降时，塔内的上升蒸气量会因塔压的降低而增加，造成塔釜液面的迅速降低，这样重组分可能被带至塔顶。随着釜液中组分的变重，釜液的泡点升高，釜温也会随之升高。由此看来，塔压是引起釜温变化的重要因素。因此，操作中只有首先把塔压控制在要求的指标上，才能确切地知道釜温是否符合工艺要求，否则会导致错误的操作。</p><p>釜温也会随着进料中轻组分浓度的增加而降低，重组分浓度的增加而升高。另外，釜中有水、再沸器中物料聚合堵塞了部分列管、加热蒸汽压力的波动、调节阀的失灵、物料的平衡采出受到破坏等，都能引起釜温的波动。釜温波动时，要分析引起波动的原因，加以消除。例如，塔顶采出量过小，使轻组分压入塔釜而引起釜温下降。此时若不增加塔顶采出，单纯地加大塔釜加热蒸汽的用量，不但对釜温没有作用，严重时还会造成液泛。又如，再沸器的列管因物料聚合而堵塞，致使釜温下降，此时，应停车对设备进行检修。</p><h2 id="在精馏操作中怎样调节回流比？"><a href="#在精馏操作中怎样调节回流比？" class="headerlink" title="在精馏操作中怎样调节回流比？"></a>在精馏操作中怎样调节回流比？</h2><p><strong>回流比是根据对原料的分离要求确定的</strong>。回流比过大或过小，都会影响精馏操作的经济性和产品的质量。加大回流比，可使塔顶产品中的轻组分浓度增加，但是，却减小了塔的生产能力，也使塔顶冷量、塔釜热量的消耗增大。在正常操作中应保持适宜的回流比，在保证产品质量的前提下，争取最好的经济效果。只有在塔的正常生产条件受到破坏或产品质量不合格时，才能调节回流比。</p><p>例如，塔顶产品中重组分含量增加，质量下降，要适当增大回流比。塔的负荷（进料量）过低，为了保证塔内一定的上升蒸气速度，也要适当增大回流比。对于大型的生产装置，当不同类型的塔板结构与上升蒸气速度的要求及仪表的设计工作范围与实际生产量的大小产生矛盾时，可以相应地适当改变回流比。又如浮阀塔板，如果处理能力只有设计能力的50-60%时，为了使浮阀在适宜范围内工作，为了让仪表的测量范围在适宜的工作范围内，应采取加大回流比来保证生产的稳定，这对大型生产装置维持必要的稳定生产是极为重要的。</p><p><strong>调节回流比的方法可有如下几种：</strong></p><ul><li>减少塔顶采出量以增大回流比。</li><li>塔顶冷凝器为分凝器时，可增加塔顶冷剂的用量，以提高凝液量，增大回流比。</li><li>有回流液中间贮槽的强制回流，可暂时加大回流量，以提高回流比，但不得将回流贮槽抽空。</li></ul><h2 id="在精馏操作中怎样调节塔的压差？"><a href="#在精馏操作中怎样调节塔的压差？" class="headerlink" title="在精馏操作中怎样调节塔的压差？"></a>在精馏操作中怎样调节塔的压差？</h2><p>塔压差是衡量塔内气体负荷大小的主要因素，也是判断精馏操作的进料、出料是否均衡的重要标志之一。在进料、出料保持平衡，回流比不变的情况下，塔压差基本上是不变的。当正常的物料平衡遭到破坏，或塔内温度、压力改变时，都会造成塔内上升蒸气流速的改变，以及塔板液封高度的改变，从而引起塔压差的变化。</p><p><strong>精馏操作中，要针对引起塔压差变化的原因相应地进行调节，常用的方法有三种：</strong></p><ul><li>在进料量不变的情况下，用塔顶的液相采出量来调节塔压差。产品采出多，则塔内上升蒸气的流速减小，塔压差下降；采出量减少，塔内上升蒸气的流速增大，塔压差上升。</li><li>在采出量不变的情况下，用进料量来调节塔压差。进料量加大、塔压差上升；进料量减小，塔压差下降。</li><li>在工艺指标许可的范围内，通过釜温的变化来调节塔压差。提高釜温，塔压差上升；降低釜温，塔压差下降。</li></ul><p>对于因设备问题造成的压差变化，应具体问题具体对待，严重时应停车检修。</p><h2 id="在精馏操作中怎样调节塔顶温度？"><a href="#在精馏操作中怎样调节塔顶温度？" class="headerlink" title="在精馏操作中怎样调节塔顶温度？"></a>在精馏操作中怎样调节塔顶温度？</h2><p><strong>塔顶温度是决定塔顶产品质量的重要因素</strong>。在塔压不变的前提下，顶温升高，塔顶产品中的重组分含量增加，质量下降。</p><p><strong>塔顶温度的调节方法，主要为两种：一种是固定回流量，调节回流温度；一种是固定回流温度，调节回流量。</strong></p><p>由于生产装置日趋大型化，考虑到生产的稳定性，调节回流量的方法得到了广泛采用。具体的调节方法如下：</p><ul><li>用回流量控制顶温。回流量加大，顶温降低，这种调节方法多在塔顶为全凝器时采用。</li><li>当塔顶使用的冷剂在传热过程中有相变化时，可用冷剂的蒸发压力与顶温串级调节来控制顶温。蒸发压力降低，对应的蒸发温度也降低，引起顶温降低。这种方法在塔顶冷凝器为分凝器时可以改变回流量；在塔顶冷凝器有过冷作用时，又可以用来改变回流温度。</li><li>当塔顶的冷剂在传热过程中无相变化时，可用冷剂流量与顶温串级调节来控制顶温。如流量加大，顶温降低。这种方法既可改变回流量，又可改变回流温度。</li><li>用塔顶冷凝器的换热面积调节顶温。提高冷剂液面，换热面积增大，顶温降低。这种方法既可改变回流量，又可改变回流温度。</li><li>当精馏段的物料浓度比较高时，可用某两板间的温差来调节顶温。温差增大，回流液量加大，顶温降低。</li></ul><h2 id="在精馏操作中，有时釜温升不起来的原因是什么？"><a href="#在精馏操作中，有时釜温升不起来的原因是什么？" class="headerlink" title="在精馏操作中，有时釜温升不起来的原因是什么？"></a>在精馏操作中，有时釜温升不起来的原因是什么？</h2><p>精馏塔在开车的升温过程及正常操作中都会遇到釜温升不起来的现象。</p><p><strong>在开车的升温过程中，釜温升不起来的原因可能是：</strong></p><ul><li>加热系统的疏水器（或叫排水阻气阀）失灵；</li><li>扬水站的回水阀门未开；</li><li>再沸器内的蒸汽冷凝液没有排空，蒸汽加不进去；</li><li>塔釜物料中有大量的水存在（水与物料不相溶）；</li><li>设备结构不合理，使釜液循环受阻；</li><li>由于操作不当（再沸器供热太晚或进料量太大，太猛），造成回流到塔釜的轻组分量太大，一时釜温很难提到正常，特别是低温液相进料的塔，极易出现这种现象。此时应改变进料量、进料组成或加大塔顶采出量，以调整操作。</li></ul><p><strong>正常操作中，引起釜温提不起来的原因可能是：</strong></p><ul><li>塔底再沸器的液相循环管堵塞，使釜液不循环；</li><li>再沸器列管内的物料结焦或列管被堵塞；</li><li>排水阻气阀失灵；</li><li>塔釜组分过重，现有的热剂不能将釜液加热到泡点，致使釜液循环不畅通；</li><li>加热釜的热剂压力下降；</li><li>釜液面太低或太高。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 化工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 精馏塔 </tag>
            
            <tag> 工艺参数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Aspen如何做塔设计和水力学校核</title>
      <link href="/posts/32ce1c37/"/>
      <url>/posts/32ce1c37/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223120641.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Aspen提供了DSTWU、Distl、RadFrac、Extract等塔单元模块，这些模块可以模拟精馏、吸收、萃取等过程，可以进行操作型计算，也可以进行设计型计算，可以模拟普通精馏，也可以模拟复杂精馏，比如萃取精馏，共沸精馏，反应精馏等。</p><h2 id="塔单元模块介绍"><a href="#塔单元模块介绍" class="headerlink" title="塔单元模块介绍"></a>塔单元模块介绍</h2><table><thead><tr><th align="center">模块</th><th align="center">说明</th><th align="center">功能</th><th align="center">适用对象</th></tr></thead><tbody><tr><td align="center">DSTWU</td><td align="center">使用Winn-Underwood-Gilliland方法的多组分精馏简捷设计模块</td><td align="center">确定最小回流比、最小理论板数以及实际回流比、实际理论板数等</td><td align="center">仅有一股进料和两股产品出料的简单精馏塔</td></tr><tr><td align="center">Distl</td><td align="center">使用Edmister方法的多组分精馏简捷校核模块</td><td align="center">基于回流比、理论板数及D&#x2F;F（塔顶采出与进料比值）确定分离情况</td><td align="center">仅有一股进料和两股产品出料的简单精馏塔</td></tr><tr><td align="center">SCFrac</td><td align="center">复杂石油分馏单元简捷设计模块</td><td align="center">确定产品组成和流量，估算每个塔段理论板数和热负荷等</td><td align="center">原油常减压蒸馏塔等</td></tr><tr><td align="center">RadFrac</td><td align="center">单塔精馏严格计算模块</td><td align="center">进行单个精馏塔的严格校核和设计计算</td><td align="center">常规精馏、吸收、汽提、萃取精馏、共沸精馏、三相精馏、反应精馏等</td></tr><tr><td align="center">MultiFrac</td><td align="center">多塔精馏严格计算模块</td><td align="center">进行复杂多塔的严格校核和设计计算</td><td align="center">原有常减压精馏塔、吸收&#x2F;汽提塔组合等</td></tr><tr><td align="center">PetroFrac</td><td align="center">石油蒸馏模块</td><td align="center">进行石油炼制工业中复杂塔的严格校核和设计计算</td><td align="center">预闪蒸塔、原油常减压蒸馏塔、催化裂化主分馏塔、乙烯装置初分馏塔和急冷塔组合等</td></tr><tr><td align="center">Extract</td><td align="center">溶剂萃取模块</td><td align="center">萃取剂与原料液在塔内逆流完成原料液中所需组分的萃取</td><td align="center">液-液萃取塔</td></tr></tbody></table><h2 id="精馏塔简捷设计"><a href="#精馏塔简捷设计" class="headerlink" title="精馏塔简捷设计"></a>精馏塔简捷设计</h2><p>简捷法设计乙苯-苯乙烯精馏塔。</p><p>进料量12500<code>kg/h</code> ，温度45 <code>°C</code> ，压力101.325<code>KPa</code> ，乙苯0.5843（质量分数，下同），苯乙烯0.415，焦油0.0007（在本例题中采用正十七烷代表焦油），塔顶为全凝器，冷凝器压力6<code>KPa</code> ，再沸器压力14<code>KPa</code> ，回流比为最小回流比的1.2倍。要求塔顶产品中乙苯含量不低于0.99，塔底产品中苯乙烯含量不低于0.997。物性方法采用PENG-ROB</p><p>求最小回流比、最小理论板数、实际回流比、实际理论板数、进料位置及塔顶温度，并生成回流比随理论板数变化图</p><p>开始模拟：</p><p>新建空白模拟，输入组分：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223132034.png"></p><p>点击下一步，选择物性方法：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223132209.png"></p><p>点击下一步，选择转到模拟环境，建立如图所示流程图：</p><blockquote><p>DSTWU模块采用ICON1图标</p></blockquote><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223132810.png"></p><p>在全局设定中填写标题：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223132935.png"></p><p>点击下一步，输入进料条件：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223133222.png"></p><p>点击下一步，输入模块参数：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223133636.png"></p><blockquote><p>回流比输入-1.2表示实际回流比是最小回流比的1.2倍，如果只输入1.2则表示实际回流比是1.2</p><p>本例题中乙苯EB为轻组分，苯乙烯STYRE为重组分，根据产品纯度要求，计算可得塔顶乙苯的摩尔回收率为99.91%，塔底 苯乙烯的摩尔回收率为98.58%，苯乙烯在塔顶中的摩尔回收率为1-0.9858&#x3D;0.0142</p><p>由用户指定浓度或者提出分离要求的两个组分称为关键组分，易挥发的低沸点组分称为轻关键组分，难挥发的高沸点组分称为重关键组分，假定塔内存在组分A、B、C、D，其沸点依次降低，下表可以清楚的表达不同的分离要求下所对应的轻重关键组分情况：</p><table><thead><tr><th align="center"></th><th align="center">1</th><th align="center">2</th><th align="center">3</th></tr></thead><tbody><tr><td align="center">塔顶</td><td align="center">A</td><td align="center">AB</td><td align="center">ABC</td></tr><tr><td align="center">塔底</td><td align="center">BCD</td><td align="center">CD</td><td align="center">D</td></tr><tr><td align="center">轻关键组分</td><td align="center">A</td><td align="center">B</td><td align="center">C</td></tr><tr><td align="center">重关键组分</td><td align="center">B</td><td align="center">C</td><td align="center">D</td></tr></tbody></table></blockquote><p>下一步，运行模拟，点解确定开始模拟：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223135221.png"></p><h2 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223135417.png"></p><p>计算出的最小回流比为4.26，实际回流比为5.11，最小理论板数为35（这是包括全凝器和再沸器的），实际理论板数为65（也包括全凝器和再沸器），进料位置为第25块板，塔顶温度为54.59℃</p><p>一般来说使用循环水作为冷却介质时塔顶温度需要大于40℃，本例中可以使用循环水作为冷却介质</p><p>生成回流比随理论板数变化表：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223140411.png"></p><p>进入DSTWU模块的输入，计算选项界面，勾选生成回流比与理论塔板数据表格，并输入相关数据后，点击下一步，运行模拟</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223140637.png"></p><p>在结果，回流比选项卡里可以查看塔板数与回流比的关系表</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223140834.png"></p><p>在工具栏选择自定义绘图，选择X轴为理论塔板数，勾选Y轴为回流比，点击确定生成散点图：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223141033.png"></p><p>通过作理论板数与回流比乘积<code>vs.</code> 理论板数<code>NXRR vs. N</code> 曲线，可较为明显的找出最低点，其对应的数值即为合理的理论板数（可通过将数据粘贴至Excel中进行数据拟合）</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223142227.png"></p><p>直观的得到最低点65为合适的塔板数</p><h2 id="精馏塔简捷校核"><a href="#精馏塔简捷校核" class="headerlink" title="精馏塔简捷校核"></a>精馏塔简捷校核</h2><p>新建模拟，输入组分和物性方法，和上例相同</p><p>建立流程图：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223143123.png"></p><blockquote><p>注意塔模块是DISTL，不要弄错了</p></blockquote><p>进入全局设定，标题为Distl</p><p>进入流股报告选项，勾选摩尔和质量：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223143414.png"></p><p>进入进料选项，和上例相同</p><p>进入模块参数，输入上例计算的结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223144538.png"></p><p>点击下一步开始进行模拟</p><h2 id="查看结果-1"><a href="#查看结果-1" class="headerlink" title="查看结果"></a>查看结果</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223144654.png" alt="image-20210223144654185"></p><p>得到冷凝器和再沸器的热负荷</p><p>进入结果摘要，流股，得到塔顶产品物流ETHBZ-PD中乙苯EB的质量分数和塔底产品物流STYR-PD中苯乙烯STYRE的质量分数：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223145322.png"></p><h2 id="精馏塔严格计算"><a href="#精馏塔严格计算" class="headerlink" title="精馏塔严格计算"></a>精馏塔严格计算</h2><p>在上例简捷计算的基础上，对乙苯-苯乙烯精馏塔进行严格计算，进料条件、冷凝器形式、冷凝器压力、再沸器压力、产品纯度要求以及物性方法与上例相同，塔顶压力6.7<code>KPa</code> ，再沸器采用釜式再沸器</p><p>求：</p><ul><li>根据简捷设计的结果，利用RadFrac模块计算塔顶及塔底产品的质量纯度</li><li>求满足产品纯度要求所需的回流比和塔顶产品流量以及冷凝器和再沸器的热负荷</li><li>在满足产品纯度的基础上，绘制塔内温度分布曲线、塔内液相质量组成分布曲线</li><li>在满足产品纯度的基础上，分析进料位置和总理论板数变化对再沸器热负荷的影响</li><li>求达到分离要求的最小回流比</li><li>求达到分离要求的最小理论板数</li></ul><p>新建模拟</p><p>输入组分，物性方法，与简捷设计一致</p><p>建立如图所示流程：</p><blockquote><p>注意使用的是RadFrac模块FRACT1图标</p></blockquote><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223151925.png"></p><p>进入进料条件，与简捷设计相同</p><p>输入模块参数：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223153118.png"></p><p>进入流股，输入进料位置及进料方式：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223153410.png"></p><p>进入压力，设置相关压力：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223153536.png"></p><p>点击运行模拟</p><h2 id="查看结果-2"><a href="#查看结果-2" class="headerlink" title="查看结果"></a>查看结果</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223154715.png"></p><p>结果发现产品纯度不够，题目要求乙苯质量分数为0.99，苯乙烯0.997，均不达标</p><p>RadFace模块可以通过添加设计规范达到分离要求，如产品的纯度或者回收率</p><p>添加设计规范：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223155302.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223155425.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223155509.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223155551.png"></p><p>新建一个调节变量：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223155704.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223155818.png"></p><p>添加第二个塔内设计规定，即苯乙烯0.997和第二个调节变量塔底产品与进料的流量比</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223160835.png"></p><p>由于塔底流量小于塔顶流量，所以把馏出物进料比改为我们刚才计算的结果，塔底产品与进料比0.4147</p><p>添加第二个设计规范：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223160322.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223160354.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223160421.png"></p><p>添加第二个调节变量：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223160909.png"></p><p>点击进行模拟，流程收敛</p><h2 id="查看收敛结果"><a href="#查看收敛结果" class="headerlink" title="查看收敛结果"></a>查看收敛结果</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223161202.png"></p><p>可以看到，质量纯度已经符合要求</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223161337.png"></p><p>可以看到热负荷和温度</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223161509.png"></p><p>塔内温度、组成、流量分布以及热负荷</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223161615.png"></p><p>选择相对应的绘图工具绘制曲线</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223161825.png"></p><p>选择组成，生成乙苯和苯乙烯的液相质量组成分布线</p><blockquote><p>这个时候还可以添加灵敏度分析，让结果更精确更可靠，不过本篇文章不需要这么精确，所以之后再说~</p></blockquote><h2 id="塔水力学分析"><a href="#塔水力学分析" class="headerlink" title="塔水力学分析"></a>塔水力学分析</h2><p>本例采用塔水力学分析功能设计塔内件，塔板类型选择浮阀塔板，设计基准为最高喷射液泛为85%，最高降液管泡沫层高度65%，体系因子为1</p><p>选择绘图工具流率，设置为质量流量：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223163615.png"></p><p>生成塔内气液质量流量分布图：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223163718.png"></p><p>点击设计和指定塔内件：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223172646.png"></p><p>生成水力学数据，跳转至下图界面：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223164009.png"></p><p><strong>在自动分段中选择基于流量</strong></p><p>选择浮阀塔板，溢流程数选择2：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223164633.png"></p><p>点击下面的查看水力学操作图，进入如下界面：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223164915.png"></p><p>可以看到各塔板操作点均在适宜操作区内</p><p>进入塔板设计界面：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223165147.png"></p><p>修改设计参数最大液泛和最大降液管持液量为85%和65%：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223165424.png"></p><p>同样，将CS-2的参数也修改为85%和65%</p><p>修改完成之后运行计算，如果发现塔水力学计算结果有警报，那么修改CS-1和CS-2的塔径分别为4m和3.8m</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223170016.png"></p><h2 id="查看结果-3"><a href="#查看结果-3" class="headerlink" title="查看结果"></a>查看结果</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223170209.png"></p><p>所有塔板工作正常</p><p>塔内压力分布图：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223170250.png"></p><h2 id="校核"><a href="#校核" class="headerlink" title="校核"></a>校核</h2><p>将塔段计算模式更改为校核模式</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223170621.png"></p><p>再次查看塔内压力分布：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223170930.png"></p><p>塔内件水力学结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210223171242.png"></p><p>全塔压降31.8244<code>KPa</code> ，全塔最大液泛率85.2266%</p><h2 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h2><p>可以根据下图所示的方法去调整塔器参数，以达到符合水力学结果的目的</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202308020930372.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 化工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Aspen </tag>
            
            <tag> 塔设计 </tag>
            
            <tag> 水力学校核 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分享几个化工搜索引擎</title>
      <link href="/posts/887f65c1/"/>
      <url>/posts/887f65c1/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210223084513.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在工作和学习的过程中，难免要去搜索一些关于化工的东西，普通搜索引擎信息驳杂，找到有用的信息实属困难，就催生了化工专业的搜索引擎，我刚好在论坛上看见了几个比较好的，就来分享一下</p><h2 id="Chemindex"><a href="#Chemindex" class="headerlink" title="Chemindex"></a>Chemindex</h2><blockquote><p><a href="https://www.chemindex.com/">https://www.chemindex.com</a></p></blockquote><p>Chemindex应该是ChemNet旗下的产品，它是一个主打化工词典相关化工供应商的搜索引擎，词典内容是比较丰富比较全的，唯一的缺点应该就是它是英文版本的</p><h2 id="Molget"><a href="#Molget" class="headerlink" title="Molget"></a>Molget</h2><blockquote><p><a href="https://www.molget.com/">https://www.molget.com</a></p></blockquote><p>信息全面，界面做的也比较的好看，不仅可以搜索化工相关信息，还能搜索非常多的化工产品信息，我觉得它最好用之处是搜索价格上，它帮我将搜索的产品信息归集的一块并且将价格信息也给我，可以说在购买产品上给了非常大的参考价值</p><h2 id="ChenYQ"><a href="#ChenYQ" class="headerlink" title="ChenYQ"></a>ChenYQ</h2><blockquote><p><a href="https://www.chemyq.com/">https://www.chemyq.com</a></p></blockquote><p>这个和Molget一样是一个比较全面的化工类搜索引擎，有自己的化工新闻、词典、产品、专利页，功能也是比较的多</p><h2 id="化化网"><a href="#化化网" class="headerlink" title="化化网"></a>化化网</h2><blockquote><p><a href="https://www.anychem.com/">https://www.anychem.com</a></p></blockquote><p>有化工词典、资讯、售价、文库、黄页等信息，还是不错的</p><p>暂时就这么多，以后再发现了来更新~</p>]]></content>
      
      
      <categories>
          
          <category> 化工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 化工 </tag>
            
            <tag> 搜索引擎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“你没穷过，你不懂”</title>
      <link href="/posts/7cefd4dd/"/>
      <url>/posts/7cefd4dd/</url>
      
        <content type="html"><![CDATA[<h2 id="看了这个视频，这是我21年来哭的最伤心的一次"><a href="#看了这个视频，这是我21年来哭的最伤心的一次" class="headerlink" title="看了这个视频，这是我21年来哭的最伤心的一次"></a>看了这个视频，这是我21年来哭的最伤心的一次</h2><iframe src="//player.bilibili.com/player.html?aid=886582108&bvid=BV17K4y1n7Dk&cid=294535553&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%" height="500px"> </iframe>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 相信自己 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CAD图例符号画法大全</title>
      <link href="/posts/1bd0dc65/"/>
      <url>/posts/1bd0dc65/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221193515.png"></p><blockquote><p>本文转载自公众号：化工加</p><p>原文链接：<a href="https://mp.weixin.qq.com/s/_O5buHpjvsPc1YhVHhY_ZQ">超全CAD图例符号画法大全，看过的都收藏了</a></p></blockquote><h2 id="线型及其含义"><a href="#线型及其含义" class="headerlink" title="线型及其含义"></a>线型及其含义</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221193803.webp"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221193851.webp"></p><h2 id="比例"><a href="#比例" class="headerlink" title="比例"></a>比例</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221194029.webp"></p><h2 id="水、汽管道代号"><a href="#水、汽管道代号" class="headerlink" title="水、汽管道代号"></a>水、汽管道代号</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221194101.webp"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221194126.webp"></p><h2 id="工艺管道施工图常用图例"><a href="#工艺管道施工图常用图例" class="headerlink" title="工艺管道施工图常用图例"></a>工艺管道施工图常用图例</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221194214.webp"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221194231.webp"></p><h2 id="水、汽管道阀门和附件图例"><a href="#水、汽管道阀门和附件图例" class="headerlink" title="水、汽管道阀门和附件图例"></a>水、汽管道阀门和附件图例</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221194255.webp"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221194308.webp"></p><h2 id="给排水、采暖常用图例"><a href="#给排水、采暖常用图例" class="headerlink" title="给排水、采暖常用图例"></a>给排水、采暖常用图例</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221194335.webp"></p><h2 id="通风空调工程常用图例"><a href="#通风空调工程常用图例" class="headerlink" title="通风空调工程常用图例"></a>通风空调工程常用图例</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221194533.webp"></p><h2 id="风道代号"><a href="#风道代号" class="headerlink" title="风道代号"></a>风道代号</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221194559.webp"></p><h2 id="风道、阀门及附件图例"><a href="#风道、阀门及附件图例" class="headerlink" title="风道、阀门及附件图例"></a>风道、阀门及附件图例</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221194628.webp"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221194640.webp"></p><h2 id="风口和附件代号"><a href="#风口和附件代号" class="headerlink" title="风口和附件代号"></a>风口和附件代号</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221194702.webp"></p><h2 id="暖通空调设备图例"><a href="#暖通空调设备图例" class="headerlink" title="暖通空调设备图例"></a>暖通空调设备图例</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221194727.webp"></p><h2 id="调控装置及仪表图例"><a href="#调控装置及仪表图例" class="headerlink" title="调控装置及仪表图例"></a>调控装置及仪表图例</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221194854.webp"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221194905.webp"></p><h2 id="消防工程基本图形符号"><a href="#消防工程基本图形符号" class="headerlink" title="消防工程基本图形符号"></a>消防工程基本图形符号</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221194931.webp"></p><h2 id="消防工程辅助符号"><a href="#消防工程辅助符号" class="headerlink" title="消防工程辅助符号"></a>消防工程辅助符号</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221194950.webp"></p><h2 id="消防工程灭火器符号"><a href="#消防工程灭火器符号" class="headerlink" title="消防工程灭火器符号"></a>消防工程灭火器符号</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221195009.webp"></p><h2 id="消防管路及配件符号"><a href="#消防管路及配件符号" class="headerlink" title="消防管路及配件符号"></a>消防管路及配件符号</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221195028.webp"></p><h2 id="消防工程固定灭火器系统符号"><a href="#消防工程固定灭火器系统符号" class="headerlink" title="消防工程固定灭火器系统符号"></a>消防工程固定灭火器系统符号</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221195053.webp"></p><h2 id="消防工程灭火设备安装处符号"><a href="#消防工程灭火设备安装处符号" class="headerlink" title="消防工程灭火设备安装处符号"></a>消防工程灭火设备安装处符号</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221195110.webp"></p><h2 id="消防设施"><a href="#消防设施" class="headerlink" title="消防设施"></a>消防设施</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221195127.webp"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221195136.webp"></p><h2 id="消防工程自动报警设备符号"><a href="#消防工程自动报警设备符号" class="headerlink" title="消防工程自动报警设备符号"></a>消防工程自动报警设备符号</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221195255.webp"></p><h2 id="管道图例"><a href="#管道图例" class="headerlink" title="管道图例"></a>管道图例</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221195316.webp"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221195325.webp"></p><h2 id="管道附件"><a href="#管道附件" class="headerlink" title="管道附件"></a>管道附件</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221195345.webp"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221195404.webp"></p><h2 id="管道连接"><a href="#管道连接" class="headerlink" title="管道连接"></a>管道连接</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221195426.webp"></p><h2 id="管件"><a href="#管件" class="headerlink" title="管件"></a>管件</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221195547.webp"></p><h2 id="常见阀门"><a href="#常见阀门" class="headerlink" title="常见阀门"></a>常见阀门</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221195607.webp"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221195616.webp"></p><h2 id="给水配件"><a href="#给水配件" class="headerlink" title="给水配件"></a>给水配件</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221195638.webp"></p><h2 id="小型给水排水构筑物"><a href="#小型给水排水构筑物" class="headerlink" title="小型给水排水构筑物"></a>小型给水排水构筑物</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221195718.webp"></p><h2 id="给水排水设备"><a href="#给水排水设备" class="headerlink" title="给水排水设备"></a>给水排水设备</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221195807.webp"></p><h2 id="仪表"><a href="#仪表" class="headerlink" title="仪表"></a>仪表</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221195826.webp"></p><h2 id="平面图、剖面图索引符号的画法"><a href="#平面图、剖面图索引符号的画法" class="headerlink" title="平面图、剖面图索引符号的画法"></a>平面图、剖面图索引符号的画法</h2><p>平面图、剖面图中的局部需另绘详图时，应在平、剖面图上标注索引符号。索引符号的画法见下图</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221200032.webp"></p><h2 id="内视符号画法"><a href="#内视符号画法" class="headerlink" title="内视符号画法"></a>内视符号画法</h2><p>当表示局部位置的相互关系，在平面图上应标注内视符号</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221200100.webp"></p><h2 id="系统编号"><a href="#系统编号" class="headerlink" title="系统编号"></a>系统编号</h2><ul><li>一个工程设计中同时有供暖、通风、空调等两个及以上的不同系统时，应进行系统编号。</li><li>暖通空调系统编号、入口编号，应由系统代号和顺序号组成。</li><li>系统代号用大写拉丁字母表示，顺序号用阿拉伯数字表示。当一个系统出现分支时，可采用下图的画法</li></ul><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221200151.webp"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221200202.webp"></p><h2 id="立管号的画法"><a href="#立管号的画法" class="headerlink" title="立管号的画法"></a>立管号的画法</h2><p>竖向布置的垂直管道系统，应标注立管号，在不一致引起误解时，可只标注序号，但应与建筑轴线编号有明显区别</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221200330.webp"></p><h2 id="管道相对标高的画法"><a href="#管道相对标高的画法" class="headerlink" title="管道相对标高的画法"></a>管道相对标高的画法</h2><ul><li>在无法标注垂直尺寸的图样中，应标注标高。标高应以m为单位，并应精确到cm或mm。</li><li>标高符号应以直角等腰三角形表示。当面标准层较多时，可只标注与本层楼（地）板面的相对标高。</li><li>水、汽管道所标高未予说明时，应表示为管中心标高。</li><li>水、汽管道标注管道外底或顶标高时，应在数字前加“底”或“顶”字样。</li><li>矩形风管所注标高应表示管底标高；圆形风管所注标高应表示管中心标高。当不采用此方法标注时，应进行说明。</li><li>平面图中无坡度要求的管道标高可标注在管道截面尺寸后的括号内。必要时，应在标高数字前加“底”或“顶”的字样。</li></ul><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221200418.webp"></p><h2 id="管道截面尺寸的标注符号及画法"><a href="#管道截面尺寸的标注符号及画法" class="headerlink" title="管道截面尺寸的标注符号及画法"></a>管道截面尺寸的标注符号及画法</h2><ul><li>低压流体输送用焊接管道规格应标注公称通径或压力。公称通径的标记应由字母“DN”后跟一个以亳米表示的数值组成；公称压力的代号应为“PN”。</li><li>输送流体用无缝钢管、螺旋缝或直缝焊接钢管、铜管、不锈钢管，当需要注明外径和壁厚时，应用“D（或Φ）外径×壁厚”表示。在不致引起误解时，也可采用公称通径表示。</li><li>塑料管外径应用“de”表示。</li><li>圆形风管的截面定型尺寸应以直径“Φ”表示，单位应为mm.</li><li>矩形风管（风道）的截面定型尺寸应以“A×B”表示。“A”应为该视图投影面的边长尺寸，“B”应为另一边尺雨。A、B单位均应为mm。</li><li>水平管道的规格宜标注在管道的上方；竖向管道的规格宜标注在管道的左侧。双线表示的管道，其规格可标注在管道轮廓线内。</li></ul><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221200458.webp"></p><h2 id="多条管线的规格标注方法"><a href="#多条管线的规格标注方法" class="headerlink" title="多条管线的规格标注方法"></a>多条管线的规格标注方法</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221200523.webp"></p><h2 id="风口、散流器表示方法"><a href="#风口、散流器表示方法" class="headerlink" title="风口、散流器表示方法"></a>风口、散流器表示方法</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210221200543.webp"></p>]]></content>
      
      
      <categories>
          
          <category> 化工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CAD图例符号 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>丢失MSVCP140文件解决办法</title>
      <link href="/posts/fda3e757/"/>
      <url>/posts/fda3e757/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210216091216.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天，往常一样的打开电脑，打开Plant 3D准备画图，然后，让我心凉的一幕就发生了</p><p>系统疯狂提示：</p><ul><li>缺少MSVCP140.dll系统文件</li><li>缺少VCRUNTIME.dll系统文件</li></ul><p>然后我就发现连带着我的：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210216091544.png"></p><p>全部无法使用，我心态崩了，重装一遍简直要我老命，特别是Aspen和Lumion</p><p>网上百度了各种各样的办法，有比较麻烦的，简单的各种办法，在这里做一下记录，防止下一次再出现这种情况</p><h2 id="最无脑的办法"><a href="#最无脑的办法" class="headerlink" title="最无脑的办法"></a>最无脑的办法</h2><p>腾讯电脑管家、360安全管家这两个工具都自带有DLL文件丢失修复工具，直接一键修复即可</p><h2 id="最精准但麻烦的办法"><a href="#最精准但麻烦的办法" class="headerlink" title="最精准但麻烦的办法"></a>最精准但麻烦的办法</h2><p>去这个网站搜索自己丢失的DLL文件，一个个下载，然后安装就行</p><blockquote><p><a href="https://cn.dll-files.com/">https://cn.dll-files.com/</a></p></blockquote><h2 id="投机取巧的办法"><a href="#投机取巧的办法" class="headerlink" title="投机取巧的办法"></a>投机取巧的办法</h2><p>查阅了一番资料之后发现，MSVCP140是C++的一些动态库(如果有说的不对的地方大佬请指出)，那么我们只需要重新安装一下Visual Studio C++ 的支持库不就可以了，试了一下，果然可以</p><p>在微软官网下载相对应的版本：</p><blockquote><p><a href="https://support.microsoft.com/en-ph/help/2977003/the-latest-supported-visual-c-downloads">https://support.microsoft.com/en-ph/help/2977003/the-latest-supported-visual-c-downloads</a></p></blockquote><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210216092125.png"></p><p>下载好之后直接默认安装，就可以解决这个DLL文件丢失的问题了</p><p>又可以愉快的秃头了~</p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DLL文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github如何更新Fork的仓库</title>
      <link href="/posts/3182b912/"/>
      <url>/posts/3182b912/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210209125255.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>优秀的开源项目往往是很吸引人的，所以通常我们会通过fork的形式保存在自己的仓库中</p><p>但是我们发现fork的项目并不会随着原作者的更新而自动同步</p><p>这个时候就需要我们自己手动更新和同步更改</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>首先，创建一个合并请求：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210209125631.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210209125653.png"></p><p>根据箭头的方向，把要合并的仓库设置为自己的仓库：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210209125827.png"></p><p>这样你会发现两边都是自己的仓库，然后回出现以下提示：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210209125922.png"></p><p>点击上面的编辑状态，然后把箭头的来源修改为要同步的原作者的仓库：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210209130048.png"></p><p>点击创建合并请求，填写合并概要：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210209130208.png"></p><p>点击确认合并：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210209130259.png"></p><p>合并完成：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210209130416.png"></p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>域名更换</title>
      <link href="/posts/880d2085/"/>
      <url>/posts/880d2085/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210209110534.png"></p><p>dabailuobo这个域名有点长，而且在搜索引擎中优势不是很明显，一搜索全是真 - 白萝卜</p><p>又想不出什么好名字，想要注册的名字都被注册了，只好用了自己的名字作为域名</p><p>bhj 是自己名字的缩写，这个域名更有意义吧，更加简短</p><p>如果不出意外，这个域名我会一直用下去</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 域名 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>调节阀常见故障处理50种方法</title>
      <link href="/posts/98142569/"/>
      <url>/posts/98142569/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210209095505.webp"></p><blockquote><p>本文转载自公众号：化工加</p><p>原文链接：<a href="https://mp.weixin.qq.com/s/N7kwm7hgIUzjAv_BJ4cekg">调节阀常见故障处理50种方法</a></p></blockquote><h2 id="一般损耗部位"><a href="#一般损耗部位" class="headerlink" title="一般损耗部位"></a>一般损耗部位</h2><ol><li><p>阀体内壁，对于使用在高压差和腐蚀性介质场合的调节阀，阀体内壁经常 受到介质的冲击和腐蚀，必须重点检查耐压，耐腐的情况。</p></li><li><p>阀座，调节阀在工作时，因介质渗入，固定阀座用的螺纹内表面易受腐蚀 而使阀座松动，检查时应予注意。对高压差下工作的阀，还应检查阀座的密封面是否被冲坏。</p></li><li><p>阀芯，阀芯是调节阀工作时的可动部件，受介质的冲刷，腐蚀最为严重，检修时要认真检查阀芯各部分是否被腐蚀，磨损，特别是高压差的情况下阀芯的磨损更为严重，（因汽蚀现象）应予注意。阀芯损坏严重时应进行更换。另外还应注意阀杆是否也有类似的现象，或与阀芯连接松动等。</p></li><li><p>“O”型密封圈和其他密封垫是否老化，裂损。</p></li><li><p>应注意聚四氟乙烯填料，密封润滑油脂是否老化，配合面是否被损坏，应在必要时更换。</p></li></ol><h2 id="提高寿命办法"><a href="#提高寿命办法" class="headerlink" title="提高寿命办法"></a>提高寿命办法</h2><h3 id="1-大开度工作延长寿命法"><a href="#1-大开度工作延长寿命法" class="headerlink" title="1 大开度工作延长寿命法"></a>1 大开度工作延长寿命法</h3><p>让调节阀一开始就尽量在最大开度上工作，如90％。这样，汽蚀、冲蚀等破坏发生在阀芯头部上。</p><p>随着阀芯破坏，流量增加，相应阀再关一点，这样不断破坏，逐步关闭，使整个阀芯全部充分利用，直到阀芯根部及密封面破坏，不能使用为止。</p><p>同时，大开度工作节流间隙大，冲蚀减弱，这比一开始就让阀在中间开度和小开度上工作提高寿命1～5倍以上。如某化工厂采用此法，阀的使用寿命提高了2倍。</p><h3 id="2-减小s增大工作开度提高寿命法"><a href="#2-减小s增大工作开度提高寿命法" class="headerlink" title="2 减小s增大工作开度提高寿命法"></a>2 减小s增大工作开度提高寿命法</h3><p>减小S，即增大系统除调节阀外的损失，使分配到阀上的压降降低，为保证流量通过调节阀，必然增大调节阀开度，同时，阀上压降减小，使气蚀、冲蚀也减弱。</p><p><strong>具体办法有：</strong></p><ul><li><p>阀后设孔板节流消耗压降；</p></li><li><p>关闭管路上串联的手动阀，至调节阀获得较理想的工作开度为止。</p></li><li><p>对一开始阀选大处于小开度工作时，采用此法十分简单、方便、有效。</p></li></ul><h3 id="3-缩小口径增大工作开度提高寿命法"><a href="#3-缩小口径增大工作开度提高寿命法" class="headerlink" title="3 缩小口径增大工作开度提高寿命法"></a>3 缩小口径增大工作开度提高寿命法</h3><p>通过把阀的口径减小来增大工作开度。</p><p><strong>具体办法有：</strong></p><ul><li><p>换一台小一档口径的阀，如DN32换成DN25；</p></li><li><p>阀体不变更，更换小阀座直径的阀芯阀座。</p></li></ul><p>例如某化工厂大修时将节流件dgl0更换为dg8，寿命提高了1倍。</p><h3 id="4-转移破坏位置提高寿命法"><a href="#4-转移破坏位置提高寿命法" class="headerlink" title="4 转移破坏位置提高寿命法"></a>4 转移破坏位置提高寿命法</h3><p>把破坏严重的地方转移到次要位置，以保护阀芯阀座的密封面和节流面。</p><h3 id="5-增长节流通道提高寿命法"><a href="#5-增长节流通道提高寿命法" class="headerlink" title="5 增长节流通道提高寿命法"></a>5 增长节流通道提高寿命法</h3><p>增长节流通道最简单的就是加厚阀座，使阀座孔增长，形成更长的节流通道。</p><p>一方面可使流闭型节流后的突然扩大延后，起转移破坏位置，使之远离密封面的作用；另一方面，又增加了节流阻力，减小了压力的恢复程度，使汽蚀减弱。</p><p>有的把阀座孔内设计成台阶式、波浪式，就是为了增加阻力，削弱汽蚀。这种方法在引进装置中的高压阀上和将老的阀加以改进时经常使用，也十分有效。</p><h3 id="6-改变流向提高寿命法"><a href="#6-改变流向提高寿命法" class="headerlink" title="6 改变流向提高寿命法"></a>6 改变流向提高寿命法</h3><p>流开型向着开方向流，汽蚀、冲蚀主要作用在密封面上，使阀芯根部和阀芯阀座密封面很快遭受破坏；流闭型向着闭方向流，汽蚀、冲蚀作用在节流之后，阀座密封面以下，保护了密封面和阀芯根部，延长了寿命。</p><p>故作流开型使用的阀，当延长寿命的问题较为突出时，只需改变流向即可延长寿命1～2倍。</p><h3 id="7-改用特殊材料提高寿命法"><a href="#7-改用特殊材料提高寿命法" class="headerlink" title="7 改用特殊材料提高寿命法"></a>7 改用特殊材料提高寿命法</h3><p>为抗汽蚀（破坏形状如蜂窝状小点）和冲刷（流线型的小沟），可改用耐汽蚀和冲刷的特殊材料来制造节流件。这种特殊材料有6YC－1、A4钢、司太莱、硬质合金等。</p><p>为抗腐蚀，可改用更耐腐蚀，并有一定机械性能、物理性能的材料。这种材料分为非金属材料（如橡胶、四氟、陶瓷等）和金属材料（如蒙乃尔、哈氏合金等）两类。</p><h3 id="8-改变阀结构提高寿命法"><a href="#8-改变阀结构提高寿命法" class="headerlink" title="8 改变阀结构提高寿命法"></a>8 改变阀结构提高寿命法</h3><p>采取改变阀结构或选用具有更长寿命的阀的办法来达到提高寿命的目的，如选用多级式阀，反汽蚀阀、耐腐蚀阀等。</p><h3 id="9-减小行程以提高膜片寿命法"><a href="#9-减小行程以提高膜片寿命法" class="headerlink" title="9 减小行程以提高膜片寿命法"></a>9 减小行程以提高膜片寿命法</h3><p>对两位型调节阀，当动作频率十分频繁时，膜片会很快在作上下折叠中破裂，破坏位置常在托盘圆周。</p><p>提高膜片寿命的最简单、最有效的办法是减小行程。减小后的行程值就为1&#x2F;4dg。如dgl25的阀，其标准行程为60mm，可减小到30mm，缩短了50％。</p><p><strong>此外，还可以考虑如下因素：</strong></p><ul><li><p>在满足打开与关闭的条件下尽量减小膜室压力；</p></li><li><p>提高托盘与膜片贴合处光洁度。</p></li></ul><h2 id="调节阀经常卡住或堵塞的防堵-卡-方法"><a href="#调节阀经常卡住或堵塞的防堵-卡-方法" class="headerlink" title="调节阀经常卡住或堵塞的防堵(卡)方法"></a>调节阀经常卡住或堵塞的防堵(卡)方法</h2><h3 id="1-清洗法"><a href="#1-清洗法" class="headerlink" title="1 清洗法"></a>1 清洗法</h3><p>管路中的焊渣、铁锈、渣子等在节流口、导向部位、下阀盖平衡孔内造成堵塞或卡住使阀芯曲面、导向面产生拉伤和划痕、密封面上产生压痕等。这经常发生于新投运系统和大修后投运初期。这是最常见的故障。</p><p>遇此情况，必须卸开进行清洗，除掉渣物，如密封面受到损伤还应研磨；同时将底塞打开，以冲掉从平衡孔掉入下阀盖内的渣物，并对管路进行冲洗。投运前，让调节阀全开，介质流动一段时间后再纳入正常运行。</p><h3 id="2-外接冲刷法"><a href="#2-外接冲刷法" class="headerlink" title="2 外接冲刷法"></a>2 外接冲刷法</h3><p>对一些易沉淀、含有固体颗粒的介质采用普通阀调节时，经常在节流口、导向处堵塞，可在下阀盖底塞处外接冲刷气体和蒸汽。</p><p>当阀产生堵塞或卡住时，打开外接的气体或蒸气阀门，即可在不动调节阀的情况下完成冲洗工作，使阀正常运行。</p><h3 id="3-安装管道过滤器法"><a href="#3-安装管道过滤器法" class="headerlink" title="3 安装管道过滤器法"></a>3 安装管道过滤器法</h3><p>对小口径的调节阀，尤其是超小流量调节阀，其节流间隙特小，介质中不能有一点点渣物。</p><p>遇此情况堵塞，最好在阀前管道上安装一个过滤器，以保证介质顺利通过。</p><p>带定位器使用的调节阀，定位器工作不正常，其气路节流口堵塞是最常见的故障。</p><p>因此，带定位器工作时，必须处理好气源，通常采用的办法是在定位器前气源管线上安装空气过滤减压阀。</p><h3 id="4-增大节流间隙法"><a href="#4-增大节流间隙法" class="headerlink" title="4 增大节流间隙法"></a>4 增大节流间隙法</h3><p>如介质中的固体颗粒或管道中被冲刷掉的焊渣和锈物等因过不了节流口造成堵塞、卡住等故障，可改用节流间隙大的节流件—节流面积为开窗、开口类的阀芯、套筒，因其节流面积集中而不是圆周分布的，故障就能很容易地被排除。</p><p>如果是单、双座阀就可将柱塞形阀芯改为“V”形口的阀芯，或改成套筒阀等。</p><p>例如某化工厂有一台双座阀经常卡住，推荐改用套筒阀后，问题马上得到解决。</p><h3 id="5-介质冲刷法"><a href="#5-介质冲刷法" class="headerlink" title="5 介质冲刷法"></a>5 介质冲刷法</h3><p>利用介质自身的冲刷能量，冲刷和带走易沉淀、易堵塞的东西，从而提高阀的防堵功能。</p><p><strong>常见的方法有：</strong></p><ul><li><p>改作流闭型使用；</p></li><li><p>采用流线型阀体；</p></li><li><p>将节流口置于冲刷最厉害处，采用此法要注意提高节流件材料的耐冲蚀能力。</p></li></ul><h3 id="6-直通改为角形法"><a href="#6-直通改为角形法" class="headerlink" title="6 直通改为角形法"></a>6 直通改为角形法</h3><p>直通为倒S流动，流路复杂，上、下容腔死区多，为介质的沉淀提供了地方。角形连接，介质犹如流过90℃弯头，冲刷性能好，死区小，易设计成流线形。因此，使用直通的调节阀产生轻微堵塞时可改成角形阀使用。</p><h2 id="调节阀外泄的解决方法"><a href="#调节阀外泄的解决方法" class="headerlink" title="调节阀外泄的解决方法"></a>调节阀外泄的解决方法</h2><h3 id="1-增加密封油脂法"><a href="#1-增加密封油脂法" class="headerlink" title="1 增加密封油脂法"></a>1 增加密封油脂法</h3><p>对未使用密封油脂的阀，可考虑增加密封油脂来提高阀杆密封性能。</p><h3 id="2-增加填料法"><a href="#2-增加填料法" class="headerlink" title="2 增加填料法"></a>2 增加填料法</h3><p>为提高填料对阀杆的密封性能，可采用增加填料的方法。通常是采用双层、多层混合填料形式，单纯增加数量，如将3片增到5片，效果并不明显。</p><h3 id="3-更换石墨填料法"><a href="#3-更换石墨填料法" class="headerlink" title="3 更换石墨填料法"></a>3 更换石墨填料法</h3><p>大量使用的四氟填料，因其工作温度在－20～+200℃范围内，当温度在上、下限，变化较大时，其密封性便明显下降，老化快，寿命短。</p><p>柔性石墨填料可克服这些缺点且使用寿命长。因而有的工厂全部将四氟填料改为石墨填料，甚至新购回的调节阀也将其中的四氟填料换成石墨填料后使用。但使用石墨填料的回差大，初时有的还产生爬行现象，对此必须有所考虑。</p><h3 id="4-改变流向，置P2在阀杆端法"><a href="#4-改变流向，置P2在阀杆端法" class="headerlink" title="4 改变流向，置P2在阀杆端法"></a>4 改变流向，置P2在阀杆端法</h3><p>当△P较大，P1又较大时，密封P1显然比密封P2困难。因此，可采取改变流向的方法，将P1在阀杆端改为P2在阀杆端，这对压力高、压差大的阀是较有效的。如波纹管阀就通常应考虑密封P2。</p><h3 id="5-采用透镜垫密封法"><a href="#5-采用透镜垫密封法" class="headerlink" title="5 采用透镜垫密封法"></a>5 采用透镜垫密封法</h3><p>对于上、下盖的密封，阀座与上、下阀体的密封。若为平面密封，在高温高压下，密封性差，引起外泄，可以改用透镜垫密封，能得到满意的效果。</p><h3 id="6-更换密封垫片"><a href="#6-更换密封垫片" class="headerlink" title="6 更换密封垫片"></a>6 更换密封垫片</h3><p>至今，大部分密封垫片仍采用石棉板，在高温下，密封性能较差，寿命也短，引起外泄。遇到这种情况，可改用缠绕垫片，“O”形环等，现在许多厂已采用。</p><h3 id="7-对称拧螺栓，采用薄垫圈密封方法"><a href="#7-对称拧螺栓，采用薄垫圈密封方法" class="headerlink" title="7 对称拧螺栓，采用薄垫圈密封方法"></a>7 对称拧螺栓，采用薄垫圈密封方法</h3><p>在“O”形圈密封的调节阀结构中，采用有较大变形的厚垫片（如缠绕片）时，若压紧不对称，受力不对称，易使密封破损、倾斜并产生变形，严重影响密封性能。</p><p>因此，在对这类阀维修、组装中，必须对称地拧紧压紧螺栓（注意不能一次拧紧）。厚密封垫如能改成薄的密封垫就更好，这样易于减小倾斜度，保证密封。</p><h3 id="8-增大密封面宽度，制止平板阀芯关闭时跳动并减少其泄漏量的方法"><a href="#8-增大密封面宽度，制止平板阀芯关闭时跳动并减少其泄漏量的方法" class="headerlink" title="8 增大密封面宽度，制止平板阀芯关闭时跳动并减少其泄漏量的方法"></a>8 增大密封面宽度，制止平板阀芯关闭时跳动并减少其泄漏量的方法</h3><p>平板型阀芯（如两位型阀、套筒阀的阀塞），在阀座内无引导和导向曲面，由于阀在工作的时候，阀芯受到侧向力，从流进方靠向流出方，阀芯配合间隙越大，这种单边现象越严重，加之变形，不同心，或阀芯密封面倒角小（一般为30°倒角来引导），因而接近关闭时，产生阀芯密封面倒角端面置于阀座密封面上，造成关闭时阀芯跳动，甚至根本关不到位的情况，使阀泄漏量大大增加。</p><p>最简单、最有效的解决方法，就是增大阀芯密封面尺寸，使阀芯端面的最小直径比阀座直径小1～5mm，有足够的引导作用，以保证阀芯导进阀座，保持良好的密封面接触。</p><h2 id="调节阀振动的解决方法"><a href="#调节阀振动的解决方法" class="headerlink" title="调节阀振动的解决方法"></a>调节阀振动的解决方法</h2><h3 id="1-增加刚度法"><a href="#1-增加刚度法" class="headerlink" title="1 增加刚度法"></a>1 增加刚度法</h3><p>对振荡和轻微振动，可增大刚度来消除或减弱，如选用大刚度的弹簧，改用活塞执行机构等办法都是可行的。</p><h3 id="2-增加阻尼法"><a href="#2-增加阻尼法" class="headerlink" title="2 增加阻尼法"></a>2 增加阻尼法</h3><p>增加阻尼即增加对振动的摩擦，如套筒阀的阀塞可采用“O”形圈密封，采用具有较大摩擦力的石墨填料等，这对消除或减弱轻微的振动还是有一定作用的。</p><h3 id="3-增加导向尺寸，减小配合间隙法"><a href="#3-增加导向尺寸，减小配合间隙法" class="headerlink" title="3 增加导向尺寸，减小配合间隙法"></a>3 增加导向尺寸，减小配合间隙法</h3><p>轴塞形阀一般导向尺寸都较小，所有阀配合间隙一般都较大，有0.4～1mm，这对产生机械振动是有帮助。因此，在发生轻微的机械振动时，可通过增大导向尺寸，减小配合间隙来削弱振动。</p><h3 id="4-改变节流件形状，消除共振法"><a href="#4-改变节流件形状，消除共振法" class="headerlink" title="4 改变节流件形状，消除共振法"></a>4 改变节流件形状，消除共振法</h3><p>因调节阀的所谓振源发生在高速流动、压力急剧变化的节流口，改变节流件的形状即可改变振源频率，在共振不强烈时比较容易解决。</p><p>具体办法是将在振动开度范围内阀芯曲面车削0.5～1.0mm。如某厂家属区附近安装了一台自力式压力调节阀，因共振产生啸叫影响职工休息，将阀芯曲面车掉0.5mm后，共振啸叫声消失。</p><h3 id="5-更换节流件消除共振法"><a href="#5-更换节流件消除共振法" class="headerlink" title="5 更换节流件消除共振法"></a>5 更换节流件消除共振法</h3><p><strong>其方法有：</strong></p><ul><li><p>更换流量特性，对数改线性，线性改对数；</p></li><li><p>更换阀芯形式。如将轴塞形改为“V”形槽阀芯，将双座阀轴塞型改成套筒型；</p></li><li><p>将开窗口的套筒改为打小孔的套筒等。</p></li></ul><p>如某氮肥厂一台DN25双座阀，阀杆与阀芯连接处经常振断，我们确认为共振后，将直线特性阀芯改为对数性阀芯，问题得到解决。又如某航空学院实验室用一台DN200套筒阀，阀塞产生强烈旋转无法投用，将开窗口的套筒改为打小孔的套筒后，旋转立即消失。</p><h3 id="6-更换调节阀类型以消除共振"><a href="#6-更换调节阀类型以消除共振" class="headerlink" title="6 更换调节阀类型以消除共振"></a>6 更换调节阀类型以消除共振</h3><p>不同结构形式的调节阀，其固有频率自然不同，更换调节阀类型是从根本上消除共振的最有效的方法。</p><p>一台阀在使用中共振十分厉害———强烈地振动（严重时可将阀破坏），强烈地旋转（甚至阀杆被振断、扭断），而且产生强烈的噪音（高达100多分贝）的阀，只要把它更换成一台结构差异较大的阀，立刻见效，强烈共振奇迹般地消失。</p><p>如某维尼纶厂新扩建工程选用一台DN200套筒阀，上述三种现象都存在，DN300的管道随之跳动，阀塞旋转，噪音100多分贝，共振开度20～70％，考虑共振开度大，改用一台双座阀后，共振消失，投运正常。</p><h3 id="7-减小汽蚀振动法"><a href="#7-减小汽蚀振动法" class="headerlink" title="7 减小汽蚀振动法"></a>7 减小汽蚀振动法</h3><p>对因空化汽泡破裂而产生的汽蚀振动，自然应在减小空化上想办法。</p><p>让气泡破裂产生的冲击能量不作用在固体表面上，特别是阀芯上，而是让液体吸收。套筒阀就具有这个特点，因此可以将轴塞型阀芯改成套筒型。</p><p>采取减小空化的一切办法，如增加节流阻力，增大缩流口压力，分级或串联减压等。</p><h3 id="8-避开振源波击法"><a href="#8-避开振源波击法" class="headerlink" title="8 避开振源波击法"></a>8 避开振源波击法</h3><p>外来振源波击引起阀振动，这显然是调节阀正常工作时所应避开的，如果产生这种振动，应当采取相应的措施。</p><h2 id="调节阀噪音大的解决方法"><a href="#调节阀噪音大的解决方法" class="headerlink" title="调节阀噪音大的解决方法"></a>调节阀噪音大的解决方法</h2><h3 id="1-消除共振噪音法"><a href="#1-消除共振噪音法" class="headerlink" title="1 消除共振噪音法"></a>1 消除共振噪音法</h3><p>只有调节阀共振时，才有能量叠加而产生100多分贝的强烈噪音。有的表现为振动强烈，噪音不大，有的振动弱，而噪音却非常大；有的振动和噪音都较大。</p><p>这种噪音产生一种单音调的声音，其频率一般为3000～7000赫兹。显然，消除共振，噪音自然随之消失。</p><h3 id="2-消除汽蚀噪音法"><a href="#2-消除汽蚀噪音法" class="headerlink" title="2 消除汽蚀噪音法"></a>2 消除汽蚀噪音法</h3><p>汽蚀是主要的流体动力噪音源。空化时，汽泡破裂产生高速冲击，使其局部产生强烈湍流，产生汽蚀噪音。</p><p>这种噪音具有较宽的频率范围，产生格格声，与流体中含有砂石发出的声音相似。消除和减小汽蚀是消除和减小噪音的有效办法。</p><h3 id="3-使用厚壁管线法"><a href="#3-使用厚壁管线法" class="headerlink" title="3 使用厚壁管线法"></a>3 使用厚壁管线法</h3><p>采用厚壁管是声路处理办法之一。使用薄壁可使噪音增加5分贝，采用厚壁管可使噪音降低0～20分贝。同一管径壁越厚，同一壁厚管径越大，降低噪音效果越好。</p><p>如DN200管道，其壁厚分别为6.25、6.75、8、10、12.5、15、18、20、21.5mm时，可降低噪音分别为-3.5、-2（即增加）、0、3、6、8、11、13、14.5分贝。当然，壁越厚所付出的成本就越高。</p><h3 id="4-采用吸音材料法"><a href="#4-采用吸音材料法" class="headerlink" title="4 采用吸音材料法"></a>4 采用吸音材料法</h3><p>这也是一种较常见、最有效的声路处理办法。可用吸音材料包住噪音源和阀后管线。</p><p>必须指出，因噪音会经由流体流动而长距离传播，故吸音材料包到哪里，采用厚壁管至哪里，消除噪音的有效性就终止到哪里。</p><p>这种办法适用于噪音不很高、管线不很长的情况，因为这是一种较费钱的办法。</p><h3 id="5-串联消音器法"><a href="#5-串联消音器法" class="headerlink" title="5 串联消音器法"></a>5 串联消音器法</h3><p>本法适用于作为空气动力噪音的消音，它能够有效地消除流体内部的噪音和抑制传送到固体边界层的噪音级。对质量流量高或阀前后压降比高的地方，本法最有效而又经济。</p><p>使用吸收型串联消音器可以大幅度降低噪音。但是，从经济上考虑，一般限于衰减到约25分贝。</p><h3 id="6-隔音箱法"><a href="#6-隔音箱法" class="headerlink" title="6 隔音箱法"></a>6 隔音箱法</h3><p>使用隔音箱、房子和建筑物，把噪音源隔离在里面，使外部环境的噪音减小到人们可以接受的范围内。</p><h3 id="7-串联节流法"><a href="#7-串联节流法" class="headerlink" title="7 串联节流法"></a>7 串联节流法</h3><p>在调节阀的压力比高（△P&#x2F;P1≥0.8）的场合，采用串联节流法，就是把总的压降分散在调节阀和阀后的固定节流元件上。如用扩散器、多孔限流板，这是减少噪音办法中最有效的。</p><p>为了得到最佳的扩散器效率，必须根据每件的安装情况来设计扩散器（实体的形状、尺寸），使阀门产生的噪音级和扩散器产生的噪音级相同。</p><h3 id="8-选用低噪音阀"><a href="#8-选用低噪音阀" class="headerlink" title="8 选用低噪音阀"></a>8 选用低噪音阀</h3><p>低噪音阀根据流体通过阀芯、阀座的曲折流路（多孔道、多槽道）的逐步减速，以避免在流路里的任意一点产生超音速。有多种形式，多种结构的低噪音阀（有为专门系统设计的）供使用时选用。</p><p>当噪音不是很大时，选用低噪音套筒阀，可降低噪音10～20分贝，这是最经济的低噪音阀。</p><h2 id="调节阀稳定性较差时的解决办法"><a href="#调节阀稳定性较差时的解决办法" class="headerlink" title="调节阀稳定性较差时的解决办法"></a>调节阀稳定性较差时的解决办法</h2><h3 id="1-改变不平衡力作用方向法"><a href="#1-改变不平衡力作用方向法" class="headerlink" title="1 改变不平衡力作用方向法"></a>1 改变不平衡力作用方向法</h3><p>在稳定性分析中，已知不平衡力作用同与阀关方向相同时，即对阀产生关闭趋势时，阀稳定性差。</p><p>对阀工作在上述不平衡力条件下时，选用改变其作用方向的方法，通常是把流闭型改为流开型，一般来说都能方便地解决阀的稳定性问题。</p><h3 id="2-避免阀自身不稳定区工作法"><a href="#2-避免阀自身不稳定区工作法" class="headerlink" title="2 避免阀自身不稳定区工作法"></a>2 避免阀自身不稳定区工作法</h3><p>有的阀受其自身结构的限制，在某些开度上工作时稳定性较差。</p><p>双座阀，开度在10％以内，因上球处流开，下球处流闭，带来不稳定的问题；不平衡力变化斜率产生交变的附近，其稳定性较差。如蝶阀，交变点在70度左右；双座阀在80～90％开度上。遇此类阀时，在不稳定区工作必然稳定性差，避免不稳定区工作即可。</p><h3 id="3-更换稳定性好的阀"><a href="#3-更换稳定性好的阀" class="headerlink" title="3 更换稳定性好的阀"></a>3 更换稳定性好的阀</h3><p>稳定性好的阀其不平衡力变化较小，导向好。常用的球型阀中，套筒阀就有这一大特点。</p><p>当单、双座阀稳定性较差时，更换成套筒阀稳定性一定会得到提高。</p><h3 id="4-增大弹簧刚度法"><a href="#4-增大弹簧刚度法" class="headerlink" title="4 增大弹簧刚度法"></a>4 增大弹簧刚度法</h3><p>执行机构抵抗负荷变化对行程影响的能力取决于弹簧刚度，刚度越大，对行程影响越小，阀稳定性越好。</p><p>增大弹簧刚度是提高阀稳定性的常见的简单方法，如将20～100KPa弹簧范围的弹簧改成60～180KPa的大刚度弹簧，采用此法主要是带了定位器的阀，否则，使用的阀要另配上定位器。</p><h3 id="5-降低响应速度法"><a href="#5-降低响应速度法" class="headerlink" title="5 降低响应速度法"></a>5 降低响应速度法</h3><p>当系统要求调节阀响应或调节速度不应太快时，阀的响应和调节速度却又较快，如流量需要微调，而调节阀的流量调节变化却又很大，或者系统本身已是快速响应系统而调节阀却又带定位器来加快阀的动作，这都是不利的。</p><p>这将会产生超调，产生振动等。对此，应降低响应速度。</p><p><strong>办法有：</strong></p><ul><li><p>将直线特性改为对数特性；</p></li><li><p>带定位器的可改为转换器、继动器。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 化工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 调节阀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“这个视频，仅对喜欢过的那个人可见”</title>
      <link href="/posts/f9485de8/"/>
      <url>/posts/f9485de8/</url>
      
        <content type="html"><![CDATA[<h2 id="我们的故事，其实已经结束了吧，我可以不再对你抱有任何的幻想了吧"><a href="#我们的故事，其实已经结束了吧，我可以不再对你抱有任何的幻想了吧" class="headerlink" title="我们的故事，其实已经结束了吧，我可以不再对你抱有任何的幻想了吧"></a>我们的故事，其实已经结束了吧，我可以不再对你抱有任何的幻想了吧</h2><h3 id="原版："><a href="#原版：" class="headerlink" title="原版："></a>原版：</h3><iframe src="//player.bilibili.com/player.html?aid=798309033&bvid=BV13y4y1U7Ls&cid=273051861&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%" height="500px"> </iframe><h3 id="日语改版："><a href="#日语改版：" class="headerlink" title="日语改版："></a>日语改版：</h3><iframe src="//player.bilibili.com/player.html?aid=886344032&bvid=BV11K4y1H7oV&cid=285856246&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%" height="500px"> </iframe>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爱情 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>化工设计大赛分工细则</title>
      <link href="/posts/99cda7eb/"/>
      <url>/posts/99cda7eb/</url>
      
        <content type="html"><![CDATA[<blockquote><p>一些前辈经验可以看这篇文章：<a href="https://dabailuobo.com/ab9dea73/">化工设计竞赛作品设计工作流程指南</a></p></blockquote><h2 id="化工设计大赛设计流程简介"><a href="#化工设计大赛设计流程简介" class="headerlink" title="化工设计大赛设计流程简介"></a>化工设计大赛设计流程简介</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210104231318.jpg"></p><h2 id="分工细则和相关软件"><a href="#分工细则和相关软件" class="headerlink" title="分工细则和相关软件"></a>分工细则和相关软件</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210104231353.jpg"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20210104231415.jpg"></p><blockquote><p>内容来自微信公众号：化工加，如有侵权请联系删除</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 化工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 全国化工设计大赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不要被乌鸦操纵了灵魂</title>
      <link href="/posts/4b554407/"/>
      <url>/posts/4b554407/</url>
      
        <content type="html"><![CDATA[<h2 id="尽量不要做乌鸦中的一个，请友善发言，谢谢"><a href="#尽量不要做乌鸦中的一个，请友善发言，谢谢" class="headerlink" title="尽量不要做乌鸦中的一个，请友善发言，谢谢"></a>尽量不要做乌鸦中的一个，请友善发言，谢谢</h2><iframe src="//player.bilibili.com/player.html?aid=585787515&bvid=BV1bz4y1r7Ug&cid=271782979&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%" height="500px"> </iframe>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络暴力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大白萝卜弄丢了小萝卜</title>
      <link href="/posts/3b5473c9/"/>
      <url>/posts/3b5473c9/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201202105503.png"></p><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>之前忘了在哪里看到过这样一句话：</p><blockquote><p>想要真的忘记一段感情，一个人，就把她写进小说里</p></blockquote><p>其实并不一定是一本小说，可能这句话作者的意思并不是这样，我自己这样猜测</p><p>是让自己在写小说的过程中去回忆自己的过去，就像一位学姐说的那样：</p><blockquote><p>“怎么才算真的走出来？”</p><p>“可能你开始去想这段感情你哪些方面没有做好，哪些方面做好了的时候吧。”</p></blockquote><p>去真的好好回忆自己在这段感情中的得与失，两个人分开不可能只有一个人的错，或许会有方方面面的原因，或许在很早的一次吵架中就埋下了种子</p><p>让自己去探寻这颗种子的生长过程或许才能真的把一些事情看开吧</p><h2 id="相识"><a href="#相识" class="headerlink" title="相识"></a>相识</h2><p>高三，在我的眼里，是非常值得怀念的一段时光吧，</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 走过的路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>下半生最想去的地方</title>
      <link href="/posts/efb648ca/"/>
      <url>/posts/efb648ca/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201201182159.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个世界上有那么多美好的地方我还没去过，在这里做一下许愿吧~</p><h2 id="西乡县"><a href="#西乡县" class="headerlink" title="西乡县"></a>西乡县</h2><p>感谢一个超级好看的小姐姐的推荐，是她的家乡哦</p><p>西乡县位于陕西南部，汉中东部，东邻石泉、汉阴，南接镇巴和四川通江，北连洋县，西与城固、南郑接壤。西乡属北亚热带湿润季风气候区，全年气候温和，属北亚热带半湿润季风区。南北宽64.5公里，东西长94.5公里，总面积3240平方公里，其中山区占64.79%，丘陵占28.35%，平川占6.86%。阳安铁路横贯东、西，长约70公里，210、316国道纵横穿越县境。西乡境内的樱桃沟是中国第二大樱桃基地，自古有“秦岭南麓小江南”美誉，被联合国科教文卫组织官员誉为”最适合人类居住的地方之一”。</p><h2 id="厦门大学"><a href="#厦门大学" class="headerlink" title="厦门大学"></a>厦门大学</h2><p>由于最近在参加全国化工设计竞赛，总决赛的地址在厦门大学，听指导老师说厦门大学是国内最美的大学，一定要去看一下，听说平时想去的话还要预约呢</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 美好的愿望 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Aspen练习之苯和丙烯合成异丙苯并计算产物摩尔流量</title>
      <link href="/posts/9bd70509/"/>
      <url>/posts/9bd70509/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201127151215.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>题目如下：</p><p>含苯(BENZENE，C6H6)和丙烯(PROPENE，C3H6)的原料物(PEED)进入反应器(REACTOR)，经反应生成异丙苯(PRO-BEN，C9H12)，反应后的混合物经冷凝器(COOLER)冷凝，再进入分离器(SEP)，分离器(SEP)顶部物流(PECYCLE)循环回反应器(PEACTOR)，分离器(SEP)底部物流作为产品(PRODUCT)流出，求产品(PRODUCT)中异丙苯的摩尔流量。(物性方法选择RK-SOAVE)</p><h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><p>原料物流FEED温度105℃，压力0.25MPa，苯和丙烯的摩尔流量均为18kmol&#x2F;h。反应器REACTOR绝热操作，压力0.1MPa，反应方程式为：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201127154633.png"></p><h2 id="模拟"><a href="#模拟" class="headerlink" title="模拟"></a>模拟</h2><h3 id="1-新建空白模拟"><a href="#1-新建空白模拟" class="headerlink" title="1 新建空白模拟"></a>1 新建空白模拟</h3><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201127214151.png"></p><p>这里有常用的各种化工工艺模拟模板，可直接创建，本次例子使用空白模拟</p><h3 id="2-保存"><a href="#2-保存" class="headerlink" title="2 保存"></a>2 保存</h3><p>快捷键 <code>Ctrl + S</code> 保存</p><p>选择如下格式：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201127214524.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201127214631.png"></p><p>选择<strong>否</strong></p><h3 id="3-Aspen文件格式讲解"><a href="#3-Aspen文件格式讲解" class="headerlink" title="3 Aspen文件格式讲解"></a>3 Aspen文件格式讲解</h3><p>aspen有三种保存格式：</p><p><code>*.apw</code> (Aspen Plus Document) 格式是一种文档文件，采用二进制存储，包含所有输入规定、模拟结果和中间收敛信息</p><p><code>*.bkp</code> (Aspen Plus Backup) 格式是aspen plus运行过程的备份文件，采用ASCII格式存储，包含模拟的所有输入规定和结果信息，但不包含中间的收敛数据，这个格式是我们常用的且主要的保存格式</p><p><code>*.apwz</code> (Compound File) 是综合文件，采用二进制存储，包含模拟过程中的所有信息</p><h3 id="4-输入组分"><a href="#4-输入组分" class="headerlink" title="4 输入组分"></a>4 输入组分</h3><p>创建好空白模拟之后，系统默认进入组分输入界面，如下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201127215745.png"></p><p>在Component ID栏输入丙烯的名称：PROPENE，然后回车，由于丙烯是系统数据库中可以识别的组分ID，所以会自动的将类型Type、组分名称Component Name和分子式Formula栏填入</p><p>同样，输入苯的名称：BENZENE，回车，如下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201127220337.png"></p><p>第三行的ID输入异丙苯的标识：PRO-BEN，回车，但是异丙苯不会被系统识别，所以需要我们查询数据库进行输入</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201127220502.png"></p><p>图中的空白处输入异丙苯的CAS：98-82-8，点击立即查找，点击添加，点击关闭</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201127220703.png"></p><p>组分输入完毕：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201127220737.png"></p><blockquote><p><strong>小知识：</strong></p><p>Aspen Plus提供的组分类型包括一下几种：</p><ul><li>常规组分Conventional：单一特定流体（气体或者液体），可能参与气液相平衡的典型组分</li><li>固体组分Soild：单一特定固体，通过固体模型计算性质的常规固体</li><li>非常规组分Nonconventional：不能以分子组分表示的非常规固体，比如某些煤或者木纤维，是用组分属性表征并且不参与化学平衡和相平衡</li><li>虚拟组分Pseudocomponent：油品评价数据Assay和石油馏分混合数据Blend，表示石油馏分的的组分，根据沸点、分子量、密度和其他性质表征</li><li>熔融液体Hypothetical Liquid：性质需要根据固体性质推测的液体组分模型，主要应用与冶金，比如模拟钢水中的碳</li><li>聚合物Polymer、低聚物Oligomer和链段Segment：在聚合物模型中使用的组分</li></ul></blockquote><h3 id="5-选择物性方法及查看二元交互作用参数"><a href="#5-选择物性方法及查看二元交互作用参数" class="headerlink" title="5 选择物性方法及查看二元交互作用参数"></a>5 选择物性方法及查看二元交互作用参数</h3><p>组分输入完毕之后点击NEXT或者快捷键 <code>F4</code> 进入全局物性方法选择：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201127230229.png"></p><p>方法过滤器选择ALL选项，基本方法选择RK-SOAVE</p><blockquote><p>Aspen物性系统为活度系数模型，WILSON、NRTL和UNIQUAC，部分状态方程模型及亨利定律提供了内置的二元参数，在完成组分和物性方法的选择之后，Aspen自动使用这些内置参数</p></blockquote><h2 id="模拟环境"><a href="#模拟环境" class="headerlink" title="模拟环境"></a>模拟环境</h2><p>组分和物性方法确定之后，就可以开始建立流程图及输入模拟数据</p><h3 id="1-设置全局规定"><a href="#1-设置全局规定" class="headerlink" title="1 设置全局规定"></a>1 设置全局规定</h3><p>物性选择完毕之后，点击NEXT</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201128122559.png"></p><p>选择模拟环境，确定</p><p>进入模拟环境：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201128145641.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201128150031.png"></p><p>全局规定设置完毕之后，可以i开始建立流程图</p><h3 id="2-建立流程图"><a href="#2-建立流程图" class="headerlink" title="2 建立流程图"></a>2 建立流程图</h3><p>添加模块：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201128150337.png"></p><p>这是反应器模块B1</p><blockquote><p>如果模块选项卡没有显示在主页面上，可以使用快捷键 <code>F10</code> 打开，或者在视图区找到模型选项板即可</p></blockquote><p>添加物流和连接模块：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201128151013.png"></p><p>当选中物料流时，反应器模块会出现相应的红色标识，表示为必须要添加的物流，添加完毕之后点击鼠标右键即可退出物流添加模式</p><blockquote><p>若需要对单元模块或者物流进行更改，删除，更换图标，输入数据输出结果等操作时，可以用鼠标左键选中模块或者物流，然后点击右键在弹出的选项卡中进行对应的选项操作，也可以使用快捷键 <code>Ctrl+M</code> </p></blockquote><p>添加冷凝器模块B2：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201128151853.png"></p><p>更改物料连接：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201128152046.png"></p><p>物流S2是反应器的输出物流，同时也是冷凝器的输入物流，所以选中物流S2，鼠标右键打开选项卡，选择重新连接目标，这个时候冷凝器会自动标红所必须输入的物流端口，鼠标左键点击输入即可</p><p>添加分离器模块：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201128152518.png"></p><p>添加冷凝器输出物流S3，分离器顶部循环物料S4，分离器底部输出物流S5：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201128153126.png"></p><p>如果物流线不是直线，可以选中物流线，右键菜单点击对齐模块即可</p><p>对于流程中的物流和模块，通常取有实际意义的名称，如下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201128153710.png"></p><p>流程建立完毕</p><p>每个模块，物流都会有一个特定的ID，点击左侧导航面板的文件夹时，都会有一个相应的对象管理器，例如：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201128154036.png"></p><p>可以对每个对象进行一些操作</p><h3 id="3-输入物流数据"><a href="#3-输入物流数据" class="headerlink" title="3 输入物流数据"></a>3 输入物流数据</h3><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201128154442.png"></p><p>输入进料物流FEED的相关数据，温度105℃，压力0.25MPa，苯和丙烯的流量均为18kmol&#x2F;h，注意单位</p><blockquote><p>可以看到，在Aspen中当鼠标悬停在某些选项上的时候会自动弹出相关提示</p></blockquote><h3 id="4-输入模块数据"><a href="#4-输入模块数据" class="headerlink" title="4 输入模块数据"></a>4 输入模块数据</h3><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201128155105.png"></p><p>输入冷凝器出口温度54℃，冷凝器压降0.7kPa，注意单位</p><blockquote><p>若输入的压力大于0，则表示模块的操作压力，若小于等于0，则表示模块的压降</p></blockquote><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201128155525.png"></p><p>输入PEACTOR模块数据，压力0.1MPa，热负荷0kW（绝热），注意单位</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201128160238.png"></p><p>输入化学反应，选择反应物，产物，及化学计量系数，并指定丙烯的转化率为0.9，点击下一步</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201128160456.png"></p><p>输入SEP模块数据， 压降和热负荷均为0</p><p>当面板左下角显示所需输入完整时表示模拟所需要的数据输入完毕，可以开始模拟：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201128160701.png"></p><h2 id="运行模拟"><a href="#运行模拟" class="headerlink" title="运行模拟"></a>运行模拟</h2><p>点击NEXT或者RUN进行模拟：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201128160856.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201128161027.png"></p><p>控制面板显示模拟过程中没有发生错误，没有警告(快捷键F7打开控制面板)</p><p>YES!</p><p>流程成功的跑完只是成功的第一步</p><h2 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h2><p>在导航面板中选择对应选项，即可查看结果</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201128161650.png"></p><p>所以，本题目的答案已经出来，产品中异丙苯的摩尔流量为：17.1181kmol&#x2F;h</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201128162548.png"></p><p>结果显示在流程图中，至此本题目结束</p>]]></content>
      
      
      <categories>
          
          <category> 化工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Aspen </tag>
            
            <tag> 苯和丙烯合成异丙苯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文献引用小技巧</title>
      <link href="/posts/4ca6a63c/"/>
      <url>/posts/4ca6a63c/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201127131839.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在写论文或者引用文献的时候，引用参考文献的格式经常让我很烦恼，杂志，期刊，卷宗，人名一长串就够让人烦得了</p><p>在查文献格式的时候无意中发现别人分享的一个小技巧，真的是让我恍然大悟，相见恨晚啊(别在意乱用成语)</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>首先，我们要用到一个东西叫做**<a href="https://xueshu.baidu.com/">百度学术</a>**</p><p>然后我们把需要引用的文献名称在百度学术里检索出来：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201127132512.png"></p><p>点击引用：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201127132626.png"></p><p>直接复制需要的引用格式即可</p><h2 id="另外"><a href="#另外" class="headerlink" title="另外"></a>另外</h2><p>如果你检索的文献在百度学术里不支持引用，知网也自带了引用提示</p><p>首先在知网检索到需要的文献：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201127132919.png"></p><p>选择导出文献，选择自己需要的格式即可</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201127133005.png"></p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201127133037.png"></p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文献引用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SolidWorks2019打开报错无法获得下列许可</title>
      <link href="/posts/3ef9cd0f/"/>
      <url>/posts/3ef9cd0f/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201124191028.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>好久没用SW了，今天打开准备查一下法兰的标准模型</p><p>哎，我去，什么情况</p><p>直接报错无法获得许可</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201124191310.png" alt="我自己没截图，网上找的，侵删"></p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>突然想起自己好像之前禁用了一个奇怪的自启动项目，，，</p><p>(电脑上破解软件安装太多了，总是有奇奇怪怪的服务或者进程，各种注册机)</p><p>好吧，原来是SW的注册服务没有启动，找到原来的安装包，运行一下注册服务脚本即可</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201124191637.png" alt="记得用管理员权限，不然还是会报错"></p><p>当命令行里显示服务已经启动就好了，就又可以愉快的画图(&#x2F;(ㄒoㄒ)&#x2F;~~)了</p><p>如果启动失败，可以试试重启电脑或者去任务管理器关闭掉SW的相关进程。</p><p>呼，又水了一篇文章</p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SoildWorks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给这个世界的最后一封信</title>
      <link href="/posts/e3ec7dcf/"/>
      <url>/posts/e3ec7dcf/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最就在上上个周，辅导员找我谈了一次话，告诉我，如果再挂科的话，就必须面临留级或者退学的选择，最近一直忙着弄机械课程设计的事情，忙的焦头烂额，今天趁着周末，想了想这件事</p><p>突然想去教务管理看看自己的成绩，突然看到了退学预警，突然一下心里很堵很堵，颤抖着手给爸爸打了个电话，听着我爸爸的声音，我一下子再也绷不住了，眼泪就涌了出来</p><p>一直在给爸爸道歉，对不起对不起，你的儿子让你失望了</p><p>爸爸给我说了很多很多，给我说哪怕咱不上学了，自己去创业什么的，可我知道我们家里的情况根本不允许我这样，我能听到爸爸的哽咽，他也在强忍着</p><p>爸爸问我退学了该怎么办</p><p>我本来想好的自学一段时间前端，再去参加一个培训班，可我现在突然犹豫了</p><p>自己的学习这么差，凭着一腔热爱，我真的行吗？？？</p><p>我说我不知道，我说我今天给你打电话只想让你给我点信心，我真的快撑不下去了</p><p>我好累好累</p><h2 id="冲动"><a href="#冲动" class="headerlink" title="冲动"></a>冲动</h2><p>突然，不知道为什么，脑海里一直存在的一个想法浮现了出来，鬼使神差的给我爸说<strong>我不想活了</strong></p><p>电话两头突然都沉默了</p><p>大概沉默了几秒，我忍不住了，哭着给我爸爸说我好累，真的好累</p><p>我爸说你挂了，给我打开摄像头打过来、</p><p>我爸看着我哭，过了一会我稍微平静了点，他说我很生气，这句话不应该从我儿子嘴里说出来</p><p>我说我也不想，可我真的好累</p><p>爸爸一直在安慰我，他说从我大一给他说我挂科的时候他就已经知道这个结果了</p><p>突然间就对未来失去了信息。</p><h2 id="第二次更新"><a href="#第二次更新" class="headerlink" title="第二次更新"></a>第二次更新</h2><p>一个学长，孔哥，给我说了很多，他和我的遭遇差不多，也是挂了很多课，而且一边要兼职还贷款，一边兼顾自己的专业课，一边要学习Java网课</p><p>他那么艰难的日子都熬过来了，我有什么好绝望的</p><p>他一边鼓励我，一边让我反思</p><p>上课我到底听了多少？课后作业是自己认真做的吗？有不会的题去问过老师或者同学吗？</p><p>我没有，上课老师说三句我才可能听进去一句，甚至上课还玩手机，刷段子</p><p>课后作业都是抄舍友或者答案的</p><p>从来没有去问过老师和同学题</p><p>考前复习也都是吊儿郎当，一目十行，不踏踏实实看</p><p>这就是我挂科的原因，我怪别人吗？我只怪我自己不努力，认真学习总是在嘴边上徘徊，却下从来没有行动过，所以这一切都是我自己作孽</p><p>从来没有对不起过谁，只是我自己辜负了爸妈的希望</p><p>可笑的是自己打电话的时候还在欺骗父母，我说的理由是我不喜欢学化工，我根本学不进去</p><p>我痛恨欺骗，可我却在做着这样的事</p><p>我真的很讨人厌，自己不努力学习，天天无病呻吟，嘴里说着为什么我会挂科，可从来不想想别人学习的时候我在干什么？睡觉？打游戏？又或者在自己的博客上发着一些满篇都是求求你同情我的博同情的文章吗？</p><p>是的，我终究还是活成了自己最讨厌的样子，还乐此不疲，觉得自己很厉害，总是希望别人看我的眼神都是崇拜的小星星</p><p>可我配吗？我凭什么？</p><h2 id="第三次更新"><a href="#第三次更新" class="headerlink" title="第三次更新"></a>第三次更新</h2><p>无意中看见这么一段话，真的戳到我心窝子里了：</p><p>“你知道你姑姑家那还孩子吧，就是上回你还见过，说是自杀了，年纪轻轻的也不知道有什么想不开的…”</p><p>“怎么会有警察？出啥事了？哦～他们家啊，现在的年轻人啊，可怜了父母白发人送黑发人”</p><p>“是啊是啊，这抗压能力不行啊，有什么过不去的…”</p><p>“爸妈供她上学，又不愁吃穿，不知道还有什么不满足的，造孽呀”</p><p>“听说是和谁吵架了，没想通”</p><p>“我听那边刘家的媳妇儿说 听说是跟男朋友分手了”</p><p>“哎呀，白眼狼，可怜父母养她这么久”</p><p>“看到了吗，就她，她女儿啊，几天前自杀了，救护车 警察都来了”</p><p>“我们当初生活条件那么艰苦都还活的好好的，现在的小年轻真的是…”</p><p>……</p><p>想想要是我爸妈这样被别人议论，我就不寒而栗，我真的很自私，对不起</p><h2 id="最后一次更新吧"><a href="#最后一次更新吧" class="headerlink" title="最后一次更新吧"></a>最后一次更新吧</h2><p>突然间想开了，哪有那么多事情，人总得向前看，只要活着，就还有一些其他可能，可死了又能剩些什么呢？</p><p>总之，别把自己当回事就好了，，，</p><p>谢谢所有关心我在乎我的人，谢谢所有给我加油的人</p><p>谢谢爸爸妈妈哥哥嫂嫂给我信心</p><p>谢谢我的家人</p><p>谢谢这个世界</p><p>愿家人健康平安，祖国繁荣昌盛。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 再见 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 经典十道面试题</title>
      <link href="/posts/cebfa2cb/"/>
      <url>/posts/cebfa2cb/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为啥说是经典呢？因为尤大自己做都错了两道，差点没笑死我，，，</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><ol><li><p>Vue 实例的 data 属性，可以在哪些生命周期中获取到？<br>A. beforeCreate<br>B. created<br>C. beforeMount<br>D. mounted</p></li><li><p>下列对 Vue 原理的叙述，哪些是正确的？<br>A. Vue 中的数组变更通知，通过拦截数组操作方法而实现<br>B. 编译器目标是创建渲染函数，渲染函数执行后将得到 VNode 树<br>C. 组件内 data 发生变化时会通知其对应 watcher，执行异步更新<br>D. patching 算法首先进行同层级比较，可能执行的操作是节点的增加、删除和更新</p></li><li><p>对于 Vue 中响应式数据原理的说法，下列哪项是不正确的？<br>A. 采用数据劫持方式，即 Object.defineProperty() 劫持 data 中各属性，实现响应式数据<br>B. 视图中的变化会通过 watcher 更新 data 中的数据<br>C. 若 data 中某属性多次发生变化，watcher 仅会进入更新队列一次<br>D. 通过编译过程进行依赖收集</p></li><li><p>下列说法不正确的是哪项？<br>A. key 的作用主要是为了高效地更新虚拟 DOM<br>B. 若指定了组件的 template 选项，render 函数不会执行<br>C. 使用 vm.$nextTick 可以确保获得 DOM 异步更新的结果<br>D. 若没有 el 选项，vm.$mount(dom) 可将 Vue 实例挂载于指定元素上</p></li><li><p>下列关于 Vuex 的描述，不正确的是哪项？<br>A. Vuex 通过 Vue 实现响应式状态，因此只能用于 Vue<br>B. Vuex 是一个状态管理模式<br>C. Vuex 主要用于多视图间状态全局共享与管理<br>D. 在 Vuex 中改变状态，可以通过 mutations 和 actions</p></li><li><p>关于 Vue 组件间的参数传递，下列哪项是不正确的？<br>A. 若子组件给父组件传值，可使用 $emit 方法<br>B. 祖孙组件之间可以使用 provide 和 inject 方式跨层级相互传值<br>C. 若子组件使用 $emit(‘say’) 派发事件，父组件可使用 @say 监听<br>D. 若父组件给子组件传值，子组件可通过 props 接受数据</p></li><li><p>下列关于 vue-router 的描述，不正确的是哪项？<br>A. vue-router 的常用模式有 hash 和 history 两种<br>B. 可通过 addRoutes 方法动态添加路由<br>C. 可通过 beforeEnter 对单个组件进行路由守卫<br>D. vue-router 借助 Vue 实现响应式的路由，因此只能用于 Vue</p></li><li><p>下列说法不正确的是哪项？<br>A. 可通过 this.$parent 查找当前组件的父组件<br>B. 可使用 this.$refs 查找命名子组件<br>C. 可使用 this.$children 按顺序查找当前组件的直接子组件<br>D. 可使用 $root 查找根组件，并可配合 children 遍历全部组件</p></li><li><p>下列关于 v-model 的说法，哪项是不正确的？<br>A. v-model 能实现双向绑定<br>B. v-model 本质上是语法糖，它负责监听用户的输入事件以更新数据<br>C. v-model 是内置指令，不能用在自定义组件上<br>D. 对 input 使用 v-model，实际上是指定其 :value 和 :input</p></li><li><p>关于 Vue 的生命周期，下列哪项是不正确的？<br>A. DOM 渲染在 mounted 中就已经完成了<br>B. Vue 实例从创建到销毁的过程，就是生命周期<br>C. created 表示完成数据观测、属性和方法的运算和初始化事件，此时 $el 属性还未显示出来<br>D. 页面首次加载过程中，会依次触发 beforeCreate，created，beforeMount，mounted，beforeUpdate，updated</p></li></ol><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><ol><li>BCD</li><li>ABCD</li><li>BD</li><li>B</li><li>C &#x2F;&#x2F; 据出题人勘误称答案应该是 D</li><li>B</li><li>C</li><li>C</li><li>C</li><li>D</li></ol><h2 id="尤大的反思"><a href="#尤大的反思" class="headerlink" title="尤大的反思"></a>尤大的反思</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201109204633.png"></p><h2 id="尤大的’愤怒’"><a href="#尤大的’愤怒’" class="headerlink" title="尤大的’愤怒’"></a>尤大的’愤怒’</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201109204739.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《相见欢》</title>
      <link href="/posts/ffa9fc13/"/>
      <url>/posts/ffa9fc13/</url>
      
        <content type="html"><![CDATA[<h2 id="《相见欢》"><a href="#《相见欢》" class="headerlink" title="《相见欢》"></a>《相见欢》</h2><p> <strong>作者：百川</strong></p><p>清辉溢洒寒楼，<br>影幽幽。<br>梦醒子乌翻上柳梢头。</p><p>作别至，<br>生辰日，<br>灞江流。<br>望尽河山千里送归舟。</p><blockquote><p>舍友是个喜欢写诗的人，一次一个我的好友生日的时候给她送生日礼物，特意求舍友提笔写了一首，今天无意中翻到了，特此纪念一下。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>化工设计竞赛作品设计工作流程指南</title>
      <link href="/posts/ab9dea73/"/>
      <url>/posts/ab9dea73/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文出自马后炮化工论坛，原文地址：<a href="https://bbs.mahoupao.com/thread-70577-1-1.html">https://bbs.mahoupao.com/thread-70577-1-1.html</a></p></blockquote><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201029231724.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>(2013年)全国大学生化工设计竞赛至今已举办了七届，逐渐成为了一项影响广泛，受到全国高等院校化工及相关专业本科层次学生极大关注的赛事，竞赛的举办极大的激发了本专业学生学习专业知识和专业相关先进工具软件的热情。</p><p>竞赛组委会吴嘉老师在多种场合不断强调竞赛的作品是这些参加化工设计竞赛的同学而不是作品本身，个人深以为是。</p><p>大赛组委会认为竞赛作品中是创新型和规范性并重的，但作为二本院校，本设计工作流程指南则更侧重于规范性上，当然由于规范性中对应的一系列标准规范众多，对未有设计院工作经验的竞赛指导老师和同学而言，这个要求也太高了，因此，工作流程旨在讲述更为一般的工作先后次序上。</p><p>如果把作品设计看做一项工程，个人把工程的理解为“工作流程化”，何为工作流程化呢，就是要确定工作需要经过哪些流程，各个流程的先后顺序，各个流程的任务、手段及目标结果。如此，作品的完成才可能有序、按计划完成，完成的作品才可能成为一个有机的整体。</p><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p><strong>根据竞赛官方指南，确定产品的种类、规格及产量</strong></p><p>历届竞赛中，都是规定原料，而不规定产品，这样就保证了作品的丰富性。</p><p>就产品的初步种类选择来说，应不存在哪个产品比另一个产品一定更优的说法，此阶段中，只要保证产品有市场需求和较好的市场前景，非国家产业政策限制生产的产品，都可以选（就做选择来说，选择不是判断，没有对错之分，只有合适与否，通常，选择不能由第三方替代你做出，而这也正是做选择的难处。）</p><p>在产品的规格的确定上，大多根据其下游客户的需求来定即可。</p><p>而在产量的确定上，则需要给出更详实的国际国内供需数据及产品结构数据。之后根据目标市场及原料供应等情况，确定具体厂址。</p><p>以今年的竞赛题目“为某一石化&#x2F;煤化总厂设计一座丙烯制基本有机化工原料的合成分厂”为例，竞赛队伍在此环节出现的问题有：</p><ul><li>产品种类选择错误，题目明确要求产品为基本有机化工原料，在华东区决赛队伍中却有选择乙丙橡胶为产品的；</li><li>大部分队伍有说明产品的目标用途，但明确标识产品的规格的队伍寥寥无几；</li><li>产量的确定应先于厂址的选择，根据总厂的原料供应量来确定产品量的说法存在逻辑上的错误。</li></ul><p>本次竞赛中，目标产品为何定为基本有机化工原料其实已经暗示了一种产量的确定方法：国际国内丙烯的精细化工利用率存在差异，根据此差异及国际丙烯基本化工原料利用结构数据即可确定项目规模。</p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p><strong>确定产品的生产工艺、产品结构和三废产出情况。</strong></p><p>由于原料和目标产物均已确定，化学合成路线基本也随之确定了，在工艺路线中，最为核心的是反应技术及其分离序列的安排。</p><p>老实说，这一步目前只能通过阅读分析大量文献尤其是外文文献（其中专利文献最有价值）得到各工艺技术路线基本概况。</p><p>在本步骤中，有条件的高校队伍可重点关注新型催化剂和新型反应器的相关文献报道。</p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p><strong>利用流程模拟软件做物料和热量衡算，得到全流程物料及能源消耗初步数据，得到三废排放的初步数据，得到主要过程设备（反应器、塔设备）的设计任务</strong></p><p>在这一步中，根据产品的规格、反应及分离技术的文献资料，只利用简捷模型（如换热设备均只采用heater模块，反应采用化学计量反应器，分离采用dustw或separator等）</p><p>此过程中，根据工艺的复杂程度，建议分工段模拟，用aspen等软件来做衡算之类的显然是杀鸡用牛刀，但本步骤中较难的是带多个循环网络流程的处理。</p><p>Aspen虽然有自动设置断裂流股产生收敛模块的功能，但对较复杂的流程，手动设置断裂流股及输入断裂流股初值能更好的保证流程能够计算收敛。</p><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p><strong>对反应器及主要塔设备采用详细模型模拟，优化主要设备的工艺操作参数</strong></p><p>在这一步中，需要选择更准确的热力学方法计算物性，需要动力学基础数据做反应器的设计，本步骤中需要做大量的设计规定和灵敏度分析来保证反应的结果和分离的结果符合要求，同时得到最优化的反应及分离条件。</p><p>在这一点上，大部分的参赛队伍采用文献原始工艺参数较多，很多队伍的aspen模拟文件中对反应结果和分离结果不做规定，甚至在分离中分离产物的纯度指标都不做计算。</p><h2 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h2><p><strong>利用aspen energy analyzer对全流程或工段做换热网络设计以得到全厂公用工程需求等级及用量，同时确定全流程中初步的换热器数目及各换热器换热任务</strong></p><p>在aspen7之后的版本中，pinch已经升级为了energy analyzer, 该软件已经具有了自动设计换热网络的功能了。</p><p>大多数的队伍就使用该功能胡乱得到一个换热网络图作为该步骤的结果，简单说明下不做换热网络和做了换热网络的公用工程消耗量就完了。</p><p>这里的主要问题有三个：</p><ul><li><p>一是传热的温差采用各物流温差贡献值更为恰当，而不是整个网络都使用一样的传热温差；</p></li><li><p>二是公用工程的等级一般也需要自己根据总组合曲线以及园区公用工程配置来自行确定，而各等级的公用工程用量在换热网络的设计中也会得到确定，而非仅仅是热公用工程和冷公用工程的总热负荷；</p></li><li><p>三是换热网络确定后，实际工艺流程中需要多少个换热器，每个换热器的换热任务（冷热流体进出口温度、压力、流量等）也就确定了，许多队伍在做换热器设计时冷却水的进出口温度随意乱定，有的冷却水出口温度甚至设为80度以上</p></li></ul><h2 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h2><p><strong>主要工艺设备（换热设备、分离设备、反应设备）的选型和设计</strong></p><p>通过四、五两个步骤，得到了各主要工艺设备承担的具体流程任务后，利用aspenplus作各主要设备的sizing和rating及simulation的工作，得到设备的基本几何尺寸，之后再利用专业的设备设计的软件（EDR等）做详细设计及校核。</p><p>在此基础上，将计算结果图纸化表达。</p><h2 id="第七步"><a href="#第七步" class="headerlink" title="第七步"></a>第七步</h2><p><strong>绘制PFD图，厂区布置、车间布置</strong></p><p>这一步CAD、PDMS等同步上阵吧，任务繁重，工作量大。主要注意要跟前面步骤的结果保持一致。</p><h2 id="第八步"><a href="#第八步" class="headerlink" title="第八步"></a>第八步</h2><p><strong>根据PFD图和各主要设备的参数指示及控制要求，确定中间储罐的需求，明确各主要设备的控制指标和控制方案，从而提出具体的设备工艺参数控制结构方案，绘制PID图，标明指示、控制的指标及要求，交自控专业做详细自控系统设计</strong></p><h2 id="第九步"><a href="#第九步" class="headerlink" title="第九步"></a>第九步</h2><p><strong>配管，明确车间各设备之间物料输送的任务，包括物料进出口位置、压力、流量，管路管件布置情况及输送距离，流量调节要求等，据此对泵、管道、阀门和管件进行选型</strong></p><h2 id="第十步"><a href="#第十步" class="headerlink" title="第十步"></a>第十步</h2><p><strong>三废处理和安全设施设计</strong></p><p>可不做详细设计，但要提出三废处理和安全设施设计的具体任务。</p><h2 id="第十一步"><a href="#第十一步" class="headerlink" title="第十一步"></a>第十一步</h2><p><strong>经济核算</strong></p><p>根据上述前期工作的结果，估算项目基建投资和设备投资金额，确定筹款方式，计算项目总投资额；根据物料衡算和公用工程消耗、人员配置和薪酬、销售成本等计算项目盈利水平。根据产品生产的特性，做项目不确定性分析。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>以上为个人对化工设计竞赛的一点思考，也是个人在指导学生参加化工设计竞赛的一个思路总结，谨以此文致敬吴嘉老师，致敬他对大赛的辛苦付出和用心良苦；</p><p>致意参加本次大赛的同学们，俊哥、辣姐（娜姐，呵呵）、大圆子、威爷、朗哥、可乐姐、蚊子、萌妹、肉食男及徐晴（咩外号比较合适啊，太威严了，没人敢取外号敢传绯闻？哈哈），你们在此竞赛中表现出的学习热情和团队精神让我吃惊；</p><p>致谢曾哥：信曾哥，得永生！</p><p>感谢前辈们的经验，加油加油加油！！！</p>]]></content>
      
      
      <categories>
          
          <category> 化工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 全国化工设计竞赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 npm 搭建一个简易图床</title>
      <link href="/posts/4fb1ec61/"/>
      <url>/posts/4fb1ec61/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201025075638.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>昨天在群里看大家在讨论图床的问题，现在这个年代找一个能稳定白嫖的图床实属不易，突然看到群里大佬在说用npm也能实现图片的外链，引起了我的好奇，看了一下大佬的教程，自己试了试，果然不错，可以作为一个备用的图床来准备。</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h3><p>首先需要去<a href="https://www.npmjs.com/">npm官网</a>注册一个账号</p><h3 id="切换源"><a href="#切换源" class="headerlink" title="切换源"></a>切换源</h3><p>注册好之后切换为默认源</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201025081317.png"></p><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>登录自己的账号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm login</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201025081513.png"></p><h3 id="初始化本地"><a href="#初始化本地" class="headerlink" title="初始化本地"></a>初始化本地</h3><p>新建文件夹，进行npm初始化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201025081745.png"></p><p>除了包名，其他全部回车默认即可，之后可以通过 <code>npm init</code> 进行重新设置</p><blockquote><p>需要注意的是包名不能有重复的，不然会上传失败，尽量使用带有自己特色的，好辨识的</p></blockquote><h3 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure><p>在文件夹里添加自己要上传的图片，执行命令即可</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20201025082557.png"></p><p>每一次发布图片后，你可以将原来的图片删除，更改 <code>package.json</code> 版本号(递增)，然后 <code>npm publish</code> 即可</p><p>每一次发布都是单独的包，不用担心删除图片之后之前的图片无法访问</p><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><ol><li><p>使用版本号访问</p><ul><li><code>https://cdn.jsdelivr.net/npm/包名@版本号/图片路径</code> jsDelivr</li><li><code>https://unpkg.zhimg.com/包名@版本号/图片路径</code> 知乎镜像</li><li><code>https://code.bdstatic.com/npm/包名@版本号/图片路径</code> bdstatic</li></ul></li><li><p>不适用版本号</p><ul><li><code>https://cdn.jsdelivr.net/npm/包名/图片路径</code> </li><li>同上</li></ul></li></ol><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><ul><li><a href="https://cdn.jsdelivr.net/npm/dabailuoboimages@1.0.0/luobo.png">https://cdn.jsdelivr.net/npm/dabailuoboimages@1.0.0/luobo.png</a></li><li><a href="https://cdn.jsdelivr.net/npm/dabailuoboimages@latest/luobo.png">https://cdn.jsdelivr.net/npm/dabailuoboimages@latest/luobo.png</a></li><li><a href="https://cdn.jsdelivr.net/npm/dabailuoboimages/luobo.png">https://cdn.jsdelivr.net/npm/dabailuoboimages/luobo.png</a></li></ul><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>请勿浪费公共资源，少量图片还是可以的，jsDelivr更改了服务条款，请慎重使用。</p><h2 id="2020-11-24更新"><a href="#2020-11-24更新" class="headerlink" title="2020.11.24更新"></a>2020.11.24更新</h2><p>其实也可以做其他文件的引用，比如js、css之类的，忘了说了</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回避性人格是什么样的？</title>
      <link href="/posts/3eebbfb5/"/>
      <url>/posts/3eebbfb5/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200916210522.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在闷热的教室里，课间似乎不能压抑住我的燥热，无聊的趴在桌子上刷着知乎，突然，一个《回避性人格是什么样的》的问题映入眼帘</p><p>看着简短的描述，似乎让我有了点共鸣，便点开了这个答主的回答</p><p>看了一小段，就深深的吸引住了我</p><p>这篇文章简直就是在描述我自己</p><p>看完眼泪已经打湿了</p><p>真的感觉就是在看自己的经历</p><p>遂联系了作者，申请了转载权，给自己留一个纪念</p><h2 id="版权声明"><a href="#版权声明" class="headerlink" title="版权声明"></a>版权声明</h2><p>本文来自知乎玩家 @<a href="https://www.zhihu.com/people/zhou-sheng-mu-xue">周生暮雪</a> 在问题《回避性人格是什么样的》下的回答，已经获得转载授权：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200916211400.png"></p><p>原文链接：<a href="https://www.zhihu.com/question/412154471/answer/1398893625?utm_source=wechat_session&utm_medium=social&utm_oi=680002250454339584&utm_content=group1_Answer&utm_campaign=shareopn">回避性人格是什么样的</a> </p><p><strong>著作权归原作者所有，未经授权禁止转载</strong></p><p>作者：周生暮雪<br>链接：<a href="https://www.zhihu.com/question/412154471/answer/1398893625">https://www.zhihu.com/question/412154471/answer/1398893625</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="一、回避性人格形成的原因"><a href="#一、回避性人格形成的原因" class="headerlink" title="一、回避性人格形成的原因"></a>一、回避性人格形成的原因</h3><ol><li><strong>年幼时没有获得足够的爱，表达情绪的时候没有得到理解，而是一味的指责，从而形成表达情绪是不好的想法</strong>。</li></ol><p>比如和父母发生争吵，你哭的很伤心，他们不会问你为什么这么难过，而是说这么大人了，哭什么哭，不准哭！后来遇到难过的事情，也会选择憋在心里。</p><ol start="2"><li><p>在童年时期就开始有害羞、怕生、对社交产生抗拒的现象。对于成年后正常的社交、职业都会产生不好的影响。<strong>时刻认定自己缺乏社交能力，缺乏吸引力，在各方面都处于劣势，因而显得过分敏感和自卑。</strong></p></li><li><p><strong>习惯了压抑自己</strong>，受伤了不说，会被夸坚强。有想要的东西不说，会被夸懂事。难过了不说，就没人看出你的脆弱。习惯给自己打造一个看起来坚硬的外壳，不愿意暴露自己软弱的一面。<strong>所以也习惯了逞强。很怕给别人带来负担。</strong></p></li></ol><h3 id="二、回避性人格表现的特质"><a href="#二、回避性人格表现的特质" class="headerlink" title="二、回避性人格表现的特质"></a>二、回避性人格表现的特质</h3><ol><li><p><strong>对负面评价很敏感，总是自我怀疑。所以在社交中习惯选择回避。因为害怕批评、否定和排斥，而拒绝大多数社交和职业活动。</strong></p></li><li><p><strong>回避性人格对自己的评价往往是偏低的，没有正确的认知。低价值感。</strong>因为感觉自身能力不足，所以长期处于一种自我保护的状态。</p></li><li><p><strong>社交恐惧症</strong>，不愿意和人打交道，认为人际关系是困难的。<strong>在社交场合往往喜欢当一个小透明</strong>，不希望自己成为焦点所在。除非确信他在这个群体是受欢迎的。</p></li><li><p>多多少少都<strong>有一点讨好型人格</strong>，<strong>习惯性委屈求全。</strong>扮演着一个老好人的角色，很难开口拒绝别人，因为害怕负面评价，自然也不敢拒绝别人。</p></li><li><p><strong>在家庭中没有归属感</strong>，即使对亲人的感情非常好，他们也会选择回避，表现出一种冷漠淡然的态度。他们不会觉得亲人是自己的依靠，只会觉得自己是亲人唯一的依靠，很缺乏安全感。</p></li><li><p>看起来很好相处，其实真心认可的朋友少之又少。<strong>有时候会陷入无人可以倾诉的状况。</strong></p></li><li><p><strong>共情能力弱</strong>，尽管自己拥有丰富的情感世界，但是很难同别人进行深入的感情交流。         （这一条存疑，很多人说他们的共情力很强。我的情况是看书看电影时很容易受到感染，能体会到作品里传达的各种情感。但是与人交流的时候不太行，就算你站在我面前哭，我也感受不到你的难过，只会下意识的安慰你）</p></li><li><p><strong>回避性人格在亲密关系上显得尤为纠结</strong>，另一半做了一些事情让回避难受了，回避是不会说出来的，怕破坏两人的关系。但是憋在心里积累多了，就会对这段关系失去希望，单方面判了死刑。说分手就分手，导致另一半一头雾水，甚至不知道自己哪里做错了。</p></li><li><p>会正常的喜欢一个人，追逐的过程最愉悦，一旦对方也喜欢上你就开始态度反转，<strong>觉得自己不值得他喜欢，怀疑他的感情，让两个人都陷入痛苦。</strong>“我都不喜欢我自己，你怎么会喜欢我呢？我不信。”</p></li><li><p><strong>害怕受到感情上的伤害</strong>，我不喜欢你，那么你就对我产生不了伤害，所以总是暗示自己不能爱的太满。</p></li><li><p><strong>总是习惯沉浸在自己的小世界，不管是在家里还是在外面。</strong>过分的独立，可以一个人吃饭、上课、逛街。</p></li><li><p><strong>几乎不会主动找别人聊天。</strong>但是又希望有人能给自己发条消息。真有人来找你聊天了你又希望快点结束聊天。</p></li><li><p><strong>跟热情的人在一起会不太自在</strong>，因为自己的内向会显得冷漠，但其实仍然觉得她很可爱。而且也<strong>知道自己的热情来得快去得快</strong>，第一天很开心认识的人，后面可能打招呼都难。</p></li><li><p><strong>不相信世界上会有无条件的爱</strong>，爸妈会因为你不听话、不好好学习就讨厌你。朋友是因为你对她好所以喜欢你，所以不能对她不好，爱人是因为你的可爱喜欢你，不可爱也就不喜欢了。（这种想法是不对的。如果你相信自己值得被爱，就不会那么悲观的质疑它的存在了）</p></li><li><p><strong>对说错话或做错事极度焦虑、尽量避免做有关他人的决定。</strong>犹豫不决不能解决任何问题，如果决定是一定要做的，那么就快刀斩乱麻，然后接受你的决定带来的结果。</p></li><li><p><strong>没有分享欲</strong>，<strong>渐渐的失去了和人交流的欲望</strong>，这也是不爱聊天的一个原因。也许想分享，但又找不到分享的人，也不知道分享的那个人会不会喜欢，看到什么感觉，干脆不分享了。</p></li><li><p><strong>格外的在意自我形象</strong>，会感觉自己时刻受到别人目光的束缚，但这也可以让你的举止行为保持得体。</p></li><li><p><strong>对承诺尤为在意</strong>，自己答应别人的就一定会做到。如果别人答应自己但又没有做到，等同于欺骗和背叛。</p></li></ol><h3 id="三、回避性人格怎么改变"><a href="#三、回避性人格怎么改变" class="headerlink" title="三、回避性人格怎么改变"></a>三、回避性人格怎么改变</h3><ol><li><p><strong>首先接纳自我</strong>，告诉自己，性格成为这个样子不是我们的错。自己是值得喜欢，值得赞美的。把自己的优缺点分别列出，用赞美的心态看自己的优点，用宽容的心态看自己的缺点。然后发现，这个样子的我好像也不错。</p></li><li><p><strong>有自己的边界</strong>，<strong>学会拒绝别人，表达自己的诉求。</strong>什么是可以，什么是不可以。不要委屈自己满足别人。哪怕别人想让你帮他做一件顺手的事情，只要你不愿意，你就拒绝。当你拒绝之后，你会发现，其实什么后果也没有，自己心里一下子轻松了很多。</p></li><li><p><strong>回避性人格需要鼓励，需要尝试社交</strong>，<strong>需要一段健康的关系。</strong>长期回避，压抑会导致更多消极的情绪产生，所以我们不能对自己放任不管，尽量慢慢的引导自己。</p></li><li><p><strong>有想说的话就说出来，</strong>在乎你的人会听会改。不在乎你的人，走了就走了吧。我们时常有如鲠在喉的感觉，许多话想说但是就堵在喉咙里怎么都说不出来。这个时候，就说。不要顾及那么多，说出来问题才有可能被解决。</p></li><li><p><strong>回避其实是一种应对自身恐惧和负面情绪的一种方法，因此建立起新的应对负面情绪的方法也很重要</strong>。比如难过了不要再一个人哭，而是向朋友寻求一个拥抱，或者约一顿火锅，做一些自己喜欢的事。</p></li><li><p><strong>构建自信，构建自信，构建自信。</strong>只要有了自信，就能解决大部分回避带来的负面影响。最直接的办法就是做出成绩，在你喜欢的领域做出成绩。比如我喜欢画画，我就会一直画，然后偶尔画出了一幅特别好看的画，我会觉得自己好厉害。</p></li><li><p><strong>无视无关的人，不在乎别人的看法，做自己。</strong>如果你总是觉得受到旁人目光的关注，那就干脆一点，无视他们。我做我自己的，你们看不看我，怎么看我都无所谓。说实话，<strong>别人的看法对我们的生活造不成任何实际上的影响。我们想象中的他人对自己的印象，其实更多的是自己对自己看法的投射。</strong></p></li><li><p><strong>扬长避短</strong>，<strong>不要强迫自己变成一个外向擅长交际的人。</strong>回避性人格本来就是比较内向的，可以做到和别人正常相处就可以了。相处的几个小技巧：说话时试着看向别人的眼睛，记住别人瞳孔的颜色。开始时说你好请问，结尾时说谢谢再见。附赠一个小微笑。</p></li></ol><h3 id="四、回避型人格带来的负面影响"><a href="#四、回避型人格带来的负面影响" class="headerlink" title="四、回避型人格带来的负面影响"></a>四、回避型人格带来的负面影响</h3><ol><li><p><strong>长期的压抑自我</strong>，什么想法都压在心里，身边没有可以倾诉的人，也不想倾诉。然后你就会发现和别人说话变得越来越费劲，最后甚至会<strong>失去了说话的能力</strong>。</p></li><li><p>我们把自己放在一个封闭的环境里，世界绚烂多彩，但我们之间却有一层心灵的屏障。我们和他人、和世界，隔离开了。<strong>我们是被自己孤立了，当你时常心情低落不得排解，当你时常处于自我封闭的状态，这是抑郁的前兆。</strong></p></li><li><p>我们会觉得社交很麻烦，完全没必要，一个人很好，和别人相处不自在。但是<strong>我们不能让自己一直这样滑向危险的边缘。自我放任的后果只是暂时的缓解，问题永远存在</strong>。而且，你不想改变这个现状，这就是你在回避这个问题。</p></li><li><p>这毕竟是<strong>长年累月形成的性格，改变很难很难，而且不是一朝一夕的事</strong>，慢慢来，不要苛求自己，对自己温柔、耐心一点。从对镜子里的自己微笑一下开始吧。说一句“我现在很好，比以前好，未来会更好，我爱你。”</p></li></ol><blockquote><p><strong>我们这些表现，其实也是内在力量不够强的表现。</strong>当一个人内在力量不够强的时候，他的羞耻感会很强，会很在意别人的看法，也会因为别人的否定而产生自我怀疑。</p></blockquote><p>而一个人连自己都无法接受的人，他对别人的接纳程度也很低。</p><p>所以这个时候我们要多读书，多提升自己的内在世界，增强自己的内在力量，当内心强大了之后，许多问题都会迎刃而解。</p><p><strong>最后，多取悦自己，人生只有一次，应该活的快乐一点。</strong></p><p><strong>希望大家都可以成为自己想成为的人。</strong></p><p>以上是本人多年回避的一点总结和想法，现在仍然回避，但是比以前状态好了一些。希望有一天可以摆脱身上的禁锢，成为一个自由洒脱的人。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础篇(二)</title>
      <link href="/posts/ce1d1c0f/"/>
      <url>/posts/ce1d1c0f/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200905171803.png"></p><blockquote><p>距离上一次写JavaScript基础篇笔记已经过去了好久好久，咕咕咕</p></blockquote><p>传送门：<a href="https://blog.dabailuobo.com/a9ba4134/">JavaScript基础篇(一)</a></p><p>上次介绍到js中的<strong>数据类型</strong> ，这篇就接着上次的继续</p><h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><p>ECMA-262描述了一组用于操作数据值的操作符，包括算术操作符（如加号和减号）、位操作符、关系操作符和相等操作符</p><p>ECMAScript操作符的与众不同之处在于，它们能够适用于很多值，例如字符串、数字值、布尔值，甚至对象</p><p>不过，在应用于对象时，相应的操作符通常都会调用对象的 <code>valueOf()</code> 和（或）<code>toString()</code> 方法，以便取得可以操作的值</p><h2 id="一元操作符"><a href="#一元操作符" class="headerlink" title="一元操作符"></a>一元操作符</h2><p>顾名思义，只能操作一个值的操作符叫做一元操作符</p><h3 id="递增和递减操作符"><a href="#递增和递减操作符" class="headerlink" title="递增和递减操作符"></a>递增和递减操作符</h3><p>递增和递减操作符直接借鉴自C，而且各有两个版本：前置型和后置型</p><p>顾名思义，前置型应该位于要操作的变量之前，而后置型则应该位于要操作的变量之后</p><p>例如：在使用前置递增操作符给一个数值加1时，要把两个加号（++）放在这个数值变量前面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">20</span>;</span><br><span class="line">++age;</span><br><span class="line"><span class="comment">// age = 21</span></span><br></pre></td></tr></table></figure><p>执行这个前置递增操作与执行以下操作的效果相同：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">20</span>;</span><br><span class="line">age = age + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// age = 21</span></span><br></pre></td></tr></table></figure><p>前置递减操作的方法也类似：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">20</span>;</span><br><span class="line">--age;</span><br><span class="line"><span class="comment">// age = 19</span></span><br></pre></td></tr></table></figure><p>执行前置递增和递减操作时，变量的值都是在语句被求值以前改变的</p><blockquote><p>在计算机科学领域，这种情况通常被称作副效应</p></blockquote><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> anotherAge = --age + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br><span class="line"><span class="comment">// 19</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(anotherAge);</span><br><span class="line"><span class="comment">// 21</span></span><br></pre></td></tr></table></figure><p>变量anotherAge的初始值等于变量age的值前置递减之后加2。由于先执行了减法操作，age的值变成了19，所以再加上2的结果就是21</p><p>由于前置递增和递减操作与执行语句的优先级相等，因此整个语句会从左至右被求值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> num3 = --num1 + num2;</span><br><span class="line"><span class="comment">// 21</span></span><br><span class="line"><span class="keyword">var</span> num4 = num1 + num2;</span><br><span class="line"><span class="comment">// 21</span></span><br></pre></td></tr></table></figure><p>在这里，num3之所以等于21是因为num1先减去了1才与num2相加。而变量num4也等于21是因为相应的加法操作使用了num1减去1之后的值</p><p>后置型递增和递减操作符的语法不变（仍然分别是++和–），只不过要放在变量的后面而不是前面</p><p>后置递增和递减与前置递增和递减有一个非常重要的区别，即递增和递减操作是在包含它们的<strong>语句被求值之后</strong>才执行的</p><p>例如把上面的那个例子反过来写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> num3 = num1-- + num2;</span><br><span class="line"><span class="comment">// 22</span></span><br><span class="line"><span class="keyword">var</span> num4 = num1 + num2;</span><br><span class="line"><span class="comment">// 21</span></span><br></pre></td></tr></table></figure><p>在计算num3时使用了num1的原始值完成了加法计算，而num4则使用了递减后的值</p><p>所以要特别注意哦</p><p>这4个操作符对任何值都适用，也就是它们不仅适用于整数，还可以用于字符串、布尔值、浮点数值和对象</p><p>在应用于不同的值时，递增和递减操作符遵循下列规则：</p><ul><li>在应用于一个包含有效数字字符的字符串时，先将其转换为数字值，再执行加减1的操作；字符串变量变成数值变量</li><li>在应用于一个不包含有效数字字符的字符串时，将变量的值设置为NaN；字符串变量变成数值变量</li><li>在应用于布尔值false时，先将其转换为0再执行加减1的操作；布尔值变量变成数值变量</li><li>在应用于布尔值true时，先将其转换为1再执行加减1的操作；布尔值变量变成数值变量</li><li>在应用于浮点数值时，执行加减1的操作</li><li>在应用于对象时，先调用对象的 <code>valueOf()</code> 方法以取得一个可供操作的值，然后对该值应用前述规则，如果结果是NaN，则在调用toString()方法后再应用前述规则；对象变量变成数值变量</li></ul><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="string">&quot;2&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="string">&quot;z&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> f = <span class="number">1.1</span>;</span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    <span class="attr">valueOf</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">s1++;<span class="comment">// 变成数值3</span></span><br><span class="line">s2++;<span class="comment">// 变成NaN</span></span><br><span class="line">b++;<span class="comment">// 变成数值1</span></span><br><span class="line">f--;<span class="comment">// 变成0.10000000000000009 浮点舍入错误</span></span><br><span class="line">o--;<span class="comment">// 变成数值-2</span></span><br></pre></td></tr></table></figure><h3 id="一元加和减操作符"><a href="#一元加和减操作符" class="headerlink" title="一元加和减操作符"></a>一元加和减操作符</h3><p>一元加操作符以一个加号（+）表示，放在数值前面，对数值不会产生任何影响，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">20</span>;</span><br><span class="line">age = +num;</span><br><span class="line"><span class="comment">// 20</span></span><br></pre></td></tr></table></figure><p>在对非数值应用一元加操作符时，该操作符会像 <code>Number()</code> 转型函数一样对这个值执行转换</p><p>换句话说，布尔值false和true将被转换为0和1，字符串值会被按照一组特殊的规则进行解析，而对象是先调用它们的 <code>valueOf()</code> 和（或）<code>toString()</code> 方法，再转换得到的值</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="string">&quot;01&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="string">&quot;1.1&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> s3 = <span class="string">&quot;z&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> f = <span class="number">1.1</span>;</span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    <span class="attr">valueOf</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">s1 = +s1;<span class="comment">// 值变成数值1</span></span><br><span class="line">s2 = +s2;<span class="comment">// 值变成数值1.1</span></span><br><span class="line">s3 = +s3;<span class="comment">// 值变成NaN</span></span><br><span class="line">b = +b;<span class="comment">// 值变成数值0</span></span><br><span class="line">f = +f;<span class="comment">// 值未变，仍然是1.1</span></span><br><span class="line">o = +o;<span class="comment">// 值变成数值-1</span></span><br></pre></td></tr></table></figure><p>一元减操作符主要用于表示负数，例如将1转换成-1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line">num = -num</span><br><span class="line"><span class="comment">// -1</span></span><br></pre></td></tr></table></figure><p>在将一元减操作符应用于数值时，该值会变成负数（如上面的例子所示）</p><p>而当应用于非数值时，一元减操作符遵循与一元加操作符相同的规则，最后再将得到的数值转换为负数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="string">&quot;01&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="string">&quot;1.1&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> s3 = <span class="string">&quot;z&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> f = <span class="number">1.1</span>;</span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    <span class="attr">valueOf</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">s1 = -s1;<span class="comment">// 值变成数值-1</span></span><br><span class="line">s2 = -s2;<span class="comment">// 值变成数值-1.1</span></span><br><span class="line">s3 = -s3;<span class="comment">// 值变成NaN</span></span><br><span class="line">b = -b;<span class="comment">// 值变成数值0</span></span><br><span class="line">f = -f;<span class="comment">// 值变成-1.1</span></span><br><span class="line">o = -o;<span class="comment">// 值变成数值1</span></span><br></pre></td></tr></table></figure><blockquote><p>小提示：</p><p>一元加和减操作符主要用于基本的算术运算，也可以像前面示例所展示的一样用于转换数据类型</p></blockquote><h2 id="位操作符"><a href="#位操作符" class="headerlink" title="位操作符"></a>位操作符</h2><p>位操作符用于在最基本的层次上，即按内存中表示数值的位来操作数值</p><p>ECMAScript中的所有数值都以IEEE-75464位格式存储，但位操作符并不直接操作64位的值，而是先将64位的值转换成32位的整数，然后执行操作，最后再将结果转换回64位</p><p>对于开发人员来说，由于64位存储格式是透明的，因此整个过程就像是只存在32位的整数一样</p><p>对于有符号的整数，32位中的前31位用于表示整数的值，第32位用于表示数值的符号：0表示正数，1表示负数，这个表示符号的位叫做符号位，符号位的值决定了其他位数值的格式</p><p>正数以纯二进制格式存储，31位中的每一位都表示2的幂</p><p>第一位（叫做位0）表示20，第二位表示21，以此类推。没有用到的位以0填充，即忽略不计</p><p>例如，数值18的二进制表示是00000000000000000000000000010010简写为10010</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200906073043.png"></p><p>负数同样以二进制码存储，但使用的格式是二进制补码</p><p>计算一个数值的二进制补码，需要经过下列3个步骤：</p><ol><li>求这个数值绝对值的二进制码</li><li>求二进制反码，即将0替换为1，将1替换为0</li><li>得到的二进制反码加1</li></ol><p>例如，要求-18的二进制补码，先求18的二进制码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">00000000000000000000000000010010</span><br></pre></td></tr></table></figure><p>然后，求其二进制反码，即0和1互换：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">111111111111111111111111101101</span><br></pre></td></tr></table></figure><p>最后，二进制反码加1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">111111111111111111111111101110</span><br></pre></td></tr></table></figure><p>这就是-18的二进制表示</p><p>要注意的是，在处理有符号整数时，是不能访问位31的</p><p>ECMAScript会尽力向我们隐藏所有这些信息，换句话说，在以二进制字符串形式输出一个负数时，我们看到的只是这个负数绝对值的二进制码前面加上了一个负号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = -<span class="number">18</span>;</span><br><span class="line"><span class="title function_">alert</span>(num.<span class="title function_">toString</span>(<span class="number">2</span>));</span><br><span class="line"><span class="comment">// &quot;-10010&quot;</span></span><br></pre></td></tr></table></figure><p>要把数值-18转换成二进制字符串时，得到的结果是”-10010”，这说明转换过程理解了二进制补码并将其以更合乎逻辑的形式展示了出来</p><blockquote><p>默认情况下，ECMAScript中的所有整数都是有符号整数。不过，当然也存在无符号整数。对于无符号整数来说，第32位不再表示符号，因为无符号整数只能是正数。而且，无符号整数的值可以更大，因为多出的一位不再表示符号，可以用来表示数值</p></blockquote><p>在ECMAScript中，当对数值应用位操作符时，转换32位再转换64会带来一个严重的副效应，即在对特殊的NaN和Infinity值应用位操作时，这两个值都会被当成0来处理</p><p>如果对非数值应用位操作符，会先使用 <code>Number()</code> 函数将该值转换为一个数值（自动完成），然后再应用位操作，得到的结果将是一个数值</p><h3 id="按位非（NOT）"><a href="#按位非（NOT）" class="headerlink" title="按位非（NOT）"></a>按位非（NOT）</h3><p>按位非操作符由一个波浪线（<code>~</code>）表示，执行按位非的结果就是返回数值的反码，按位非是ECMAScript操作符中少数几个与二进制计算有关的操作符之一</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">25</span>;<span class="comment">// 二进制 00000000000000000000000000011001</span></span><br><span class="line"><span class="keyword">var</span> num2 = ~num1;<span class="comment">// 二进制 11111111111111111111111111100110</span></span><br><span class="line"><span class="title function_">alert</span>(num2);</span><br><span class="line"><span class="comment">// -26</span></span><br></pre></td></tr></table></figure><p>对25执行按位非操作，结果得到了-26</p><blockquote><p>按位非操作的本质：操作数的负值减1</p></blockquote><p>所以等同于：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">25</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = -num1 - <span class="number">1</span>;</span><br><span class="line"><span class="title function_">alert</span>(num2);</span><br><span class="line"><span class="comment">// -26</span></span><br></pre></td></tr></table></figure><p>虽然以上代码也能返回同样的结果，但由于按位非是在数值表示的最底层执行操作，因此速度更快</p><h3 id="按位与（AND）"><a href="#按位与（AND）" class="headerlink" title="按位与（AND）"></a>按位与（AND）</h3><p>按位与操作符由一个和号字符（<code>&amp;</code>）表示，它有两个操作符数</p><p>从本质上讲，按位与操作就是将两个数值的每一位对齐，然后根据下表中的规则，对相同位置上的两个数执行AND操作：</p><table><thead><tr><th align="center">第一个数值的位</th><th align="center">第二个数值的位</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">1</td><td align="center">0</td><td align="center">0</td></tr><tr><td align="center">0</td><td align="center">1</td><td align="center">0</td></tr><tr><td align="center">0</td><td align="center">0</td><td align="center">0</td></tr></tbody></table><p>简而言之，按位与操作只在两个数值的对应位都是1时才返回1，任何一位是0，结果都是0</p><blockquote><p>这tm让我想起了我挂科的逻辑电路，，，</p></blockquote><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="number">25</span> &amp; <span class="number">3</span>;</span><br><span class="line"><span class="title function_">alert</span>(result);</span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>原理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">00000000000000000000000000011001 = 25</span><br><span class="line">00000000000000000000000000000011 = 3</span><br><span class="line">00000000000000000000000000000001 = 25 &amp; 3</span><br></pre></td></tr></table></figure><p>25和3的二进制码对应位上只有一位同时是1</p><h3 id="按位或（OR）"><a href="#按位或（OR）" class="headerlink" title="按位或（OR）"></a>按位或（OR）</h3><p>按位或操作符由一个竖线符号（<code>|</code>）表示，同样也有两个操作数。按位或操作遵循下面这个真值表</p><blockquote><p>艹，又是真值表</p></blockquote><table><thead><tr><th align="center">第一个数值的位</th><th align="center">第二个数值的位</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">1</td><td align="center">0</td><td align="center">1</td></tr><tr><td align="center">0</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">0</td><td align="center">0</td><td align="center">0</td></tr></tbody></table><p>按位或操作在有一个位是1的情况下就返回1，而只有在两个位都是0的情况下才返回0</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> res = <span class="number">25</span> | <span class="number">3</span>;</span><br><span class="line"><span class="title function_">alert</span>(res);</span><br><span class="line"><span class="comment">// 27</span></span><br></pre></td></tr></table></figure><p>原理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">00000000000000000000000000011001 = 25</span><br><span class="line">00000000000000000000000000000011 = 3</span><br><span class="line">00000000000000000000000000011011 = 25 | 3</span><br></pre></td></tr></table></figure><p>这两个数值的都包含4个1，因此可以把每个1直接放到结果中，二进制码11011等于十进制值27</p><h3 id="按位异或（XOR）"><a href="#按位异或（XOR）" class="headerlink" title="按位异或（XOR）"></a>按位异或（XOR）</h3><p>按位异或操作符由一个插入符号（<code>^</code>）表示，也有两个操作数。以下是按位异或的真值表</p><table><thead><tr><th align="center">第一个数值的位</th><th align="center">第二个数值的位</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">1</td><td align="center">0</td></tr><tr><td align="center">1</td><td align="center">0</td><td align="center">1</td></tr><tr><td align="center">0</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">0</td><td align="center">0</td><td align="center">0</td></tr></tbody></table><p>按位异或与按位或的不同之处在于，这个操作在两个数值对应位上只有一个1时才返回1，如果对应的两位都是1或都是0，则返回0</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> res = <span class="number">25</span> ^ <span class="number">3</span>;</span><br><span class="line"><span class="title function_">alert</span>(res);</span><br><span class="line"><span class="comment">// 26</span></span><br></pre></td></tr></table></figure><p>原理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">00000000000000000000000000011001 = 25</span><br><span class="line">00000000000000000000000000000011 = 3</span><br><span class="line">00000000000000000000000000011010 = 25 | 3</span><br></pre></td></tr></table></figure><p>这两个数值都包含4个1，但第一位上则都是1，因此结果的第一位变成了0。而其他位上的1在另一个数值中都没有对应的1，可以直接放到结果中。二进制码11010等于十进制值26（注意这个结果比执行按位或时小1）</p><h3 id="左移"><a href="#左移" class="headerlink" title="左移"></a>左移</h3><p>左移操作符由两个小于号（<code>&lt;&lt;</code>）表示，这个操作符会将数值的所有位向左移动指定的位数</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oldNum = <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 二进制就是10</span></span><br><span class="line"><span class="keyword">var</span> newNum = oldNum &lt;&lt; <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 现在变成了1000000，也就是十进制的64</span></span><br></pre></td></tr></table></figure><p>在向左移位后，原数值的右侧多出了5个空位。左移操作会以0来填充这些空位，以便得到的结果是一个完整的32位二进制数</p><p>注意，左移不会影响操作数的符号位。换句话说，如果将-2向左移动5位，结果将是-64，而非64</p><h3 id="有符号的右移"><a href="#有符号的右移" class="headerlink" title="有符号的右移"></a>有符号的右移</h3><p>有符号的右移操作符由两个大于号（<code>&gt;&gt;</code>）表示，这个操作符会将数值向右移动，但保留符号位（即正负号标记）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oldNum = <span class="number">64</span>;</span><br><span class="line"><span class="comment">// 二进制100000</span></span><br><span class="line"><span class="keyword">var</span> newNum = oldNum &gt;&gt; <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 二进制10 十进制2</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>魁拔之《花痴诗》</title>
      <link href="/posts/44723a28/"/>
      <url>/posts/44723a28/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200901195831.jpeg"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>《魁拔》系列动漫我真的很喜欢，几乎真的百看不厌，其中最喜欢的场景就是舰长的“花痴诗”，其实是他男朋友留给她的航海图</p><h2 id="诗"><a href="#诗" class="headerlink" title="诗"></a>诗</h2><p>我的小鱼你醒了<br>还认识早晨吗<br>昨夜你曾经说<br>愿夜幕永不开启<br>你的香腮边轻轻滑落的<br>是你的泪，还是我的泪<br>吻别的那个季节<br>不是已经哭过了吗<br>我的指尖还记忆着<br>你慌乱的心跳<br>温柔的体香里<br>那一绺长发飘飘</p><p>我的小鱼你睡醒了吗<br>还记得夜晚吗<br>早晨你曾说过<br>愿黎明曙光永不落下<br>你的长发边轻轻滑过的<br>是他的手，还是我的手<br>不是沉睡了吗<br>我以为<br>你一尘不变</p><p>我的小鱼你离开了吗<br>一个人离开<br>从下着雪的湖面下离开<br>你曾说过<br>离别为了更好的再见<br>我无法忍受离别的画面<br>而选择</p><p>我的小鱼你会回来吗<br>还认识我吗<br>你曾经说过<br>变化的是时间，不变的是你我<br>你身边陪你走过的，是你自己的心还是他人的心<br>不是已经走远了吗<br>我还在看着夕阳<br>看着自己被拉长的身影</p><p>我的小鱼你不回来了<br>我认不出你了<br>我曾说过的也记不清了<br>变化的是时间，更是你我<br>我在守着黎明<br>等待黎明的曙光</p><p>我的小鱼<br>我是不是也该走了<br>我认识早晨<br>还记得你曾说愿夜幕永不开启<br>你的香腮边轻轻滑落的是我的泪<br>在那个季节<br>已经哭过了<br>我的指尖还记得<br>你慌乱的心跳<br>温柔的体香<br>那一绺长发飘飘</p><p>我的小鱼<br>你走的路在哪<br>我已经出发了</p><blockquote><p>素材来自网络，不保证真实和准确性</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 魁拔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>纪念我们的第二次七夕</title>
      <link href="/posts/6af9e097/"/>
      <url>/posts/6af9e097/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200829075717.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>其实很早之前在快手上看见这个小熊的时候我就很心动了，超级可爱呀有没有</p><p>但是一直没机会，刚好快到七夕了，我就打算趁着我们这个第二个七夕，自己亲自动手给她织一个</p><p>哈哈哈，完全没考虑自己会不会弄，就算最后没那么好看我看她敢嫌弃，哼</p><h2 id="无脑下单"><a href="#无脑下单" class="headerlink" title="无脑下单"></a>无脑下单</h2><p>下单之前还看了下评论，都说挺好弄得，我就蜜汁自信了，感觉自己也不是很手残的亚子</p><h2 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h2><p>跟着客服发给我的教程，成功的把两块透明半球织在了一起，说实话是真的不简单，手弄得超级疼</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200830172335.jpg" alt="第一块平板"></p><h2 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h2><p>第一天主要是熟悉针法和手法，哈哈，可累了，但是熟练了就没啥了，就是废手</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200830172458.jpg" alt="头和两只耳朵"></p><p>缝合头部和拉链的时候是真的太难了，要用针，笨手笨脚的我把手扎了好多次，超级疼</p><p>织两只耳朵的时候第一个太紧了，第二个就松了点，没想到弄得两个大小不一样了，哈哈哈哈</p><p>她要是敢嫌弃就小拳拳捶你</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200830172759.png" alt="头部整体"></p><p>这个真的超级难，因为我拉链留的口子有点小，所以缝合耳朵的时候手姿势超级难受，甚至针都拔不出来，用上了牙齿，哈哈，一根针被我咬的不像样子</p><p>很多地方手不够巧，留了好多线头，贼丑，，，，</p><p>我自己都看不下去</p><p>哈哈哈，还在某一个耳朵里给她留了一个彩蛋，估计永远都不会发现吧</p><h2 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h2><p>因为要复习的原因，最近没多少时间，今天就织了大肚子和两只胳膊</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200830173358.jpg" alt="肚子和胳膊"></p><p>这个时候手真的受不了了，超级超级疼，握着笔都疼，中指和食指就已经没啥感觉了，肿了</p><p>哈哈哈</p><p>果然这不适合男生干，实在是太笨了我，学不会，糟心</p><p>好丑</p><p>自己都嫌弃自己</p><p>啊哈哈哈，爱她爱她，臭雷傻傻，呸</p><h2 id="第四天"><a href="#第四天" class="headerlink" title="第四天"></a>第四天</h2><p>嘻嘻，终于弄完啦，虽然中间有各种的小瑕疵，我自己都看不下去，，，但是是送给臭雷傻傻的，就统统无视，哈哈哈哈</p><p>让她自己烦恼去，略略略</p><p>（希望她看见这篇文章不要打我</p><p>在付出了总共两天半的时间、两个手的中指和食指都肿了的代价之后</p><p>终于勉强的把这只小熊织了出来，效果图：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200830230644.jpg"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200830230701.jpg"></p><p>最后一张我自己背上试试，哈哈哈哈，忽略过于肥胖的我</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200830230741.jpg"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>我们在一起的这450多天里，我真的越来越喜欢这个特殊的磨人的小妖精，尽管我们也会有不和也会吵架</p><p>尽管我们两个相隔了2000多公里</p><p>但是我依然坚信爱情</p><p>依然坚信我们会修成正果</p><p>祝我们的爱情一帆风顺</p><p>祝我的小可爱永远18岁，永远可可爱爱，永远快快乐乐！</p><p><strong>爱你的大白萝卜</strong></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows实用小工具</title>
      <link href="/posts/2113f258/"/>
      <url>/posts/2113f258/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200828085520.png"></p><h2 id="TrafficMonitor"><a href="#TrafficMonitor" class="headerlink" title="TrafficMonitor"></a>TrafficMonitor</h2><blockquote><p>2022.9.8 更新</p></blockquote><p>最好用的网速&#x2F;内存&#x2F;CPU监控软件</p><p>官方地址：<a href="https://github.com/zhongyang219/TrafficMonitor">https://github.com/zhongyang219/TrafficMonitor</a></p><p>样张：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202209082020444.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN3/202209082021680.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>其实我本人是一个Linux党，但是顶不住真香诱惑。在疫情之前我一直都是Linux单系统，基本上把所有发行版尝了个遍，用的最多的当然是乌邦图，哈哈。</p><p>但是在家的时候我就发现了，我个人认为的一些Linux缺点(杠精请出门左转)，首先，我电脑是老本子，对显卡的驱动支持的不是怎么好，打CSGO掉帧严重，再就是很多在Windows上习以为常的操作就很困难，比如QQ和微信聊天，和手机之间在线传输文件等，仔细考虑了大半天之后，还是Windows真香。</p><p>但是Windows没有Linux简洁，很多简单的操作都会因为鼠标而变得繁琐，而且因为软件生态的原因各种流氓层出不穷，工作效率大大降低，所以这篇文章就整理一下我在Windows中是怎么提高工作效率的。</p><h2 id="火绒"><a href="#火绒" class="headerlink" title="火绒"></a>火绒</h2><p>首先，Windows的安全环境是真的一言难尽，所以一个杀毒、清理垃圾、自启动管理、弹窗拦截的安全管家是非常必要的，当然，如果你是裸奔党，请自行跳过。</p><p>我从高中拥有自己的电脑开始就一直使用火绒，没的说，业界良心，干干净净，功能简单明了，不会占用太多，默默的守护你的电脑。</p><blockquote><p>官网传送门：<a href="https://www.huorong.cn/">https://www.huorong.cn/</a></p></blockquote><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200828090555.png"></p><h2 id="DeskGo"><a href="#DeskGo" class="headerlink" title="DeskGo"></a>DeskGo</h2><p>安装软件太多，桌面快捷方式杂乱？桌面临时文件堆积如山？来试试DeskGo吧，这是腾讯出品的一款桌面整理的小工具，功能很强大：</p><p>优点</p><ul><li>一键桌面整理</li><li>新建格子</li><li>窗口折叠</li><li>文件搜索(堪比下面即将提到的everything)</li><li>常用&#x2F;最近文档</li></ul><p>缺点</p><ul><li>腾讯出品</li></ul><p>我刚开始看到这款工具是腾讯电脑管家旗下的，就有点拒绝了，但是看到效果又忍不住心里痒痒，还好官方提供了单文件版本，所以同学们下载的时候一定要看清楚，小心一下子下载了一家子。</p><blockquote><p>官网传送门：<a href="https://guanjia.qq.com/product/zmzl/">https://guanjia.qq.com/product/zmzl/</a></p></blockquote><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200828091121.png"></p><p>效果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200828091503.png"></p><h2 id="PowerToys-uTools"><a href="#PowerToys-uTools" class="headerlink" title="PowerToys&amp;uTools"></a>PowerToys&amp;uTools</h2><p>懒得在一堆快捷方式里去寻找自己要打开的应用，眼睛能看瞎，uTools就是最好的选择，而且还支持很多其他的强大功能，比如全局快捷键之类的，还有更多丰富的插件：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200828092245.png"></p><blockquote><p>官网传送门：<a href="https://www.u.tools/">https://www.u.tools/</a></p></blockquote><p>效果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200828092007.png"></p><p>更多功能可以自己探索哦~</p><p><a href="https://github.com/microsoft/PowerToys">PowerToys</a> 和UTOOLS一样，支持全局搜索，但是这是微软官方的一个小插件，所以功能更多更齐全更好用，但是没有Utools那么多的第三方插件</p><h2 id="Everything"><a href="#Everything" class="headerlink" title="Everything"></a>Everything</h2><p>这是一个非常非常强大的本地文件搜索工具，就是因为这个我可能养成了随手乱放文件的坏毛病，，，因为你放在哪他都能给你搜索出来，如果你安装了前面的DeskGo可自行考虑这个是不是要用</p><blockquote><p>官网传送门：<a href="https://www.voidtools.com/zh-cn/">https://www.voidtools.com/zh-cn/</a></p></blockquote><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200828092955.png"></p><h2 id="Snipaste"><a href="#Snipaste" class="headerlink" title="Snipaste"></a>Snipaste</h2><p>轻量级的截图工具，不用再为截个图而登录QQ啦，还可以自带水印哦</p><blockquote><p>官网传送门：<a href="https://www.snipaste.com/">https://www.snipaste.com/</a></p></blockquote><p>默认快捷键：<code>F1</code> 自定义截图</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200828093544.png"></p><h2 id="ScreenToGif"><a href="#ScreenToGif" class="headerlink" title="ScreenToGif"></a>ScreenToGif</h2><p>保存录屏为Gif，不用再为短时间的操作录屏而烦恼啦，默认临时文件保存五天</p><blockquote><p>官网传送门：<a href="https://www.screentogif.com/">https://www.screentogif.com/</a></p></blockquote><p>效果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200828094159.gif"></p><h2 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h2><p>图床工具，不用说了，功能强大，支持很多图床，一键上传生成链接</p><blockquote><p>官网传送门：<a href="https://molunerfinn.com/PicGo/">https://molunerfinn.com/PicGo/</a></p></blockquote><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200828200809.png"></p><h2 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h2><p>Markdown是写作必不可少的东西，typora是专为写作而生的Markdown编辑器，美观、简洁、功能强大，支持和PicGo联动，是写作最佳搭档</p><blockquote><p>官网传送门：<a href="https://www.typora.io/">https://www.typora.io/</a></p></blockquote><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200828201152.png"></p><p>今天就到这里，我要去上课啦，有时间再更新~</p><h2 id="7zip"><a href="#7zip" class="headerlink" title="7zip"></a>7zip</h2><p>非常非常牛逼且简洁的解压神器，甩哪些什么好压、2345好几条街</p><blockquote><p>官网传送门：<a href="https://www.7-zip.org/">https://www.7-zip.org/</a></p></blockquote><h2 id="IDM"><a href="#IDM" class="headerlink" title="IDM"></a>IDM</h2><p>非常牛逼的下载神器，非常之推荐下载使用</p><blockquote><p>官网传送门：<a href="http://www.internetdownloadmanager.com/">http://www.internetdownloadmanager.com/</a></p></blockquote><h2 id="MyDock-MyFinder"><a href="#MyDock-MyFinder" class="headerlink" title="MyDock&amp;MyFinder"></a>MyDock&amp;MyFinder</h2><p>在Windows上想要Mac的Dock和Finder栏？没关系，这两个小工具可以帮你做到</p><blockquote><p>官网传送门：<a href="https://www.mydockfinder.com/">https://www.mydockfinder.com/</a></p></blockquote><p>效果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200831082727.png"></p><blockquote><p>这个会有字体的bug，建议不要安装字体</p></blockquote><h2 id="Files-UWP"><a href="#Files-UWP" class="headerlink" title="Files UWP"></a>Files UWP</h2><blockquote><p>下载方法：直接在微软商店里搜索即可</p><p>开源地址：<a href="https://github.com/files-community/files-uwp">https://github.com/files-community/files-uwp</a></p></blockquote><p>超级好康的文件管理器，支持标签页、快速预览等强大简洁的功能，非常之推荐下载</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200831193720.png" alt="效果"></p><h2 id="格式工厂"><a href="#格式工厂" class="headerlink" title="格式工厂"></a>格式工厂</h2><p>功能最全的文件格式转换工具</p><blockquote><p>官网传送门：<a href="https://www.pcgeshi.com/l">https://www.pcgeshi.com/l</a></p></blockquote><h2 id="硕鼠"><a href="#硕鼠" class="headerlink" title="硕鼠"></a>硕鼠</h2><p>我用过的最强大的网页视频解析工具，某哔哩的视频都可一键直接下载</p><blockquote><p>官网传送门：<a href="https://www.flvcd.com/">https://www.flvcd.com/</a></p></blockquote><h2 id="Adobe-Acrobat-Pro-DC"><a href="#Adobe-Acrobat-Pro-DC" class="headerlink" title="Adobe Acrobat Pro DC"></a>Adobe Acrobat Pro DC</h2><p>adobe官方的PDF阅读和编辑器，非常好用，可在软件安装管家找到破解版</p><blockquote><p>官网传送门：<a href="https://acrobat.adobe.com/us/en/acrobat/acrobat-pro.html#">https://acrobat.adobe.com/us/en/acrobat/acrobat-pro.html#</a></p></blockquote><h2 id="冰点文库下载器"><a href="#冰点文库下载器" class="headerlink" title="冰点文库下载器"></a>冰点文库下载器</h2><p>支持常见大部分在线文库下载转PDF，亲测效果很棒，只要支持全部预览的文档都可下载</p><blockquote><p>官网传送门：<a href="http://www.bingdian001.com/">http://www.bingdian001.com/</a></p></blockquote><p>需要注意的是官方版的软件中含有恶意代码，可能会篡改浏览器主页，使用的时候小心点</p><blockquote><p>绿色版：</p><p>链接：<a href="https://pan.baidu.com/s/11DM2t19ZYGKHTKfcjUudFg">https://pan.baidu.com/s/11DM2t19ZYGKHTKfcjUudFg</a><br>提取码：itjw</p></blockquote><h2 id="CAJViewer"><a href="#CAJViewer" class="headerlink" title="CAJViewer"></a>CAJViewer</h2><p>CAJ文件是中国知网的很多文献下载下来的格式，电脑上是没有软件能打开的，所以需要一个阅读器，方便我们查看文献。</p><blockquote><p>官网传送门：<a href="http://cajviewer.cnki.net/index.html">http://cajviewer.cnki.net/index.html</a></p></blockquote><h2 id="XDM"><a href="#XDM" class="headerlink" title="XDM"></a>XDM</h2><p>IDM作为一个非常牛逼的下载器，唯一的缺点就是需要付费，当然破解版也不是不行，最好还是支持正版的好</p><p>XDM就是代替IDM的有一个高效的下载神器，而且免费开源，简直无敌好用</p><blockquote><p>开源地址：<a href="https://github.com/subhra74/xdm">https://github.com/subhra74/xdm</a></p></blockquote><h2 id="Sync"><a href="#Sync" class="headerlink" title="Sync"></a>Sync</h2><p>超级牛逼的资源共享平台和同步神器，可在多设备之间今天内网、外网同步资源，P2P网络</p><blockquote><p>我的蓝奏云：<a href="https://dabailuobo.lanzous.com/b01tpb32h">https://dabailuobo.lanzous.com/b01tpb32h</a></p></blockquote><h2 id="TaskbarTools"><a href="#TaskbarTools" class="headerlink" title="TaskbarTools"></a>TaskbarTools</h2><p>这是一个win10任务栏透明化小插件，体积非常小，300多kb，运行起来也非常小，没有图标，支持以进程方式运行</p><blockquote><p>项目地址：<a href="https://github.com/Elestriel/TaskbarTools">https://github.com/Elestriel/TaskbarTools</a></p></blockquote><h2 id="PandaOCR"><a href="#PandaOCR" class="headerlink" title="PandaOCR"></a>PandaOCR</h2><p>多功能OCR图文识别+翻译+朗读+弹窗+公式+表格+图床+搜图+二维码</p><blockquote><p>项目地址：<a href="https://github.com/miaomiaosoft/PandaOCR">https://github.com/miaomiaosoft/PandaOCR</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript进阶篇(一)</title>
      <link href="/posts/b3c62c22/"/>
      <url>/posts/b3c62c22/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200828081656.png"></p><blockquote><p>注：此篇文章适合有一定JavaScript基础的同学食用，非零基础</p></blockquote><h2 id="生命周期概览"><a href="#生命周期概览" class="headerlink" title="生命周期概览"></a>生命周期概览</h2><p>典型客户端Web应用的生命周期从用户在浏览器地址栏输入一串URL，或单击一个链接开始。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200828082204.png"></p><p>从用户的角度来说，浏览器构建了发送至服务器（序号2）的请求，该服务器处理了请求（序号3）并形成了一个通常由HTML、CSS和JavaScript代码所组成的响应。当浏览器接收了响应（序号4）时，我们的客户端应用开始了它的生命周期。由于客户端Web应用是图形用户界面（GUI）应用，其生命周期与其他的GUI应用相似（例如标准的桌面应用或移动应用），其执行步骤：</p><ul><li>页面构建——创建用户界面；</li><li>事件处理——进入循环（序号5）从而等待事件（序号6）的发生，发生后调用事件处理器</li></ul><p>应用的生命周期随着用户关掉或离开页面（序号7）而结束。</p><h3 id="页面构建阶段"><a href="#页面构建阶段" class="headerlink" title="页面构建阶段"></a>页面构建阶段</h3><p>当Web应用能被展示或交互之前，其页面必须根据服务器获取的响应（通常是HTML、CSS和JavaScript代码）来构建。页面构建阶段的目标是建立Web应用的UI，其主要包括两个步骤：</p><ul><li>解析HTML代码并构建文档对象模型（DOM）</li><li>执行JavaScript代码</li></ul><p>步骤1会在浏览器处理HTML节点的过程中执行，步骤二会在HTML解析到一种特殊节点——脚本节点（包含或引用JavaScript代码的节点）时执行。页面构建阶段中，这两个步骤会交替执行多次</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200828082609.png"></p><p>页面构建阶段始于浏览器接收HTML代码时，该阶段为浏览器构建页面UI的基础。通过解析收到的HTML代码，构建一个个HTML元素，构建DOM。在这种对HTML结构化表示的形式中，每个HTML元素都被当作一个节点。</p><p>当浏览器遇到第一个脚本元素时，它已经用多个HTML元素创建了一个简单的DOM树。</p><blockquote><p>附：</p><p>HTML5规范：<a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5">https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5</a></p><p>DOM3规范：<a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model">https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model</a></p></blockquote><p>需要注意的是，每当解析到脚本元素时，浏览器就会停止从HTML构建DOM，并开始执行JavaScript代码，并不是一起进行构建，因为JavaScript中可能会有对DOM进行操作，如果同时进行构建可能会引发一些不必要的错误。</p><p>所有包含在脚本元素中的JavaScript代码由浏览器的JavaScript引擎执行，例如，Firefox的Spidermonkey引擎，Chrome和Opera和V8引擎和Edge的（IE的）Chakra引擎。由于代码的主要目的是提供动态页面，故而浏览器通过全局对象提供了一个API使JavaScript引擎可以与之交互并改变页面内容。</p><blockquote><p>页面构建一小时，适配就搞一天。</p><p>好消息是微软即将停止对IE的支持，IE将退出历史舞台，不必再费心费力的去考虑IE用户</p></blockquote><h3 id="JavaScript中的全局对象"><a href="#JavaScript中的全局对象" class="headerlink" title="JavaScript中的全局对象"></a>JavaScript中的全局对象</h3><p>浏览器暴露给JavaScript引擎的主要全局对象是window对象，它代表了包含着一个页面的窗口。window对象是获取所有其他全局对象、全局变量（甚至包含用户定义对象）和浏览器API的访问途径。全局window对象最重要的属性是document，它代表了当前页面的DOM。通过使用这个对象，JavaScript代码就能在任何程度上改变DOM，包括修改或移除现存的节点，以及创建和插入新的节点。</p><blockquote><p>浏览器API：</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/API">https://developer.mozilla.org/en-US/docs/Web/API</a></p></blockquote><h3 id="JavaScript代码的不同类型"><a href="#JavaScript代码的不同类型" class="headerlink" title="JavaScript代码的不同类型"></a>JavaScript代码的不同类型</h3><ul><li>全局代码</li><li>函数代码</li></ul><p>比如：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200828084133.png"></p><p>包含在函数内的代码叫作函数代码，而在所有函数以外的代码叫作全局代码，全局代码由JavaScript引擎以一种直接的方式自动执行，每当遇到这样的代码就一行接一行地执行</p><p>若想执行函数代码，则必须被其他代码调用：既可以是全局代码，也可以是其他函数，还可以由浏览器调用。</p><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><p>客户端Web应用是一种GUI应用，也就是说这种应用会对不同类型的事件作响应</p><p>浏览器执行环境的核心思想基于：同一时刻只能执行一个代码片段，即所谓的单线程执行模型</p><p>当一个事件抵达后，浏览器需要执行相应的事件处理函数。这里不保证用户总会极富耐心地等待很长时间，直到下一个事件触发。所以，浏览器需要一种方式来跟踪已经发生但尚未处理的事件。为实现这个目标，浏览器使用了事件队列</p><p>所有已生成的事件（无论是用户生成的，例如鼠标移动或键盘按压，还是服务器生成的，例如Ajax事件）都会放在同一个事件队列中，以它们被浏览器检测到的顺序排列</p><p>事件处理的过程：</p><ul><li>浏览器检查事件队列头</li><li>如果浏览器没有在队列中检测到事件，则继续检查</li><li>如果浏览器在队列头中检测到了事件，则取出该事件并执行相应的事件处理器（如果存在）。在这个过程中，余下的事件在事件队列中耐心等待，直到轮到它们被处理</li></ul><p>由于一次只能处理一个事件，所以我们必须格外注意处理所有事件的总时间。执行需要花费大量时间执行的事件处理函数会导致Web应用无响应</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200828183706.png"></p><blockquote><p>重点注意浏览器在这个过程中的机制，其放置事件的队列是在页面构建阶段和事件处理阶段以外的。这个过程对于决定事件何时发生并将其推入事件队列很重要，这个过程不会参与事件处理线程</p></blockquote><h3 id="事件是异步的"><a href="#事件是异步的" class="headerlink" title="事件是异步的"></a>事件是异步的</h3><p>事件可能会以难以预计的时间和顺序发生（强制用户以某个顺序按键或单击是非常奇怪的）</p><p>我们对事件的处理，以及处理函数的调用是异步的</p><p>如下类型的事件会在其他类型事件中发生</p><ul><li>浏览器事件，例如当页面加载完成后或无法加载时</li><li>网络事件，例如来自服务器的响应（Ajax事件和服务器端事件）</li><li>用户事件，例如鼠标单击、鼠标移动和键盘事件</li><li>计时器事件，当 <code>timeout</code> 时间到期或又触发了一次时间间隔。</li></ul><p>事件处理的概念是Web应用的核心，除了全局代码，页面中的大部分代码都将作为某个事件的结果执行</p><p>在事件能被处理之前，代码必须要告知浏览器我们要处理特定事件</p><h3 id="注册事件"><a href="#注册事件" class="headerlink" title="注册事件"></a>注册事件</h3><p>事件处理器是当某个特定事件发生后我们希望执行的函数，为了达到这个目标，我们必须告知浏览器我们要处理哪个事件，这个过程叫作注册事件处理器</p><p>在客户端Web应用中，有两种方式注册事件：</p><ul><li>通过把函数赋给某个特殊属性</li><li>通过使用内置 <code>addEventListener</code> 方法</li></ul><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br></pre></td></tr></table></figure><p>通过这种方式，事件处理器就会注册到load事件上（当DOM已经就绪并全部构建完成，就会触发这个事件）</p><p>把函数赋值给特殊属性是一种简单而直接的注册事件处理器方式，但是致命的缺点是对于某个事件只能注册一个事件处理器</p><p><code>addEventListener</code> 方法让我们能够注册尽可能多的事件</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">addEventListener</span> (<span class="string">&quot;mousemove&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> second = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;second&quot;</span>);</span><br><span class="line">    addMessage (second, <span class="string">&quot;Event: mousemove&quot;</span>;)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">addEventListener</span> (<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> second = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;second&quot;</span>);</span><br><span class="line">        addMessage (second, <span class="string">&quot;Event: click&quot;</span>;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>当鼠标移动或者单击body时，两个事件就会被触发，添加一条消息到id为second的元素上</p><h3 id="处理事件"><a href="#处理事件" class="headerlink" title="处理事件"></a>处理事件</h3><p>事件处理背后的主要思想是当事件发生时，浏览器调用相应的事件处理器</p><p>由于单线程执行模型，所以同一时刻只能处理一个事件，任何事件只能等待当前事件被处理完毕之后才会被执行</p><p>在上面的例子中，浏览器的动作是这样的：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200905080214.png" alt="鼠标移动和单击的事件处理阶段"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>浏览器接收的HTML代码用作创建DOM的蓝图，它是客户端Web应用结构的内部展示阶段</p><p>我们使用JavaScript代码来动态地修改DOM以便给Web应用带来动态行为</p><p>客户端Web应用的执行分为两个阶段：</p><ul><li><p>页面构建代码是用于创建DOM的，而全局JavaScript代码是遇到script节点时执行的。在这个执行过程中，JavaScript代码能够以任意程度改变当前的DOM，还能够注册事件处理器——事件处理器是一种函数，当某个特定事件（例如，一次鼠标单击或键盘按压）发生后会被执行。注册事件处理器很容易：使用内置的addEventListener方法</p></li><li><p>事件处理——在同一时刻，只能处理多个不同事件中的一个，处理顺序是事件生成的顺序。事件处理阶段大量依赖事件队列，所有的事件都以其出现的顺序存储在事件队列中。事件循环会检查实践队列的队头，如果检测到了一个事件，那么相应的事件处理器就会被调用。</p></li></ul><h2 id="函数：定义与参数"><a href="#函数：定义与参数" class="headerlink" title="函数：定义与参数"></a>函数：定义与参数</h2><blockquote><p>像普通人一样编写代码和像“忍者”一样编写代码的最大差别在于是否把JavaScript作为函数式语言（functional language）来理解。对这一点的认知水平决定了你编写的代码水平。</p><p>——《JavaScript忍者秘籍》</p></blockquote><p>JavaScript中最关键的概念是：函数是第一类对象（first-class objects），或者说它们被称作一等公民（first-class citizens）</p><p>函数与对象共存，函数也可以被视为其他任意类型的JavaScript对象，函数和那些更普通的JavaScript数据类型一样，它能被变量引用，能以字面量形式声明，甚至能被作为函数参数进行传递</p><p>函数及函数式概念之所以如此重要，其原因之一在于函数是程序执行过程中的主要模块单元。除了全局JavaScript代码是在页面构建的阶段执行的，我们编写的所有的脚本代码都将在一个函数内执行</p><p>JavaScript中对象有以下几种常用功能：</p><ul><li><p>对象可通过字面量来创建{}</p></li><li><p>对象可以赋值给变量、数组项，或其他对象的属性</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200905081659.png"></p></li><li><p>对象可以作为参数传递给函数</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200905081706.png"></p></li><li><p>对象可以作为函数的返回值</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200905081713.png"></p></li><li><p>对象能够具有动态创建和分配的属性</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200905081720.png"></p></li></ul><p>不同于很多其他编程语言，在JavaScript中，我们几乎能够用函数来实现同样的事</p><h3 id="函数是第一类对象"><a href="#函数是第一类对象" class="headerlink" title="函数是第一类对象"></a>函数是第一类对象</h3><p>JavaScript中函数拥有对象的所有能力，也因此函数可被作为任意其他类型对象来对待。当我们说函数是第一类对象的时候，就是说函数也能够实现以下功能：</p><ul><li><p>通过字面量创建</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ninjaFunction</span> () &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>赋值给变量，数组项或其他对象的属性</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200905081956.png"></p></li><li><p>作为函数的参数来传递</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200905082521.png"></p></li><li><p>作为函数的返回值</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200905082530.png"></p></li><li><p>具有动态创建和分配的属性</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200905082537.png"></p></li></ul><p>对象能做的任何一件事，函数也都能做。函数也是对象，唯一的特殊之处在于它是可调用的（invokable），即函数会被调用以便执行某项动作</p><blockquote><p>把函数作为第一类对象是函数式编程（functional programming）的第一步，函数式编程是一种编程风格，它通过书写函数式（而不是指定一系列执行步骤，就像那种更主流的命令式编程）代码来解决问题。函数式编程可以让代码更容易测试、扩展及模块化</p></blockquote><p>第一类对象的特点之一是，它能够作为参数传入函数。对于函数而言，这项特性也表明：如果我们将某个函数作为参数传入另一个函数，传入函数会在应用程序执行的未来某个时间点才执行，说的一般一点就是回调函数（callbackfunction）</p><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>每当我们建立了一个将在随后调用的函数时，无论是在事件处理阶段通过浏览器还是通过其他代码，我们都是在建立一个回调（callback）</p><p>回调就是在执行过程中，我们建立的函数会被其他函数在稍后的某个合适时间点“再回来调用”</p><p>有效运用JavaScript的关键在于如何使用回调函数</p><p>下面这个函数完全没什么实际用处，它的参数接收另一个函数的引用，并作为回调调用该函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">useless</span> (ninjaCallBack) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">ninjaCallBack</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个例子只是告诉我们，这个函数完全没什么实际用处，它的参数接收另一个函数的引用，并作为回调调用该函数，</p><p>再来看一个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getText</span> () &#123;</span><br><span class="line">    report (<span class="string">&quot;in getText function&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> text;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 简单的函数定义，仅返回一个全局变量</span></span><br><span class="line">report (<span class="string">&quot;before making all the calls&quot;</span>);</span><br><span class="line">assert (useless (getText) === text,</span><br><span class="line">       <span class="string">&quot;the useless function is working&quot;</span> + text);</span><br><span class="line">report (<span class="string">&quot;after the calls have been made&quot;</span>);</span><br><span class="line"><span class="comment">// 把getText作为回调函数传入上面的useless函数</span></span><br></pre></td></tr></table></figure><p>断言函数assert通常使用两个参数。第一个参数是用于断言的表达式，本例中，我们需要确定使用参数getText调用useless函数返回的值与变量text是否相等 <code>useless(getText) === text</code> ，若第一个参数的执行结果为true，断言通过；反之，断言失败。第二个参数是与断言相关联的信息，通常会根据通过&#x2F;失败来输出到日志上</p><p>断言函数实现方法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> * @Author: DaBaiLuoBo</span></span><br><span class="line"><span class="comment"> * @Date: 2020-09-02 22:27:45</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">assert</span> (value, desc) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            li.<span class="property">className</span> = value ? <span class="string">&quot;pass&quot;</span> : <span class="string">&quot;fail&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            li.<span class="title function_">appendChild</span>(<span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(desc));</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;results&quot;</span>).<span class="title function_">appendChild</span>(li);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 创建一个assert方法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">assert</span>(<span class="literal">true</span>, <span class="string">&quot;the test suite is running.&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">assert</span>(<span class="literal">false</span>, <span class="string">&quot;Fail&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 通过断言执行测试用例</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#results</span> <span class="selector-tag">li</span><span class="selector-class">.pass</span> &#123;<span class="attribute">color</span>: green;&#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#results</span> <span class="selector-tag">li</span><span class="selector-class">.fail</span> &#123;<span class="attribute">color</span>: red;&#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  定义输出结果样式  --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;results&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>自定义函数 <code>report()</code> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">report</span>(<span class="params">text</span>) &#123;</span><br><span class="line">    assert (<span class="literal">true</span>,text);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在来一个小例子测试一下吧：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> text = <span class="string">&#x27;test test&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useless</span> (ninjaCallBack) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_">ninjaCallBack</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getText</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">report</span>(<span class="string">&quot;in getText function&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> text;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">report</span>(<span class="string">&quot;before making all the calls&quot;</span>);</span><br><span class="line"><span class="title function_">assert</span>(<span class="title function_">useless</span>(getText) === text,</span><br><span class="line"><span class="string">&quot;the useless function is working&quot;</span> + text);</span><br><span class="line"><span class="title function_">report</span>(<span class="string">&quot;after the calls have been made&quot;</span>);</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200905161021.png"></p><p>getText参数调用useless回调函数后，得到了期望的返回值，代码执行过程：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200905161319.png"></p><p>JavaScript的函数式本质让我们能把函数作为第一类对象，所以上述例子中的代码可以被简化为：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200905161605.png"></p><p>JavaScript的重要特征之一是可以在表达式出现的任意位置创建函数，除此之外这种方式能使代码更紧凑和易于理解（把函数定义放在函数使用处附近）</p><p>当一个函数不会在代码的多处位置被调用时，该特性可以避免用非必须的名字污染全局命名空间</p><h3 id="使用比较器排序"><a href="#使用比较器排序" class="headerlink" title="使用比较器排序"></a>使用比较器排序</h3><p>一般情况下只要我们拿到了一组数据集，就很可能需要对它进行排序。假如有一组随机序列的数字数组：0, 3, 2, 5, 7, 4, 8, 1</p><p>JavaScript数组可以用sort方法。利用该方法可以只定义一个比较算法，比较算法用于指示按什么顺序排列，这才是回调函数所要介入的</p><p>不同于让排序算法来决定哪个值在前哪个值在后，我们将会提供一个函数来执行比较。我们会让排序算法能够获取这个比较函数作为回调，使算法在其需要比较的时候，每次都能够调用回调</p><p>该回调函数的期望返回值为：</p><ul><li>如果传入值的顺序需要被调换，返回正数</li><li>不需要调换，返回负数</li><li>两个值相等，返回0</li></ul><p>对于排序上述数组，我们对比较值做减法就能得到我们所需要的值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> values = [<span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">1</span>]</span><br><span class="line">values.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">value1,value2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> value1 - value2;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>没有必要思考排序算法的底层细节（甚至是选择了什么算法）。JavaScript引擎每次需要比较两个值的时候都会调用我们提供的回调函数</p><p>函数式方式让我们能把函数作为一个单独实体来创建，正像我们对待其他类型一样，创建它、作为参数传入一个方法并将它作为一个参数来接收，函数就这样显示了它一等公民的地位</p><h2 id="函数作为对象的乐趣"><a href="#函数作为对象的乐趣" class="headerlink" title="函数作为对象的乐趣"></a>函数作为对象的乐趣</h2><p>可以给函数添加属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个新的对象并赋予一个新的属性</span></span><br><span class="line"><span class="keyword">var</span> ninja = &#123;&#125;;</span><br><span class="line">ninja.<span class="property">name</span> = <span class="string">&quot;hitsuke&quot;</span>;</span><br><span class="line"><span class="comment">// 创建一个函数并赋予一个新的属性</span></span><br><span class="line"><span class="keyword">var</span> wieldSword = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line">wieldSword.<span class="property">swordType</span> = <span class="string">&quot;katana&quot;</span>;</span><br></pre></td></tr></table></figure><p>这种特性所能做的更有趣的事：</p><ul><li>在集合中存储函数使我们轻易管理相关联的函数，例如，某些特定情况下必须调用的回调函数</li><li>记忆让函数能记住上次计算得到的值，从而提高后续调用的性能</li></ul><p>今天就到这里，有时间再更新~</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生活的目的是什么</title>
      <link href="/posts/523a519a/"/>
      <url>/posts/523a519a/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200824223412.png"></p><blockquote><p>本文作者：Linux老李</p><p>本文为原创文章，未经授权禁止转载和用作其他用途</p></blockquote><p>生活的目的是什么呢</p><p>遇见好的人和美好的事物。</p><p>做自己喜欢的事和人。</p><p>同时有自己爱的和爱自己的。</p><p>可以为一些很小事情，或者是一个很小的细节开心。</p><p>当然也可以为一下事和细节难过。</p><p>生活的定义多了去了。</p><p>年轻的人可能觉得生活是这个那个梦想理想，并可以为之努力的。</p><p>（除开那种不上进不积极的人来说）</p><p>老年人可能觉得生活是今天起床有个好心情，吃完早饭再做点什么很平常的事。</p><p>《东方快车谋杀案》中有这样一句话：</p><p>“到了我们这个阶段，已经很清楚自己喜欢什么，讨厌什么。喜欢就尽情享受，讨厌就一点不做。”</p><p>人活于世，最慷慨的方式，不过就是把自己还给自己。不世俗、不谄媚、</p><p>不囿于条条框框，活得自在安然、天真热烈，这才是我们向往的成熟和生活吧。</p><p>和别人聊聊天，逗逗小狗，散散步之类。</p><p>总之，生活大部分时候还是那些无趣又可爱，平淡又有趣的细节堆积起来的。</p><p>emmm..</p><p>于我而言吧，我的生活就是今天我认真，努力学习了（虽然我真的很很很水水水），我碰到什么事情开心了，然后明天也是如此。</p><p>想起来一些话。</p><p>“生活就是一个七天接着一个七天。不是日子重复导致了枯燥和无聊，而是你枯燥无聊，把气撒在了日子的重复上。”</p><p>还有。</p><p>“生活它就这么继续，也许不太尽如人意，也许就这样才显出生趣，才好避免一些刻意”</p><p>那什么，现在社会不是大多数人很浮躁，什么物欲横流啥，什么“不劳而获”的，大家就总想着这个那个，然后又容易被什么xx风带偏。</p><p>花了多少时间学习？看了多少书？主动学习还是被动学习？有动手实践多少？考试是混的还是真才实学？玩了多少游戏？然后陷入一片沉寂中。</p><p>互联网发达了，自从有了手机，信息多了，人，浮躁了。</p><p>打游戏是一些学生日常重要的事务，在虚幻中越伟大，在现实中就越脆弱。</p><p>看书，能够完整看过一本书的人少的可怜。能够系统学习，踏实上进的人少了。</p><p>都不流行看书学习了，喜欢看视频来的轻松。光看，不动手，不敢动手，或者一动手就懵逼，自信心受挫似乎很常见。</p><p>挺多人获取信息，喜欢网上搜索，在五花八门的信息加毒的情况下，找不到准确信息，找不到有营养的信息。</p><p>但当事者浑然不觉，沉醉于网络自信，久而久之，心态越浮躁了，认为不学也照样可以搜到知识。</p><p>这才是最大的毒瘤，老想投机取巧，求速成。</p><p>还有各种热搜，明星的那种什么新闻（我不知道叫啥）看的不停，但这种又和自身没啥关系，又很喜欢带入角色。</p><p>还有大多都是被流量“绑架”了，被xx短视频软件抢走了注意力和独立思考的能力，开始变的人云亦云起来。</p><p>也许，不读书造成的这种无地自容的情形 在生活中也有很多，</p><p>只不过和我们对话的那些阅读的人不会像领导或专家一样础咄逼人，</p><p>Ta 们只会在内心中暗暗鄙视：</p><p>原來这是个不学无术的家伙而我们目己反而不觉，仍然在那里滔滔 不绝地暴露自己的无知。</p><p>其实你在生活中戴着面具表演的时候．深知自己口中说出的那些话连自己都不知道皇什么东西，</p><p>内心深处尚存那么一丝的怯懦和心虛，说明你还没有在虛伪的生活里完全迷失。</p><p>有时候吧我感觉做一个清心寡欲的人，保留那么一些欲望和啥东西，把自我需求和自我满足的优先级提高一点，可能会更好。</p><p>又想到一些话。</p><p>“做自己喜欢做的事，爱自己所爱的人。</p><p>淡淡的来，淡淡的去，淡淡的相处，给人以宁静，予己以清幽；</p><p>静静的来，静静的去，静静的守望，给人以宽松，予己以从容。</p><p>这就是我，我就是这样的，淡淡的就是我，遇见一切事情都是淡淡的，我的淡淡不是一种无所为，而是一种心境。”</p><p>最后，</p><p>今天不成功的话还有明天，</p><p>明天不成功的话还有后天，</p><p>后天不成功的话还有大后天，</p><p>无论走到什么地方都会有明天。</p><p>咚咚咔哇啾，咚咔哇啾。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Uptime免费网站存活监控</title>
      <link href="/posts/ba779920/"/>
      <url>/posts/ba779920/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200820100301.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对于静态托管网站来说，如果你放在不同的仓库，或者是托管服务商，那么有一个必要的网站存活监控是非常重要的，实时监控哪个仓库存活，哪个仓库无法访问，以便及时调整自己的线路。</p><p>UptimeRobot是一个免费提供网站存活监控的服务商，免费版本可以同时监控50个站点，最高频率可以达到5分钟一次，而且还可以自己生成公共页面以便访问，还可以绑定自定义域名。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>网站地址：<a href="https://uptimerobot.com/">https://uptimerobot.com/</a></p><p>注册什么的就不用说了吧</p><h2 id="创建监视器"><a href="#创建监视器" class="headerlink" title="创建监视器"></a>创建监视器</h2><p>注册完成之后登录会直接进入控制台</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200820104637.png"></p><p>创建新的监视器</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200820104721.png"></p><p>选择你要监视的方式，<code>https</code> 是通过访问的形式，<code>ping</code> 就是ping你的地址，<code>port</code> 就是监视端口</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200820105159.jpg"></p><p>这就创建好一个监视器啦</p><h2 id="生成公共页面"><a href="#生成公共页面" class="headerlink" title="生成公共页面"></a>生成公共页面</h2><p>我们要访问监视器总不能每次都登录吧，Uptime贴心的准备了可以生成公共页面，还可以绑定自定义域名哦</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200820105358.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200820105432.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200820105544.png"></p><p>选择要显示的监视器，是全部显示还是只显示选中</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200820105833.png"></p><p>创建完成之后就可以使用你的自定义域名来访问啦，或者使用默认域名</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200820105936.png"></p><p>在这里进行访问</p><p>这里是我的例子：<a href="https://status.dabailuobo.com/">大白萝卜の网站监控</a></p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>如果你不喜欢他生成的页面，或者想要自己部署，那么你可以使用别人制作的主题，地址：</p><ul><li><a href="https://github.com/Flexiston/uptime-status">https://github.com/Flexiston/uptime-status</a></li><li><a href="https://github.com/zykjofficial/uptime-status">https://github.com/zykjofficial/uptime-status</a></li></ul><p>两个一样，随便选一个</p><p>fork到自己仓库后，修改相关配置即可</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200820110242.png"></p><p>三种APIkey自己按照需要任选其一生成即可，在配置文件中进行修改，之后自己部署完毕就OK啦</p><p>大佬的例子：<a href="https://status.flexiston.com/">Flexiston 的网站状态</a>   <a href="https://status.zykjofficial.top/">卓越科技- 的网站状态</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站存活监控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>emoji速查复制</title>
      <link href="/posts/259b30dc/"/>
      <url>/posts/259b30dc/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200819100931.png"></p><h2 id="😃-表情符号与人物"><a href="#😃-表情符号与人物" class="headerlink" title="😃 表情符号与人物"></a>😃 表情符号与人物</h2><p>😀 😃 😄 😁 😆 😅 🤣 😂 🙂 🙃 😉 😊 😇 🥰 😍 🤩 😘 😗 😚 😙 😋 😛 😜 🤪 😝 🤑 🤗 🤭 🤫 🤔 🤐 🤨 😐 😑 😶 😏 😒 🙄 😬 🤥 😌 😔 😪 🤤 😴 😷 🤒 🤕 🤢 🤮 🤧 🥵 🥶 🥴 😵 🤯 🤠 🥳 😎 🤓 🧐 😕 😟 🙁 😮 😯 😲 😳 🥺 😦 😧 😨 😰 😥 😢 😭 😱 😖 😣 😞 😓 😩 😫 🥱 😤 😡 😠 🤬 😈 👿 💀</p><p> 💩 🤡 👹 👺 👻 👽 👾 🤖 😺 😸 😹 😻 😼 😽 🙀 😿 😾 💋 </p><p>👋 🤚 🖐 ✋ 🖖 👌 🤏 ✌ 🤞 🤟 🤘 🤙 👈 👉 👆 🖕 👇 ☝ 👍 👎 ✊ 👊 🤛 🤜 👏 🙌 👐 🤲 🤝 🙏 ✍ 💅 🤳 💪 🦾 🦿 🦵 🦶 👂 🦻 👃 🧠 🦷 🦴 👀 👅 👄 </p><p>👶 🧒 👦 👧 🧑 👱 👨 🧔 👩 🧓 👴 👵 🙍 🧏 🤴 👸 👳 👲 🧕 🤵 👰 🤰 🤱 👼 🎅 🤶 🦸 🗣 👤 👥 </p><p>👣 🧳 🌂 ☂ 🎃 🧵 🧶 👓   🥽 🥼 🦺   👔 👕 👖 🧣 🧤 🧥 🧦 👗 👘 🥻 🩱 🩲 🩳 👙 👚 👛 👜 👝 🎒 👞 👟 🥾 🥿 👠 👡 🩰 👑 👒 🎩 🎓 🧢 ⛑ 💄 💍 💼 🩸</p><h2 id="🐻-动物与自然"><a href="#🐻-动物与自然" class="headerlink" title="🐻 动物与自然"></a>🐻 动物与自然</h2><p>🙈 🙉 🙊 💥 💫 💦 💨 🐵 🐒 🦍 🦧 🐶 🐕 🦮 🐕‍🦺 🐩 🐺 🦊 🦝 🐱 🐈 🦁 🐯 🐅 🐆 🐴</p><p> 🐎 🦄 🦓 🦌 🐮 🐂 🐃 🐄 🐷 🐖 🐗 🐽 🐏 🐑 🐐 🐪 🐫 🦙 🦒 🐘 🦏 🦛 🐭 🐁 🐀 🐹 </p><p>🐰 🐇 🦔 🦇 🐻 🐨 🐼 🦥 🦦 🦨 🦘 🦡 🐾 🦃 🐔 🐓 🐣 🐤 🐥 🐦 🐧 🕊 🦅 🦆 🦢 🦉 🦩 </p><p>🦚 🦜 🐸 🐊 🐢 🦎 🐍 🐲 🐉 🦕 🦖 🐳 🐋 🐬 🐟 🐠 🐡 🦈 🐙 🐚 🐌 🦋 🐛 🐜 🐝 🐞 🦗 </p><p>🕷 🕸 🦂 🦟 🦠 💐 🌸 💮 🌹 🥀 🌺 🌻 🌼 🌷 🌱 🌲 🌳 🌴 🌵 🌾  🌿 ☘ 🍀 🍁 🍂 🍃  🍄 🌰 </p><p>🦀 🦞 🦐 🦑 🌍 🌎 🌏🌐 🌑 🌒 🌓 🌔 🌕 🌖 🌗 🌘🌙 🌚 🌛 🌜 🌝 🌞 ⭐ 🌟 r🌠 ☁ ⛅ </p><p>⛈ 🌤 🌧 🌨 🌩  🌪 🌈 ☂ ☔ ⚡ ⛄ 🔥 💧 🌊 🎄 ✨ 🎋 🎍</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> emoji </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows下的包管理神器</title>
      <link href="/posts/9916c4ed/"/>
      <url>/posts/9916c4ed/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200818171152.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>众所周知，包管理工具在一个系统中是必不可少的，能给应用程序的安装、卸载等管理带来极大的方便，Linux上有著名的APT和NPM等优秀的工具，MacOS上的homebrew等，而Windows上大家基本上都是鼠标点一点，就能安装好应用程序，很少人用命令行去操作的吧，当然scoop也是开发者的首选。</p><p>但是微软就在悄悄地搞事情，开发了一款Windows上可以使用的包管理工具Winget，项目地址：<a href="https://github.com/microsoft/winget-cli">https://github.com/microsoft/winget-cli</a></p><p>但只是还在开发阶段，所以可能存在很多不稳定的东西，大家谨慎使用，我只是喜欢尝鲜试试而已。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>官方文档：<a href="https://docs.microsoft.com/zh-cn/windows/package-manager/winget/">https://docs.microsoft.com/zh-cn/windows/package-manager/winget/</a></p><p>可使用多种方法安装 <strong>winget</strong> 工具：</p><ul><li><a href="https://www.microsoft.com/p/app-installer/9nblggh4nns1?ocid=9nblggh4nns1_ORSEARCH_Bing&rtc=1&activetab=pivot:overviewtab">Windows 应用安装程序</a>的外部测试版或预览版中包含 <strong>winget</strong> 工具。 必须安装<strong>应用安装程序</strong>的预览版本才能使用 <strong>winget</strong>。 若要获取提前访问权限，请将你的请求提交到 <a href="https://aka.ms/AppInstaller_InsiderProgram">Windows 程序包管理器预览体验计划</a>。 参与外部测试版 Ring 将保证你可以看到最新的预览版更新。</li><li>参与 <a href="https://insider.windows.com/">Windows 外部测试版 Ring</a>。</li><li>安装位于 <a href="https://github.com/microsoft/winget-cli">winget 存储库</a>的 release 文件夹中的 Windows 桌面应用安装程序包。</li></ul><blockquote><p><strong>winget</strong> 工具需要 Windows 10 版本 1709 (10.0.16299) 或更高版本的 Windows 10。</p></blockquote><p>我是直接下载安装包的</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200818172046.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200818172116.png"></p><p>安装完成之后，关闭窗口，打开Powershell，注意，不能在GitBash中使用哦</p><p>输入命令 <code>winget</code> ：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200818172236.png"></p><blockquote><p>关于终端，请看这里：<a href="https://blog.dabailuobo.com/e00f009c/">WindowsTerninal调教</a></p></blockquote><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>在没有管理员权限的情况下运行 <strong>winget</strong> 时，某些应用程序可能会<a href="https://docs.microsoft.com/zh-cn/windows/security/identity-protection/user-account-control/">要求提升权限</a>才能进行安装。 当安装程序运行时，Windows 会提示你<a href="https://docs.microsoft.com/zh-cn/windows/security/identity-protection/user-account-control">提升权限</a>。 如果你选择不提升权限，则应用程序无法进行安装。</p><p>在管理员命令提示符下运行 <strong>winget</strong> 时，如果应用程序要求你提升权限，你不会看到<a href="https://docs.microsoft.com/zh-cn/windows/security/identity-protection/user-account-control/how-user-account-control-works">提升权限提示</a>。 以管理员身份运行命令提示符时请务必小心，仅安装你信任的应用程序。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200818172428.png" alt="慎重哦"></p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>显示所有命令的帮助信息：<code>winget --help</code></p><p>查看命令的选项：<code>winget &lt;command&gt; --help</code></p><p>然后自己琢磨去吧，，，我也是刚体验，发布出来给大家尝尝鲜，具体的命令用法和参数，请详细参照官方文档</p><p>之后自己用熟练了再来更新详细情况哦拜拜</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> winget </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WindowsTerninal调教</title>
      <link href="/posts/e00f009c/"/>
      <url>/posts/e00f009c/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200818145648.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>众所周知，命令行在程序员的生活中是占有极大的比重的，几乎天天都要用到。即使是像我这样的半吊子前端也是一样，各种框架或者cli是根本离不开终端的，更别说GitBash了，几乎一会会就要用一次。</p><p>那么一个美观、简洁且功能强大的终端就可以大大提高我们的工作效率，最起码让我们面对报错信息的时候有那么一丝“赏心悦目”。</p><p>那么接下来就要介绍今天的正主了：Windows Terminal</p><blockquote><p>下载方式：直接在微软应用商店里搜索即可下载，免费的，推荐下载Preview版本，可以体验新功能，或者从<a href="https://github.com/microsoft/terminal/releases">Github</a>下载，但是不会自动更新</p><p>官方文档：<a href="https://docs.microsoft.com/zh-cn/windows/terminal/">Windows Terminal</a></p></blockquote><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>如前言所说，WindowsTerminal(下文皆简称WT)具有几乎完美的优点，相应快速，美观，功能强大，可自定义的选项非常多，可以打造成独属于你自己的终端的模样。</p><h2 id="功能特点"><a href="#功能特点" class="headerlink" title="功能特点"></a>功能特点</h2><ul><li>多终端合一，在一个终端软件里就可以同时打开Bash、cmd、powershell、WSL甚至是ACL</li><li>界面美观，这就是个人观点了，我觉得这个UI设计蛮符合我的口味的</li><li>自由度高，可配置的设置项非常多，而且还可以针对某个终端进行单独配置</li><li>终端拆分，这就不多说了懂得都懂</li></ul><h2 id="安装字体和PowerLine"><a href="#安装字体和PowerLine" class="headerlink" title="安装字体和PowerLine"></a>安装字体和PowerLine</h2><blockquote><p>前情提示：如果遇到的需要修改配置文件，请务必保证你的格式正确和逗号正确，不然就会报错</p></blockquote><p>Powerline 提供自定义的命令提示符体验，提供 Git 状态颜色编码和提示符。</p><p>当然如果你不需要也可以跳过。</p><blockquote><p>先决条件：你的电脑上装了Git For Windows并可以正常使用</p></blockquote><p>使用 <strong>PowerShell</strong>，安装 Posh-Git 和 Oh-My-Posh：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Install-Module posh-git -Scope CurrentUser</span><br><span class="line">Install-Module oh-my-posh -Scope CurrentUser</span><br></pre></td></tr></table></figure><blockquote><p>如果尚未安装 NuGet，可能需要安装它。 如果是这种情况，PowerShell 命令行会询问是否要安装 NuGet。 选择 [Y]“是”。 你可能还需要批准从不受信任的存储库 <a href="https://docs.microsoft.com/zh-cn/powershell/scripting/gallery/getting-started?view=powershell-7">PSGallery</a> 中安装模块。 选择 [Y]“是”。</p></blockquote><p>使用 <code>notepad $PROFILE</code> 或所选的文本编辑器打开 PowerShell 配置文件。 这不是你的 Windows 终端配置文件。 你的 PowerShell 配置文件是一个脚本，该脚本在每次启动 PowerShell 时运行。 <a href="https://docs.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_profiles?view=powershell-7">详细了解 PowerShell 配置文件</a>。</p><p>当然你不用notepad也行，其他编辑器不是不可以</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Import-Module posh-git</span><br><span class="line">Import-Module oh-my-posh</span><br><span class="line">Set-Theme Paradox</span><br></pre></td></tr></table></figure><p>字体下载地址：<a href="https://github.com/microsoft/cascadia-code/releases">https://github.com/microsoft/cascadia-code/releases</a></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200818151749.png" alt="字体效果"></p><p>根据自己需要选择，然后打开配置文件，设置font-face：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200818151858.png"></p><p>会通过你默认的编辑器打开一个 <code>settings.json </code> 文件，增加以下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200818152035.png"></p><blockquote><p>需要注意的是下载好的字体需要在Windows中解压、安装，这个步骤不需要多赘述。</p></blockquote><h2 id="设置背景和透明度"><a href="#设置背景和透明度" class="headerlink" title="设置背景和透明度"></a>设置背景和透明度</h2><p>直接放出配置文件：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200818152252.png"></p><ul><li><code>profiles</code> 代表配置文件，在这个之外的设置属于全局设置</li><li><code>defaults</code> 属于默认设置，即对所有终端都适用</li><li><code>list</code> 属于各个终端的列表，你在这里可单独设置每个终端的样式或者某些配置</li><li><code>backgroundImage</code> 背景图片路径</li><li><code>backgroundImageOpacity</code> 背景图透明度</li></ul><h2 id="添加GitBash"><a href="#添加GitBash" class="headerlink" title="添加GitBash"></a>添加GitBash</h2><p>在 <code>list</code> 数组中添加以下配置项：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;guid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;E2FAD1ED-F186-D088-3377-182EE74D8CF6&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;GitBash&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;commandline&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:/laughApps/Git/Git/bin/bash.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;fontFace&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Cascadia Code PL&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;startingDirectory&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/c/Users/13468/&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// &quot;icon&quot;: &quot; &quot;,</span></span><br><span class="line">    <span class="attr">&quot;hidden&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><code>guid</code> 终端全局唯一标识符</li><li><code>name</code> 终端名称</li><li><code>commandline</code> 终端文件路径</li><li><code>fontFace</code> 字体</li><li><code>startingDirectory</code> 终端启动后的默认路径</li><li><code>icon</code> 图标</li><li><code>hidden</code> 隐藏下拉列表中的某个配置文件</li></ul><p>需要注意的是，路径不能留空，不需要就注释或者删除，guid并不是唯一的，自己想设置成啥就是啥，只要和其他的软件或者终端不冲突就行了，代表这个guid就只是代表了这一个终端</p><p>更多的配置文件项请自己查阅文档</p><p>本次记录就到这里啦，再发现啥好玩的回来再更新，附上我现在的效果图：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200818153635.png"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> Terminal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客看板娘增强版</title>
      <link href="/posts/37579d1/"/>
      <url>/posts/37579d1/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200814223149.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前我写过一篇关于hexo博客插入live2d的教程，传送门：<a href="https://www.dabailuobo.com/599f1d72/">让你的博客充满生气之Live2D</a></p><p>但是由于插件和模型的限制，能应用的看板娘emmm，都不是很满意，或者说好看的很少，所以能不能把别的live2d模型应用到博客里呢，经过<a href="https://fxlabtinystar.cn/">缘星星丶</a>大佬的指导，我找到了方法，写在这里以作记录</p><p>本文内容无需下载插件哦~</p><p>声明：本篇文章是<a href="https://fxlabtinystar.cn/2020/08/14/Live2dAndHexo/">在Live2d应用到Hexo 看板娘</a>基础上稍作编辑，版权所有请尊重原作者</p><blockquote><p>文章作者: <a href="mailto:undefined">缘星星丶</a></p><p>文章链接: <a href="http://fxlabtinystar.cn/2020/08/14/Live2dAndHexo/">http://fxlabtinystar.cn/2020/08/14/Live2dAndHexo/</a></p><p>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">CC BY-NC-SA 4.0</a> 许可协议。转载请注明来自 <a href="http://fxlabtinystar.cn/">缘丶星</a>！</p></blockquote><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h2 id="下载相关配置"><a href="#下载相关配置" class="headerlink" title="下载相关配置"></a>下载相关配置</h2><p>Github地址：<a href="https://github.com/galnetwen/Live2D">https://github.com/galnetwen/Live2D</a></p><p>下载完成之后我们只需要里面的live2d文件夹：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200814215309.png"></p><p>把这个文件夹复制到博客根目录下的 <code>source</code> 下</p><h2 id="修改主题配置"><a href="#修改主题配置" class="headerlink" title="修改主题配置"></a>修改主题配置</h2><blockquote><p>我所写的方法适用于本Butterfly主题，其他引入方式请参考缘星星大佬的原文或者Github的README</p></blockquote><p>修改 <code>butterfly.yml</code> ，在 <code>inject.bottom</code> 里引入以下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 看板娘begin</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/live2d/css/live2d.css&quot;</span> <span class="string">/&gt;&lt;div</span> <span class="string">id=&quot;landlord&quot;&gt;</span> <span class="string">&lt;div</span> <span class="string">class=&quot;message&quot;</span> <span class="string">style=&quot;opacity:0.5&quot;&gt;&lt;/div&gt;</span> <span class="string">&lt;canvas</span> <span class="string">id=&quot;live2d&quot;</span> <span class="string">width=&quot;280&quot;</span> <span class="string">height=&quot;250&quot;</span> <span class="string">class=&quot;live2d&quot;&gt;&lt;/canvas&gt;</span> <span class="string">&lt;div</span> <span class="string">class=&quot;hide-button&quot;&gt;&lt;font</span> <span class="string">color=&quot;#FFFFFF&quot;&gt;隐藏&lt;/font&gt;&lt;/div&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">type=&quot;text/javascript&quot;&gt;</span> <span class="string">var</span> <span class="string">message_Path</span> <span class="string">=</span> <span class="string">”/live2d/“&lt;/script&gt;</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">type=&quot;text/javascript&quot;&gt;</span> <span class="string">var</span> <span class="string">home_Path</span> <span class="string">=</span> <span class="string">&quot;https://www.dabailuobo.com/&quot;</span> <span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">type=&quot;text/javascript&quot;</span> <span class="string">src=&quot;/live2d/js/live2d.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">type=&quot;text/javascript&quot;</span> <span class="string">src=&quot;/live2d/js/message.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">type=&quot;text/javascript&quot;&gt;</span> <span class="string">loadlive2d(&quot;live2d&quot;,</span> <span class="string">&quot;/live2d/model/tia/model.json&quot;</span><span class="string">);</span> <span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="comment"># 看板娘end</span></span><br></pre></td></tr></table></figure><p>需要注意的是相关路径，第三行中的域名配置就写你自己的，注意域名后面必须加上 <code>/</code> ，不然会有神奇的bug哦</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>如果想要修改模型，将你下载好的模型文件放入 <code>live2d/model/</code> 下，然后修改上面代码的第六行的路径名称即可。</p><p>如果想要修改对话框中的对话内容，请查看 <code>live2d/js/message.js</code> 自己做出相应的修改即可</p><p>如果想要修改位置和大小，请修改上面代码的第一行，中有 <code>width</code> 和 <code>height</code> ，还有透明度 <code>opacity</code> </p><p>于 <code>model.json</code> 中配置看板娘的动作，js中拓展你所需要的功能…( 对应节日的提醒什么的</p><p>更强大的功能请自行查阅：<a href="https://github.com/stevenjoezhang/live2d-widget">https://github.com/stevenjoezhang/live2d-widget</a></p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200814221416.png" alt="缘星星"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200814221407.png" alt="我的"></p><p>拜拜，下次更新见~</p><h2 id="2020-8-15优化更新"><a href="#2020-8-15优化更新" class="headerlink" title="2020.8.15优化更新"></a>2020.8.15优化更新</h2><p>虽然看板娘在移动端不会显示，但是js和css仍然会加载，导致移动端的网页加载非常慢，所以加了这次更新加了设备识别，只要是移动端默认不加载看板娘</p><p>首先在你的 <code>live2d/js/</code> 下新建一个 <code>index.js</code> (文件名和路径自己选择)</p><p>写入：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">browserRedirect</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> sUserAgent = navigator.<span class="property">userAgent</span>.<span class="title function_">toLowerCase</span>();</span><br><span class="line">    <span class="keyword">var</span> bIsIpad = sUserAgent.<span class="title function_">match</span>(<span class="regexp">/ipad/i</span>) == <span class="string">&quot;ipad&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> bIsIphoneOs = sUserAgent.<span class="title function_">match</span>(<span class="regexp">/iphone os/i</span>) == <span class="string">&quot;iphone os&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> bIsMidp = sUserAgent.<span class="title function_">match</span>(<span class="regexp">/midp/i</span>) == <span class="string">&quot;midp&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> bIsUc7 = sUserAgent.<span class="title function_">match</span>(<span class="regexp">/rv:1.2.3.4/i</span>) == <span class="string">&quot;rv:1.2.3.4&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> bIsUc = sUserAgent.<span class="title function_">match</span>(<span class="regexp">/ucweb/i</span>) == <span class="string">&quot;ucweb&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> bIsAndroid = sUserAgent.<span class="title function_">match</span>(<span class="regexp">/android/i</span>) == <span class="string">&quot;android&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> bIsCE = sUserAgent.<span class="title function_">match</span>(<span class="regexp">/windows ce/i</span>) == <span class="string">&quot;windows ce&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> bIsWM = sUserAgent.<span class="title function_">match</span>(<span class="regexp">/windows mobile/i</span>) == <span class="string">&quot;windows mobile&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (bIsIpad || bIsIphoneOs || bIsMidp || bIsUc7 || bIsUc || bIsAndroid || bIsCE || bIsWM) &#123;&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;link rel=&quot;stylesheet&quot; href=&quot;/live2d/css/live2d.css&quot; /&gt;&lt;div id=&quot;landlord&quot;&gt; &lt;div class=&quot;message&quot; style=&quot;opacity:0.5&quot;&gt;&lt;/div&gt; &lt;canvas id=&quot;live2d&quot; width=&quot;280&quot; height=&quot;250&quot; class=&quot;live2d&quot;&gt;&lt;/canvas&gt; &lt;div class=&quot;hide-button&quot;&gt;&lt;font color=&quot;#FFFFFF&quot;&gt;隐藏&lt;/font&gt;&lt;/div&gt;&lt;/div&gt;&#x27;</span>);</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;script type=&quot;text/javascript&quot;&gt; var message_Path = &quot;/live2d/&quot;&lt;/script&gt;&#x27;</span>);</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;script type=&quot;text/javascript&quot;&gt; var home_Path = &quot;https://www.dabailuobo.com/&quot; &lt;/script&gt;&#x27;</span>);</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;script type=&quot;text/javascript&quot; src=&quot;/live2d/js/live2d.js&quot;&gt;&lt;/script&gt;&#x27;</span>);</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;script type=&quot;text/javascript&quot; src=&quot;/live2d/js/message.js&quot;&gt;&lt;/script&gt;&#x27;</span>);</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;script type=&quot;text/javascript&quot;&gt; loadlive2d(&quot;live2d&quot;, &quot;/live2d/model/tia/model.json&quot;);&lt;/script&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">browserRedirect</span>();</span><br></pre></td></tr></table></figure><p>记住路径都要改为自己的哦，不然会识别不到</p><p>然后在 <code>inject.bottom</code> 里插入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/live2d/js/index.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>就可以啦</p><p>本次更新基于原作者的原文自己修改，原作地址：<a href="https://cangshui.net/3518.html">解决live2d看板娘卡顿</a></p><h2 id="2020-8-15再次更新"><a href="#2020-8-15再次更新" class="headerlink" title="2020.8.15再次更新"></a>2020.8.15再次更新</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200815153840.png"></p><p>如图所示，我寻思了一天，感觉不怎么和谐，首先模型太大了，其次把音乐遮住了，所以就想个办法修改一下</p><p>首先我想着把模型放在角落，把播放器放在模型旁边，但是发现虽然能修改播放器的位置，播放器展开的歌单还在原地，也就要挪位置，这样一来，需要修改的地方太多了，非常容易出一些神奇的bug，所以就把重点放在了模型上修改模型的位置</p><p>首先修改我们上面引入的 <code>index.js</code> 里的模型样式：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200815154818.png"></p><p>这个宽和高，注意，务必按照比例缩小，不然模型显示不完全，然后看一下前后效果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200815154908.png" alt="修改前"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200815154928.png" alt="修改后"></p><p>这时候就要修改位置了，凡是我发现会有一些奇怪的bug，看了下他的盒子结构，发现了他还有一个背景框：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200815155412.png"></p><p>必须还要修改这个盒子的大小，索性我发现了位置属性和盒子大小都是同一个元素，修改 <code>live2d/css/live2d.css</code> ：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200815155403.png"></p><p>注意，这个 <code>left</code> 是模型距离左边窗口的距离，宽度和高度最好按照比例修改，和你的模型一致即可。</p><p>这样，只需要修改两处就可以完美展现啦，效果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200815155713.png"></p><p>和之前相比是不是好得多呢，嘿嘿</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> live2d </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>星际战甲黑话大全</title>
      <link href="/posts/2d0045c5/"/>
      <url>/posts/2d0045c5/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200814152047.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>星际战甲(之后统称为甲甲)从注册账号到自己独立去开荒是需要非常大的学习成本的，所以这个游戏的前期如果没有大佬带，自强的话是非常劝退新人的。</p><p>特别是当小萌新想去问大佬问题的时候，大佬给你巴拉巴拉一大堆，哎，自己听不懂，全都是甲甲里的黑话，所以本篇教程就应运而生啦，为了小萌新的初期游戏体验，大佬们把常见的黑话都翻译了一下，整理成了这篇文章，不过肯定不是很全面，而且版本即将更新，很多新战甲武器的名称翻译也都还没确定，那是后事了，之后再更新。</p><blockquote><p><strong>注意：</strong> 本篇攻略来自星际战甲官网，原文地址：<a href="http://wf.changyou.com/wf/article/20190729/138417.shtml">萌新攻略丨【Deathcraft ＆ -TH-188】星际战甲黑话术语大全</a></p></blockquote><p>附上甲甲的Wiki地址：<a href="https://warframe.huijiwiki.com/wiki/%E9%A6%96%E9%A1%B5">Warframe中文维基</a></p><p>最后，本攻略由<strong>Deathcraft</strong>及<strong>TH-188</strong>共同完成，感谢他们对星际战甲做出的贡献。由我在这里修改转载，如有侵权，请联系删除。</p><h2 id="战甲篇"><a href="#战甲篇" class="headerlink" title="战甲篇"></a>战甲篇</h2><ul><li><p>P甲：圣装版战甲的简称，源自其本名Prime，使用方式为战甲别名+P，比如圣装狂野犀牛&#x3D;牛P，圣装伏特&#x3D;伏特P&#x2F;电男P，圣装魅影精灵&#x3D;小丑P</p></li><li><p>狂野犀牛：吼牛指主3强度牛，踩牛指主4范围牛</p></li><li><p>亡灵梦魇：摸尸，源于其最常用的3技能效果，消除尸体并获取额外物资</p></li><li><p>疫变之巢：蛆甲、蛆爹，源于4技能中生出来的小虫</p></li><li><p>超能新星：加速，源于4技能强度低于70时给怪物造成的加速效果；开门娃，开门源于3技能开门，娃源自其本名Nova（诺娃）</p></li><li><p>伏特：电男，火电指带火专精“虚空突袭”技能的电男</p></li><li><p>阴阳双子：扶他，源于其看起来半男半女的造型，其实是两个女体</p></li><li><p>灵薄狱：小明，源于其本名Limbo（拼音打出来是李明博）</p></li><li><p>三位一体：奶妈；蹦蹦，源自已经被修复的浮空自伤输出法</p></li><li><p>圣枪弥撒：女枪（女枪pp天下第一，误）</p></li><li><p>剧毒之触：毒妈</p></li><li><p>怒炎龙骑：龙</p></li><li><p>邪神洛基：缴械基，源自4技能缴械后怪物迫不得已靠近玩家战斗的效果；运输基，源自3技能可以和怪、人互换位置的能力，一般用于平原加速气球的移动</p></li><li><p>永恒烈焰：火鸡，源自其技能效果“火焰”和原始皮肤造型</p></li><li><p>驱魔使者：主教，源自其最受欢迎的超帅的“主教”头盔</p></li><li><p>圣剑：咖喱，源自其本名Excalibur（EX咖喱棒）</p></li><li><p>恸哭女妖：音妈，源自其技能效果“音浪”；弱点，源自其最常用于辅助的2技能</p></li><li><p>惊涛骇浪：水男</p></li><li><p>神弓游侠：弓妹</p></li><li><p>冥河夜神：脑溢血，源自其本名NYX</p></li><li><p>灰烬之刃：阿屎，源自其本名Ash的读音</p></li><li><p>魅影精灵：小丑，源自其原型</p></li><li><p>吟游歌者：DJ&#x2F;歌甲，源自其放音乐打碟的能力</p></li><li><p>瓦尔基里：瓦喵，原“猫甲”，源自其原型及其被动技能“灵巧”</p></li><li><p>磁力：磁妹</p></li><li><p>冰雪寒霜：冰男；冰队，队字本来指圣装，冰队也就是圣装冰男，国服一直有人叫错就一直这么叫了</p></li><li><p>琉璃侍女：玻璃</p></li><li><p>狂啸西风：鸟姐，源自其造型与被动技能“轻灵”</p></li><li><p>工程统帅：工程</p></li><li><p>幻蝶仙灵：蝶甲</p></li><li><p>撼天行者：土甲，源自其技能效果“土”，一拳超人，源自其1技能高强度后连续秒怪的能力</p></li><li><p>哪吒三太子：哪吒</p></li><li><p>龙王奥伯：奶爸，源自其3技能持续回血的效果；驴王，源自其普通版和圣装版的造型</p></li><li><p>沙海怒涛：沙甲</p></li><li><p>齐天大圣：猴子，源自其原型；核弹猴，源自其已经被修复的某特殊输出方式</p></li><li><p>荒野猎手：现“猫甲”，源自其自带的狯犽；蜘蛛甲，源自其设计原型“蜘蛛”</p></li></ul><h2 id="武器篇"><a href="#武器篇" class="headerlink" title="武器篇"></a>武器篇</h2><ul><li><p>偃月刀：关刀，源自其国际服汉化翻译及其外形</p></li><li><p>瑟古拉僵直电鞭：钱鞭，源自其击杀触电状态怪物会额外掉落星币的特性</p></li><li><p>刑罚绞索：暴击鞭，源自其鞭类最高的暴击率</p></li><li><p>加拉丁暗影：大剑，源自其外形</p></li><li><p>圣装双尾鲨：OP，源自其英文名Orthos Prime</p></li><li><p>回旋刃&#x2F;神庭轮：盘子&#x2F;飞盘，源自其攻击方式</p></li><li><p>圣洁真理权杖：奶锤，源自其蓄力攻击可以给周围友方单位（包括运载目标）回复生命值的效果</p></li><li><p>起义者：菜刀，源于其外形</p></li><li><p>欧玛电击棍：电棍&#x2F;电拐，源于其攻击属性及所属武器类别</p></li><li><p>腐尾蛟：I鞭，疫变体（I系）鞭子</p></li><li><p>裂伤战锤：玻璃锤</p></li><li><p>圣装侍刃：B刀&#x2F;13刀，因为买了它可以装B</p></li><li><p>圣装帕里斯长弓：PP弓，源自其英文名Paris Prime</p></li><li><p>绯红五芒星榴弹炮：红炸，源自其初始颜色和攻击类型</p></li><li><p>伏卡尔狙击枪&#x2F;亡魂伏卡尔狙击枪：钓鱼竿&#x2F;亡魂钓鱼竿，源自其外形</p></li><li><p>拉特龙半自动步枪：辣条龙，谐音</p></li><li><p>光能量子：矿枪，源自其游戏设定上的用途“采矿”</p></li><li><p>泰格里斯：猛虎，源自其国际服翻译</p></li><li><p>波尔托骨刺：鱼骨，源自其造型</p></li><li><p>弧光等离子冲击枪：C喷，其为科普斯（Corpus）目前唯一“霰弹枪”（虽然不像霰弹）</p></li><li><p>恐惧：小黑弓，因为是小黑（追猎者）用的弓</p></li><li><p>泰特拉&#x2F;量子苏普拉：烟花枪，按住左键开喷</p></li><li><p>热熔镭射炮：O炮，源自其本名Opticor</p></li><li><p>碎晶霰弹枪：玻璃喷</p></li><li><p>聚能瓦斯炮：吹风机，源自其攻击特效</p></li><li><p>铁磁式激光矛枪：C矛，其为科普斯（Corpus）目前唯一“矛枪”</p></li><li><p>努克微波：泡泡枪，源自其攻击特效</p></li><li><p>原子矿融炮：尿壶，外形</p></li><li><p>派亚脊刺：食人鱼，国际服汉化翻译</p></li><li><p>潘德罗：手鼓，国际服汉化翻译</p></li><li><p>超声冲击枪：推推棒&#x2F;推推乐，源自其攻击把怪物击飞的特性</p></li></ul><h2 id="任务-地图篇"><a href="#任务-地图篇" class="headerlink" title="任务&#x2F;地图篇"></a>任务&#x2F;地图篇</h2><ul><li><p>4K：遗迹中随机出现的龙门宝库，随机需要一种龙门钥匙开启（刷4K推荐，遗迹捕获）遗迹捕获钥匙需要在氏族里的奥罗金实验室复制图纸。然后到铸造仓里做出来，在军械库中的装备栏里装备上。每种钥匙对应一种Debuff，现版本可以一个人装备4个钥匙，但是身上同时上4种Debuff可能需要点实力。也可以4个人组队，分别带上4种不同的4K钥匙去遗迹捕获刷图。抓完人就开始找龙门，找到以后龙门提示需要什么钥匙，带了钥匙的人就过来开门。龙门里的金色球状一定要拿走。</p></li><li><p>垃圾车：指用自己用不到的遗物组队刷部件换虚空币或塑形块设计图。</p></li><li><p>光辉垃圾车：指全队只上光辉票力图最大化虚空币收益的垃圾车，因精英圣殿而开始流行。</p></li><li><p>赛防：塞德娜防御</p></li><li><p>赛拦：塞德娜拦截</p></li><li><p>黑区：大多数星球自带的那一个疫变体感染图，刷各星球材料的首选。</p></li><li><p>黑生：黑区生存（不会出毒气兵和罩子怪）</p></li><li><p>地挖：地球挖掘任务（珠穆朗玛峰），初期刷必备卡和蓝晶的最佳选择。</p></li><li><p>利益：海王星地图利益指数。</p></li><li><p>JJC：塞德娜角斗场（前面的数字代表级别，比如85JJC，就是85级怪物的角斗场）。</p></li><li><p>泡澡：4个水男赛拦开3挂机。</p></li><li><p>空战魔像：撼天行者任务结束后开启的乌达斯魔像行刺地图。</p></li><li><p>OD：遗迹简称OD，生存任务简称S、防御任务简称D、移动防御简称MD、歼灭任务简称E、捕获任务简称C、拦截任务简称I、刺杀任务简称boss；比如遗迹生存&#x3D;ODS、遗迹防御&#x3D;ODD</p></li><li><p>AKK：阋神星地图阿卡德</p></li><li><p>辣椒生存：库瓦生存</p></li><li><p>木卫一：木星防御，这个图就叫这个名字，不是一个星球。</p></li><li><p>三报（业报恶报空报，分别代表“复仇法则”和“乌达斯的审判”大型副本）目前已删除。</p></li><li><p>奸商刺杀：玩笑话</p></li><li><p>入侵：随机出现的G系克隆尼帝国与C系科普斯商会对抗任务，玩家选择帮助一边打另一边以获得相应奖励，需要打三次。等一边打败了另一边，奖励就会发放到你的邮箱里。注意，如果你帮G系打了三次以后再帮C系打一次，结果就会变成你帮G系打了两次，可能就拿不到奖励！！只能帮一边</p></li><li><p>瘟疫：刚结束不久的“瘟疫之星”活动本。</p></li><li><p>虚空密室：虚空地图部分支链末端刷出来的密室，里面的罐子大概率出金卡。</p></li><li><p>奔流密室：月球地图刷出来的会给奔流卡的密室（月球间谍不出速度密室）。</p></li><li><p>音乐密室：欲求地图主干部分偶尔出现的音乐密码的密室，完成后头顶和旁边各给一个宝箱，头上的给DJ部件，旁边的小概率给塑形块。</p></li></ul><h2 id="人物篇"><a href="#人物篇" class="headerlink" title="人物篇"></a>人物篇</h2><ul><li><p>老头：沃尔上尉</p></li><li><p>王大锤：莱希·克里尔中尉，火星刺杀boss，谷神星刺杀boss之一</p></li><li><p>AV男：阿拉德五世，源自其英文名Alad V，木星刺杀boss</p></li><li><p>火将军：萨加斯·鲁克将军</p></li><li><p>AVI：指阋神星疫变体感染后的AV男</p></li><li><p>女主播：凯拉·德塞姆，赛德娜星球刺杀boss，源自其唱跳rap的入场方式。</p></li><li><p>三傻：大傻，撼地使；二傻，巨臂使；三傻，唤雨使，也指三使相加。</p></li><li><p>蜘蛛：即将推出的金星平原的boss。</p></li><li><p>大狗：疫变狂獒（I系入侵boss）</p></li><li><p>毒气爹：毒气兵</p></li><li><p>毒爹：毒气兵&#x2F;毒属性光环的精英远古爹</p></li><li><p>远古爹：远古治愈者&#x2F;远古干扰者&#x2F;远古堕落者（堕落者掉狂战士）</p></li><li><p>白富美：堕落重型机枪手，源自其高亮色调、性别、强大的战斗力，亦可指普通重型机枪手</p></li><li><p>高富帅&#x2F;火箭兵：堕落轰击者，源自其高亮色调、性别、强大的战斗力，亦可指普通轰击者</p></li><li><p>罩子爹：虚能警卫&#x2F;堕落虚能者，源自其无效化天诺能量的能量罩</p></li><li><p>滑板鞋：冲击步兵类敌人，源自其鞋子及位移方式。</p></li><li><p>小夜灵：夜灵轰击使</p></li><li><p>小黑：影之追猎者，因其外形得名。完成各星球的刺杀boss任务后，你会收到追猎者的情书，并且标记你，在个人档案中可以查看被标记，在打绝大多数的地图中，如果你的战斗力较低，追猎者会随机乱入地图追杀你。干掉小黑会有几率掉落盲目正义&#x2F;果断裁决&#x2F;恐惧设计图&#x2F;绝望设计图、憎恨设计图。</p></li><li><p>大黑：影之追猎者，小黑升级版。完成各星球的刺杀boss任务后，你会收到追猎者的情书，并且标记你，在个人档案中可以查看被标记，在打绝大多数的地图中，如果你的战斗力较低，追猎者会随机乱入地图追杀你。干掉大黑会有几率掉落以上的以外还会掉落破碎的战争设计图&#x2F;战争设计图&#x2F;弯刀引擎设计图等等。</p></li><li><p>小白：扎努卡猎犬，与小黑对应。入侵中帮助G系打完C系完成以后，你会收到阿拉德的情书，并且标记你，在个人档案中可以查看被标记。在打G系的地图中，如果你战斗力较低，小白会随机乱入地图追杀你。干掉他会有几率获得迪特隆总图&#x2F;迪特隆枪管&#x2F;迪特隆枪机等物品。他被干掉或者干掉你以后标记会消失，需重打入侵获取标记。</p></li><li><p>3G佬：格鲁斯塔三人组，源自其三人一组的行动特性和所属派系。入侵中帮助C系打完G系完成以后，你会收到3G佬的情书，并且标记你，在个人档案中可以查看被标记，在打G系的地图中，如果你的战斗力较低，3G佬会随机乱入地图追杀你。干掉他们会有几率获得神经节点&#x2F;布拉克设计图&#x2F;布拉克枪机&#x2F;布拉克枪托&#x2F;布拉克枪管&#x2F;天赋、分裂弹头等物品。干掉他们或者你被他们干掉以后标记消失，需重打CG大战获取标记；你被他们打死会被3G佬装上蛔虫装置，降低你的战甲基础属性。在新手任务可以获得蛔虫装置设计图，制造后消除蛔虫装置。 </p></li><li><p>奸商&#x2F;J商：虚空商人巴洛·基提尔</p></li><li><p>莲妈：莲</p></li><li><p>四叔：司书，谐音</p></li></ul><h2 id="物品篇"><a href="#物品篇" class="headerlink" title="物品篇"></a>物品篇</h2><ul><li><p>飞机杯：蘖蕖深海萃取物，外形</p></li><li><p>菊花：阿那刹灵感雕塑，源自其外形，因突击奖励中出现频率过高而荣获独有绰号。</p></li><li><p>金&#x2F;银&#x2F;铜土豆：奥罗金反应堆&#x2F;奥罗金催化剂&#x2F;奥罗金电池，源自其外形。</p></li><li><p>福马：塑形块，源自其英文名Forma。</p></li><li><p>辣椒&#x2F;赤毒：库瓦，国际服翻译为赤毒。</p></li><li><p>薯条：奥西姆合金，得名于其外形。</p></li><li><p>摄像头：神经传感器，源自其外形，有时候指任务地图中的门上面的监视器，被扫描到就会触发警报</p></li><li><p>杆子：聚合杆</p></li><li><p>小电视：费德隆装置</p></li><li><p>蓝盒子：资源掉落率加成卡</p></li><li><p>黄盒子：资源加成卡</p></li><li><p>扒皮：腐蚀投射光环卡；其效果可以降低敌人护甲；光环卡目前只能从随机警报入手</p></li><li><p>井盖：指各类回复器，通常指回蓝井盖，源自其外形。</p></li><li><p>欢乐豆：融合单元</p></li><li><p>豆子：融合单元&#x2F;虚空印痕&#x2F;利益指数绿色徽记，场合不同意思不同。</p></li><li><p>白鸡：白金币</p></li><li><p>手办：通常指可改变造型的飞船摆件，例如三傻手办，战甲手办等。</p></li><li><p>狗牌：集团的标志牌子，每一个集团都有一种狗牌，去中继站找相应的集团NPC可以将该集团相应的狗牌兑换成该集团的声望值获取方式：进行集团任务时，地图上会随机散布相应的集团标志狗牌，玩家需要到处寻找。</p></li></ul><h2 id="指挥官专精篇"><a href="#指挥官专精篇" class="headerlink" title="指挥官专精篇"></a>指挥官专精篇</h2><ul><li>金系：泽努里</li><li>木系：纳拉蒙</li><li>水系：瓦扎林</li><li>火系：马杜莱</li><li>土系：乌奈鲁</li><li>镜子：棱镜，可以把满级的武器&#x2F;战甲获取的经验转换为聚魂。</li><li>夜灵镜子（夜灵xxx棱镜）转化效果最好，能把大量经验值转换为聚魂点数</li><li>大镜子（强效xxx棱镜），能转换较多的经验值</li><li>小镜子（xxx棱镜）较次</li></ul><h2 id="宠物篇"><a href="#宠物篇" class="headerlink" title="宠物篇"></a>宠物篇</h2><ul><li><p>扭蛋：搬运信使，因其外形及扭来扭去的特性。</p></li><li><p>摄像头&#x2F;照相机：太阳神，源自其外形和扫描功能。</p></li><li><p>狗蛋：库狛蛋</p></li><li><p>狗：库狛</p></li><li><p>猫：狯犽</p></li><li><p>I狗：使用海斯明寄生体协助孵化产生的疫变体库狛（只有一种）。</p></li><li><p>草猫：指扫描野生狯犽获得猫基因的行为。</p></li></ul><h2 id="指挥官增幅器篇"><a href="#指挥官增幅器篇" class="headerlink" title="指挥官增幅器篇"></a>指挥官增幅器篇</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200814155630.png" alt="1"></p><blockquote><p>注意小绿字哦，是增幅器的命名规则，国服更新之后金星平原BOSS开放会有新的增幅器，但这些的增幅器名称会保留</p></blockquote><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li><p>基佬紫：频管</p></li><li><p>失忆：官方发放的维护补偿丰厚时玩家不计前嫌。</p></li><li><p>速成鸡：段位提升极快但缺乏游戏经验的玩家。</p></li><li><p>腐蚀水：携带“腐蚀投射”光环的水位。</p></li><li><p>瓦解水：携带“护盾瓦解”光环的水位。</p></li><li><p>虚空下水道：虚空生存常见的一个可以用超能新星卡进墙里安全输出的地形。</p></li><li><p>虚空卡点：虚空拦截地图用战甲切指挥官堵住D点两个操作台后怪物聚集却无法占领的挂机刷票方式。</p></li><li><p>2035：封号，游戏内封号最远年限。</p></li><li><p>火蹲：火（马杜莱）专精“虚空突袭”技能效果。</p></li><li><p>U&#x2F;土：土（乌奈鲁）专精“乌奈鲁幽灵”技能效果。</p></li><li><p>极化：武器&#x2F;战甲&#x2F;守护&#x2F;宠物使用“塑型块”改变某一个MOD卡槽极性，使用后该装备等级变回0级，重新练满30级以后可以再进行极化。多次有规划的极化能够使装备装上更多的高级MOD卡，使之强化。</p></li><li><p>极性：每件装备的每一个MOD卡槽都拥有极性，该卡槽装上对应极性的MOD卡则消耗容量减半；反之增加容量消耗</p></li></ul><p>有错误或者新增的可以在下方留言区留言哦~</p>]]></content>
      
      
      <categories>
          
          <category> Warframe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 星际战甲 </tag>
            
            <tag> Warframe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Artitalk 动态给博客增加说说页面</title>
      <link href="/posts/a028aabe/"/>
      <url>/posts/a028aabe/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200809105347.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>看到群里大佬都有说说，羡慕的紧，而且自己很早之前就把博客当成自己的秘密小窝，但是自己技术有限，不会搭建，就一直搁置了，昨天在群里看到康纳百川和flexiston大佬的，就赶紧去找了插件，骚操作一番，哎嗨，我也有了，有生之年系列，太开心了</p><p>朋友圈和QQ空间很早就再也不更新了，都是麻木的点赞，自己也不敢“无病呻吟”，现在终于有一个自己随心所欲倾吐感情的地方了，超开心</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>登录leancloud国际版，创建一个应用</p><blockquote><p>如果你使用了Valine评论系统，千万不要和说说页面一同使用一个应用，会有意想不到的BUG呢</p></blockquote><p>打开结构数据，创建 <code>shuoshuo</code> 的class：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200809121647.png"></p><p>创建用户：</p><p>用户和密码自己设置，用来登录发布说说</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200809121942.png"></p><p>设置 <code>shuoshuo</code> 的权限：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200809122249.png"></p><p>将左边三个的权限更改为指定用户，输入你刚才设置的用户名，就可以自动识别，然后选中你添加的用户即可</p><p>给用户添加头像：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200809122545.png"></p><p>属性为 <code>img</code> 值为你想设置的头像的url</p><p>最后将用户表的权限全部修改为指定用户：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200809123030.png"></p><p>防止有人恶意修改用户表</p><h2 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h2><p>在你想要部署的页面插入如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://libs.baidu.com/jquery/2.0.0/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> appID=<span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> appKEY=<span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;artitalk_main&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/artitalk&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后就大功告成啦，AppID和Key就是你的leancloud应用的哦</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>如果你加载本js后出现一直是加载页面的情况，请检查你的主题是否会对其中内容进行渲染（F12查看即可）。 如果是因为渲染导致的问题，请在<code>&lt;script&gt;</code>标签外面使用<code></code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://libs.baidu.com/jquery/2.0.0/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;% raw %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> appID=<span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> appKEY=<span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    &#123;% endraw %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;artitalk_main&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/artitalk&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>更多详细配置请看官方文档：<a href="https://artitalk.js.org/">Artitalk.js</a></p><p>效果展示：<a href="https://www.dabailuobo.com/shuoshuo/index.html">大白萝卜的说说</a></p><h4 id="🎉-特性"><a href="#🎉-特性" class="headerlink" title="🎉 特性"></a>🎉 特性</h4><ul><li>实时发布,点击删除</li><li>支持markdown&#x2F;html语法</li><li>支持剪切板图片直接上传，支持点击上传图片，音频，视频</li><li>支持点赞</li><li>方便引用</li></ul><h4 id="⛵-关于资源上传的说明"><a href="#⛵-关于资源上传的说明" class="headerlink" title="⛵ 关于资源上传的说明"></a>⛵ 关于资源上传的说明</h4><ul><li>图片单张支持最大为5M</li><li>音频单张支持最大为10M</li><li>视频单张支持最大为25M</li><li>因为本功能是基于GitHub的存储实现的，所以如果上传失败请检查是否可以正常访问GitHub。</li><li>如果您上传的文件较大，请耐心稍等片刻</li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Artitalk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vercel+Github 创建免费站点</title>
      <link href="/posts/f1a30ea4/"/>
      <url>/posts/f1a30ea4/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200809104548.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>相对于Gitee和coding而言，Vercel拥有的优势还是很强的，拥有香港节点，速度自然不必多说，杠杠的。</p><p>Vercel拥有coding的持续部署和自定义域名，同时也拥有gitee般的丝滑体验，所以在大佬的介绍下，立马就重新部署到了Vercel，但是也有缺点，Vercel只是电信相对于来说很快很快，移动和联通嘛，emmm，你懂就好</p><p>而且Vercel支持类似于Github Action那样的自动部署，很香的，但是我不会用，你可以自己去探索。</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>Vercel注册只需要使用GitHub登录即可</p><h3 id="导入仓库"><a href="#导入仓库" class="headerlink" title="导入仓库"></a>导入仓库</h3><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200809110421.png"></p><p>导入你的静态资源仓库</p><h3 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h3><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200809110635.png"></p><p>如果这是你自己的GitHub仓库，选择yes，如果你是clone别人的，选择no，会将仓库复制到你自己的仓库里</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200809111217.png"></p><p>选择部署方式，项目名称可以自己定义，下面的选项无需修改，默认即可，应该是用自动部署用的我猜，感兴趣的大佬可以自己去研究</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200809110844.png"></p><p>在你的仓库里安装Vercel机器人，就是通过这个，你的仓库文件如果发生变动，就会自动获取新内容持续部署</p><p>你可以选择全局安装，也可以选择指定仓库安装，就是你刚才导入的仓库，全局安装的话下次就不用导入，可以直接指定仓库进行部署，自己决定</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200809111311.png"></p><p>正在部署站点，稍等一会就完成啦</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200809111445.png"></p><p>部署完成，可以使用 <code>https://[项目名].vercel.app</code> 来访问你的站点啦</p><h2 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h2><p>返回到你的项目中</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200809111714.png"></p><p>点击项目设置</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200809112005.png"></p><p>在这里添加你的域名，然后在你的域名服务商里把域名解析到Vercel的DNS服务器就可以啦，下面显示两个对号就说明验证成功喽</p><p>Vercel的DNS服务器域名会自动获取，你把你的域名添加上去，他会自动提醒你验证失败，重新解析地址，就会有提示啦</p><p>然后愉快的用域名访问你的站点吧，等你的仓库里一更新，Vercel这里就会自动帮你部署哦</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vercel </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jsDelivr+Github+PicGo 打造免费图床</title>
      <link href="/posts/47c9d343/"/>
      <url>/posts/47c9d343/</url>
      
        <content type="html"><![CDATA[<blockquote><p>警告：jsDelivr官方已经不允许这样的大量图片请求，少量可以使用，所以请慎重</p></blockquote><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200806183421.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在用Markdown写文章的时候怎么处理图片是一个非常让人头痛的问题，各种免费图床少量文章还行，如果文章数量庞大，只要这些免费图床服务商换一个域名或者跑路了，那就是一场灾难，或者就是有各种限制，如何既能在本地备份图片又能在云端引用链接呢？</p><p>要么使用比如阿里云、腾讯云等的OSS资源包，价格虽然便宜，但是如果请求数量大了的话，流量费用也是不菲的</p><p>那么就有机智的小伙伴将目光瞄准了GitHub和Gitee，我之前是用Gitee的，因为在国内访问速度快，稳定，但是有限制，单个图片不能超过1M，而且最让我蛋疼的时候Gitee的图片在某些地方无法访问，Gitee的图片链接会自动被屏蔽，比如微信，我的博客如果在微信直接打开的话是一张图片都没有的，光秃秃的，难受</p><p>所以就想到了GitHub，群里的大佬几乎也都是在用GitHub，但是GitHub在国内访问是非常慢的，不要慌，有jsDelivr这个免费的CDN为我们加速</p><p>jsDelivr是国内唯一一家打通了国内和国外的CDN服务商，而且最重要的是免费、开源的</p><p>开源万岁！</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>我们使用的图床上传工具就是大名鼎鼎的PicGo，下载安装略过，自行百度</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200806184515.png"></p><p>图片里说明的很清楚了，再强调一下自定义域名的格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/gh/[用户名]/[仓库名]</span><br></pre></td></tr></table></figure><h2 id="如何获得GitHub私人Token"><a href="#如何获得GitHub私人Token" class="headerlink" title="如何获得GitHub私人Token"></a>如何获得GitHub私人Token</h2><p>打开GitHub，登录，点击个人头像，点击 <code>Settings</code> </p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200806184800.png" alt="1"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200806185336.png" alt="2"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200806185346.png" alt="3"></p><p>生成token即可，名称自己定义，权限只需要勾选repo选项即可。</p><p>然后就可以愉快的使用图床啦~</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jsDelivr </tag>
            
            <tag> 图床 </tag>
            
            <tag> GitHub </tag>
            
            <tag> PicGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020暑假社会实践纪实</title>
      <link href="/posts/b5bbec96/"/>
      <url>/posts/b5bbec96/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200805180419.jpeg"></p><blockquote><p>顺便给学校打一波广告，啊哈哈</p></blockquote><h2 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h2><p>拖延症晚期的我拖了好久，今天终于拖不下去了，开学的通知今天下发了，一下子感觉时间不够了，有那么一丝丝紧张了</p><p>首先就是要根据学院的通知来确定题目</p><p>然后就思来想去，想啊想，看啊看，确定了一个相对而言比较容易操作的吧</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200805192823.png"></p><p>因为我家在小县城嘛，摆摊的也挺多的，所以取材比较容易</p><p>然后嘛，学校还要让在易班APP里发说说，作为实践日记，记录成绩的一部分</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200806170725.png"></p><p>今天就到这明天再说，晚上去踩点</p><h2 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h2><p>没想到下了雨，耽误了好多事情，今天开始制作问卷，明天再择机去踩点</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200806170818.png"></p><p>下面是调查问卷，题目不多，路过的大哥大姐帮帮忙呀😭😭😭</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200806171641.jpg" alt="问卷"></p><h3 id="直链"><a href="#直链" class="headerlink" title="直链"></a>直链</h3><p><a href="https://www.wjx.cn/jq/87330571.aspx">大白萝卜的调查问卷</a></p><h2 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h2><p>朋友圈发了好多次，可能是自己的人缘确实不行吧，只收回了几份答卷，哎，照这样子下去实践活动没法开展啊</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200807150801.png"></p><p>想哭，呜呜呜，太难了</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200808220356.png"></p><h2 id="第四天"><a href="#第四天" class="headerlink" title="第四天"></a>第四天</h2><p>哈哈，终于在我的努力下，答卷数量超过了100，还行，勉强能及格，晚上趁着天气晴朗就去夜市踩了点拍了照，顺便采访采访路人和摊主，为自己的调研报告增加有说服力的材料。</p><p>胜利就在眼前，奥力给！</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200808220413.png"></p><h2 id="第五天"><a href="#第五天" class="headerlink" title="第五天"></a>第五天</h2><p>论文水完了，还有十二天开学，终于开始复习（预习）了，开学即考试，哭了</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200805180311.png"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 社会实践 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VScode 添加 GitBash 支持</title>
      <link href="/posts/137e3966/"/>
      <url>/posts/137e3966/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200804102554.png"></p><h2 id="2021-8-5-更新"><a href="#2021-8-5-更新" class="headerlink" title="2021.8.5 更新"></a>2021.8.5 更新</h2><p>最近装了新系统，Windows11，所以环境重新配置了一下，突然发现现在VSC修改默认终端已经不需要那么麻烦了，支持一键修改：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN1/20210805145027.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Windows 自带的 powershell 虽然功能已经很多，还是 Bash 天下第一好嘛</p><h2 id="修改设置"><a href="#修改设置" class="headerlink" title="修改设置"></a>修改设置</h2><p>打开 文件-首选项-设置</p><p>搜索：<code>terminal.integrated.shell.windows</code> </p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200804102802.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200804102823.png"></p><p>加上你的gitbash路径就可以了，注意路径要进行转义哦，不然识别不出来</p><p>效果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200804102923.png"></p><p>可以愉快的执行sh脚本了呢，嘿嘿</p><p>Bash 天下第一！！！</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VScode </tag>
            
            <tag> Bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原生JS实现网抑云一言热评请求</title>
      <link href="/posts/84e88f3f/"/>
      <url>/posts/84e88f3f/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200803213957.jpeg"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>不知道为什么，群里的大佬们突然讨论起了“网抑云”，然后各种经典的语录就被发了出来，让电脑屏幕前面的我笑出了声，刚好我也是网易云音乐的重度用户，突发奇想，能不能把网抑云的热评放在网站的侧边栏，然后就在群里随口说了一声有没有网易云一言热评的API啊，然后？？？真的有大佬发了出来，我就是随口说说哎喂</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200803214609.png"></p><p>然后我去这个网站看了看</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200803214718.png"></p><p>嗯，看着挺简单，开搞。</p><h2 id="开搞"><a href="#开搞" class="headerlink" title="开搞"></a>开搞</h2><p>因为我是想加在博客里，所以尽量要小，语法简单，本来是想用vue的，但是写完了运行一看，报错了，要导入一个vue的网络请求包，算了算了。</p><p>我刚开始学前端，就只会一个vue，JavaScript基础也不咋地，就用原生js写吧，百度了大半个小时，才勉强找到了一个能看得懂的，自己理解理解，改造改造，就这么出炉了，先上效果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200803215348.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200803215406.png"></p><p>废话不多说，放上源码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;wangyiyun&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;chuchu&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> httpRequest = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">    httpRequest.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;https://api.uomg.com/api/comments.163?format=text&#x27;</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">    httpRequest.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript">    httpRequest.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (httpRequest.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; httpRequest.<span class="property">status</span> == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> res = httpRequest.<span class="property">responseText</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> str_before = res.<span class="title function_">split</span>(<span class="string">&#x27;来自@&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> str_after = res.<span class="title function_">split</span>(<span class="string">&#x27;来自@&#x27;</span>)[<span class="number">1</span>];</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;wangyiyun&quot;</span>).<span class="property">innerHTML</span> = str_before</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;chuchu&quot;</span>).<span class="property">innerHTML</span> = <span class="string">&#x27;评论来自： &#x27;</span> + str_after</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>插入公告栏只需要把js部分通过cdn引入，然后在公告栏里放入相对应的 <code>div</code> 即可</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>原生请求：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> httpRequest = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();<span class="comment">//第一步：建立所需的对象</span></span><br><span class="line">        httpRequest.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;url&#x27;</span>, <span class="literal">true</span>);<span class="comment">//第二步：打开连接  将请求参数写在url中</span></span><br><span class="line">        httpRequest.<span class="title function_">send</span>();<span class="comment">//第三步：发送请求  将请求参数写在URL中</span></span><br><span class="line">        <span class="comment">// 获取数据后的处理程序</span></span><br><span class="line">        httpRequest.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (httpRequest.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; httpRequest.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> res = httpRequest.<span class="property">responseText</span>;<span class="comment">//获取到json字符串，还需解析</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> httpRequest = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">   httpRequest.<span class="title function_">open</span>(<span class="string">&quot;POST&quot;</span>,url,<span class="literal">true</span>);</span><br><span class="line">   httpRequest.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line">   httpRequest.<span class="title function_">send</span>(<span class="string">&quot;keyword=&quot;</span>+keyword+<span class="string">&quot;&amp;name=&quot;</span>+name);</span><br><span class="line">   httpRequest.<span class="property">onreadystatechange</span> = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(httpRequest.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; httpRequest.<span class="property">status</span> == <span class="number">200</span>)&#123;</span><br><span class="line">           <span class="keyword">var</span> res = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(httpRequest.<span class="property">responseText</span>);</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>字符串截取：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// string 字符串;</span></span><br><span class="line"><span class="comment">// str 指定字符;</span></span><br><span class="line"><span class="comment">// split(),用于把一个字符串分割成字符串数组;</span></span><br><span class="line"><span class="comment">// split(str)[0],读取数组中索引为0的值（第一个值）,所有数组索引默认从0开始;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getStr</span>(<span class="params">string,str</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> str_before = string.<span class="title function_">split</span>(str)[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">var</span> str_after = string.<span class="title function_">split</span>(str)[<span class="number">1</span>];</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;前：&#x27;</span>+str_before+<span class="string">&#x27; - 后：&#x27;</span>+str_after);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>88~</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于自己变得痴呆这件事</title>
      <link href="/posts/293e5226/"/>
      <url>/posts/293e5226/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200803075808.jpg" alt="封面"></p><p>距离去年放寒假到现在不知道多少天了，一直宅在家里。</p><p>有疫情影响的原因，有自己不想和别人交流的原因吧，渐渐喜欢上了这种感觉，自己一个人独处，不喜欢和别人交流，甚至感到恐惧，或许这就是社交恐惧症？</p><p>但是我最近渐渐发现，这大半年的不出门不光给我带来了身体发胖、性格越发内向的影响，还有一个最大的影响就是记忆力下降的太快了。</p><p>每天脑子里只想着今天要做的事，根本不去回忆，然后最近几天我突然发现，自己对很多很多事情慢慢的在淡忘，自己去年的还在同一个班里上课的同学我现在已经几乎没有印象，甚至已经叫不上名字，自己在宿舍里的东西什么在哪什么在哪，哪个是我的，也只是模糊的记着，别人问我什么东西，我回答最多的就是好像、我不清楚、我忘了这些词语。</p><p>脑子里就好像变成了一根筋，什么都不去操心，不想去想</p><p>最可怕的是自己准备要做的事情，突然有一点别的事，转头回来就把那件事忘掉了，自己的文件保存在了哪个文件夹都忘掉了</p><p>今天早上准备开始今年的暑假社会实践活动，然后看到了自己保存的寒假社会实践的通知文件，打开一看，我就知道糟了：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200803081624.png"></p><p>我以为当初过年的时候是直接取消了社会实践活动，我就根本没写，我去翻了翻我平时保存学校文件的文件夹，发现也没有相关的作业文档，我想着这下坏事了</p><p>然后就着急忙慌的问我舍友，问他写了没，他没回消息我就在我们班群里问，然后学习委员告诉我说肯定写了啊，在二月份的时候都交了，我就跟雷劈了一样懵了，坐在电脑前面发呆，过了一会，她给我说我也交了啊，我更懵了</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200803082158.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200803082241.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200803082311.png"></p><p>我把我的数据盘翻了个遍，才在一个角落里找到了自己的文件，看着上面的署名和日期，看着里面的内容，我还是记不起来我什么时候写的，什么时候交的</p><p>坐在电脑面前呆呆的哭了</p><p>我不知道自己为什么会变成这样</p><p>自己的脾气和性格越来越像一个小孩子</p><p>变得任性变得呆傻</p><p>所以就来写了这篇文章，希望以后的我如果看到了，我也不知道该给你说什么，只是希望你不要怪自己，是这个世界的错，所有的锅都让时辰来背，加油</p><p>突然间就变得伤感，难受，哪怕现在耳朵里都是快乐的歌，心乱如麻说的就是这种感觉吧</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 遗忘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly 如何优雅的改字体</title>
      <link href="/posts/25c13146/"/>
      <url>/posts/25c13146/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200802204041.png"></p><blockquote><p>个人博客属于比较特殊类的网站，如果你需要修改字体，请务必保证你下载的字体获得授权或者可以免费使用</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇教程不涉及源码修改，可放心食用，一定要注意版权哦~~</p><h2 id="字体下载"><a href="#字体下载" class="headerlink" title="字体下载"></a>字体下载</h2><p>推荐几个免费的字体网站：</p><ul><li><a href="https://www.fontspace.com/">Free Fonts  字体</a></li><li><a href="http://www.googlefonts.net/">Google Fonts | 谷歌字体中文版</a></li><li><a href="https://github.com/adobe-fonts">Adobe Fonts</a></li><li><a href="https://www.zcool.com.cn/special/zcoolfonts/">站酷字库 - 付费字体 &amp; 免费字体 - 站酷 (ZCOOL)</a></li><li><a href="http://www.fonts.net.cn/">字体天下-提供各类字体的免费下载和在线预览服务</a></li><li><a href="https://github.com/microsoft/cascadia-code">https://github.com/microsoft/cascadia-code</a></li></ul><p>最后一个是微软的开源连体字，作为代码字体是很舒服的。</p><h2 id="开始修改"><a href="#开始修改" class="headerlink" title="开始修改"></a>开始修改</h2><p>首先创建一个css文件：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;CascadiaCodePL&#x27;</span>;</span><br><span class="line">  <span class="attribute">font-display</span>: swap;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;/butterflyChange/fonts/CascadiaCodePL.ttf&#x27;</span>) <span class="built_in">format</span>(<span class="string">&quot;truetype&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>url</code> 可自行修改，可以支持放在你的CDN里哦，后面的format是必须字段，转换字体格式，<code>font-display: swap;</code> 可以保证我们的字体文件在没有加载完成之前文字使用默认字体，具体用法可以自行百度哦</p><p>那么如果你的字体是其他格式的呢怎么办？不用怕，这里给你提供常见的格式示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">   <span class="attribute">font-family</span>: <span class="string">&#x27;webfont&#x27;</span>;</span><br><span class="line">   <span class="attribute">font-display</span>: swap;</span><br><span class="line">   <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;.eot&#x27;</span>);  <span class="comment">/*IE9*/</span></span><br><span class="line">   <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;.eot&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;embedded-opentype&#x27;</span>),  <span class="comment">/* IE6-IE8 */</span></span><br><span class="line">        <span class="built_in">url</span>(<span class="string">&#x27;.woff2&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff2&#x27;</span>),</span><br><span class="line">        <span class="built_in">url</span>(<span class="string">&#x27;.woff&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>),  <span class="comment">/*chrome、firefox */</span></span><br><span class="line">        <span class="built_in">url</span>(<span class="string">&#x27;.ttf&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;truetype&#x27;</span>),  <span class="comment">/* chrome、firefox、opera、Safari, Android, iOS 4.2+*/</span></span><br><span class="line">        <span class="built_in">url</span>(<span class="string">&#x27;.svg&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;svg&#x27;</span>);  <span class="comment">/* iOS 4.1- */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，<code>font-family</code> 字段是可以自己定义的哦</p><p>如果你要修改全局字体，请在 <code>butterfly.yml</code> 里修改 <code>inject</code> ，将刚才创建的css文件引入：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200802205602.png" alt="inject"></p><p>然后修改 <code>butterfly.yml</code> 中的 <code>font-family</code> ：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200802205707.png" alt="font-family"></p><p>第一个就是全局字体，第二个是代码块的字体，你可以同时在刚才的那个css文件里引入两个字体文件哦，然后吧 <code>font-family</code> 的值写在这里就好了呀。</p><p>如果你还要修改博客左上角logo和首页的你名字的字体例如：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200802205945.png" alt="logo"></p><p>就要把这里的字体文件也引入刚才的css文件里，然后修改 <code>butterfly.yml</code> ：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200802210053.png" alt="配置"></p><p>把这里的 <code>font-family</code> 修改为你要设置的字体的就行啦，如果你把上面这三个字体都在同一个css里用 <code>inject</code> 引入的话这里的 <code>font_link</code> 就不用填了哦，但是建议你把logo的字体单独引一个css文件。</p><p>还有一件事！！！</p><p><code>font-family</code> 不要只填你引入的字体，在后面多放几个备用字体，用默认的就行了，比如微软雅黑什么的，防止字体文件引入失败导致字体不显示，其实css里的 <code>font-display</code> 已经解决了这个问题，但是以防万一嘛</p><p>还有一件事！</p><p>最重要的是一定要注意字体的版权问题，不然小心律师函警告哦~</p><p>拜拜88~~~</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> font </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 博客生成永久链接</title>
      <link href="/posts/b6a99401/"/>
      <url>/posts/b6a99401/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200802133832.png" alt="封面"></p><blockquote><p>先放上插件链接：<a href="https://github.com/Rozbo/hexo-abbrlink">hexo-abbrlink</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Hexo文章链接默认的生成规则是：<code>:year/:month/:day/:title</code>，是按照年、月、日、标题来生成的。</p><p>这样的话，生成的链接非常长长长长长，而且如果我们的Markdown使用中文标题，那就更惨了，URL一转码，将是一场灾难。</p><p>更难受的是如果我们修改了文章的日期或者标题，那么将导致链接改变，别人或者你分享出去的文章就会404，这非常的蛋疼啊，所以就有了这种插件，不论你如何修改文章的日期、名称，只要不改变footer-matter中的id值，那么文章链接永远不会变。</p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>修改 <code>_config.yml</code> ：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## permalink: :year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:abbrlink.html</span>  <span class="comment">## 此处可以自己设置</span></span><br></pre></td></tr></table></figure><p>增加以下配置：（还是这个yml）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## abbrlink config</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span>      <span class="comment">#support crc16(default) and crc32 进制</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">hex</span>        <span class="comment">#support dec(default) and hex  算法</span></span><br><span class="line">  <span class="attr">drafts:</span> <span class="literal">false</span>   <span class="comment">#(true)Process draft,(false)Do not process draft. false(default) </span></span><br><span class="line">  <span class="comment">## Generate categories from directory-tree</span></span><br><span class="line">  <span class="comment">## depth: the max_depth of directory-tree you want to generate, should &gt; 0</span></span><br><span class="line">  <span class="attr">auto_category:</span></span><br><span class="line">     <span class="attr">enable:</span> <span class="literal">true</span>  <span class="comment">#true(default)</span></span><br><span class="line">     <span class="attr">depth:</span>        <span class="comment">#3(default)</span></span><br><span class="line">     <span class="attr">over_write:</span> <span class="literal">false</span> </span><br><span class="line">  <span class="attr">auto_title:</span> <span class="literal">false</span> <span class="comment">#enable auto title, it can auto fill the title by path</span></span><br><span class="line">  <span class="attr">auto_date:</span> <span class="literal">false</span> <span class="comment">#enable auto date, it can auto fill the date by time today</span></span><br><span class="line">  <span class="attr">force:</span> <span class="literal">false</span> <span class="comment">#enable force mode,in this mode, the plugin will ignore the cache, and calc the abbrlink for every post even it already had abbrlink.</span></span><br></pre></td></tr></table></figure><p>其他配置意义可查看插件文档哦，链接在顶部。</p><p>记着要先 <code>hexo clean</code> 再 <code>hexo g</code> 哦~~~</p><p>生成的链接示意：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200802135553.png" alt="示例"></p><p>就到这里啦，88~</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TennoCon2020画饼总结</title>
      <link href="/posts/96b1b2b2/"/>
      <url>/posts/96b1b2b2/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200802081145.png" alt="Tenno"></p><p>期待已久的星际战甲年度庆典 TennoCon 终于来了，虽然是在晚上十二点直播，但是也挡不住我要观看的心情，好吧，我没看，我睡着了，但是一大早我就登陆领了水男和摇头娃娃，毕竟甲槽还是很香的。</p><p>我原本以为会直接给个甲槽，没想到还是直接给了个水男带甲槽带金土豆，真美滋滋啊，下水道战甲双倍快乐：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200802081612.png" alt="双倍快乐"></p><p>真心美滋滋啊</p><p>别的大佬的图：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200802081727.png" alt="羡慕"></p><p>好了，说正题</p><p>这次庆典直播的本意是给已经几乎凉透的国服带来强有力的一针强心剂，国服更新的消息</p><p>国服已经怀胎11个月了没有孵崽了，我都有点心灰意冷了，但是七月的时候放出了腾讯接盘，CY滚蛋的消息，着实让我惊喜了，今天虽然没看直播，但是我早上就打开奥迪斯，果然，狮子已经出了更新解说，我只是在这里总结一下：</p><ol><li>国服<strong>九月</strong>将会直接更新四个版本，目前来说和国际服相差了十一个版本</li><li>国服将会开启<strong>测试服</strong>，喜欢体验BUG和新内容的同学有福利了</li><li>畅游端账号必须绑定QQ，以后<strong>只会有WEGAME登录端口</strong>，如果不绑定将会得不到更新内容和相关资料</li><li>国服将近期更新到<strong>木星协定</strong>版本，<strong>平原重置</strong>，将有更好的光影和花鸟树木、宠物捕获、新BOSS土蜘蛛等，将会开放<strong>午夜电波</strong>系统，再也不会为某些稀有物品氪金啦，白嫖党的胜利，将在5-6个月左右迎头赶上国际服</li><li>将会开放<strong>交易系统</strong>，但不是现在，在5-6个月之后等国服和国际服几乎同步的时候将会开放国服期待已久的交易系统，但是由于中国国情的某些限制，会<strong>限制交易</strong>，并不能真正做到国际服那样的自由交易</li><li>全面接入<strong>腾讯反外挂 TP 系统</strong>，几乎再也看不到科技车，可以安安心心上材料车和核桃车</li><li>腾讯将<strong>加大活动力度</strong>，多给玩家发放福利 </li><li>将推出<strong>官方手机 App 助手</strong> ，就能在手机上看到午夜电波、平原时间等信息，能管理铸造仓、宠物孵化等功能</li></ol><p>虽然信息都很劲爆，但是还是老规矩，只是给你画了个大饼，具体的更新内容和时间都没有敲定，如果想看详细的更新预告，请看狮子的文章：**<a href="https://mp.weixin.qq.com/s?__biz=MzU1MjU3NDc2Nw==&mid=2247502723&idx=1&sn=95eb7c496b3f8043126ea655e8c57a61&chksm=fb8281c3ccf508d5eef245cfe50ccb9d9fa8aa34ab7cdbe8820e436b3b7420bfe0f5275307f7&scene=126&sessionid=1596329106&key=ef51a5b0b69d9d306448a3e3937d5512ba4b687ae7bc632fb67b2a15d7658a6c0577e02beee0f88eab16d46e65def750b066f7eda820288fe68bd5db38ae4418495fe967b35c422e65798be86e33f137&ascene=1&uin=MTM5NTczNDgxNw==&devicetype=Windows+10+x64&version=62090529&lang=zh_CN&exportkey=Az94M6B/SFf82fQNKSsOwLU=&pass_ticket=H7XjSdJ3BbeuXVShXVAksGBb2BJ8fuBLUmBWd4sGUz96fn53sk0CpdqW2f8OG7Rt">有生之年终于奶中——TENNOCON2020国服速报</a>**</p><p>欢迎归来，天诺杂碎。——你最亲爱的莲妈</p>]]></content>
      
      
      <categories>
          
          <category> Warframe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 星际战甲 </tag>
            
            <tag> Warframe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Yarn 和 Npm 的相爱相杀</title>
      <link href="/posts/d81893d4/"/>
      <url>/posts/d81893d4/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200801194600.jpeg" alt="img"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li><p>通过 msi 安装，下载链接：<a href="https://classic.yarnpkg.com/zh-Hans/docs/install/">yarn</a></p></li><li><p>通过 Chocolatey 安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install yarn</span><br></pre></td></tr></table></figure></li><li><p>通过 Scoop 安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop install yarn</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>前提是你要安装了 node.js</p></blockquote><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>yarn 有以下3个优点 :</p><ul><li>安装速度快 (服务器速度快 , 并且是并行下载)</li><li>版本锁定</li><li>缓存机制</li></ul><h2 id="Yarn-语法"><a href="#Yarn-语法" class="headerlink" title="Yarn 语法"></a>Yarn 语法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br><span class="line">npm install</span><br><span class="line">npm install xxx@1.1.1 -g</span><br><span class="line">npm install xxx@1.1.1 --save</span><br><span class="line">npm install xxx@1.1.1 --save-dev</span><br><span class="line">npm uninstall xxx --save(-dev)</span><br><span class="line">npm run xxx</span><br></pre></td></tr></table></figure><p>相对应的 yarn 语句为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yarn init</span><br><span class="line">yarn</span><br><span class="line">yarn global add xxx@1.1.1</span><br><span class="line">yarn add xxx@1.1.1</span><br><span class="line">yarn add xxx@1.1.1 --dev</span><br><span class="line">yarn remove xxx</span><br><span class="line">yarn run xxxx</span><br></pre></td></tr></table></figure><p>先说在这，最近比较忙，有时间再更新细节，88~</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> yarn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 颜色速查表</title>
      <link href="/posts/2a2f52a6/"/>
      <url>/posts/2a2f52a6/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200803073219.jpeg" alt="封面"></p><p>作为一个准前端开发者，在CSS五彩斑斓的世界里颜色是必不可少的，如何准确的识别自己想要的颜色，今天给大家带来颜色代码和数值对照表，赶紧收藏起来吧~</p><blockquote><p>不知道为啥用Markdown写出来颜色不渲染，将就看吧哎，公众号文章里又颜色：<a href="https://mp.weixin.qq.com/s?__biz=MzIxMjQ4NzExMQ==&mid=2247483940&idx=1&sn=81b74e84962892903a2f277831f68f7f&chksm=97441c8ca033959a8894ec01d43f4ebb150d885f4edb9e91a564065041e27c71b8754224477f&scene=126&sessionid=1596253602&key=ef51a5b0b69d9d30d81aceb0ae0bdd997521409a26987830f625bc4abdc4d56bff3623e7d0afa332163e1f5bd27cab8273a20d089fb9ec48fccdd9db9feb7341088658acc5d6e5094cba78de9e337c47&ascene=1&uin=MTM5NTczNDgxNw==&devicetype=Windows+10+x64&version=62090529&lang=zh_CN&exportkey=A69D8DTDTLC3qno7RVC2OUQ=&pass_ticket=XgXdhXMxohRy0LBJtqYvXmupcYJwo0b0cIMN0OBYOajNJql8TP9tWqLJohpQ0iku">CSS颜色速查</a></p></blockquote><table><thead><tr><th><em><strong>*颜色*</strong></em></th><th><em><strong>*英文代码*</strong></em></th><th><em><strong>*形象描述*</strong></em></th><th><em><strong>*十六进制*</strong></em></th><th><em><strong>*RGB*</strong></em></th></tr></thead><tbody><tr><td></td><td>LightPink</td><td>浅粉红</td><td>#FFB6C1</td><td>255,182,193</td></tr><tr><td></td><td>Pink</td><td>粉红</td><td>#FFC0CB</td><td>255,192,203</td></tr><tr><td></td><td>Crimson</td><td>猩红</td><td>#DC143C</td><td>220,20,60</td></tr><tr><td></td><td>LavenderBlush</td><td>脸红的淡紫色</td><td>#FFF0F5</td><td>255,240,245</td></tr><tr><td></td><td>PaleVioletRed</td><td>苍白的紫罗兰红色</td><td>#DB7093</td><td>219,112,147</td></tr><tr><td></td><td>HotPink</td><td>热情的粉红</td><td>#FF69B4</td><td>255,105,180</td></tr><tr><td></td><td>DeepPink</td><td>深粉色</td><td>#FF1493</td><td>255,20,147</td></tr><tr><td></td><td>MediumVioletRed</td><td>适中的紫罗兰红色</td><td>#C71585</td><td>199,21,133</td></tr><tr><td></td><td>Orchid</td><td>兰花的紫色</td><td>#DA70D6</td><td>218,112,214</td></tr><tr><td></td><td>Thistle</td><td>蓟</td><td>#D8BFD8</td><td>216,191,216</td></tr><tr><td></td><td>plum</td><td>李子</td><td>#DDA0DD</td><td>221,160,221</td></tr><tr><td></td><td>Violet</td><td>紫罗兰</td><td>#EE82EE</td><td>238,130,238</td></tr><tr><td></td><td>Magenta</td><td>洋红</td><td>#FF00FF</td><td>255,0,255</td></tr><tr><td></td><td>Fuchsia</td><td>灯笼海棠(紫红色)</td><td>#FF00FF</td><td>255,0,255</td></tr><tr><td></td><td>DarkMagenta</td><td>深洋红色</td><td>#8B008B</td><td>139,0,139</td></tr><tr><td></td><td>Purple</td><td>紫色</td><td>#800080</td><td>128,0,128</td></tr><tr><td></td><td>MediumOrchid</td><td>适中的兰花紫</td><td>#BA55D3</td><td>186,85,211</td></tr><tr><td></td><td>DarkVoilet</td><td>深紫罗兰色</td><td>#9400D3</td><td>148,0,211</td></tr><tr><td></td><td>DarkOrchid</td><td>深兰花紫</td><td>#9932CC</td><td>153,50,204</td></tr><tr><td></td><td>Indigo</td><td>靛青</td><td>#4B0082</td><td>75,0,130</td></tr><tr><td></td><td>BlueViolet</td><td>深紫罗兰的蓝色</td><td>#8A2BE2</td><td>138,43,226</td></tr><tr><td></td><td>MediumPurple</td><td>适中的紫色</td><td>#9370DB</td><td>147,112,219</td></tr><tr><td></td><td>MediumSlateBlue</td><td>适中的板岩暗蓝灰色</td><td>#7B68EE</td><td>123,104,238</td></tr><tr><td></td><td>SlateBlue</td><td>板岩暗蓝灰色</td><td>#6A5ACD</td><td>106,90,205</td></tr><tr><td></td><td>DarkSlateBlue</td><td>深岩暗蓝灰色</td><td>#483D8B</td><td>72,61,139</td></tr><tr><td></td><td>Lavender</td><td>熏衣草花的淡紫色</td><td>#E6E6FA</td><td>230,230,250</td></tr><tr><td></td><td>GhostWhite</td><td>幽灵的白色</td><td>#F8F8FF</td><td>248,248,255</td></tr><tr><td></td><td>Blue</td><td>纯蓝</td><td>#0000FF</td><td>0,0,255</td></tr><tr><td></td><td>MediumBlue</td><td>适中的蓝色</td><td>#0000CD</td><td>0,0,205</td></tr><tr><td></td><td>MidnightBlue</td><td>午夜的蓝色</td><td>#191970</td><td>25,25,112</td></tr><tr><td></td><td>DarkBlue</td><td>深蓝色</td><td>#00008B</td><td>0,0,139</td></tr><tr><td></td><td>Navy</td><td>海军蓝</td><td>#000080</td><td>0,0,128</td></tr><tr><td></td><td>RoyalBlue</td><td>皇家蓝</td><td>#4169E1</td><td>65,105,225</td></tr><tr><td></td><td>CornflowerBlue</td><td>矢车菊的蓝色</td><td>#6495ED</td><td>100,149,237</td></tr><tr><td></td><td>LightSteelBlue</td><td>淡钢蓝</td><td>#B0C4DE</td><td>176,196,222</td></tr><tr><td></td><td>LightSlateGray</td><td>浅石板灰</td><td>#778899</td><td>119,136,153</td></tr><tr><td></td><td>SlateGray</td><td>石板灰</td><td>#708090</td><td>112,128,144</td></tr><tr><td></td><td>DoderBlue</td><td>道奇蓝</td><td>#1E90FF</td><td>30,144,255</td></tr><tr><td></td><td>AliceBlue</td><td>爱丽丝蓝</td><td>#F0F8FF</td><td>240,248,255</td></tr><tr><td></td><td>SteelBlue</td><td>钢蓝</td><td>#4682B4</td><td>70,130,180</td></tr><tr><td></td><td>LightSkyBlue</td><td>淡蓝色</td><td>#87CEFA</td><td>135,206,250</td></tr><tr><td></td><td>SkyBlue</td><td>天蓝色</td><td>#87CEEB</td><td>135,206,235</td></tr><tr><td></td><td>DeepSkyBlue</td><td>深天蓝</td><td>#00BFFF</td><td>0,191,255</td></tr><tr><td></td><td>LightBLue</td><td>淡蓝</td><td>#ADD8E6</td><td>173,216,230</td></tr><tr><td></td><td>PowDerBlue</td><td>火药蓝</td><td>#B0E0E6</td><td>176,224,230</td></tr><tr><td></td><td>CadetBlue</td><td>军校蓝</td><td>#5F9EA0</td><td>95,158,160</td></tr><tr><td></td><td>Azure</td><td>蔚蓝色</td><td>#F0FFFF</td><td>240,255,255</td></tr><tr><td></td><td>LightCyan</td><td>淡青色</td><td>#E1FFFF</td><td>225,255,255</td></tr><tr><td></td><td>PaleTurquoise</td><td>苍白的绿宝石</td><td>#AFEEEE</td><td>175,238,238</td></tr><tr><td></td><td>Cyan</td><td>青色</td><td>#00FFFF</td><td>0,255,255</td></tr><tr><td></td><td>Aqua</td><td>水绿色</td><td>#D4F2E7</td><td>212,242,231</td></tr><tr><td></td><td>DarkTurquoise</td><td>深绿宝石</td><td>#00CED1</td><td>0,206,209</td></tr><tr><td></td><td>DarkSlateGray</td><td>深石板灰</td><td>#2F4F4F</td><td>47,79,79</td></tr><tr><td></td><td>DarkCyan</td><td>深青色</td><td>#008B8B</td><td>0,139,139</td></tr><tr><td></td><td>Teal</td><td>水鸭色</td><td>#008080</td><td>0,128,128</td></tr><tr><td></td><td>MediumTurquoise</td><td>适中的绿宝石</td><td>#48D1CC</td><td>72,209,204</td></tr><tr><td></td><td>LightSeaGreen</td><td>浅海洋绿</td><td>#20B2AA</td><td>32,178,170</td></tr><tr><td></td><td>Turquoise</td><td>绿宝石</td><td>#40E0D0</td><td>64,224,208</td></tr><tr><td></td><td>Auqamarin</td><td>绿玉\碧绿色</td><td>#7FFFAA</td><td>127,255,170</td></tr><tr><td></td><td>MediumAquamarine</td><td>适中的碧绿色</td><td>#00FA9A</td><td>0,250,154</td></tr><tr><td></td><td>MediumSpringGreen</td><td>适中的春天的绿色</td><td>#00FF7F</td><td>0,255,127</td></tr><tr><td></td><td>MintCream</td><td>薄荷奶油</td><td>#F5FFFA</td><td>245,255,250</td></tr><tr><td></td><td>SpringGreen</td><td>春天的绿色</td><td>#3CB371</td><td>60,179,113</td></tr><tr><td></td><td>SeaGreen</td><td>海洋绿</td><td>#2E8B57</td><td>46,139,87</td></tr><tr><td></td><td>Honeydew</td><td>蜂蜜</td><td>#F0FFF0</td><td>240,255,240</td></tr><tr><td></td><td>LightGreen</td><td>淡绿色</td><td>#90EE90</td><td>144,238,144</td></tr><tr><td></td><td>PaleGreen</td><td>苍白的绿色</td><td>#98FB98</td><td>152,251,152</td></tr><tr><td></td><td>DarkSeaGreen</td><td>深海洋绿</td><td>#8FBC8F</td><td>143,188,143</td></tr><tr><td></td><td>LimeGreen</td><td>酸橙绿</td><td>#32CD32</td><td>50,205,50</td></tr><tr><td></td><td>Lime</td><td>酸橙色</td><td>#00FF00</td><td>0,255,0</td></tr><tr><td></td><td>ForestGreen</td><td>森林绿</td><td>#228B22</td><td>34,139,34</td></tr><tr><td></td><td>Green</td><td>纯绿</td><td>#008000</td><td>0,128,0</td></tr><tr><td></td><td>DarkGreen</td><td>深绿色</td><td>#006400</td><td>0,100,0</td></tr><tr><td></td><td>Chartreuse</td><td>查特酒绿</td><td>#7FFF00</td><td>127,255,0</td></tr><tr><td></td><td>LawnGreen</td><td>草坪绿</td><td>#7CFC00</td><td>124,252,0</td></tr><tr><td></td><td>GreenYellow</td><td>绿黄色</td><td>#ADFF2F</td><td>173,255,47</td></tr><tr><td></td><td>OliveDrab</td><td>橄榄土褐色</td><td>#556B2F</td><td>85,107,47</td></tr><tr><td></td><td>Beige</td><td>米色(浅褐色)</td><td>#F5F5DC</td><td>245,245,220</td></tr><tr><td></td><td>LightGoldenrodYellow</td><td>浅秋麒麟黄</td><td>#FAFAD2</td><td>250,250,210</td></tr><tr><td></td><td>Ivory</td><td>象牙</td><td>#FFFFF0</td><td>255,255,240</td></tr><tr><td></td><td>LightYellow</td><td>浅黄色</td><td>#FFFFE0</td><td>255,255,224</td></tr><tr><td></td><td>Yellow</td><td>纯黄</td><td>#FFFF00</td><td>255,255,0</td></tr><tr><td></td><td>Olive</td><td>橄榄</td><td>#808000</td><td>128,128,0</td></tr><tr><td></td><td>DarkKhaki</td><td>深卡其布</td><td>#BDB76B</td><td>189,183,107</td></tr><tr><td></td><td>LemonChiffon</td><td>柠檬薄纱</td><td>#FFFACD</td><td>255,250,205</td></tr><tr><td></td><td>PaleGodenrod</td><td>灰秋麒麟</td><td>#EEE8AA</td><td>238,232,170</td></tr><tr><td></td><td>Khaki</td><td>卡其布</td><td>#F0E68C</td><td>240,230,140</td></tr><tr><td></td><td>Gold</td><td>金</td><td>#FFD700</td><td>255,215,0</td></tr><tr><td></td><td>Cornislk</td><td>玉米色</td><td>#FFF8DC</td><td>255,248,220</td></tr><tr><td></td><td>GoldEnrod</td><td>秋麒麟</td><td>#DAA520</td><td>218,165,32</td></tr><tr><td></td><td>FloralWhite</td><td>花的白色</td><td>#FFFAF0</td><td>255,250,240</td></tr><tr><td></td><td>OldLace</td><td>老饰带</td><td>#FDF5E6</td><td>253,245,230</td></tr><tr><td></td><td>Wheat</td><td>小麦色</td><td>#F5DEB3</td><td>245,222,179</td></tr><tr><td></td><td>Moccasin</td><td>鹿皮鞋</td><td>#FFE4B5</td><td>255,228,181</td></tr><tr><td></td><td>Orange</td><td>橙色</td><td>#FFA500</td><td>255,165,0</td></tr><tr><td></td><td>PapayaWhip</td><td>番木瓜</td><td>#FFEFD5</td><td>255,239,213</td></tr><tr><td></td><td>BlanchedAlmond</td><td>漂白的杏仁</td><td>#FFEBCD</td><td>255,235,205</td></tr><tr><td></td><td>NavajoWhite</td><td>纳瓦霍白</td><td>#FFDEAD</td><td>255,222,173</td></tr><tr><td></td><td>AntiqueWhite</td><td>古代的白色</td><td>#FAEBD7</td><td>250,235,215</td></tr><tr><td></td><td>Tan</td><td>晒黑</td><td>#D2B48C</td><td>210,180,140</td></tr><tr><td></td><td>BrulyWood</td><td>结实的树</td><td>#DEB887</td><td>222,184,135</td></tr><tr><td></td><td>Bisque</td><td>(浓汤)乳脂,番茄等</td><td>#FFE4C4</td><td>255,228,196</td></tr><tr><td></td><td>DarkOrange</td><td>深橙色</td><td>#FF8C00</td><td>255,140,0</td></tr><tr><td></td><td>Linen</td><td>亚麻布</td><td>#FAF0E6</td><td>250,240,230</td></tr><tr><td></td><td>Peru</td><td>秘鲁</td><td>#CD853F</td><td>205,133,63</td></tr><tr><td></td><td>PeachPuff</td><td>桃色</td><td>#FFDAB9</td><td>255,218,185</td></tr><tr><td></td><td>SandyBrown</td><td>沙棕色</td><td>#F4A460</td><td>244,164,96</td></tr><tr><td></td><td>Chocolate</td><td>巧克力</td><td>#D2691E</td><td>210,105,30</td></tr><tr><td></td><td>SaddleBrown</td><td>马鞍棕色</td><td>#8B4513</td><td>139,69,19</td></tr><tr><td></td><td>SeaShell</td><td>海贝壳</td><td>#FFF5EE</td><td>255,245,238</td></tr><tr><td></td><td>Sienna</td><td>黄土赭色</td><td>#A0522D</td><td>160,82,45</td></tr><tr><td></td><td>LightSalmon</td><td>浅鲜肉(鲑鱼)色</td><td>#FFA07A</td><td>255,160,122</td></tr><tr><td></td><td>Coral</td><td>珊瑚</td><td>#FF7F50</td><td>255,127,80</td></tr><tr><td></td><td>OrangeRed</td><td>橙红色</td><td>#FF4500</td><td>255,69,0</td></tr><tr><td></td><td>DarkSalmon</td><td>深鲜肉(鲑鱼)色</td><td>#E9967A</td><td>233,150,122</td></tr><tr><td></td><td>Tomato</td><td>番茄</td><td>#FF6347</td><td>255,99,71</td></tr><tr><td></td><td>MistyRose</td><td>薄雾玫瑰</td><td>#FFE4E1</td><td>255,228,225</td></tr><tr><td></td><td>Salmon</td><td>鲜肉(鲑鱼)色</td><td>#FA8072</td><td>250,128,114</td></tr><tr><td></td><td>Snow</td><td>雪</td><td>#FFFAFA</td><td>255,250,250</td></tr><tr><td></td><td>LightCoral</td><td>淡珊瑚色</td><td>#F08080</td><td>240,128,128</td></tr><tr><td></td><td>RosyBrown</td><td>玫瑰棕色</td><td>#BC8F8F</td><td>188,143,143</td></tr><tr><td></td><td>IndianRed</td><td>印度红</td><td>#CD5C5C</td><td>205,92,92</td></tr><tr><td></td><td>Red</td><td>纯红</td><td>#FF0000</td><td>255,0,0</td></tr><tr><td></td><td>Brown</td><td>棕色</td><td>#A52A2A</td><td>165,42,42</td></tr><tr><td></td><td>FireBrick</td><td>耐火砖</td><td>#B22222</td><td>178,34,34</td></tr><tr><td></td><td>DarkRed</td><td>深红色</td><td>#8B0000</td><td>139,0,0</td></tr><tr><td></td><td>Maroon</td><td>栗色</td><td>#800000</td><td>128,0,0</td></tr><tr><td></td><td>White</td><td>纯白</td><td>#FFFFFF</td><td>255,255,255</td></tr><tr><td></td><td>WhiteSmoke</td><td>白烟</td><td>#F5F5F5</td><td>245,245,245</td></tr><tr><td></td><td>Gainsboro</td><td>亮灰色</td><td>#DCDCDC</td><td>220,220,220</td></tr><tr><td></td><td>LightGrey</td><td>浅灰色</td><td>#D3D3D3</td><td>211,211,211</td></tr><tr><td></td><td>Silver</td><td>银白色</td><td>#C0C0C0</td><td>192,192,192</td></tr><tr><td></td><td>DarkGray</td><td>深灰色</td><td>#A9A9A9</td><td>169,169,169</td></tr><tr><td></td><td>Gray</td><td>灰色</td><td>#808080</td><td>128,128,128</td></tr><tr><td></td><td>DimGray</td><td>暗淡的灰色</td><td>#696969</td><td>105,105,105</td></tr><tr><td></td><td>Black</td><td>纯黑</td><td>#000000</td><td>0,0,0</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 颜色 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 中的颜色与单位</title>
      <link href="/posts/27414ba3/"/>
      <url>/posts/27414ba3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>文章来自我自己的公众号，不是侵权哦</p></blockquote><h2 id="CSS中的单位"><a href="#CSS中的单位" class="headerlink" title="CSS中的单位"></a>CSS中的单位</h2><h2 id="长度"><a href="#长度" class="headerlink" title="长度"></a>长度</h2><h3 id="px"><a href="#px" class="headerlink" title="px"></a>px</h3><p>​<code>px</code> 就是指像素点的数量，<code>100px</code> 就是100个像素点的长度，例如绘制下面这个放大镜：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200801115206.webp" alt="放大镜"></p><p>​需要用到下列样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.magnifier</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">color</span>: dodgerblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.lens</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">10px</span> solid;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.handle</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: currentColor;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">45deg</span>);</span><br><span class="line">    <span class="attribute">transform-origin</span>: top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​可以看到一共有八个属性用到了<code>px</code> 单位，如果我要把这个放大镜放大到2-5倍，那就需要同时修改这八个属性，而且需要计算放大之后的数值，调整起来很麻烦，<code>px</code> 是一个绝对单位，不推荐使用。</p><h3 id="em"><a href="#em" class="headerlink" title="em"></a>em</h3><p>​和绝对尺寸相对的就是相对尺寸，要使用相对尺寸，就得先确定一个基准，然后其他尺寸都以这个基准来计算大小，当要修改时，只需要修改一下基准值，其他尺寸就会自动按照比例进行改变。</p><p>​<code>em</code> 是指相对于<code>font-size</code> 的大小，例如一个元素有属性<code>font-size: 10px</code> 那么<code>1em = 10px</code> ，如果一个容器内所有子元素都使用<code>em</code> 单位，那么需要调整容器大小时只需要调整<code>font-size</code> 的值即可。</p><p>例如把上面的放大镜改用<code>em</code> 单位：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.magnifier</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line"><span class="attribute">color</span>: dodgerblue;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.lens</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">10em</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">10em</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1em</span> solid;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.handle</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">2em</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">10em</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">1em</span> <span class="number">1em</span>;</span><br><span class="line"><span class="attribute">background-color</span>: currentColor;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">10em</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">10em</span>;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">45deg</span>);</span><br><span class="line"><span class="attribute">transform-origin</span>: top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：推荐在能用<code>em</code> 的情况下尽量使用<code>em</code> 单位</p></blockquote><h2 id="CSS中的颜色"><a href="#CSS中的颜色" class="headerlink" title="CSS中的颜色"></a>CSS中的颜色</h2><h2 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h2><p>​CSS提供了四种颜色表达方式：</p><h3 id="颜色名称"><a href="#颜色名称" class="headerlink" title="颜色名称"></a>颜色名称</h3><p>​指使用”red” “blue” “green”等这些颜色单词来表示颜色，例如：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200801121222.png" alt="颜色名称"></p><h3 id="HSL"><a href="#HSL" class="headerlink" title="HSL"></a>HSL</h3><p>​HSL 是用色相（hue）、饱和度（saturation）和亮度（lightness）调配出的颜色，例如：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200801121259.png" alt="HSL"></p><p>​其中色相也就是我们日常说的“颜色”，左边的圆环就是色相，它的值是从0°到360°，也就是一个圆周角的角度，按彩虹色的顺序从0°开始排列，0°是红色，30°是橙色，60°是黄色，120°是绿色，180°是青色，240°是蓝色，300°是紫色，360°又回到红色。饱和度是指纯色与灰色混合之后，纯色的占比，取值是0%到100%，100%表示未混入任何灰色的纯色，0%表示全灰。亮度的取值范围也是从0%到100%，表示从暗到明的程度，0%表示全黑，100%表示全白，50%表示纯色。因为纯色的饱和度是100%，亮度是50%，所以只要调整色相的度数，就可以得到不同的纯色，例如红色是<code>hsl(0, 100%, 50%)</code> ，绿色是<code>hsl(120, 100%, 50%)</code> ，蓝色是<code>hsl(240, 100%, 50%)</code> 。</p><h3 id="RGB"><a href="#RGB" class="headerlink" title="RGB"></a>RGB</h3><p>​RGB颜色模式是用红色、绿色、蓝色3色调配出的颜色，RGB色值是以<code>#</code> 号开头的6个十六进制数，每种颜色用2位十六进制表示，取值范围是从<code>#00</code>到<code>#ff</code> ，例如红色（red）是<code>#ff0000</code> ，绿色（green）是<code>#00ff00</code> ，蓝色（blue）是<code>#0000ff</code> ，黄色是<code>#ffff00</code> （红色和绿色混合），如图所示:</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200801121320.png" alt="RGB"></p><p>​￼因为同比例的R、G、B颜色混合之后呈灰色，例如<code>#282828</code> 、<code>#676767</code> 、<code>#cacaca</code> 都是灰色，又因为若一个颜色的两个十六进制数字相同，可以缩写为一个数字，所以我们可以得到缩写的从<code>#000</code> （黑）到<code>#fff</code> （白）之间的16个灰度颜色，如图所示:</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200801121341.png" alt="灰阶"></p><p>​用RGB模式来记录颜色已经有100多年的历史了，电视机、显示器都是用这个原理显示颜色的，不过它不太易读，很难让人看到一个RGB色值就能估算出它大概的颜色。RGB颜色还有一种表示方法，就是用<code>rgb(r,g,b)</code> 的形式把3种颜色写成10进制数或百分比值，例如<code>#ff0000</code> 写成<code>rgb(255, 0, 0)</code> ，这比十六进制数稍好一点，不过还是不易读。</p><p>​颜色名称、HSL 、RGB 可以混合使用，例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.seasons</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">100%</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: springgreen;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seasons</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">100%</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ff4500</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seasons</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">100%</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>,<span class="number">215</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seasons</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>) &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">hsl</span>(<span class="number">195</span>,<span class="number">100%</span>,<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200801121404.png" alt="四色"></p><h3 id="HSLA-RGBA"><a href="#HSLA-RGBA" class="headerlink" title="HSLA&#x2F;RGBA"></a>HSLA&#x2F;RGBA</h3><p>​HSLA&#x2F;RGBA比HSL&#x2F;RGB多出的最后一个A，学名叫“alpha”通道，实践中我们把它当作一个不透明度值对待，取值范围是从0到1，0表示完全透明，那么这个颜色就像不存在一样，1表示完全不透明，就像没有设置过这个值一样，0.5当然就表示半透明了。例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.hashtag</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">10%</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="built_in">hsla</span>(<span class="number">197</span>,<span class="number">71%</span>,<span class="number">73%</span>,<span class="number">0.8</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hashtag</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">10%</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="built_in">hsla</span>(<span class="number">300</span>,<span class="number">47%</span>,<span class="number">75%</span>,<span class="number">0.8</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hashtag</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span><br><span class="line"><span class="attribute">right</span>: <span class="number">10%</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="built_in">hsla</span>(<span class="number">0</span>,<span class="number">79%</span>,<span class="number">72%</span>,<span class="number">0.8</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hashtag</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>) &#123;</span><br><span class="line"><span class="attribute">bottom</span>: <span class="number">10%</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="built_in">hsla</span>(<span class="number">28</span>,<span class="number">100%</span>,<span class="number">86%</span>,<span class="number">0.8</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="transparent"><a href="#transparent" class="headerlink" title="transparent"></a>transparent</h3><p>​transparent关键字表示透明色，就像透明玻璃一样，用户看不到这个颜色。单独使用<code>color: transparent</code> 的意义不大，因为有不止一种方法可以实现相同的效果，例如通过在RGBA&#x2F;HSLA模式下把A值设置为0，或者使用<code>visibility: hidden</code> 属性。transparent主要是用在一系列颜色中，例如通过把元素的4个边框中的3个边框设置为透明色，再加上其他样式，就可以创作出三角形；再如元素的背景是多种颜色生成的渐变色时，在其中有规律地加入透明色，则可以创作出条纹背景。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 颜色 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>今天是建军节哦</title>
      <link href="/posts/e732b74e/"/>
      <url>/posts/e732b74e/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200801105156.jpeg" alt="图片来自百度百科"></p><h2 id="节日来历"><a href="#节日来历" class="headerlink" title="节日来历"></a>节日来历</h2><p>八一建军节诞生于1933年，她的第一个节日庆祝活动，是在中央苏区首府——江西瑞金举行的。</p><p>1933年6月26日，中共苏区中央局发出《关于“八一”国际反战争斗争日及中国工农红军成立纪念日的决定》。决定指出：“中央革命军事委员会为纪念1927年8月1日的南昌暴动，已确定‘八一’为中国工农红军纪念的日子。”尔后，中央革命军事委会员针对为什么确定“八一”为建军节作出这样的解释：“1927年8月1日发生了无产阶级政党——共产党领导的南昌暴动，这一暴动是反帝的土地革命的开始，是英勇的工农红军的来源。中国工农红军在历年的艰苦战争中，打破了帝国主义国民党的历次进攻，根本动摇了帝国主义国民党在中国的统治，已成了革命高涨的基本杠杆之一，成了中国劳苦群众革命斗争的组织者，是彻底进行民族革命战争的主力。本委会为纪念南昌暴动的胜利与红军的成立，特决定自1933年8月1日为中国工农红军成立纪念日。”7月1日，中华苏维埃共和国临时中央政府作出《关于“八一”纪念运动苏区党、政、军领导纷纷作出动员，毛泽东专门撰写了《新的形势与新的任务》一文，发表在7月29日的《红色中华》报上；博古作了以《战斗的纪念节，战斗的任务》为题的多场专题演讲；张闻天到机关、学校作了《“八一”与帝国主义战争危险》的专题报告。与此同时，苏区各级政府组织群众开展了集会、游行、晚会活动，红军各部的宣传活动更为热烈。</p><p>1933年8月1日，第一个“八一”建军节庆祝活动在瑞金城南举行。傍晚，苏区军民打着火把，从四面八方朝这里涌来，工农剧社组成的欢迎表演团站在入口处，边舞边唱。庆祝活动分阅兵式和分列式，为防敌机轰炸，决定阅兵式在十七点到十九点半进行完。十七时，阅兵式开始，军乐奏起，礼炮齐鸣，毛泽东、朱德、项英三位领导策马而行，检阅长达六百余米的红军队列，红军指战员以注目礼相迎，欢呼声、口号声响彻云霄。第二项是宣誓。中央革命军事委员会向新成立的红军工人师和少共国际师授军旗，向两个师发出奔赴前线英勇杀敌的战斗命令，工人师和少共国际师组成两块方阵，指战员高举拳头进行宣誓。第三项是授旗授奖。中革军委领导分别给各红军学校授校旗，给红军各团队授战旗，向功勋卓著的红军指挥员颁发红星奖章。中央政府和各党、群团体代表致祝辞，分列式随之开始。红军第二团第五团第三十七团第四十团等方队在一面面战旗引领下阔步通过检阅台，战士们一面高呼着口号、一面向检阅台上的首长行注目礼。长长的受阅队伍从检阅台前整整走了一个多小时。坚定的步伐踏破夜幕，踏碎尘土，踹动着这个令人难忘的夜晚，把“81”两个大字嵌入史册。</p><p>2017年7月30日，在朱日和训练基地举行庆祝中国人民解放军建军90周年阅兵，中共中央总书记、国家主席、中央军委主席习近平检阅部队并发表重要讲话。中央人民广播电台、中央电视台、中国国际广播电台现场直播。</p><p>2019年7月30日，中华人民共和国国防部在人民大会堂举行招待会，热烈庆祝中国人民解放军建军92周年。中央军委委员、国务委员兼国防部长魏凤和致辞。中央军委委员、军委联合参谋部参谋长李作成，中央军委委员、军委政治工作部主任苗华，中央军委委员、军委纪律检查委员会书记张升民出席招待会。</p><blockquote><p>摘自百度百科</p></blockquote><h2 id="感慨"><a href="#感慨" class="headerlink" title="感慨"></a>感慨</h2><p>建军节并不是只属于军人，这是全部国人的节日。</p><p>，，，写这篇文章之前感觉自己有好多话要说，但是动笔了却卡在嗓子眼出不来，无语</p><p>算了，千言万语汇成一句话</p><h3 id="热烈庆祝中国人民解放军成立93周年！！！"><a href="#热烈庆祝中国人民解放军成立93周年！！！" class="headerlink" title="热烈庆祝中国人民解放军成立93周年！！！"></a>热烈庆祝中国人民解放军成立93周年！！！</h3><p>时值八月，季节最美的时刻已经到来，一切都值得期待。秋天未央，斑斓的希望一直在路上。我们正充满力量，步入21世纪新的荣光。有伟大的人民军队，可爱的人民子弟兵在为我们保驾护航。我们坚信家国定享太平，盛世更绽辉煌。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建军节 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uni-App 开发小程序和 H5 初识(一)</title>
      <link href="/posts/cbdbd418/"/>
      <url>/posts/cbdbd418/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200730191920.png" alt="官方文档"></p><blockquote><p>看本篇文章需要有一点 Vue 基础</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="什么是-uni-App"><a href="#什么是-uni-App" class="headerlink" title="什么是 uni-App"></a>什么是 uni-App</h3><p><code>uni-app</code> 是一个使用 <a href="https://vuejs.org/">Vue.js</a> 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、H5、以及各种小程序（微信&#x2F;支付宝&#x2F;百度&#x2F;头条&#x2F;QQ&#x2F;钉钉&#x2F;淘宝）、快应用等多个平台。</p><p><code>DCloud</code>公司拥有500万开发者用户，几十万应用案例、10亿手机端月活用户，数千款uni-app插件、70+微信&#x2F;qq群。阿里小程序工具官方内置uni-app（<a href="https://docs.alipay.com/mini/ide/0.70-stable">详见</a>），腾讯课堂官方为uni-app录制培训课程（<a href="https://ask.dcloud.net.cn/article/35640">详见</a>），开发者可以放心选择。</p><p><code>uni-app</code>在手，做啥都不愁。即使不跨端，<code>uni-app</code>也是更好的小程序开发框架（<a href="https://ask.dcloud.net.cn/article/35947">详见</a>）、更好的App跨平台框架、更方便的H5开发框架。不管领导安排什么样的项目，你都可以快速交付，不需要转换开发思维、不需要更改开发习惯。</p><blockquote><p>官方文档地址：<a href="https://uniapp.dcloud.net.cn/">uni-App</a></p></blockquote><h3 id="我为什么要用-uni-App"><a href="#我为什么要用-uni-App" class="headerlink" title="我为什么要用 uni-App"></a>我为什么要用 uni-App</h3><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200730192600.png" alt="功能框架图"></p><p>首先我对 Vue 比较熟悉，其次用原生小程序的语法开发实在是不顺手，再就是一套代码就可以适配多端，不用那么重复的写。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p><code>uni-app</code> 使用vue的语法+小程序的标签和API。</p><h3 id="开发规范"><a href="#开发规范" class="headerlink" title="开发规范"></a>开发规范</h3><p>为了实现多端兼容，综合考虑编译速度、运行性能等因素，<code>uni-app</code> 约定了如下开发规范：</p><ul><li>页面文件遵循 <a href="https://vue-loader.vuejs.org/zh/spec.html">Vue 单文件组件 (SFC) 规范</a></li><li>组件标签靠近小程序规范，详见<a href="https://uniapp.dcloud.net.cn/component/README">uni-app 组件规范</a></li><li>接口能力（JS API）靠近微信小程序规范，但需将前缀 <code>wx</code> 替换为 <code>uni</code>，详见<a href="https://uniapp.dcloud.net.cn/api/README">uni-app接口规范</a></li><li>数据绑定及事件处理同 <code>Vue.js</code> 规范，同时补充了App及页面的生命周期</li><li>为兼容多端运行，建议使用flex布局进行开发</li></ul><blockquote><p>第三条是特别要注意的！这一点很重要</p></blockquote><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>一个uni-app工程，默认包含如下目录及文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">┌─components            uni-app组件目录</span><br><span class="line">│  └─comp-a.vue         可复用的a组件</span><br><span class="line">├─hybrid                存放本地网页的目录</span><br><span class="line">├─platforms             存放各平台专用页面的目录</span><br><span class="line">├─pages                 业务页面文件存放的目录</span><br><span class="line">│  ├─index</span><br><span class="line">│  │  └─index.vue       index页面</span><br><span class="line">│  └─list</span><br><span class="line">│     └─list.vue        list页面</span><br><span class="line">├─static                存放应用引用静态资源（如图片、视频等）的目录，注意：静态资源只能存放于此</span><br><span class="line">├─wxcomponents          存放小程序组件的目录</span><br><span class="line">├─main.js               Vue初始化入口文件</span><br><span class="line">├─App.vue               应用配置，用来配置App全局样式以及监听 应用生命周期</span><br><span class="line">├─manifest.json         配置应用名称、appid、logo、版本等打包信息</span><br><span class="line">└─pages.json            配置页面路由、导航条、选项卡等页面类信息</span><br><span class="line">    </span><br></pre></td></tr></table></figure><blockquote><p>特别注意：</p><ul><li><code>static</code> 目录下的 <code>js</code> 文件不会被编译，如果里面有 <code>es6</code> 的代码，不经过转换直接运行，在手机设备上会报错。</li><li><code>css</code>、<code>less/scss</code> 等资源同样不要放在 <code>static</code> 目录下，建议这些公用的资源放在 <code>common</code> 目录下。</li><li>HbuilderX 1.9.0+ 支持在根目录创建 <code>ext.json</code> <code>sitemap.json</code> 文件。</li></ul></blockquote><table><thead><tr><th align="center">有效目录</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">app-plus</td><td align="center">App</td></tr><tr><td align="center">h5</td><td align="center">H5</td></tr><tr><td align="center">mp-weixin</td><td align="center">微信小程序</td></tr><tr><td align="center">mp-alipay</td><td align="center">支付宝小程序</td></tr><tr><td align="center">mp-baidu</td><td align="center">百度小程序</td></tr></tbody></table><p>好了好了，废话够多了，如果想看其他的有关信息，请访问<a href="https://uniapp.dcloud.net.cn/">官方文档</a></p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><p>官方推荐通过 HBuilderX创建项目，但是我实在是用不惯这编辑器，你要是想了解一下，一样，看<a href="https://uniapp.dcloud.net.cn/quickstart?id=_1-%E9%80%9A%E8%BF%87-hbuilderx-%E5%8F%AF%E8%A7%86%E5%8C%96%E7%95%8C%E9%9D%A2">官方文档</a></p><h3 id="通过-VueCli-创建项目"><a href="#通过-VueCli-创建项目" class="headerlink" title="通过 VueCli 创建项目"></a>通过 VueCli 创建项目</h3><p>安装 Vue：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><p>创建正式版项目：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create -p dcloudio/uni-preset-vue [name]</span><br></pre></td></tr></table></figure><p>创建 Alpha 版：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create -p dcloudio/uni-preset-vue#alpha [name]</span><br></pre></td></tr></table></figure><blockquote><p><code>name</code> 为项目名称</p></blockquote><p>执行命令之后会让你选择模板，选择默认即可。</p><p>选择自定义模板时，需要填写 uni-app 模板地址，这个地址其实就是托管在云端的仓库地址。以 GitHub 为例，地址格式为 <code>userName/repositoryName</code>，如 <code>dcloudio/uni-template-picture</code> 就是下载图片模板。</p><p>更多支持的下载方式，请参考这个插件的说明：<a href="https://www.npmjs.com/package/download-git-repo">download-git-repo</a></p><h3 id="运行和发布"><a href="#运行和发布" class="headerlink" title="运行和发布"></a>运行和发布</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm run dev:%PLATFORM%</span><br><span class="line">npm run build:%PLATFORM%</span><br></pre></td></tr></table></figure><p><code>%PLATFORM%</code> 可取值如下：</p><table><thead><tr><th>值</th><th>平台</th></tr></thead><tbody><tr><td>app-plus</td><td>app平台生成打包资源（支持npm run build:app-plus，可用于持续集成。不支持run，运行调试仍需在HBuilderX中操作）</td></tr><tr><td>h5</td><td>H5</td></tr><tr><td>mp-alipay</td><td>支付宝小程序</td></tr><tr><td>mp-baidu</td><td>百度小程序</td></tr><tr><td>mp-weixin</td><td>微信小程序</td></tr><tr><td>mp-toutiao</td><td>字节跳动小程序</td></tr><tr><td>mp-qq</td><td>qq 小程序</td></tr><tr><td>mp-360</td><td>360 小程序</td></tr><tr><td>quickapp-webview</td><td>快应用通用</td></tr><tr><td>quickapp-webview-union</td><td>快应用联盟</td></tr><tr><td>quickapp-webview-huawei</td><td>快应用华为</td></tr></tbody></table><p>本文只会用到 <code>mp-weixin</code> 其他用法请自行查阅。</p><h2 id="工具区别"><a href="#工具区别" class="headerlink" title="工具区别"></a>工具区别</h2><h3 id="编译器的区别"><a href="#编译器的区别" class="headerlink" title="编译器的区别"></a>编译器的区别</h3><ul><li><code>cli</code> 创建的项目，编译器安装在项目下。并且不会跟随HBuilderX升级。如需升级编译器，执行 <code>npm update</code>，或者手动修改 package.json 中的 uni 相关依赖版本后执行 <code>npm install</code>。更新后可能会有新增的依赖并不会自动安装，手动安装缺少的依赖即可。</li><li>HBuilderX可视化界面创建的项目，编译器在HBuilderX的安装目录下的plugin目录，随着HBuilderX的升级会自动升级编译器。</li><li>已经使用<code>cli</code>创建的项目，如果想继续在HBuilderX里使用，可以把工程拖到HBuilderX中。注意如果是把整个项目拖入HBuilderX，则编译时走的是项目下的编译器。如果是把src目录拖入到HBuilderX中，则走的是HBuilderX安装目录下plugin目录下的编译器。</li><li><code>cli</code>版如果想安装less、scss、ts等编译器，需自己手动npm安装。在HBuilderX的插件管理界面安装无效，那个只作用于HBuilderX创建的项目。</li></ul><h3 id="开发工具的区别"><a href="#开发工具的区别" class="headerlink" title="开发工具的区别"></a>开发工具的区别</h3><ul><li><code>cli</code>创建的项目，内置了d.ts，同其他常规npm库一样，可在<a href="https://ask.dcloud.net.cn/article/36286">vscode</a>、<a href="https://ask.dcloud.net.cn/article/36307">webstorm</a>等支持d.ts的开发工具里正常开发并有语法提示。</li><li>使用HBuilderX创建的项目不带d.ts，HBuilderX内置了uni-app语法提示库。如需把HBuilderX创建的项目在其他编辑器打开并且补充d.ts，可以在项目下先执行 <code>npm init</code>，然后<code>npm i @types/uni-app -D</code>，来补充d.ts。</li><li>但vscode等其他开发工具，在vue或uni-app领域，开发效率比不过HBuilderX。详见：<a href="https://ask.dcloud.net.cn/article/35451">https://ask.dcloud.net.cn/article/35451</a></li><li>发布App时，仍然需要使用HBuilderX。其他开发工具无法发布App，但可以发布H5、各种小程序。如需开发App，可以先在HBuilderX里运行起来，然后在其他编辑器里修改保存代码，代码修改后会自动同步到手机基座。</li><li>如果使用<code>cli</code>创建项目，那下载HBuilderX时只需下载10M的标准版即可。因为编译器已经安装到项目下了。</li></ul><h2 id="开始学习"><a href="#开始学习" class="headerlink" title="开始学习"></a>开始学习</h2><h3 id="创建一个简单项目"><a href="#创建一个简单项目" class="headerlink" title="创建一个简单项目"></a>创建一个简单项目</h3><p>执行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create -p dcloudio/uni-preset-vue test</span><br></pre></td></tr></table></figure><blockquote><p>注意，项目名称不可以有大写</p></blockquote><p>执行命令之后会让你选择是否使用淘宝镜像，输入 <code>Y/y</code> 即可</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200730204227.png" alt="选择模板"></p><p>选择默认模板即可，然后等待下载完成。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200730204451.png" alt="目录"></p><p>这是刚创建好的项目目录结构，具体的目录结构功能请看文章开头<strong>注意事项</strong>中的<strong>目录结构</strong></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200730213711.png" alt="src"></p><p>我们主要是在 <code>src</code> 目录里写代码。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200730213837.png" alt="目录"></p><p>大概会用到的就这么多。</p><h3 id="试运行"><a href="#试运行" class="headerlink" title="试运行"></a>试运行</h3><p>默认模板是可以直接运行的，命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev:mp-weixin</span><br></pre></td></tr></table></figure><p>直接运行到微信小程序</p><blockquote><p>注意，需要安装微信开发者工具。命令运行前请打开开发者工具</p></blockquote><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200730215130.png" alt="开始编译"></p><p>静静等待，第一次编译可能比较慢。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200730215217.png" alt="编译成功"></p><p>编译成功。</p><blockquote><p>注意：uni-App 支持热加载，只需要运行一次，只要你不关闭这个运行任务，你修改项目内容之后他就会差量编译，然后直接在微信开发者工具里就可以看到修改后的效果。</p></blockquote><p>打开开发者工具</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200730215453.png" alt="添加"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200730215555.png" alt="导入项目"></p><p>选择路径的时候要注意了，导入项目的目录是 <code>你创建项目根目录/dist/dev/mp-weixin/</code> </p><blockquote><p>！！！路径一定要选择正确，不然会影响你之后的运行和发布</p></blockquote><p>然后小程序名称和 AppID 会自动导入，不用修改，等待开发者工具编译完成就是如下页面：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200730220324.png" alt="微信开发者工具"></p><p>可以在左上角关闭编辑器，方便查看控制台报错信息。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200730220714.png" alt="功能"></p><ul><li>1：预览样式，可以在左上角调整预览设备，查看不同设备下的预览效果</li><li>2：编译模式，在只需要修改某一个页面的时候可以更改编译模式，减少性能消耗，提高预览速度</li><li>3：小程序相关设置，比如信任域名、AppID等</li><li>4：控制台，跟浏览器的开发者工具几乎一模一样，用来调试错误</li></ul><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200730221206.png" alt="输出信息"></p><p>前两行是小程序的生命周期函数输出，不用理会，可以在 <code>App.vue</code> 里修改</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200730221338.png" alt="App.vue"></p><p>声明周期后面会讲到，现在不用理会。</p><p>第三行的信息是页面索引值，也不用理会，直接忽略即可，第四行的信息是你的 AppID 无效，因为我们直接是用的默认模板，它里面的 AppID 只是为了开发的时候测试用，会限制很多 API 的返回数据，所以你如果要真的开发项目，请去微信公众平台注册小程序，获取 AppID ：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200730221751.png" alt="修改ID"></p><p>关于第三行的索引值，我找来了更详细的说法：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200730222216.png" alt="索引值"></p><p>附上官方文档地址：<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/sitemap.html">sitemap 配置</a></p><p>如果不需要这个配置，请按照下图设置：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200730223755.png" alt="sitemap"></p><p>将属性改为 <code>false</code> 即可，这个方法实属不推荐，因为下次编译的时候就可能被覆盖，更稳妥的设置方法请看下文的文件讲解第一部分。</p><h2 id="文件讲解"><a href="#文件讲解" class="headerlink" title="文件讲解"></a>文件讲解</h2><h3 id="manifest-json"><a href="#manifest-json" class="headerlink" title="manifest.json"></a>manifest.json</h3><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200731084221.png" alt="小程序能用到的"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200731084325.png" alt="小程序能用到的"></p><p><code>manifest.json</code> 文件是应用的配置文件，用于指定应用的名称、图标、权限等。</p><p>具体的各个配置项我这里就懒得啰嗦了，请参考<a href="https://uniapp.dcloud.net.cn/collocation/manifest?id=%E9%85%8D%E7%BD%AE%E9%A1%B9%E5%88%97%E8%A1%A8">官方文档</a></p><p>这里需要注意的一点是 AppID：</p><ul><li>uni-app 的 <code>appid</code> 由 DCloud 云端分配，主要用于 DCloud 相关的云服务，请勿自行修改</li><li>注意区分 uni-app 的 <code>appid</code> 与微信小程序、iOS 等其它平台分配的 <code>appid</code>，以及第三方 SDK 的 <code>appid</code></li></ul><p>上面的第一个截图就是 uni-app 的 AppID，第二个才是小程序的配置，请注意分别，如果自己有 AppID，请修改下面的，当然第一行的 <code>name</code> 是通用的，为小程序的名称</p><p>总结一下：这个文件如果需要修改，只修改第一行的 <code>name</code> 和下面的小程序相关，其他的自行查阅文档根据自己需要修改</p><p>比如前文提到的小程序 sitemap 规则，就可以在这里进行修改：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200731090113.png" alt="小程序设置"></p><p>当然，其他小程序的相关设置也可在这里进行添加。</p><h3 id="pages-json"><a href="#pages-json" class="headerlink" title="pages.json"></a>pages.json</h3><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200731090901.png" alt="pages"></p><p>这里是放页面相关的配置，比如导航栏，页面路径，页面样式等</p><blockquote><p>这里的样式并不是页面内容的 CSS 样式，是整个页面的样式，例如顶部栏的颜色，页面标题等</p></blockquote><p>这个文件的配置至关重要，如果你写了一个新的页面，却发现无法访问的时候，记得检查这里的配置，看你是否把新的页面添加进环境里。</p><h3 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h3><p><code>main.js</code>是 uni-app 的入口文件，主要作用是初始化<code>vue</code>实例、定义全局组件、使用需要的插件如 vuex。</p><p>首先引入了<code>Vue</code>库和<code>App.vue</code>，创建了一个<code>vue</code>实例，并且挂载<code>vue</code>实例。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import App from &#x27;./App&#x27;</span><br><span class="line">import pageHead from &#x27;./components/page-head.vue&#x27; //全局引用page-head组件</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line">Vue.component(&#x27;page-head&#x27;, pageHead) //全局注册page-head组件，每个页面将可以直接使用该组件</span><br><span class="line">App.mpType = &#x27;app&#x27;</span><br><span class="line"></span><br><span class="line">const app = new Vue(&#123;</span><br><span class="line">    ...App</span><br><span class="line">&#125;)</span><br><span class="line">app.$mount() //挂载Vue实例</span><br></pre></td></tr></table></figure><p>使用<code>Vue.use</code>引用插件，使用<code>Vue.prototype</code>添加全局变量，使用<code>Vue.component</code>注册全局组件。</p><p>可以引用<code>vuex</code>，因涉及多个文件，此处没有提供示例，详见<code>hello uni-app</code>示例工程。</p><p>无法使用<code>vue-router</code>，路由须在<code>pages.json</code>中进行配置，后面会讲到。</p><blockquote><p>nvue 暂不支持在 main.js 注册全局组件</p></blockquote><h3 id="App-vue"><a href="#App-vue" class="headerlink" title="App.vue"></a>App.vue</h3><p><code>App.vue</code>是 uni-app 的主组件，所有页面都是在<code>App.vue</code>下进行切换的，是页面入口文件。但<code>App.vue</code>本身不是页面，这里不能编写视图元素。</p><p>这个文件的作用包括：调用应用生命周期函数、配置全局样式、配置全局的存储 globalData</p><p>应用生命周期仅可在<code>App.vue</code>中监听，在页面监听无效。</p><h3 id="uni-css"><a href="#uni-css" class="headerlink" title="uni.css"></a>uni.css</h3><blockquote><p>这个文件在本文章里是没有用的，因为需要 HBuilderX 的插件支持，所以了解了解就行了</p></blockquote><p><code>uni.scss</code>文件的用途是为了方便整体控制应用的风格。比如按钮颜色、边框风格，<code>uni.scss</code>文件里预置了一批scss变量预置。</p><p> <code>uni-app</code> 官方扩展插件（uni ui）及 <a href="https://ext.dcloud.net.cn/">插件市场</a> 上很多三方插件均使用了这些样式变量，如果你是插件开发者，建议你使用 scss 预处理，并在插件代码中直接使用这些变量（无需 import 这个文件），方便用户通过搭积木的方式开发整体风格一致的App。</p><p> <code>uni.scss</code>是一个特殊文件，在代码中无需 import  这个文件即可在scss代码中使用这里的样式变量。uni-app的编译器在webpack配置中特殊处理了这个uni.scss，使得每个scss文件都被注入这个uni.scss，达到全局可用的效果。如果开发者想要less、stylus的全局使用，需要在vue.config.js中自行配置webpack策略。</p><p>基本上小项目需要用的几个主要文件就这么几个，如果想了解其他的，请自行查阅。</p><h2 id="目录详解"><a href="#目录详解" class="headerlink" title="目录详解"></a>目录详解</h2><p>目前我们会用到的就两个：pages 和 static</p><p>pages 用来放置我们的页面文件，static 用来放置静态资源，需要注意的是<code>static</code> 目录下的 <code>js</code> 文件不会被编译，如果里面有 <code>es6</code> 的代码，不经过转换直接运行，在手机设备上会报错。<code>css</code>、<code>less/scss</code> 等资源同样不要放在 <code>static</code> 目录下，建议这些公用的资源放在 <code>common</code> 目录(自己新建)下。</p><p>如果需要引入资源的话，使用绝对路径时，根目录就是 <code>src/</code> 比如我们要引入 pages 下的 index 页面，那么路径就是：<code>pages/index/index</code> ，<code>.vue</code> 后缀可省略，且最前方不可以写 <code>/</code> 。</p><h2 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h2><p>打开 <code>pages.json</code> ，你会看到如下的配置：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200731172801.png" alt="全局配置"></p><p>用于设置应用的状态栏、导航条、标题、窗口背景色等。</p><p>具体配置请看下表：</p><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">默认值</th><th align="left">描述</th><th align="left">平台差异说明</th></tr></thead><tbody><tr><td align="left">navigationBarBackgroundColor</td><td align="left">HexColor</td><td align="left">#F7F7F7</td><td align="left">导航栏背景颜色（同状态栏背景色）</td><td align="left">APP与H5为#F7F7F7，小程序平台请参考相应小程序文档</td></tr><tr><td align="left">navigationBarTextStyle</td><td align="left">String</td><td align="left">white</td><td align="left">导航栏标题颜色及状态栏前景颜色，仅支持 black&#x2F;white</td><td align="left"></td></tr><tr><td align="left">navigationBarTitleText</td><td align="left">String</td><td align="left"></td><td align="left">导航栏标题文字内容</td><td align="left"></td></tr><tr><td align="left">navigationStyle</td><td align="left">String</td><td align="left">default</td><td align="left">导航栏样式，仅支持 default&#x2F;custom。custom即取消默认的原生导航栏，需看<a href="https://uniapp.dcloud.net.cn/collocation/pages?id=customnav">使用注意</a></td><td align="left">微信小程序 7.0+、百度小程序、H5、App（2.0.3+）</td></tr><tr><td align="left">backgroundColor</td><td align="left">HexColor</td><td align="left">#ffffff</td><td align="left">下拉显示出来的窗口的背景色</td><td align="left">微信小程序</td></tr><tr><td align="left">backgroundTextStyle</td><td align="left">String</td><td align="left">dark</td><td align="left">下拉 loading 的样式，仅支持 dark &#x2F; light</td><td align="left">微信小程序</td></tr><tr><td align="left">enablePullDownRefresh</td><td align="left">Boolean</td><td align="left">false</td><td align="left">是否开启下拉刷新，详见<a href="https://uniapp.dcloud.net.cn/use?id=%E9%A1%B5%E9%9D%A2%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">页面生命周期</a>。</td><td align="left"></td></tr><tr><td align="left">onReachBottomDistance</td><td align="left">Number</td><td align="left">50</td><td align="left">页面上拉触底事件触发时距页面底部距离，单位只支持px，详见<a href="https://uniapp.dcloud.net.cn/use?id=%E9%A1%B5%E9%9D%A2%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">页面生命周期</a></td><td align="left"></td></tr><tr><td align="left">backgroundColorTop</td><td align="left">HexColor</td><td align="left">#ffffff</td><td align="left">顶部窗口的背景色（bounce回弹区域）</td><td align="left">仅 iOS 平台</td></tr><tr><td align="left">backgroundColorBottom</td><td align="left">HexColor</td><td align="left">#ffffff</td><td align="left">底部窗口的背景色（bounce回弹区域）</td><td align="left">仅 iOS 平台</td></tr><tr><td align="left">titleImage</td><td align="left">String</td><td align="left"></td><td align="left">导航栏图片地址（替换当前文字标题），支付宝小程序内必须使用https的图片链接地址</td><td align="left">支付宝小程序、H5、APP</td></tr><tr><td align="left">transparentTitle</td><td align="left">String</td><td align="left">none</td><td align="left">导航栏整体（前景、背景）透明设置。支持 always 一直透明 &#x2F; auto 滑动自适应 &#x2F; none 不透明</td><td align="left">支付宝小程序、H5、APP</td></tr><tr><td align="left">titlePenetrate</td><td align="left">String</td><td align="left">NO</td><td align="left">导航栏点击穿透</td><td align="left">支付宝小程序、H5</td></tr><tr><td align="left">pageOrientation</td><td align="left">String</td><td align="left">portrait</td><td align="left">横屏配置，屏幕旋转设置，仅支持 auto &#x2F; portrait &#x2F; landscape 详见 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/resizable.html">响应显示区域变化</a></td><td align="left">App 2.4.7+、微信小程序</td></tr><tr><td align="left">animationType</td><td align="left">String</td><td align="left">pop-in</td><td align="left">窗口显示的动画效果，详见：<a href="https://uniapp.dcloud.net.cn/api/router?id=animation">窗口动画</a></td><td align="left">App</td></tr><tr><td align="left">animationDuration</td><td align="left">Number</td><td align="left">300</td><td align="left">窗口显示动画的持续时间，单位为 ms</td><td align="left">App</td></tr><tr><td align="left">app-plus</td><td align="left">Object</td><td align="left"></td><td align="left">设置编译到 App 平台的特定样式，配置项参考下方 <a href="https://uniapp.dcloud.net.cn/collocation/pages?id=app-plus">app-plus</a></td><td align="left">App</td></tr><tr><td align="left">h5</td><td align="left">Object</td><td align="left"></td><td align="left">设置编译到 H5 平台的特定样式，配置项参考下方 <a href="https://uniapp.dcloud.net.cn/collocation/pages?id=h5">H5</a></td><td align="left">H5</td></tr><tr><td align="left">mp-alipay</td><td align="left">Object</td><td align="left"></td><td align="left">设置编译到 mp-alipay 平台的特定样式，配置项参考下方 <a href="https://uniapp.dcloud.net.cn/collocation/pages?id=mp-alipay">MP-ALIPAY</a></td><td align="left">支付宝小程序</td></tr><tr><td align="left">mp-weixin</td><td align="left">Object</td><td align="left"></td><td align="left">设置编译到 mp-weixin 平台的特定样式</td><td align="left">微信小程序</td></tr><tr><td align="left">mp-baidu</td><td align="left">Object</td><td align="left"></td><td align="left">设置编译到 mp-baidu 平台的特定样式</td><td align="left">百度小程序</td></tr><tr><td align="left">mp-toutiao</td><td align="left">Object</td><td align="left"></td><td align="left">设置编译到 mp-toutiao 平台的特定样式</td><td align="left">字节跳动小程序</td></tr><tr><td align="left">mp-qq</td><td align="left">Object</td><td align="left"></td><td align="left">设置编译到 mp-qq 平台的特定样式</td><td align="left">QQ小程序</td></tr><tr><td align="left">usingComponents</td><td align="left">Object</td><td align="left"></td><td align="left">引用小程序组件，参考 <a href="https://uniapp.dcloud.net.cn/frame?id=%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%BB%84%E4%BB%B6%E6%94%AF%E6%8C%81">小程序组件</a></td><td align="left"></td></tr><tr><td align="left">renderingMode</td><td align="left">String</td><td align="left"></td><td align="left">同层渲染，webrtc(实时音视频) 无法正常时尝试配置 seperated 强制关掉同层</td><td align="left">微信小程序</td></tr></tbody></table><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200731172912.png" alt="官方提示"></p><p>咱也用不到那么多。看看就行。</p><h2 id="新建页面和导航栏"><a href="#新建页面和导航栏" class="headerlink" title="新建页面和导航栏"></a>新建页面和导航栏</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>在 pages 目录下创建一个新页面，如：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200731170406.png" alt="创建新的页面"></p><blockquote><p>页面的 vue 文件为了规范开发，请放在单独的文件夹中</p></blockquote><p>然后在 <code>pages.json</code> 文件中注册页面：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200731170722.png" alt="注册页面"></p><p>需要注意的是一定要语法规范，少一个多一个逗号都不行，会报错。</p><p>创建导航栏：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200731171326.png" alt="导航栏配置"></p><p>导航栏的 <code>list</code> 数组必须大于等于<strong>两个</strong>小于等于<strong>五个</strong>，多了或者少了都会无法使用，请注意这一点</p><h3 id="配置详解"><a href="#配置详解" class="headerlink" title="配置详解"></a>配置详解</h3><h4 id="pages"><a href="#pages" class="headerlink" title="pages"></a>pages</h4><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200731171740.png" alt="pages"></p><ul><li>path ：顾名思义，就是页面的路径，格式如图，前面不能加 <code>/</code> 谨记</li><li>style ：页面相关的样式配置</li><li>navigationBarTitleText：页面顶部栏的名称</li></ul><p>还有很多自定义配置，如下表：</p><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">默认值</th><th align="left">描述</th><th align="left">平台差异说明</th></tr></thead><tbody><tr><td align="left">navigationBarBackgroundColor</td><td align="left">HexColor</td><td align="left">#000000</td><td align="left">导航栏背景颜色（同状态栏背景色），如”#000000”</td><td align="left"></td></tr><tr><td align="left">navigationBarTextStyle</td><td align="left">String</td><td align="left">white</td><td align="left">导航栏标题颜色及状态栏前景颜色，仅支持 black&#x2F;white</td><td align="left"></td></tr><tr><td align="left">navigationBarTitleText</td><td align="left">String</td><td align="left"></td><td align="left">导航栏标题文字内容</td><td align="left"></td></tr><tr><td align="left">navigationBarShadow</td><td align="left">Object</td><td align="left"></td><td align="left">导航栏阴影，配置参考下方 <a href="https://uniapp.dcloud.net.cn/collocation/pages?id=navigationbarshadow">导航栏阴影</a></td><td align="left"></td></tr><tr><td align="left">navigationStyle</td><td align="left">String</td><td align="left">default</td><td align="left">导航栏样式，仅支持 default&#x2F;custom。custom即取消默认的原生导航栏，需看<a href="https://uniapp.dcloud.net.cn/collocation/pages?id=customnav">使用注意</a></td><td align="left">微信小程序 7.0+、百度小程序、H5、App（2.0.3+）</td></tr><tr><td align="left">disableScroll</td><td align="left">Boolean</td><td align="left">false</td><td align="left">设置为 true 则页面整体不能上下滚动（bounce效果），只在页面配置中有效，在globalStyle中设置无效</td><td align="left">微信小程序（iOS）、百度小程序（iOS）</td></tr><tr><td align="left">backgroundColor</td><td align="left">HexColor</td><td align="left">#ffffff</td><td align="left">窗口的背景色</td><td align="left">微信小程序、百度小程序、字节跳动小程序</td></tr><tr><td align="left">backgroundTextStyle</td><td align="left">String</td><td align="left">dark</td><td align="left">下拉 loading 的样式，仅支持 dark&#x2F;light</td><td align="left"></td></tr><tr><td align="left">enablePullDownRefresh</td><td align="left">Boolean</td><td align="left">false</td><td align="left">是否开启下拉刷新，详见<a href="https://uniapp.dcloud.net.cn/use?id=%E9%A1%B5%E9%9D%A2%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">页面生命周期</a>。</td><td align="left"></td></tr><tr><td align="left">onReachBottomDistance</td><td align="left">Number</td><td align="left">50</td><td align="left">页面上拉触底事件触发时距页面底部距离，单位只支持px，详见<a href="https://uniapp.dcloud.net.cn/use?id=%E9%A1%B5%E9%9D%A2%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">页面生命周期</a></td><td align="left"></td></tr><tr><td align="left">backgroundColorTop</td><td align="left">HexColor</td><td align="left">#ffffff</td><td align="left">顶部窗口的背景色（bounce回弹区域）</td><td align="left">仅 iOS 平台</td></tr><tr><td align="left">backgroundColorBottom</td><td align="left">HexColor</td><td align="left">#ffffff</td><td align="left">底部窗口的背景色（bounce回弹区域）</td><td align="left">仅 iOS 平台</td></tr><tr><td align="left">titleImage</td><td align="left">String</td><td align="left"></td><td align="left">导航栏图片地址（替换当前文字标题），支付宝小程序内必须使用https的图片链接地址</td><td align="left">支付宝小程序、H5</td></tr><tr><td align="left">transparentTitle</td><td align="left">String</td><td align="left">none</td><td align="left">导航栏透明设置。支持 always 一直透明 &#x2F; auto 滑动自适应 &#x2F; none 不透明</td><td align="left">支付宝小程序、H5、APP</td></tr><tr><td align="left">titlePenetrate</td><td align="left">String</td><td align="left">NO</td><td align="left">导航栏点击穿透</td><td align="left">支付宝小程序、H5</td></tr><tr><td align="left">app-plus</td><td align="left">Object</td><td align="left"></td><td align="left">设置编译到 App 平台的特定样式，配置项参考下方 <a href="https://uniapp.dcloud.net.cn/collocation/pages?id=app-plus">app-plus</a></td><td align="left">App</td></tr><tr><td align="left">h5</td><td align="left">Object</td><td align="left"></td><td align="left">设置编译到 H5 平台的特定样式，配置项参考下方 <a href="https://uniapp.dcloud.net.cn/collocation/pages?id=h5">H5</a></td><td align="left">H5</td></tr><tr><td align="left">mp-alipay</td><td align="left">Object</td><td align="left"></td><td align="left">设置编译到 mp-alipay 平台的特定样式，配置项参考下方 <a href="https://uniapp.dcloud.net.cn/collocation/pages?id=mp-alipay">MP-ALIPAY</a></td><td align="left">支付宝小程序</td></tr><tr><td align="left">mp-weixin</td><td align="left">Object</td><td align="left"></td><td align="left">设置编译到 mp-weixin 平台的特定样式</td><td align="left">微信小程序</td></tr><tr><td align="left">mp-baidu</td><td align="left">Object</td><td align="left"></td><td align="left">设置编译到 mp-baidu 平台的特定样式</td><td align="left">百度小程序</td></tr><tr><td align="left">mp-toutiao</td><td align="left">Object</td><td align="left"></td><td align="left">设置编译到 mp-toutiao 平台的特定样式</td><td align="left">字节跳动小程序</td></tr><tr><td align="left">mp-qq</td><td align="left">Object</td><td align="left"></td><td align="left">设置编译到 mp-qq 平台的特定样式</td><td align="left">QQ小程序</td></tr><tr><td align="left">usingComponents</td><td align="left">Object</td><td align="left"></td><td align="left">引用小程序组件，参考 <a href="https://uniapp.dcloud.net.cn/frame?id=%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%BB%84%E4%BB%B6%E6%94%AF%E6%8C%81">小程序组件</a></td><td align="left">App、微信小程序、支付宝小程序、百度小程序</td></tr></tbody></table><p>页面中配置项会覆盖 <a href="https://uniapp.dcloud.net.cn/collocation/pages?id=globalstyle">globalStyle</a> 中相同的配置项，这一点要注意哦</p><h4 id="tabBar"><a href="#tabBar" class="headerlink" title="tabBar"></a>tabBar</h4><p>属性说明：</p><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">必填</th><th align="left">默认值</th><th align="left">描述</th><th align="left">平台差异说明</th></tr></thead><tbody><tr><td align="left">color</td><td align="left">HexColor</td><td align="left">是</td><td align="left"></td><td align="left">tab 上的文字默认颜色</td><td align="left"></td></tr><tr><td align="left">selectedColor</td><td align="left">HexColor</td><td align="left">是</td><td align="left"></td><td align="left">tab 上的文字选中时的颜色</td><td align="left"></td></tr><tr><td align="left">backgroundColor</td><td align="left">HexColor</td><td align="left">是</td><td align="left"></td><td align="left">tab 的背景色</td><td align="left"></td></tr><tr><td align="left">borderStyle</td><td align="left">String</td><td align="left">否</td><td align="left">black</td><td align="left">tabbar 上边框的颜色，可选值 black&#x2F;white</td><td align="left">App 2.3.4+ 支持其他颜色值</td></tr><tr><td align="left">blurEffect</td><td align="left">String</td><td align="left">否</td><td align="left">none</td><td align="left">iOS 高斯模糊效果，可选值 dark&#x2F;extralight&#x2F;light&#x2F;none（参考:<a href="https://ask.dcloud.net.cn/article/36617">使用说明</a>）</td><td align="left">App 2.4.0+ 支持</td></tr><tr><td align="left">list</td><td align="left">Array</td><td align="left">是</td><td align="left"></td><td align="left">tab 的列表，详见 list 属性说明，最少2个、最多5个 tab</td><td align="left"></td></tr><tr><td align="left">position</td><td align="left">String</td><td align="left">否</td><td align="left">bottom</td><td align="left">可选值 bottom、top</td><td align="left">top 值仅微信小程序支持</td></tr><tr><td align="left">fontSize</td><td align="left">String</td><td align="left">否</td><td align="left">10px</td><td align="left">文字默认大小</td><td align="left">App 2.3.4+</td></tr><tr><td align="left">iconWidth</td><td align="left">String</td><td align="left">否</td><td align="left">24px</td><td align="left">图标默认宽度（高度等比例缩放）</td><td align="left">App 2.3.4+</td></tr><tr><td align="left">spacing</td><td align="left">String</td><td align="left">否</td><td align="left">3px</td><td align="left">图标和文字的间距</td><td align="left">App 2.3.4+</td></tr><tr><td align="left">height</td><td align="left">String</td><td align="left">否</td><td align="left">50px</td><td align="left">tabBar 默认高度</td><td align="left">App 2.3.4+</td></tr><tr><td align="left">midButton</td><td align="left">Object</td><td align="left">否</td><td align="left"></td><td align="left">中间按钮 仅在 list 项为偶数时有效</td><td align="left">App 2.3.4+</td></tr></tbody></table><p>其中 list 接收一个数组，数组中的每个项都是一个对象，其属性值如下：</p><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">必填</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">pagePath</td><td align="left">String</td><td align="left">是</td><td align="left">页面路径，必须在 pages 中先定义</td></tr><tr><td align="left">text</td><td align="left">String</td><td align="left">是</td><td align="left">tab 上按钮文字，在 App 和 H5 平台为非必填。例如中间可放一个没有文字的+号图标</td></tr><tr><td align="left">iconPath</td><td align="left">String</td><td align="left">否</td><td align="left">图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px，当 postion 为 top 时，此参数无效，不支持网络图片，不支持字体图标</td></tr><tr><td align="left">selectedIconPath</td><td align="left">String</td><td align="left">否</td><td align="left">选中时的图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px ，当 postion 为 top 时，此参数无效</td></tr></tbody></table><p>更具体的配置和注意事项这里不多做赘述，请自行查阅，下面来展示示例。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>代码：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/index/index&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;navigationBarTitleText&quot;</span><span class="punctuation">:</span> <span class="string">&quot;uni-app&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/me/me&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;navigationBarTitleText&quot;</span><span class="punctuation">:</span> <span class="string">&quot;me&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;globalStyle&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;navigationBarTextStyle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;black&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;navigationBarTitleText&quot;</span><span class="punctuation">:</span> <span class="string">&quot;uni-app&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;navigationBarBackgroundColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#F8F8F8&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;backgroundColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#F8F8F8&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;tabBar&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;color&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;selectedColor&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;backgroundColor&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;borderStyle&quot;</span><span class="punctuation">:</span><span class="string">&quot;white&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;position&quot;</span><span class="punctuation">:</span><span class="string">&quot;bottom&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;text&quot;</span><span class="punctuation">:</span><span class="string">&quot;首页&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span><span class="string">&quot;pages/index/index&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;iconPath&quot;</span><span class="punctuation">:</span><span class="string">&quot;static/tabBar/home.png&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;selectedIconPath&quot;</span><span class="punctuation">:</span><span class="string">&quot;static/tabBar/homeActive.png&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;text&quot;</span><span class="punctuation">:</span><span class="string">&quot;我的&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span><span class="string">&quot;pages/me/me&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;iconPath&quot;</span><span class="punctuation">:</span><span class="string">&quot;static/tabBar/me.png&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;selectedIconPath&quot;</span><span class="punctuation">:</span><span class="string">&quot;static/tabBar/meActive.png&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><code>me.vue</code> ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&#123;&#123;msg&#125;&#125;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">msg: &#x27;Hello&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">onLoad() &#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>注意，图标文件需要自己去放置到指定位置，最初始的页面必须包含一个 <code>template</code> 和 <code>view</code> 父标签</p><p>效果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200731173739.png" alt="首页"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200731174134.png" alt="我的"></p><p>这样，最基础的创建导航栏和新建页面就完成啦，是不是很简单呢，嘻嘻</p><p>今天就到这里，有空更新语法~赛哟啦啦</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> uni-App </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免费CDN：jsDelivr+Github 使用方法</title>
      <link href="/posts/a30dcae8/"/>
      <url>/posts/a30dcae8/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200730173436.png" alt="GitHub"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>CDN的全称是 Content Delivery  Network，即内容分发网络。CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。——百度百科</p><p>放在 Github 的资源在国内加载速度比较慢，因此需要使用 CDN 加速来优化网站打开速度，jsDelivr + Github便是免费且好用的 CDN，非常适合博客网站使用。</p><p>jsDelivr 是一个免费开源的 CDN 解决方案，用于帮助开发者和站长。包含 JavaScript 库、jQuery 插件、CSS 框架、字体等等 Web 上常用的静态资源。</p><p>看到群里的大佬那么多魔改主题，而且都好好康的亚子，自己也心动不已，但是直接修改源码就太危险了，太容易造成报错，所以就想到了用主题自带的 <code>inject</code> 功能引入，然后也看到群里的大佬都在用 <code>jsDelivr</code> ，秉着好奇的心理百度了一番，哎，你还别说</p><p>发现了宝藏，这么好的白嫖机会我会错过吗？找了几篇教程，自己跟着操作了一遍，真的不错，速度也还杠杠的</p><p>此处引用一句我学长的名言：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200730174244.png" alt="白嫖"></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="注册使用-GitHub"><a href="#注册使用-GitHub" class="headerlink" title="注册使用 GitHub"></a>注册使用 GitHub</h3><p>新建仓库等操作就不多废话了，直接跳过，名字也没啥特殊要求，自己喜欢就好</p><h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><p>这也不多废话，<code>git push</code> 就完事</p><h3 id="发布资源"><a href="#发布资源" class="headerlink" title="发布资源"></a>发布资源</h3><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200730174859.png" alt="release"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200730174954.png" alt="新建"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200730175116.png" alt="版本描述"></p><p>然后点击最下面的绿色框框就能发布版本啦</p><h3 id="使用-CDN"><a href="#使用-CDN" class="headerlink" title="使用 CDN"></a>使用 CDN</h3><p>链接格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/gh/[name]/[repo]@[num]/[adress]</span><br></pre></td></tr></table></figure><p>属性说明：</p><ul><li><code>name</code> : 你的 GitHub 用户名</li><li><code>repo</code> : 你的仓库名</li><li><code>num</code> : 版本号</li><li><code>adress</code> : 要引用的文件在仓库里的地址</li></ul><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/gh/laugh0608/butterflyChange@1.7/css/index.css</span><br></pre></td></tr></table></figure><p>嘻嘻，再发现什么好玩的再来更新呀，88</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CDN </tag>
            
            <tag> jsDelivr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Valine 扩展实现邮件、QQ、微信新评论通知</title>
      <link href="/posts/d8df5e48/"/>
      <url>/posts/d8df5e48/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200729151002.png" alt="QQ 通知"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200729151038.png" alt="微信通知"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>主要通过 Valine 的扩展 <a href="https://github.com/sviptzk/Valine-Admin-Server">Valine-Admin-Server</a> 、<a href="https://console.leancloud.app/">LeanCloud 的云引擎</a>、实现在线推送通知，通过 <a href="https://qmsg.zendee.cn/me">Qmsg酱</a>实现 QQ 推送，通过 <a href="http://sc.ftqq.com/3.version">Server 酱</a>现微信推送。</p><h2 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h2><p>在 LeanCloud 国际版创建应用，当然国内版也行，不过域名需要备案。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200729151801.png" alt="国际版"></p><p>创建应用，选择开发版，名字自己自拟。</p><h2 id="获取相对应的秘钥"><a href="#获取相对应的秘钥" class="headerlink" title="获取相对应的秘钥"></a>获取相对应的秘钥</h2><h3 id="QQmsg-酱"><a href="#QQmsg-酱" class="headerlink" title="QQmsg 酱"></a>QQmsg 酱</h3><p>进入官网：<a href="https://qmsg.zendee.cn/me">Qmsg酱 博客评论QQ通知推送服务</a> </p><p>登录之后选择喜欢的 QQmsg 酱小姐姐，然后用接收消息的 QQ 加为好友，并添加你接收消息的 QQ：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200729152253.png" alt="添加QQ"></p><p>然后打开右上角的文档，获取秘钥：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200729152405.png" alt="接口地址"></p><p>接口地址最后面的一长串看不懂的字符串就是你的秘钥，复制下来，等会要用。</p><h3 id="微信-Server-酱"><a href="#微信-Server-酱" class="headerlink" title="微信 Server 酱"></a>微信 Server 酱</h3><p>进入官网：<a href="http://sc.ftqq.com/3.version">Server酱 博客评论微信通知推送</a></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200729152544.png" alt="步骤"></p><p>按照步骤来就行，第三步可以省略，然后把第一步中的 SCKEY 字段复制下来，等会要用。</p><blockquote><p>这里需要注意的是，如果你需要邮件提醒，还需要获取一个邮箱服务授权码，但是我不需要，就不多赘述，如果你想要设置，请参考：<a href="https://blog.lete114.top/article/Valine-LeanCloud-Config.html">乐特大佬</a>   <a href="https://www.antmoe.com/posts/2380732b/index.html">小康大佬</a></p></blockquote><blockquote><p>2020.7.30 08:00更新：</p></blockquote><h3 id="获取邮箱授权码"><a href="#获取邮箱授权码" class="headerlink" title="获取邮箱授权码"></a>获取邮箱授权码</h3><p>真香~昨天还吵吵不要邮箱提醒，今天就真香了（QQ 邮箱为例）</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200730073605.png" alt="设置"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200730073815.png" alt="账户"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200730073902.png" alt="开启服务获取授权码"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200730074117.png" alt="授权码"></p><p>记住授权码，填写环境变量。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200729153031.png" alt="设置安全域名"></p><p>把你的所有域名都写上去，子域名也一起</p><h3 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h3><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200729153307.png" alt="添加环境变量"></p><p>在这里添加环境变量，你可以选择：(参考来源：<a href="https://blog.lete114.top/article/Valine-LeanCloud-Config.html">https://blog.lete114.top/article/Valine-LeanCloud-Config.html</a>)</p><table><thead><tr><th align="center">变量名</th><th align="center">示例</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">SITE_NAME</td><td align="center">Lete乐特个人博客</td><td align="center"><code>[必填]</code>网站名称</td></tr><tr><td align="center">SITE_URL</td><td align="center"><a href="https://blog.lete114.top/">https://blog.lete114.top</a></td><td align="center"><code>[必填]</code>网站地址</td></tr><tr><td align="center">SMTP_USER</td><td align="center"><a href="mailto:admin@lete114.top">admin@lete114.top</a></td><td align="center"><code>[必填]</code>邮箱地址</td></tr><tr><td align="center">SMTP_PASS</td><td align="center">123456789</td><td align="center"><code>[必填]</code>邮箱授权码 (部分邮箱服务商默认开启SMTP)   (如果没有授权码可直接填写邮箱密码)</td></tr><tr><td align="center">SMTP_SERVICE</td><td align="center">QQ</td><td align="center"><code>[必填]</code>邮箱服务商<a href="https://nodemailer.com/smtp/well-known/#supported-services">查询相关详细</a></td></tr><tr><td align="center">SENDER_NAME</td><td align="center">Lete乐特</td><td align="center"><code>[必填]</code>寄件人名称</td></tr><tr><td align="center">TEMPLATE_NAME</td><td align="center">rainbow</td><td align="center"><code>[必填]</code> 设置提醒邮件的主题 看下方有主题模板</td></tr><tr><td align="center">ADMIN_URL</td><td align="center"><a href="https://letetest.leanapp.cn/">https://letetest.leanapp.cn</a></td><td align="center"><code>[可选]</code> 后台管理地址</td></tr><tr><td align="center">SCKEY</td><td align="center">SCU100890xxxxxx293e1xxx9dbfe82axxxx2dc</td><td align="center"><code>[可选]</code> server 酱的 SCKEY(微信提醒)</td></tr><tr><td align="center">QMSG_KEY</td><td align="center">fdexxxx42a1xxx28f16d5xxxxa00</td><td align="center"><code>[可选]</code> Qmsg 酱的密钥</td></tr><tr><td align="center">QQ</td><td align="center">123456789</td><td align="center"><code>[可选]</code>Qmsg 酱发送的 qq，不填为全部 支持多个，用英文逗号分隔即可</td></tr><tr><td align="center">QQ_SHAKE</td><td align="center">true</td><td align="center"><code>[可选]</code>填写代表发送 QQ 戳一戳</td></tr><tr><td align="center">INFO</td><td align="center"><code>&lt;p style=&#39;color:red&#39;&gt;test&lt;p&gt;</code></td><td align="center"><code>[可选]</code> 自定义信息输出，支持 HTML 代码 LeanCloud控制台日志信息输出</td></tr><tr><td align="center">favicon</td><td align="center"><a href="https://cdn.jsdelivr.net/gh/lete114/lete114.github.io/img/favicon.ico">https://cdn.jsdelivr.net/gh/lete114/lete114.github.io/img/favicon.ico</a></td><td align="center"><code>[可选]</code>  网页 favicon 图标</td></tr><tr><td align="center">TO_EMAIL</td><td align="center"><a href="mailto:admin@lete114.top">admin@lete114.top</a></td><td align="center"><code>[可选]</code>博主通知收件地址，默认使用<code>SMTP_USER</code></td></tr><tr><td align="center">SPAM_WORDS</td><td align="center">检测的内容，如：单号，物流</td><td align="center"><code>[可选]</code> 需要对屏蔽的关键词，关键词用半角逗号分隔</td></tr><tr><td align="center">MAIN_COLOR</td><td align="center">#ff9191</td><td align="center"><code>[可选]</code> 仅针对 custom2 模板主题的主要颜色</td></tr><tr><td align="center">MAIN_IMG</td><td align="center"><a href="https://cdn.jsdelivr.net/gh/lete114/CDN/BoBoPic/22.jpg">https://cdn.jsdelivr.net/gh/lete114/CDN/BoBoPic/22.jpg</a></td><td align="center"><code>[可选]</code> 仅针对 custom2 模板主题的头图</td></tr><tr><td align="center">特殊参数</td><td align="center">特殊参数</td><td align="center">特殊参数</td></tr><tr><td align="center">DISABLE_EMAIL</td><td align="center">true</td><td align="center"><code>[可选]</code> 禁止邮件通知<strong>博主</strong>，@仍然会提醒</td></tr></tbody></table><blockquote><p>注意这个特殊参数，由于很多 Valine-Admin 版本的差异，导致我也不知道这个功能是否会生效，我查看了大佬的源码，发现有这个配置，但是具体代码我看不太懂，所以这个功能不是很确定，但是我自己设置了，确实成功了，普通的留言不会邮箱提醒，但是@提醒不提醒好像也没生效，就这么搁置了</p></blockquote><table><thead><tr><th align="center">主题</th><th>说明</th></tr></thead><tbody><tr><td align="center">default</td><td>默认主题</td></tr><tr><td align="center">rainbow</td><td>原版的 rainbow</td></tr><tr><td align="center">custom1</td><td>基于🎉<a href="https://pbas.club/">梨花町の肾兄さん</a>🎉的模板</td></tr><tr><td align="center">custom2</td><td>对 custom1 的改进版</td></tr></tbody></table><blockquote><p>虽然邮箱是必填，但是我不想用，就没填，控制台虽然有报错，但是功能正常使用</p></blockquote><p>更多参数请参考原始扩展插件地址：<a href="https://github.com/DesertsP/Valine-Admin">https://github.com/DesertsP/Valine-Admin</a></p><h3 id="部署-1"><a href="#部署-1" class="headerlink" title="部署"></a>部署</h3><p>选择<code>云引擎</code>–&gt;<code>部署</code>–&gt;<code>部署项目</code>–&gt;<code>Git部署</code>–&gt;<code>配置Git</code>–&gt;<code>填写下方任意一个地址</code>–&gt;<code>保存</code>–&gt;<code>生产环境</code>–&gt;<code>部署</code><br>Lete乐特个人定制：<a href="https://github.com/lete114/Valine-Admin-Server.git">https://github.com/lete114/Valine-Admin-Server.git</a><br>小康：<a href="https://github.com/sviptzk/Valine-Admin-Server.git">https://github.com/sviptzk/Valine-Admin-Server.git</a></p><h2 id="自动唤醒"><a href="#自动唤醒" class="headerlink" title="自动唤醒"></a>自动唤醒</h2><p>选择 <code>self-wake</code> 云函数，<code>Cron</code> 表达式为<code>0 */25 0-15,23 * * ?</code>，表示每天早7点到晚23点每隔25分钟访问云引擎</p><p>选择 <code>resend-mails</code> 云函数，<code>Cron</code> 表达式为<code>0 10 23 * * ?</code>，表示每天早上7点10检查过去24小时内漏发的通知邮件并补发</p><p><code>Cron</code> 函数可以自己定义，不过需要注意时区问题，国际版默认使用的是 UTC+0 时间，和北京时间相差大约八个小时</p><h2 id="后台管理系统"><a href="#后台管理系统" class="headerlink" title="后台管理系统"></a>后台管理系统</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200730080944.png" alt="绑定云引擎的域名"></p><p>绑定云引擎的域名，注意，这个域名就是你之后的后台管理地址。</p><p>绑定好之后在环境变量里设置 <code>ADMIN_URL</code> 字段，然后重启云引擎，访问 <code>你的后台管理域名/sign-up</code> 注册管理员，</p><p>需要注意的是，管理员的邮箱是强制只用发送邮件的邮箱哦</p><p>设置完成就可以通过 <code>你的后台管理域名</code> 访问后台管理系统了。</p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>本文结合两位大佬的博客写的：</p><p><a href="https://blog.lete114.top/article/Valine-LeanCloud-Config.html">乐特</a></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200729155340.png" alt="乐特"></p><p><a href="https://www.antmoe.com/posts/2380732b/index.html">小康</a></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200729155428.png" alt="小康"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Valine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Iconfont阿里巴巴矢量图标库使用</title>
      <link href="/posts/b7f60895/"/>
      <url>/posts/b7f60895/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200728150951.png" alt="iconfont首页"></p><p>在很多项目里，我们都需要用到图标，自己制作太累人了，网上搜的总是涉及各种版权、付费问题，阿里巴巴就给咱提供了一个庞大的图标库，其中公开的图标库可以免费使用，无版权问题。</p><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p>支持 GitHub 、淘宝、微博登录</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200728152438.png" alt="登录方式"></p><h2 id="搜索图标"><a href="#搜索图标" class="headerlink" title="搜索图标"></a>搜索图标</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200728152519.png" alt="图标搜索"></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>支持直接下载、在线修改</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200728152625.png" alt="下载"></p><p>图标加入购物车后，可以批量下载素材和代码、批量添加至项目</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200728152719.png" alt="购物车"></p><p>添加进项目之后就可以进行 CSS 引用了：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200728152806.png" alt="代码引用"></p><h2 id="图标库"><a href="#图标库" class="headerlink" title="图标库"></a>图标库</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200728152843.png" alt="分类"></p><h2 id="图标上传"><a href="#图标上传" class="headerlink" title="图标上传"></a>图标上传</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200728152915.png" alt="图标上传"></p><h2 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a>打赏</h2><p>如果你喜欢哪个图标，可以给设计师一点奖励哦</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200728153002.png" alt="打赏"></p><h2 id="在-Butterfly-中的使用"><a href="#在-Butterfly-中的使用" class="headerlink" title="在 Butterfly 中的使用"></a>在 Butterfly 中的使用</h2><p>添加图标进项目之后，进入相对应的项目中，复制 CSS 代码：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200728153150.png" alt="复制代码"></p><p>然后在 <code>butterfly.yml</code> 中找到 <code>inject</code> 选项，添加刚才复制的代码：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200728153302.png" alt="添加inject"></p><p>然后就可以在导航栏或者个人资料里使用你的项目里的图标啦：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200728153631.png" alt="导航栏"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200728154319.png" alt="社交图标"></p><blockquote><p>需要注意的时候，如果在项目中继续添加图标的话，CSS 的链接会更新，记得重新更新链接</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Iconfont </tag>
            
            <tag> 阿里巴巴 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 常用插件和 Bug 汇总(持续更新中)</title>
      <link href="/posts/af539879/"/>
      <url>/posts/af539879/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200727142233.jpeg" alt="img"></p><blockquote><p>只针对 Bitterfly 主题</p></blockquote><h2 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h2><blockquote><p>2020.8.16更新</p></blockquote><p>这是取消备用站点、取消PWA等功能之后的，目前很简约的 <code>package.json</code> :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;hexo-site&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;0.0.0&quot;,</span><br><span class="line">  &quot;private&quot;: true,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;build&quot;: &quot;hexo generate&quot;,</span><br><span class="line">    &quot;clean&quot;: &quot;hexo clean&quot;,</span><br><span class="line">    &quot;deploy&quot;: &quot;hexo deploy&quot;,</span><br><span class="line">    &quot;server&quot;: &quot;hexo server&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hexo&quot;: &#123;</span><br><span class="line">    &quot;version&quot;: &quot;5.0.2&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;hexo&quot;: &quot;^5.0.2&quot;,</span><br><span class="line">    &quot;hexo-abbrlink&quot;: &quot;^2.2.1&quot;,</span><br><span class="line">    &quot;hexo-bilibili-bangumi&quot;: &quot;^1.5.0&quot;,</span><br><span class="line">    &quot;hexo-deployer-git&quot;: &quot;^2.1.0&quot;,</span><br><span class="line">    &quot;hexo-generator-archive&quot;: &quot;^1.0.0&quot;,</span><br><span class="line">    &quot;hexo-generator-category&quot;: &quot;^1.0.0&quot;,</span><br><span class="line">    &quot;hexo-generator-index&quot;: &quot;^2.0.0&quot;,</span><br><span class="line">    &quot;hexo-generator-search&quot;: &quot;^2.4.0&quot;,</span><br><span class="line">    &quot;hexo-generator-tag&quot;: &quot;^1.0.0&quot;,</span><br><span class="line">    &quot;hexo-renderer-ejs&quot;: &quot;^1.0.0&quot;,</span><br><span class="line">    &quot;hexo-renderer-marked&quot;: &quot;^3.0.0&quot;,</span><br><span class="line">    &quot;hexo-renderer-pug&quot;: &quot;^1.0.0&quot;,</span><br><span class="line">    &quot;hexo-renderer-stylus&quot;: &quot;^1.1.0&quot;,</span><br><span class="line">    &quot;hexo-server&quot;: &quot;^2.0.0&quot;,</span><br><span class="line">    &quot;hexo-tag-aplayer&quot;: &quot;^3.0.4&quot;,</span><br><span class="line">    &quot;hexo-wordcount&quot;: &quot;^6.0.1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="主题渲染插件"><a href="#主题渲染插件" class="headerlink" title="主题渲染插件"></a>主题渲染插件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><h3 id="Git-推送插件"><a href="#Git-推送插件" class="headerlink" title="Git 推送插件"></a>Git 推送插件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h3 id="音乐播放器插件"><a href="#音乐播放器插件" class="headerlink" title="音乐播放器插件"></a>音乐播放器插件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-tag-aplayer --save</span><br></pre></td></tr></table></figure><h3 id="哔哩哔哩追番页面生成插件"><a href="#哔哩哔哩追番页面生成插件" class="headerlink" title="哔哩哔哩追番页面生成插件"></a>哔哩哔哩追番页面生成插件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-bilibili-bangumi --save</span><br></pre></td></tr></table></figure><h3 id="RSS生成插件"><a href="#RSS生成插件" class="headerlink" title="RSS生成插件"></a>RSS生成插件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><h3 id="文章置顶插件"><a href="#文章置顶插件" class="headerlink" title="文章置顶插件"></a>文章置顶插件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure><h3 id="本地搜索插件"><a href="#本地搜索插件" class="headerlink" title="本地搜索插件"></a>本地搜索插件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><h3 id="字数统计插件"><a href="#字数统计插件" class="headerlink" title="字数统计插件"></a>字数统计插件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><h3 id="永久链接生成插件"><a href="#永久链接生成插件" class="headerlink" title="永久链接生成插件"></a>永久链接生成插件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><h3 id="百度Sitemap生成插件"><a href="#百度Sitemap生成插件" class="headerlink" title="百度Sitemap生成插件"></a>百度Sitemap生成插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-baidu-sitemap@0.1.4 --save</span><br></pre></td></tr></table></figure><h3 id="百度主动推送插件"><a href="#百度主动推送插件" class="headerlink" title="百度主动推送插件"></a>百度主动推送插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-baidu-url-submit --save</span><br></pre></td></tr></table></figure><h3 id="SiteMap生成插件"><a href="#SiteMap生成插件" class="headerlink" title="SiteMap生成插件"></a>SiteMap生成插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure><h2 id="Gulp-压缩插件"><a href="#Gulp-压缩插件" class="headerlink" title="Gulp 压缩插件"></a>Gulp 压缩插件</h2><blockquote><p>慎重使用，可能会导致 CSS 样式丢失，使用方法请参考：<a href="https://www.laugh0608.ltd/2020/07/26/gulp/">博客开启 Gulp 压缩</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-cli --global</span><br><span class="line">npm install gulp-htmlclean --save-dev</span><br><span class="line">npm install gulp-htmlmin --save</span><br><span class="line">npm install gulp-clean-css --save-dev</span><br><span class="line">npm install gulp-uglify --save-dev</span><br><span class="line">npm install terser</span><br><span class="line">npm install workbox-build gulp --save-dev</span><br></pre></td></tr></table></figure><p><code>gulp-imagemin</code> 这个插件比较特殊，慎重使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-imagemin --save-dev</span><br></pre></td></tr></table></figure><h2 id="常见报错"><a href="#常见报错" class="headerlink" title="常见报错"></a>常见报错</h2><h3 id="node-警告"><a href="#node-警告" class="headerlink" title="node 警告"></a>node 警告</h3><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200727143402.png" alt="报错截图"></p><p>应该来说是正常的，由于包版本和系统兼容性问题导致的，只要不影响功能，即可忽视。</p><h3 id="网页公告栏不显示内容"><a href="#网页公告栏不显示内容" class="headerlink" title="网页公告栏不显示内容"></a>网页公告栏不显示内容</h3><p>昨天修改了公告栏，加上了小程序和公众号二维码，但是突然公告栏内容消失，检查了好多次都不知道错误在哪，然后就把之前备份的配置文件拿出来对比，发现了错误所在：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200728081520.png" alt="配置信息"></p><p>原来是这里缺少了一个缩进(图中已修复)</p><p>尽管这是个再微不足道的错误，但是却提醒了我，配置文件是非常严谨的，即使少一个空格也可能导致报错。</p><h3 id="PWA-报错图标路径找不到"><a href="#PWA-报错图标路径找不到" class="headerlink" title="PWA 报错图标路径找不到"></a>PWA 报错图标路径找不到</h3><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200728231549.png" alt="报错截图"> </p><p>图标路径不对，检查图标路径，务必要让 <code>manifest.json</code> 文件和配置文件中的 PWA 访问到。</p><p>中间最长的哪一行是因为图标格式不合格，检查图标尺寸。</p><h3 id="PWA-报错安全服务重复"><a href="#PWA-报错安全服务重复" class="headerlink" title="PWA 报错安全服务重复"></a>PWA 报错安全服务重复</h3><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200728231844.png" alt="控制台报错信息"></p><p>如果控制台报错这个，说明你的 PWA 配置多余，就是可能 offline 和 PWA 同时开启，建议注释掉 offline 的配置并卸载 hexo-offline 插件。</p><h3 id="文章的TOC无法点击"><a href="#文章的TOC无法点击" class="headerlink" title="文章的TOC无法点击"></a>文章的TOC无法点击</h3><p>目前 Butterfly 3.0 没有适配 Hexo 5.0 ，会导致文章的中文标题无法识别，所以导致标题列表无法点击，有两个方法可以解决：</p><ol><li>回退版本：<code>npm install hexo@4.2.1</code> 即可</li><li>群里大佬提供的方法：</li></ol><p>修改 <code>main.js</code> </p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200731195111.png" alt="img"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200731195159.png"></p><p>即可</p><h3 id="hexo-d到gitee时报错"><a href="#hexo-d到gitee时报错" class="headerlink" title="hexo d到gitee时报错"></a>hexo d到gitee时报错</h3><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200801092958.png" alt="报错信息"></p><p>报错信息翻译：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200801093104.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200801093140.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200801093221.png"></p><p>根据提示执行 <code>git prune</code> 会报错不是一个Git仓库，究其原因，是因为 <code>hexo d</code> 的机制，是把 <code>pubilc</code> 下的所有文件复制到 <code>.deploy_git</code> 文件夹下，再进行推送，所以整个博客目录在不执行 <code>hexo d</code> 时并不是一个Git仓库，所以这就无法解决这个问题，但是推送到github和coding时正常，这就很奇怪，我找不到原因，得不出解决方法，如果有大佬知道，请留言，感激不尽。</p><blockquote><p>2020.8.8更新，已解决，在执行 <code>hexo d</code> 之前 <code>cd</code> 进入 <code>.deploy_git</code> 文件夹内，执行 <code>git prune</code> 即可</p></blockquote><blockquote><p>2020.8.11更新，上面的那种方法治标不治本，后来又开始反复，今天我发现了另一种方法，就是把gitee的推送地址放到最下面就可以解决了，，，这可能是gitee机制和GitHub不一样的原因吧</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200811082233.png"></p></blockquote><h3 id="更新主题报错"><a href="#更新主题报错" class="headerlink" title="更新主题报错"></a>更新主题报错</h3><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200801164827.png" alt="和这个报错信息相似"></p><p>只要和这个报错信息相似的，请检查你的配置文件是否迁移完全，各项新的配置格式是否正确，我这次报错就因为少了一个空格，让我好找，找不同实在是太费眼睛了。</p><h3 id="hexo-d到github报错请求出错"><a href="#hexo-d到github报错请求出错" class="headerlink" title="hexo d到github报错请求出错"></a>hexo d到github报错请求出错</h3><p>报错信息：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200802152258.png" alt="报错信息"></p><p>应该是git凭证失效，更新凭证即可，下载地址：<a href="https://github.com/Microsoft/Git-Credential-Manager-for-Windows/releases/tag/v1.14.0">git for Windows</a></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200802153211.png" alt="安装凭证"></p><h3 id="文章设置更新日期不生效"><a href="#文章设置更新日期不生效" class="headerlink" title="文章设置更新日期不生效"></a>文章设置更新日期不生效</h3><p>很多时候因为意外导致文章的最后修改时期变化，从而引发文章更新日期的变化，如果我们不需要这种变化，就要手动设置更新日期，但是我突然发现，设置 <code>update</code> 并不生效，这是怎么回事呢？</p><p>经过群里大佬的提醒，我才发现我单词拼错了，更新日期应该是 <code>updated</code> </p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200803163519.png"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客增加哔哩哔哩追番页面</title>
      <link href="/posts/7ef0253b/"/>
      <url>/posts/7ef0253b/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200726181113.png" alt="追番"></p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-bilibili-bangumi --save</span><br></pre></td></tr></table></figure><p>GitHub：<a href="https://github.com/HCLonely/hexo-bilibili-bangumi">hexo-bilibili-bangumi</a></p><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>在站点的配置文件 <code>_config.yml</code> 里添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">bangumi:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">path:</span></span><br><span class="line">  <span class="attr">vmid:</span></span><br><span class="line">  <span class="attr">title:</span></span><br><span class="line">  <span class="attr">quote:</span></span><br><span class="line">  <span class="attr">show:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">loading:</span></span><br><span class="line">  <span class="attr">metaColor:</span></span><br><span class="line">  <span class="attr">color:</span></span><br><span class="line">  <span class="attr">webp:</span></span><br></pre></td></tr></table></figure><blockquote><p>注意，不是主题配置文件</p></blockquote><h3 id="注释："><a href="#注释：" class="headerlink" title="注释："></a>注释：</h3><ul><li><strong>enable</strong>: 是否启用</li><li><strong>path</strong>: 番剧页面路径，默认<code>bangumis/index.html</code></li><li><strong>vmid</strong>: 哔哩哔哩番剧页面的 <code>vmid(uid)</code> </li><li><strong>title</strong>: 该页面的标题</li><li><strong>quote</strong>: 写在页面开头的一段话,支持html语法</li><li><strong>show</strong>: 初始显示页面：<code>0: 想看</code>, <code>1: 在看</code>, <code>2: 看过</code>，默认为<code>1</code></li><li><strong>loading</strong>: 图片加载完成前的loading图片</li><li><strong>metaColor</strong>: meta部分(简介上方)字体颜色</li><li><strong>color</strong>: 简介字体颜色</li><li><strong>webp</strong>: 番剧封面使用<code>webp</code>格式(此格式在<code>safari</code>浏览器下不显示，但是图片大小可以缩小100倍左右), 默认<code>true</code></li></ul><h3 id="vmid-获取"><a href="#vmid-获取" class="headerlink" title="vmid 获取"></a>vmid 获取</h3><p>登录哔哩哔哩后前往<a href="https://space.bilibili.com/%E9%A1%B5%E9%9D%A2%EF%BC%8C%E7%BD%91%E5%9D%80%E6%9C%80%E5%90%8E%E7%9A%84%E4%B8%80%E4%B8%B2%E6%95%B0%E5%AD%97%E5%B0%B1%E6%98%AF">https://space.bilibili.com/页面，网址最后的一串数字就是</a> <code>uid</code> </p><blockquote><p>注意：追番列表需要设置为公开才可</p></blockquote><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在<code>hexo generate</code>或<code>hexo deploy</code>之前使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo bangumi -u</span><br></pre></td></tr></table></figure><p>命令更新番剧数据！</p><blockquote><p>删除数据命令:<code>hexo bangumi -d</code></p></blockquote><h3 id="配置在站点上"><a href="#配置在站点上" class="headerlink" title="配置在站点上"></a>配置在站点上</h3><ul><li>在 <code>source</code> 目录下新建一个文件夹</li><li>命名为 <code>bilibili</code> (自己随意起一个)</li><li>将配置文件里的 <code>path</code> 设置为 <code>bilibili/index.html</code> </li><li>在需要引入的地方引入 <code>/bilibili/</code> 即可，例如放在导航栏：<code>追番: || /bilibili/ || iconfont icon-bilibili</code></li></ul><p>okk</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 哔哩哔哩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客开启Gulp压缩</title>
      <link href="/posts/bfd9586f/"/>
      <url>/posts/bfd9586f/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200726104727.jpeg" alt="gulp"></p><blockquote><p>警告！我用这个压缩几次后出现 bug 导致网站 CSS 样式丢失，慎重使用</p></blockquote><h2 id="Gulp-压缩"><a href="#Gulp-压缩" class="headerlink" title="Gulp 压缩"></a>Gulp 压缩</h2><p><a href="https://www.gulpjs.com.cn/">Gulp</a> 是一款自动化构建的工具，拥有众多的插件。而我们只需要使用到几个插件来压缩 Html&#x2F;css&#x2F;js。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --global gulp-cli</span><br></pre></td></tr></table></figure><h2 id="压缩-HTML"><a href="#压缩-HTML" class="headerlink" title="压缩 HTML"></a>压缩 HTML</h2><p>可以使用 <a href="https://github.com/anseki/gulp-htmlclean">gulp-htmlclean</a> 和 <a href="https://github.com/jonschlinkert/gulp-htmlmin">gulp-htmlmin</a> 来压缩 HTML</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-htmlclean --save-dev</span><br><span class="line">npm install --save gulp-htmlmin</span><br></pre></td></tr></table></figure><h2 id="压缩-CSS"><a href="#压缩-CSS" class="headerlink" title="压缩 CSS"></a>压缩 CSS</h2><p>可以使用 <a href="https://github.com/scniro/gulp-clean-css">gulp-clean-css</a> 来压缩 CSS</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-clean-css --save-dev</span><br></pre></td></tr></table></figure><h2 id="压缩-JS"><a href="#压缩-JS" class="headerlink" title="压缩 JS"></a>压缩 JS</h2><p>由于 Butterfly 主题中的 JS 使用到了部分 ES6 语法，因此不能只使用 <a href="https://github.com/terinjokes/gulp-uglify">gulp-uglify</a> 来压缩，还需要搭配其它的插件。两种搭配都可以有效的压缩 JS 代码，选一种适合自己的就行。</p><p><a href="https://github.com/terser/terser">terser</a> 是 ES6+ 的 JavaScript 解析器</p><p><a href="https://github.com/babel/gulp-babel">gulp-babel</a> 是一个 JavaScript 转换编译器，可以把 ES6 转换成 ES5</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev gulp-uglify</span><br><span class="line">npm install terser</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev gulp-uglify</span><br><span class="line">npm install --save-dev gulp-babel @babel/core @babel/preset-env</span><br></pre></td></tr></table></figure><blockquote><p>两种选一种即可</p></blockquote><h2 id="压缩图片"><a href="#压缩图片" class="headerlink" title="压缩图片"></a>压缩图片</h2><p>使用 <a href="https://github.com/sindresorhus/gulp-imagemin">gulp-imagemin</a> 来压缩图片</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save-dev gulp-imagemin</span><br></pre></td></tr></table></figure><blockquote><p>警告：亲身体验，用 <code>npm</code> 安装此插件会报错无法构建，但我用 <code>cnpm</code> 安装成功了！！！</p></blockquote><h2 id="创建-gulpfile-文件"><a href="#创建-gulpfile-文件" class="headerlink" title="创建 gulpfile 文件"></a>创建 gulpfile 文件</h2><p>在 Hexo 的根目录，创建一个 <code>gulpfile.js</code> 文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> cleanCSS = <span class="built_in">require</span>(<span class="string">&#x27;gulp-clean-css&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">&#x27;gulp-htmlmin&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">&#x27;gulp-htmlclean&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">&#x27;gulp-imagemin&#x27;</span>)</span><br><span class="line"><span class="comment">// tester (如果使用tester,把下面4行前面的//去掉)</span></span><br><span class="line"><span class="comment">// var uglifyjs = require(&#x27;terser&#x27;)</span></span><br><span class="line"><span class="comment">// var composer = require(&#x27;gulp-uglify/composer&#x27;)</span></span><br><span class="line"><span class="comment">// var pump = require(&#x27;pump&#x27;)</span></span><br><span class="line"><span class="comment">// var minify = composer(uglifyjs, console)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// babel (如果不是使用bebel,把下面两行註释掉)</span></span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">&#x27;gulp-uglify&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> babel = <span class="built_in">require</span>(<span class="string">&#x27;gulp-babel&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// minify js - babel（ 如果不是使用bebel,把下面註释掉）</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;compress&#x27;</span>, <span class="function">() =&gt;</span></span><br><span class="line">  gulp.<span class="title function_">src</span>([<span class="string">&#x27;./public/**/*.js&#x27;</span>, <span class="string">&#x27;!./public/**/*.min.js&#x27;</span>])</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">babel</span>(&#123;</span><br><span class="line">      <span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class="line">    &#125;))</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">uglify</span>().<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line">    &#125;))</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// minify js - tester (如果使用tester,把下面前面的//去掉)</span></span><br><span class="line"><span class="comment">// gulp.task(&#x27;compress&#x27;, function (cb) &#123;</span></span><br><span class="line"><span class="comment">//   var options = &#123;&#125;</span></span><br><span class="line"><span class="comment">//   pump([</span></span><br><span class="line"><span class="comment">//     gulp.src([&#x27;./public/**/*.js&#x27;, &#x27;!./public/**/*.min.js&#x27;]),</span></span><br><span class="line"><span class="comment">//     minify(options),</span></span><br><span class="line"><span class="comment">//     gulp.dest(&#x27;./public&#x27;)</span></span><br><span class="line"><span class="comment">//   ],</span></span><br><span class="line"><span class="comment">//   cb</span></span><br><span class="line"><span class="comment">//   )</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// css</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-css&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./public/**/*.css&#x27;</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">cleanCSS</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 public 目录内 html</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-html&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./public/**/*.html&#x27;</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">htmlclean</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">htmlmin</span>(&#123;</span><br><span class="line">      <span class="attr">removeComments</span>: <span class="literal">true</span>, <span class="comment">// 清除 HTML 註释</span></span><br><span class="line">      <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>, <span class="comment">// 压缩 HTML</span></span><br><span class="line">      <span class="attr">collapseBooleanAttributes</span>: <span class="literal">true</span>, <span class="comment">// 省略布尔属性的值 &lt;input checked=&quot;true&quot;/&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">      <span class="attr">removeEmptyAttributes</span>: <span class="literal">true</span>, <span class="comment">// 删除所有空格作属性值 &lt;input id=&quot;&quot; /&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">      <span class="attr">removeScriptTypeAttributes</span>: <span class="literal">true</span>, <span class="comment">// 删除 &lt;script&gt; 的 type=&quot;text/javascript&quot;</span></span><br><span class="line">      <span class="attr">removeStyleLinkTypeAttributes</span>: <span class="literal">true</span>, <span class="comment">// 删除 &lt;style&gt; 和 &lt;link&gt; 的 type=&quot;text/css&quot;</span></span><br><span class="line">      <span class="attr">minifyJS</span>: <span class="literal">true</span>, <span class="comment">// 压缩页面 JS</span></span><br><span class="line">      <span class="attr">minifyCSS</span>: <span class="literal">true</span>, <span class="comment">// 压缩页面 CSS</span></span><br><span class="line">      <span class="attr">minifyURLs</span>: <span class="literal">true</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 public/uploads 目录内图片</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-images&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  gulp.<span class="title function_">src</span>(<span class="string">&#x27;./public/img/**/*.*&#x27;</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">imagemin</span>(&#123;</span><br><span class="line">      <span class="attr">optimizationLevel</span>: <span class="number">5</span>, <span class="comment">// 类型：Number  预设：3  取值範围：0-7（优化等级）</span></span><br><span class="line">      <span class="attr">progressive</span>: <span class="literal">true</span>, <span class="comment">// 类型：Boolean 预设：false 无失真压缩jpg图片</span></span><br><span class="line">      <span class="attr">interlaced</span>: <span class="literal">false</span>, <span class="comment">// 类型：Boolean 预设：false 隔行扫描gif进行渲染</span></span><br><span class="line">      <span class="attr">multipass</span>: <span class="literal">false</span> <span class="comment">// 类型：Boolean 预设：false 多次优化svg直到完全优化</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public/img&#x27;</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行 gulp 命令时执行的任务</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;default&#x27;</span>, gulp.<span class="title function_">parallel</span>(</span><br><span class="line">  <span class="string">&#x27;compress&#x27;</span>, <span class="string">&#x27;minify-css&#x27;</span>, <span class="string">&#x27;minify-html&#x27;</span>, <span class="string">&#x27;minify-images&#x27;</span></span><br><span class="line">))</span><br></pre></td></tr></table></figure><blockquote><p>注意： 如果有使用到 Butterfly 主题提供的 <code>mermaid </code> 标签外挂，那需要把 52 行 <code>.pipe(htmlclean())</code>  注释掉，同时，把 55 行的 <code>collapseWhitespace: true</code> , 改为 <code>false</code></p></blockquote><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>在执行 <code>hexo g</code> 之后执行 <code>gulp</code> 即可</p><h2 id="Gulp-PWA"><a href="#Gulp-PWA" class="headerlink" title="Gulp + PWA"></a>Gulp + PWA</h2><p>如果你开启了 PWA ，那么可以使用下面的 <code>gulpfile.js</code> 配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> cleanCSS = <span class="built_in">require</span>(<span class="string">&#x27;gulp-clean-css&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">&#x27;gulp-htmlmin&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">&#x27;gulp-htmlclean&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">&#x27;gulp-imagemin&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> workbox = <span class="built_in">require</span>(<span class="string">&quot;workbox-build&quot;</span>);</span><br><span class="line"><span class="comment">// babel</span></span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">&#x27;gulp-uglify&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> babel = <span class="built_in">require</span>(<span class="string">&#x27;gulp-babel&#x27;</span>);</span><br><span class="line"><span class="comment">//tester</span></span><br><span class="line"><span class="comment">// var uglifyjs = require(&quot;terser&quot;);</span></span><br><span class="line"><span class="comment">// var composer = require(&#x27;gulp-uglify/composer&#x27;);</span></span><br><span class="line"><span class="comment">// var pump = require(&#x27;pump&#x27;);</span></span><br><span class="line"><span class="comment">// var minify = composer(uglifyjs, console);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//pwa</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;generate-service-worker&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> workbox.<span class="title function_">injectManifest</span>(&#123;</span><br><span class="line">    <span class="attr">swSrc</span>: <span class="string">&#x27;./sw-template.js&#x27;</span>,</span><br><span class="line">    <span class="attr">swDest</span>: <span class="string">&#x27;./public/sw.js&#x27;</span>,</span><br><span class="line">    <span class="attr">globDirectory</span>: <span class="string">&#x27;./public&#x27;</span>,</span><br><span class="line">    <span class="attr">globPatterns</span>: [</span><br><span class="line">        <span class="string">&quot;**/*.&#123;html,css,js,json,woff2&#125;&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">modifyURLPrefix</span>: &#123;</span><br><span class="line">        <span class="string">&quot;&quot;</span>: <span class="string">&quot;./&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//minify js babel</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;compress&#x27;</span>, <span class="function">() =&gt;</span></span><br><span class="line">  gulp.<span class="title function_">src</span>([<span class="string">&#x27;./public/**/*.js&#x27;</span>, <span class="string">&#x27;!./public/**/*.min.js&#x27;</span>])</span><br><span class="line">.<span class="title function_">pipe</span>(<span class="title function_">babel</span>(&#123;</span><br><span class="line"><span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class="line">&#125;))</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">uglify</span>().<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">    &#125;))</span><br><span class="line">.<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>))</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//minify js tester</span></span><br><span class="line"><span class="comment">// gulp.task(&#x27;compress&#x27;, function (cb) &#123;</span></span><br><span class="line"><span class="comment">//   var options = &#123;&#125;;</span></span><br><span class="line"><span class="comment">//   pump([</span></span><br><span class="line"><span class="comment">//     gulp.src([&#x27;./public/**/*.js&#x27;, &#x27;!./public/**/*.min.js&#x27;]),</span></span><br><span class="line"><span class="comment">//     minify(options),</span></span><br><span class="line"><span class="comment">//     gulp.dest(&#x27;./public&#x27;)</span></span><br><span class="line"><span class="comment">//   ],</span></span><br><span class="line"><span class="comment">//   cb</span></span><br><span class="line"><span class="comment">//   );</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//css</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-css&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./public/**/*.css&#x27;</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">cleanCSS</span>(&#123;</span><br><span class="line">      <span class="attr">compatibility</span>: <span class="string">&#x27;ie11&#x27;</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 public 目录内 html</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-html&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./public/**/*.html&#x27;</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">htmlclean</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">htmlmin</span>(&#123;</span><br><span class="line">      <span class="attr">removeComments</span>: <span class="literal">true</span>, <span class="comment">//清除 HTML 註释</span></span><br><span class="line">      <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>, <span class="comment">//压缩 HTML</span></span><br><span class="line">      <span class="attr">collapseBooleanAttributes</span>: <span class="literal">true</span>, <span class="comment">//省略布尔属性的值 &lt;input checked=&quot;true&quot;/&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">      <span class="attr">removeEmptyAttributes</span>: <span class="literal">true</span>, <span class="comment">//删除所有空格作属性值 &lt;input id=&quot;&quot; /&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">      <span class="attr">removeScriptTypeAttributes</span>: <span class="literal">true</span>, <span class="comment">//删除 &lt;script&gt; 的 type=&quot;text/javascript&quot;</span></span><br><span class="line">      <span class="attr">removeStyleLinkTypeAttributes</span>: <span class="literal">true</span>, <span class="comment">//删除 &lt;style&gt; 和 &lt;link&gt; 的 type=&quot;text/css&quot;</span></span><br><span class="line">      <span class="attr">minifyJS</span>: <span class="literal">true</span>, <span class="comment">//压缩页面 JS</span></span><br><span class="line">      <span class="attr">minifyCSS</span>: <span class="literal">true</span>, <span class="comment">//压缩页面 CSS</span></span><br><span class="line">      <span class="attr">minifyURLs</span>: <span class="literal">true</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 public/uploads 目录内图片</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-images&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  gulp.<span class="title function_">src</span>(<span class="string">&#x27;./public/img/**/*.*&#x27;</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">imagemin</span>(&#123;</span><br><span class="line">      <span class="attr">optimizationLevel</span>: <span class="number">5</span>, <span class="comment">//类型：Number  预设：3  取值範围：0-7（优化等级）</span></span><br><span class="line">      <span class="attr">progressive</span>: <span class="literal">true</span>, <span class="comment">//类型：Boolean 预设：false 无失真压缩jpg图片</span></span><br><span class="line">      <span class="attr">interlaced</span>: <span class="literal">false</span>, <span class="comment">//类型：Boolean 预设：false 隔行扫描gif进行渲染</span></span><br><span class="line">      <span class="attr">multipass</span>: <span class="literal">false</span>, <span class="comment">//类型：Boolean 预设：false 多次优化svg直到完全优化</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public/img&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行 gulp 命令时执行的任务</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&quot;default&quot;</span>, gulp.<span class="title function_">series</span>(<span class="string">&quot;generate-service-worker&quot;</span>, gulp.<span class="title function_">parallel</span>(</span><br><span class="line">    <span class="string">&#x27;compress&#x27;</span>,<span class="string">&#x27;minify-html&#x27;</span>, <span class="string">&#x27;minify-css&#x27;</span>, <span class="string">&#x27;minify-images&#x27;</span></span><br><span class="line">)));</span><br></pre></td></tr></table></figure><blockquote><p>作者: Jerry<br>連結: <a href="https://demo.jerryc.me/posts/4073eda/#%E5%8F%83%E8%80%83">https://demo.jerryc.me/posts/4073eda/#%E5%8F%83%E8%80%83</a><br>來源: Butterfly<br>著作權歸作者所有。商業轉載請聯絡作者獲得授權，非商業轉載請註明出處。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> gulp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nrm--Npm源管理工具</title>
      <link href="/posts/7fb8ea41/"/>
      <url>/posts/7fb8ea41/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200726102703.png" alt="nrm ls"></p><h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>在围绕 gulp 的插件无法安装的问题，讨论到了 npm 源的问题，群里有大佬指出了可以用 nrm ，截图为证：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200726103035.png" alt="image-20200726103035073"></p><p>各种骚操作搜索一番，了解到这个实属好用的工具，安装体验一番，就在此记录一下使用方法。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g nrm</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="查看源"><a href="#查看源" class="headerlink" title="查看源"></a>查看源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nrm ls</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200726103409.png" alt="nrm ls"></p><blockquote><p>前面带 <code>*</code> 的是正在使用的源</p></blockquote><h3 id="切换源"><a href="#切换源" class="headerlink" title="切换源"></a>切换源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nrm use &lt;源名称&gt;</span><br></pre></td></tr></table></figure><p>例如：<code>nrm use taobao</code> :</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200726103521.png" alt="taobao"></p><h3 id="添加源"><a href="#添加源" class="headerlink" title="添加源"></a>添加源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nrm add &lt;registry&gt; &lt;url&gt; [home]</span><br></pre></td></tr></table></figure><blockquote><p><code>registry</code> 为源的名称，<code>url</code> 为源的地址，  <code>home</code> 为源的主页，可省略，设置之后可以执行 <code>nrm home</code> 来查看主页</p></blockquote><h3 id="删除源"><a href="#删除源" class="headerlink" title="删除源"></a>删除源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nrm del &lt;registry&gt;</span><br></pre></td></tr></table></figure><h3 id="测试源响应时间"><a href="#测试源响应时间" class="headerlink" title="测试源响应时间"></a>测试源响应时间</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nrm test &lt;registry&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;registry&gt;</code> 参数可不写，即测试所有源的响应速度：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200726104403.png" alt="nrm test"></p><p>okk</p><h2 id="npm-check工具"><a href="#npm-check工具" class="headerlink" title="npm-check工具"></a>npm-check工具</h2><p>可以选择更新npm的各个模块依赖包，很方便，不用去一个一个升级</p><p>安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g npm-check</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm-check -u</span><br></pre></td></tr></table></figure><p>空格选中需要更新的包，回车进行更新，<code>Ctrl C</code> 取消更新。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN4/202312192233018.png"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nrm </tag>
            
            <tag> npm </tag>
            
            <tag> cnpm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue基础篇(二)</title>
      <link href="/posts/70eafe5c/"/>
      <url>/posts/70eafe5c/</url>
      
        <content type="html"><![CDATA[<h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><h3 id="插值表达式"><a href="#插值表达式" class="headerlink" title="插值表达式"></a>插值表达式</h3><p>利用插值表达式来输出信息：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">        &#123;&#123;msg&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">msg</span>:<span class="string">&quot;hello Vue&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>v-once</code> 属性：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-once</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>v-once</code> 是只渲染生成一次，此时如果在控制台更改 <code>app.msg</code> 的值则它并不会改变</p><p>插值表达式还支持简单运算：</p><p>字符串拼接：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;firstname + lastname&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运算：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;1 + 2&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>输出结果就是 3 而不是 1 + 2</p><p>还支持三元运算：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;isVip?&quot;VIP用户&quot;:&quot;普通用户&quot;&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>若 <code>isVip</code> 为 <code>true</code> 则显示 VIP用户，反之则显示 普通用户</p><h3 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h3><p><code>v-html</code> 也可以用来输出信息，但是这么做并不推荐，因为不是怎么安全，可能会引发 XSS 问题。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;htmlTxt&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;htmlTxt&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">htmlTxt</span>:<span class="string">&quot;&lt;h1&gt;hello&lt;/h1&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-bind-属性绑定"><a href="#v-bind-属性绑定" class="headerlink" title="v-bind 属性绑定"></a>v-bind 属性绑定</h3><p><code>v-bind</code> 是动态属性绑定，可以简写为一个冒号 <code>:</code> </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;idName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:id</span>=<span class="string">&quot;idName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">idName</span>: <span class="string">&quot;test&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样就可以对属性就行修改。</p><h3 id="v-on-事件绑定"><a href="#v-on-事件绑定" class="headerlink" title="v-on 事件绑定"></a>v-on 事件绑定</h3><p><code>v-on</code> 是事件绑定，可以绑定监听事件，也可简写为 <code>@</code> </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;changeBg&quot;</span>&gt;</span>改变背景<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;changeBg&quot;</span>&gt;</span>改变背景<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            changeBg () &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">background</span> = <span class="string">&quot;skyblue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>举个小例子，按钮每被点击一次，显示的数字就 +1 ：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>点击次数：&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;count+=1&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;clickEvent&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">count</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">clickEvent () &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">count</span>++;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>属性内可以使用简单表达式，所有两个按钮都可以修改 <code>count</code> 的数据</p><h3 id="v-model-输入绑定"><a href="#v-model-输入绑定" class="headerlink" title="v-model 输入绑定"></a>v-model 输入绑定</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userName&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;userName = $event.target.value&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;userName&quot;</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>输入的内容： &#123;&#123;userName&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">userName</span>:<span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这两种方法都可以获取到输入框内的值，只不过被简化成了 <code>v-model</code> 指令了。</p><h3 id="v-if-判断"><a href="#v-if-判断" class="headerlink" title="v-if 判断"></a>v-if 判断</h3><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;isShow&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">isShow</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果把 <code>isShow</code> 的值修改为 <code>false</code> 那么图片就不会显示。</p><h3 id="v-for-列表渲染"><a href="#v-for-列表渲染" class="headerlink" title="v-for 列表渲染"></a>v-for 列表渲染</h3><p>循环渲染一个列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in stars&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123;item&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">stars</span>: [<span class="string">&quot;蔡徐坤&quot;</span>, <span class="string">&quot;范冰冰&quot;</span>, <span class="string">&quot;李晨&quot;</span>, <span class="string">&quot;苏有朋&quot;</span>]</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这就是一个简单的循环列表，但是这么做是不合理的，Vue 的建议是给列表的每一项加上独一无二的 <code>key</code> 值，循环对象数组：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in students&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>学生姓名：&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>年龄：&#123;&#123;item.age&#125;&#125;------学校：&#123;&#123;item.school&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">students</span>: [&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>: <span class="string">&quot;小明&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">age</span>: <span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">school</span>: <span class="string">&quot;北大&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">touxiang</span>: <span class="string">&quot;http://pic1.zhimg.com/50/v2-deff985cfcb7690bc71fdf8676438146_hd.jpg&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;, &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>: <span class="string">&quot;小红&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">age</span>: <span class="number">17</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">school</span>: <span class="string">&quot;清华&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;, &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>: <span class="string">&quot;小白&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">age</span>: <span class="number">20</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">school</span>: <span class="string">&quot;北大&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;]</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还是上面那个对象数组，进行循环对象：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in students[0]&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>条件循环渲染：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in students&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;item.age%2==0&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>索引值：&#123;&#123;index&#125;&#125;------学生姓名：&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>年龄：&#123;&#123;item.age&#125;&#125;------学校：&#123;&#123;item.school&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>这里是先循环再进行判断，即使把 <code>v-if</code> 写在前面也是先循环再判断</p></blockquote><p>常用的指令就这几个，更多和详细指令请参考官方文档：<a href="https://cn.vuejs.org/v2/guide/syntax.html">Vue 官方文档</a></p><h2 id="侦听属性"><a href="#侦听属性" class="headerlink" title="侦听属性"></a>侦听属性</h2><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123;msg&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in arr&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">msg</span>:<span class="string">&quot;hello Vue&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">arr</span>:[<span class="string">&quot;小红&quot;</span>,<span class="string">&quot;小黑&quot;</span>,<span class="string">&quot;小白&quot;</span>]</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">watch</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">msg (val) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;监听事件被触发---msg&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(val);</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">arr (val) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;监听事件---arr&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(val);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">msg</span>=<span class="string">&quot;监听到用户数据被修改&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当 <code>arr</code> 这个数组的值被修改时，比如增加一条数据时，监听事件 <code>arr</code> 被触发，然后这个事件修改了 <code>this.msg</code> 的值，然后也就触发了监听事件 <code>msg</code> </p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200723214235.png" alt="控制台输出"></p><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;firstname+lastname&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;fullname&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 逆序显示一个单词 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; word.split(&quot;&quot;).reverse().join(&quot;&quot;) &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 性能优化。和上面那个例子类似 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;reverseWord&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 循环性能优化 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in oddStudents&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;item.age&#125;&#125;---&#123;&#123;item.school&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- set和get属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;reverseMsg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">firstname</span>:<span class="string">&quot;张&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">lastname</span>:<span class="string">&quot;三&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">word</span>:<span class="string">&quot;music&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">students</span>: [&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>: <span class="string">&quot;小明&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">age</span>: <span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">school</span>: <span class="string">&quot;北大&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;, &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>: <span class="string">&quot;小红&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">age</span>: <span class="number">17</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">school</span>: <span class="string">&quot;清华&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;],</span></span><br><span class="line"><span class="language-javascript"><span class="attr">msg</span>:<span class="string">&quot;hello Vue&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">fullname () &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 会将计算结果进行缓存</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstname</span>+<span class="variable language_">this</span>.<span class="property">lastname</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">reverseWord () &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">word</span>.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">oddStudents () &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> results = <span class="variable language_">this</span>.<span class="property">students</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">item,i</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> item.<span class="property">age</span>%<span class="number">2</span>==<span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> results;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">reverseMsg</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">get () &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">msg</span>.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">set (val) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(val);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">msg</span> = val.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// get只能取值然后作用在其他地方，但是set可以设置值本身</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>那么在例子中 <code>&#123;&#123;firstname+lastname&#125;&#125;</code> 和 <code>&#123;&#123;fullname&#125;&#125;</code> 有什么区别呢，因为在计算属性中，只要计算一次，就会将计算结果进行缓存，所以当这个数据需要大量显示的时候，我们可以使用计算属性来提高性能，就不用每显示一次就要进行计算一次。</p><p>循环优化的原理：在前面的例子中我们有一个条件循环偶数年龄的学生，我们先进行计算得出偶数学生的数组，就不用循环之后再进行判断，直接把偶数的对象先计算出来再使用，只循环需要的，而且它最大的优点就是可以先把计算结果先缓存下来，只要内容不改变他就可以直接拿来用，从而提高性能</p><h2 id="事件传参"><a href="#事件传参" class="headerlink" title="事件传参"></a>事件传参</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in stars&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;clickEvent(index,item,$event)&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>索引值：&#123;&#123;index&#125;&#125;------内容：&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">stars</span>: [<span class="string">&quot;蔡徐坤&quot;</span>, <span class="string">&quot;范冰冰&quot;</span>, <span class="string">&quot;李晨&quot;</span>, <span class="string">&quot;苏有朋&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">clickEvent (index,value,$event) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(event);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>既能传入事件对象也能传入参数</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200724124102.png" alt="输出"></p><h2 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;one&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click.stop</span>=<span class="string">&quot;two&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>事件修饰符 <code>.stop</code> 用来阻止冒泡事件，如果没有加修饰符的话，当点击事件 <code>two</code> 被触发时，事件 <code>one</code> 也会被触发，加上修饰符之后就不会了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交2&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>默认情况下点击 提交1 会有一个 POST 请求被提交，通过 <code>.pervent</code> 修饰符阻止默认行为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click.once</span>=<span class="string">&quot;&quot;</span>&gt;</span>只触发一次点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>.once</code> 修饰符是只触发一次，第二次点击就没有效果了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keydown.enter</span>=<span class="string">&quot;search&quot;</span> <span class="attr">value</span>=<span class="string">&quot;回车&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><code>keydown</code> 是按键绑定，监听键盘按键的动作</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keydown.enter.f1</span>=<span class="string">&quot;search&quot;</span> <span class="attr">value</span>=<span class="string">&quot;回车和F1&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>同时绑定两个按键</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click.ctrl</span>=<span class="string">&quot;ctrlEvent&quot;</span>&gt;</span>按住Ctrl事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>按住 <code>Ctrl</code> 键再点击按钮才会触发事件，但是如果按住 <code>Ctrl </code> 和其他键也会触发，就需要精确的只识别 <code>Ctrl </code> 键：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click.ctrl.exact</span>=<span class="string">&quot;ctrlEvent&quot;</span>&gt;</span>按住Ctrl事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">keyCodes</span>.<span class="property">f1</span> = <span class="number">112</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>自定义按键修饰符</p><h2 id="Class-与-Style-样式绑定"><a href="#Class-与-Style-样式绑定" class="headerlink" title="Class 与 Style 样式绑定"></a>Class 与 Style 样式绑定</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background</span>: skyblue;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.page</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;active:isTrue&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 通过对象的方式决定是否存在某个类 --&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- 还可以直接放置对象： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;styleObj&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 还可以直接放置数组 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;styleArr&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 还可以放置字符串 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;styleStr&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 数组和对象混合使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;styleArrObj&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">isTrue</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">styleObj</span>:&#123;<span class="attr">active</span>:<span class="literal">true</span>,<span class="attr">test</span>:<span class="literal">true</span>,<span class="string">&quot;col-g-6&quot;</span>:<span class="literal">true</span>&#125;,<span class="comment">//可以写多个</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">styleArr</span>:[<span class="string">&quot;col-xs-12&quot;</span>,<span class="string">&quot;red-bg&quot;</span>],</span></span><br><span class="line"><span class="language-javascript"><span class="attr">styleStr</span>:<span class="string">&quot;abc cde efj&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">styleArrObj</span>:[<span class="string">&quot;abc&quot;</span>,&#123;<span class="attr">active</span>:<span class="literal">true</span>&#125;]</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- CSS内联样式变量拼接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 100px;height: 100px;background-color: skyblue;&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">:style</span>=<span class="string">&quot;&#123;border: borderWidth+&#x27;px solid red&#x27;,padding:paddingWidth+&#x27;px&#x27;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- CSS内联样式放置对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;styleObj&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- CSS数组的方式拼接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;styleSrr&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">borderWidth</span>:<span class="number">10</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">paddingWidth</span>:<span class="number">30</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">styleObj</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">width</span>:<span class="string">&quot;200px&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">height</span>:<span class="string">&quot;300px&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="string">&quot;background-color&quot;</span>:<span class="string">&quot;skyblue&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">styleSrr</span>:[</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">width</span>:<span class="string">&quot;200px&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">height</span>:<span class="string">&quot;300px&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="string">&quot;background-color&quot;</span>:<span class="string">&quot;skyblue&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">border</span>:<span class="string">&quot;5px solid yellow&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">]</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;com&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;chooseContent(1)&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;chooseContent(2)&quot;</span>&gt;</span>列表<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;chooseContent(3)&quot;</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;chooseContent(4)&quot;</span>&gt;</span>个人<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 创建组件</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> com1 = <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;index-com&#x27;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;index&#x27;</span>,<span class="comment">// 可以给组件定义名字，在is的值上使用</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">template</span>:<span class="string">`&lt;h1&gt;首页内容&lt;/h1&gt;`</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> com2 = <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;list-com&#x27;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">template</span>:<span class="string">`&lt;h1&gt;列表内容&lt;/h1&gt;`</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> com3 = <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;new-com&#x27;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">template</span>:<span class="string">`&lt;h1&gt;新闻内容&lt;/h1&gt;`</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> com4 = <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;me-com&#x27;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">template</span>:<span class="string">`&lt;h1&gt;个人内容&lt;/h1&gt;`</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">com</span>:com1,</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">chooseContent (id) &#123;<span class="comment">// 通过获取id来选择注册的组件</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">com</span> = <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">components</span>[<span class="string">&#x27;com&#x27;</span>+id]</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 注册组件</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">com1,com2,com3,com4</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="组件传值"><a href="#组件传值" class="headerlink" title="组件传值"></a>组件传值</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 从父组件传值到子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">product-com</span> @<span class="attr">choosproduct</span>=<span class="string">&quot;chooseEvent&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in proList&quot;</span> <span class="attr">:product</span>=<span class="string">&quot;item&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;&#x27;product&#x27;+index&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">product-com</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>选择的产品是：&#123;&#123;chooseProduct&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 产品组件</span></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;product-com&quot;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">props</span>:[<span class="string">&#x27;product&#x27;</span>],<span class="comment">// 告知传入的数据从根组件过来</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">template</span>:<span class="string">`&lt;li&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h3&gt;产品名称：&#123;&#123;product.title&#125;&#125;&lt;/h3&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h4&gt;产品描述：&#123;&#123;product.brief&#125;&#125;&lt;/h4&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;p&gt;产品价格：&#123;&#123;product.price&#125;&#125;&lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;button @click=&quot;chooseEvent(product)&quot;&gt;选择&lt;/button&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;/li&gt;`</span>,</span></span><br><span class="line"><span class="language-javascript">data () &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 子组件向父组件传值必须有一个触发事件</span></span></span><br><span class="line"><span class="language-javascript">chooseEvent (product) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.$emit(<span class="string">&quot;choosproduct&quot;</span>,product)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 根组件</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">proList</span>:[</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">title</span>:<span class="string">&quot;产品1&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">price</span>:<span class="string">&quot;10&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">brief</span>:<span class="string">&quot;描述1&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">title</span>:<span class="string">&quot;产品2&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">price</span>:<span class="string">&quot;20&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">brief</span>:<span class="string">&quot;描述2&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">],</span></span><br><span class="line"><span class="language-javascript"><span class="attr">chooseProduct</span>:<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">chooseEvent (data) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">chooseProduct</span> = data.<span class="property">title</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;className&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hello-com</span> <span class="attr">v-if</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">hello-com</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hello-com</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">hello-com</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> helloCom = <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;hello-com&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">template</span>: <span class="string">&quot;&lt;div&gt;&lt;h1&gt;&#123;&#123;hello&#125;&#125;&lt;/h1&gt; &lt;button @click=&#x27;changeData&#x27;&gt;修改数据&lt;/button&gt; &lt;/div&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">hello</span>: <span class="string">&#x27;helloWorld&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">changeData () &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">hello</span> = <span class="string">&quot;helloXiaoMing&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">beforeCreate () &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;brforeCreate&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 此时数据data和事件方法methods还未绑定到app对象上</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;create&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 数据和方法绑定到应用对象上</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">beforeMount</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 渲染之前，根据数据生成的DOM对象是获取不到的</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;brforeMount&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 渲染之后，可以获取到生成的DOM对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mounted&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">beforeUpdate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeUpdate&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 数据更改，但内容未更改之前</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">updated</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;update&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 内容已经更新完毕</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeDestory&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 应用销毁之前</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">destroyed</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;destory&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 应用销毁之后</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">msg</span>: <span class="string">&quot;helloVue&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">className</span>: <span class="string">&quot;redBg&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">isShow</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="string">&#x27;hello-com&#x27;</span>:helloCom</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;brforeCreate&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 此时数据data和事件方法methods还未绑定到app对象上</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">msg</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;create&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 数据和方法绑定到应用对象上</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">msg</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">beforeMount</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 渲染之前，根据数据生成的DOM对象是获取不到的</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;brforeMount&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> dom = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;redBg&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(dom)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 渲染之后，可以获取到生成的DOM对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mounted&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> dom = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;redBg&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(dom)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">beforeUpdate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeUpdate&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 数据更改，但内容未更改之前</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">updated</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;update&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 内容已经更新完毕</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeDestory&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 应用销毁之前</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">destroyed</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;destory&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 应用销毁之后</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">clickEvent () &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">isShow () &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">isShow</span> = !<span class="variable language_">this</span>.<span class="property">isShow</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>就先到这里，，，</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客开启PWA功能</title>
      <link href="/posts/cecbe2d2/"/>
      <url>/posts/cecbe2d2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Hexo版本：4.2.1</p><p>Butterfly版本：3.0.0 RC1</p></blockquote><h3 id="了解"><a href="#了解" class="headerlink" title="了解"></a>了解</h3><p>使用前先了解一下什么是PWA：</p><p>PWA（Progressive Web App）是一种理念，使用多种技术来增强 web app 的功能，可以让网站的体验变得更好，能够模拟一些原生功能，比如通知推送。在移动端利用标准化框架，让网页应用呈现和原生应用相似的体验。</p><p>PWA 不能包含原生OS相关代码。PWA 仍然是网站，只是在缓存、通知、后台功能等方面表现更好。Electron 程序相当于包裹OS原生启动器（Launcher）的网站，未来，许多Electron 程序可能转化为 PWA。</p><h3 id="启用"><a href="#启用" class="headerlink" title="启用"></a>启用</h3><p>在 Hexo 主题 <a href="https://demo.jerryc.me/">Butterfly</a> 3.0.0 RC1 版本中，作者已经集成了 PWA 特性，只是需要手动开启和设置一些参数。</p><h5 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h5><p><code>npm install hexo-offline --save</code> 或者 <code>yarn add hexo-offline</code> </p><h4 id="修改站点配置文件"><a href="#修改站点配置文件" class="headerlink" title="修改站点配置文件"></a>修改站点配置文件</h4><p>修改 <code>_config.yml</code> 文件，增加以下内容：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## offline config passed to sw-precache.</span></span><br><span class="line"><span class="attr">offline:</span></span><br><span class="line">  <span class="attr">maximumFileSizeToCacheInBytes:</span> <span class="number">10485760</span> <span class="comment">## 缓存的最大文件大小，以字节为单位</span></span><br><span class="line">  <span class="attr">staticFileGlobs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">public/**/*.&#123;js,html,css,png,jpg,gif,svg,webp,eot,ttf,woff,woff2&#125;</span></span><br><span class="line">  <span class="comment">## 静态文件合集，如果你的站点使用了例如webp格式的文件，请将文件类型添加进去。</span></span><br><span class="line">  <span class="attr">stripPrefix:</span> <span class="string">public</span></span><br><span class="line">  <span class="attr">verbose:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">runtimeCaching:</span></span><br><span class="line">    <span class="comment">## CDNs - should be cacheFirst, since they should be used specific versions so should not change</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">urlPattern:</span> <span class="string">/*</span> <span class="comment">## 如果你需要加载CDN资源，请配置该选项，如果没有，可以不配置。</span></span><br><span class="line">      <span class="attr">handler:</span> <span class="string">cacheFirst</span></span><br><span class="line">      <span class="attr">options:</span></span><br><span class="line">        <span class="attr">origin:</span> <span class="string">your_websie_url</span> <span class="comment">## 可替换成你的 url</span></span><br></pre></td></tr></table></figure><p>更多内容请查看 <a href="https://github.com/JLHwung/hexo-offline">hexo-offline</a> 的官方文档。</p><h5 id="配置主题设置"><a href="#配置主题设置" class="headerlink" title="配置主题设置"></a>配置主题设置</h5><p>修改 <code>butterfly.yml</code> 文件：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pwa:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">manifest:</span> <span class="string">/img/pwa/manifest.json</span></span><br><span class="line">  <span class="attr">theme_color:</span> <span class="string">&quot;#fff&quot;</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">/img/pwa/apple-touch-icon.png</span></span><br><span class="line">  <span class="attr">favicon_32_32:</span> <span class="string">/img/pwa/32.png</span></span><br><span class="line">  <span class="attr">favicon_16_16:</span> <span class="string">/img/pwa/16.png</span></span><br><span class="line">  <span class="attr">mask_icon:</span> <span class="string">/img/pwa/safari-pinned-tab.svg</span></span><br></pre></td></tr></table></figure><blockquote><p>这里的图标文件需要自己手动添加</p></blockquote><h5 id="配置-JSON-文件"><a href="#配置-JSON-文件" class="headerlink" title="配置 JSON 文件"></a>配置 JSON 文件</h5><p>在 <code>source/img/pwa/</code> 目录中创建 <code>manifest.json</code> 文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span> <span class="comment">//应用全称</span></span><br><span class="line">    <span class="attr">&quot;short_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Junzhou&quot;</span><span class="punctuation">,</span> <span class="comment">//应用简称</span></span><br><span class="line">    <span class="attr">&quot;theme_color&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#49b1f5&quot;</span><span class="punctuation">,</span> <span class="comment">//匹配浏览器的地址栏颜色</span></span><br><span class="line">    <span class="attr">&quot;background_color&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#49b1f5&quot;</span><span class="punctuation">,</span><span class="comment">//加载应用时的背景色</span></span><br><span class="line">    <span class="attr">&quot;display&quot;</span><span class="punctuation">:</span> <span class="string">&quot;standalone&quot;</span><span class="punctuation">,</span><span class="comment">//首选显示模式 其他选项有：fullscreen,minimal-ui,browser</span></span><br><span class="line">    <span class="attr">&quot;scope&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;icons&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="comment">//该数组指定icons图标参数，用来时适配不同设备（需为png，至少包含一个192px*192px的图标）</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pwaicons/36.png&quot;</span><span class="punctuation">,</span> <span class="comment">//图标文件的目录，这里的根目录是source/img/pwa/</span></span><br><span class="line">          <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;36x36&quot;</span><span class="punctuation">,</span><span class="comment">//在source/img/pwa下新建文件夹pwaicons，把下面的这几个图标文件放进去</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/png&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pwaicons/48.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;48x48&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/png&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pwaicons/72.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;72x72&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/png&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pwaicons/96.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;96x96&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/png&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pwaicons/144.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;144x144&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/png&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pwaicons/192.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192x192&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/png&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pwaicons/512.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;512x512&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/png&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;splash_pages&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span> <span class="comment">//配置自定义启动动画。</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意，JSON 文件是不建议有注释的可能会报错，建议删除注释</p></blockquote><p>你也可以通过 <a href="https://app-manifest.firebaseapp.com/">Web App Manifest</a> 快速创建 manifest.json（ Web App Manifest 要求至少包含一个 512*512 像素的图标）</p><p>可以通过 Chrome 插件 Lighthouse 检查 PWA 配置是否生效以及配置是否正确：</p><ul><li>打开博客页面</li><li>启动 Lighthouse 插件 ( Lighthouse 插件要求至少包含一个 512*512 像素的图标)</li></ul><p>关于 PWA（渐进式增强 Web 应用）的更多内容请参阅 <a href="https://developers.google.com/web/tools/lighthouse/audits/address-bar">Google Tools for Web Developers</a></p><blockquote><p>警告：如果要执行下面的操作，请卸载 <code>hexo-offline</code> 插件，并删除在 <code>_config.yml</code> 中的配置</p></blockquote><h3 id="另一种方法"><a href="#另一种方法" class="headerlink" title="另一种方法"></a>另一种方法</h3><p>需要注意的是，<code>manifest.json</code> 文件和 PWA 配置和上面一模一样，只是不需要 <code>offline</code> 配置和插件而已</p><h3 id="开启设置和配置-manifest-json"><a href="#开启设置和配置-manifest-json" class="headerlink" title="开启设置和配置  manifest.json"></a>开启设置和配置  manifest.json</h3><h4 id="安装插件-1"><a href="#安装插件-1" class="headerlink" title="安装插件"></a>安装插件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install workbox-build gulp --save-dev</span><br></pre></td></tr></table></figure><h3 id="创建-gulpfile-js-文件"><a href="#创建-gulpfile-js-文件" class="headerlink" title="创建 gulpfile.js 文件"></a>创建 gulpfile.js 文件</h3><p>在博客根目录，创建一个 <code>gulpfile.js</code> 文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">&quot;gulp&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> workbox = <span class="built_in">require</span>(<span class="string">&quot;workbox-build&quot;</span>);</span><br><span class="line"></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;generate-service-worker&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> workbox.<span class="title function_">injectManifest</span>(&#123;</span><br><span class="line">        <span class="attr">swSrc</span>: <span class="string">&#x27;./sw-template.js&#x27;</span>,</span><br><span class="line">        <span class="attr">swDest</span>: <span class="string">&#x27;./public/sw.js&#x27;</span>,</span><br><span class="line">        <span class="attr">globDirectory</span>: <span class="string">&#x27;./public&#x27;</span>,</span><br><span class="line">        <span class="attr">globPatterns</span>: [</span><br><span class="line">            <span class="string">&quot;**/*.&#123;html,css,js,json,woff2&#125;&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">modifyURLPrefix</span>: &#123;</span><br><span class="line">            <span class="string">&quot;&quot;</span>: <span class="string">&quot;./&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&quot;build&quot;</span>, gulp.<span class="title function_">series</span>(<span class="string">&quot;generate-service-worker&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="创建-sw-template-js-文件"><a href="#创建-sw-template-js-文件" class="headerlink" title="创建 sw-template.js 文件"></a>创建 sw-template.js 文件</h3><p>在博客的根目录里创建一个 <code>sw-template.js</code> 文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> workboxVersion = <span class="string">&#x27;5.1.3&#x27;</span>;</span><br><span class="line"></span><br><span class="line">importScripts(<span class="string">`https://storage.googleapis.com/workbox-cdn/releases/<span class="subst">$&#123;workboxVersion&#125;</span>/workbox-sw.js`</span>);</span><br><span class="line"></span><br><span class="line">workbox.<span class="property">core</span>.<span class="title function_">setCacheNameDetails</span>(&#123;</span><br><span class="line">    <span class="attr">prefix</span>: <span class="string">&quot;your name&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">workbox.<span class="property">core</span>.<span class="title function_">skipWaiting</span>();</span><br><span class="line"></span><br><span class="line">workbox.<span class="property">core</span>.<span class="title function_">clientsClaim</span>();</span><br><span class="line"></span><br><span class="line">workbox.<span class="property">precaching</span>.<span class="title function_">precacheAndRoute</span>(self.<span class="property">__WB_MANIFEST</span>);</span><br><span class="line"></span><br><span class="line">workbox.<span class="property">precaching</span>.<span class="title function_">cleanupOutdatedCaches</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Images</span></span><br><span class="line">workbox.<span class="property">routing</span>.<span class="title function_">registerRoute</span>(</span><br><span class="line">    <span class="regexp">/\.(?:png|jpg|jpeg|gif|bmp|webp|svg|ico)$/</span>,</span><br><span class="line">    <span class="keyword">new</span> workbox.<span class="property">strategies</span>.<span class="title class_">CacheFirst</span>(&#123;</span><br><span class="line">        <span class="attr">cacheName</span>: <span class="string">&quot;images&quot;</span>,</span><br><span class="line">        <span class="attr">plugins</span>: [</span><br><span class="line">            <span class="keyword">new</span> workbox.<span class="property">expiration</span>.<span class="title class_">ExpirationPlugin</span>(&#123;</span><br><span class="line">                <span class="attr">maxEntries</span>: <span class="number">1000</span>,</span><br><span class="line">                <span class="attr">maxAgeSeconds</span>: <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span></span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="keyword">new</span> workbox.<span class="property">cacheableResponse</span>.<span class="title class_">CacheableResponsePlugin</span>(&#123;</span><br><span class="line">                <span class="attr">statuses</span>: [<span class="number">0</span>, <span class="number">200</span>]</span><br><span class="line">            &#125;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fonts</span></span><br><span class="line">workbox.<span class="property">routing</span>.<span class="title function_">registerRoute</span>(</span><br><span class="line">    <span class="regexp">/\.(?:eot|ttf|woff|woff2)$/</span>,</span><br><span class="line">    <span class="keyword">new</span> workbox.<span class="property">strategies</span>.<span class="title class_">CacheFirst</span>(&#123;</span><br><span class="line">        <span class="attr">cacheName</span>: <span class="string">&quot;fonts&quot;</span>,</span><br><span class="line">        <span class="attr">plugins</span>: [</span><br><span class="line">            <span class="keyword">new</span> workbox.<span class="property">expiration</span>.<span class="title class_">ExpirationPlugin</span>(&#123;</span><br><span class="line">                <span class="attr">maxEntries</span>: <span class="number">1000</span>,</span><br><span class="line">                <span class="attr">maxAgeSeconds</span>: <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span></span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="keyword">new</span> workbox.<span class="property">cacheableResponse</span>.<span class="title class_">CacheableResponsePlugin</span>(&#123;</span><br><span class="line">                <span class="attr">statuses</span>: [<span class="number">0</span>, <span class="number">200</span>]</span><br><span class="line">            &#125;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Google Fonts</span></span><br><span class="line">workbox.<span class="property">routing</span>.<span class="title function_">registerRoute</span>(</span><br><span class="line">    <span class="regexp">/^https:\/\/fonts\.googleapis\.com/</span>,</span><br><span class="line">    <span class="keyword">new</span> workbox.<span class="property">strategies</span>.<span class="title class_">StaleWhileRevalidate</span>(&#123;</span><br><span class="line">        <span class="attr">cacheName</span>: <span class="string">&quot;google-fonts-stylesheets&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br><span class="line">workbox.<span class="property">routing</span>.<span class="title function_">registerRoute</span>(</span><br><span class="line">    <span class="regexp">/^https:\/\/fonts\.gstatic\.com/</span>,</span><br><span class="line">    <span class="keyword">new</span> workbox.<span class="property">strategies</span>.<span class="title class_">CacheFirst</span>(&#123;</span><br><span class="line">        <span class="attr">cacheName</span>: <span class="string">&#x27;google-fonts-webfonts&#x27;</span>,</span><br><span class="line">        <span class="attr">plugins</span>: [</span><br><span class="line">            <span class="keyword">new</span> workbox.<span class="property">expiration</span>.<span class="title class_">ExpirationPlugin</span>(&#123;</span><br><span class="line">                <span class="attr">maxEntries</span>: <span class="number">1000</span>,</span><br><span class="line">                <span class="attr">maxAgeSeconds</span>: <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span></span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="keyword">new</span> workbox.<span class="property">cacheableResponse</span>.<span class="title class_">CacheableResponsePlugin</span>(&#123;</span><br><span class="line">                <span class="attr">statuses</span>: [<span class="number">0</span>, <span class="number">200</span>]</span><br><span class="line">            &#125;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Static Libraries</span></span><br><span class="line">workbox.<span class="property">routing</span>.<span class="title function_">registerRoute</span>(</span><br><span class="line">    <span class="regexp">/^https:\/\/cdn\.jsdelivr\.net/</span>,</span><br><span class="line">    <span class="keyword">new</span> workbox.<span class="property">strategies</span>.<span class="title class_">CacheFirst</span>(&#123;</span><br><span class="line">        <span class="attr">cacheName</span>: <span class="string">&quot;static-libs&quot;</span>,</span><br><span class="line">        <span class="attr">plugins</span>: [</span><br><span class="line">            <span class="keyword">new</span> workbox.<span class="property">expiration</span>.<span class="title class_">ExpirationPlugin</span>(&#123;</span><br><span class="line">                <span class="attr">maxEntries</span>: <span class="number">1000</span>,</span><br><span class="line">                <span class="attr">maxAgeSeconds</span>: <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span></span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="keyword">new</span> workbox.<span class="property">cacheableResponse</span>.<span class="title class_">CacheableResponsePlugin</span>(&#123;</span><br><span class="line">                <span class="attr">statuses</span>: [<span class="number">0</span>, <span class="number">200</span>]</span><br><span class="line">            &#125;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">workbox.<span class="property">googleAnalytics</span>.<span class="title function_">initialize</span>();</span><br></pre></td></tr></table></figure><p>把 <code>prefix </code> 修改为你博客的名字（英文），如果你想用其它缓存策略，请自行查看<a href="https://developers.google.com/web/tools/workbox/modules/workbox-strategies">相关文档</a></p><h3 id="添加-js-文件进主题"><a href="#添加-js-文件进主题" class="headerlink" title="添加 js 文件进主题"></a>添加 js 文件进主题</h3><p>配置 <code>butterfly.yml</code> ，添加需要的 css 和 js 文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;&lt;style type=&quot;text/css&quot;&gt;.app-refresh&#123;position:fixed;top:-2.2rem;left:0;right:0;z-index:99999;padding:0 1rem;font-size:15px;height:2.2rem;transition:all .3s ease&#125;.app-refresh-wrap&#123;display:flex;color:#fff;height:100%;align-items:center;justify-content:center&#125;.app-refresh-wrap a&#123;color:#fff;text-decoration:underline;cursor:pointer&#125;&lt;/style&gt;&#x27;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;&lt;div class=&quot;app-refresh&quot; id=&quot;app-refresh&quot;&gt; &lt;div class=&quot;app-refresh-wrap&quot;&gt; &lt;label&gt;✨ 网站已更新最新版本 👉&lt;/label&gt; &lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;location.reload()&quot;&gt;点击刷新&lt;/a&gt; &lt;/div&gt;&lt;/div&gt;&lt;script&gt;function showNotification()&#123;if(GLOBAL_CONFIG.Snackbar)&#123;var t=&quot;light&quot;===document.documentElement.getAttribute(&quot;data-theme&quot;)?GLOBAL_CONFIG.Snackbar.bgLight:GLOBAL_CONFIG.Snackbar.bgDark,e=GLOBAL_CONFIG.Snackbar.position;Snackbar.show(&#123;text:&quot;已更新最新版本&quot;,backgroundColor:t,duration:5e5,pos:e,actionText:&quot;点击刷新&quot;,actionTextColor:&quot;#fff&quot;,onActionClick:function(t)&#123;location.reload()&#125;&#125;)&#125;else&#123;var o=`top: 0; background: $&#123;&quot;light&quot;===document.documentElement.getAttribute(&quot;data-theme&quot;)?&quot;#49b1f5&quot;:&quot;#1f1f1f&quot;&#125;;`;document.getElementById(&quot;app-refresh&quot;).style.cssText=o&#125;&#125;&quot;serviceWorker&quot;in navigator&amp;&amp;(navigator.serviceWorker.controller&amp;&amp;navigator.serviceWorker.addEventListener(&quot;controllerchange&quot;,function()&#123;showNotification()&#125;),window.addEventListener(&quot;load&quot;,function()&#123;navigator.serviceWorker.register(&quot;/sw.js&quot;)&#125;));&lt;/script&gt;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>在你运行 <code>hexo g</code> 后，记得要运行 <code>gulp build</code> 这样才会生效</p><blockquote><p>如果安装完插件发现 <code>gulp</code> 命令无法使用的话，请尝试全局安装：<code>npm install --global gulp-cli</code> </p></blockquote><blockquote><p>作者: Jerry<br>連結: <a href="https://demo.jerryc.me/posts/ceeb73f/#PWA">https://demo.jerryc.me/posts/ceeb73f/#PWA</a><br>來源: Butterfly<br>著作權歸作者所有。商業轉載請聯絡作者獲得授權，非商業轉載請註明出處。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> PWA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git提交时warning LF will be replaced by CRLF in报错</title>
      <link href="/posts/495c0aaf/"/>
      <url>/posts/495c0aaf/</url>
      
        <content type="html"><![CDATA[<p>报错截图：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200722083230.png" alt="报错信息截图"></p><p>在Windows下使用git经常会碰见这个报错，虽然说并不是啥影响的功能，但是看起来太难看了，而且提交一次就滚动好长好长，难免心里膈应，今天就百度了一下怎么解决，在这里记录一下。</p><h2 id="报错原因"><a href="#报错原因" class="headerlink" title="报错原因"></a>报错原因</h2><p>存在符号转义问题</p><p>Windows中的换行符为 <code>CRLF</code>， 而在Linux下的换行符为<code>LF</code>，所以在执行 <code>git add .</code> 时出现提示</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>简简单单：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.autocrlf false</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> LF </tag>
            
            <tag> CRLF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息收集之识别活跃的主机并查看打开端口</title>
      <link href="/posts/6382687a/"/>
      <url>/posts/6382687a/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200805145843.png"></p><h2 id="网络映射器工具Nmap"><a href="#网络映射器工具Nmap" class="headerlink" title="网络映射器工具Nmap"></a>网络映射器工具Nmap</h2><p>Nmap是一个免费开放的网络扫描嗅探工具包，也叫网络映射器。其主要功能有三个：一是探测一组主机是否在线；其次是扫描主机端口，嗅探所提供的网络服务；三是可以推断主机使用的操作系统。</p><p>Nmap使用TCP&#x2F;IP协议栈指纹准确的判断目标主机的操作系统类型，首先Nmap对目标主机进行端口扫描，找出哪些端口正在目标主机上监听。</p><h3 id="Nmap的工作原理"><a href="#Nmap的工作原理" class="headerlink" title="Nmap的工作原理"></a>Nmap的工作原理</h3><table><thead><tr><th>测试</th><th>描述</th></tr></thead><tbody><tr><td>T1</td><td>发送TCP数据包(Flag&#x3D;SYN)到开放的TCP端口上</td></tr><tr><td>T2</td><td>发送一个空的TCP数据包到开放的TCP端口上</td></tr><tr><td>T3</td><td>发送TCP数据包(Flag&#x3D;SYN、URG、PSH、FIN)到开放的TCP端口上</td></tr><tr><td>T4</td><td>发送TCP数据包(Flag&#x3D;ACK)到开放的TCP端口上</td></tr><tr><td>T5</td><td>发送TCP数据包(Flag&#x3D;SYN)到关闭的TCP端口上</td></tr><tr><td>T6</td><td>发送TCP数据包(Flag&#x3D;ACK)到关闭的TCP端口上</td></tr><tr><td>T7</td><td>发送TCP数据包(Flag&#x3D;URG、PSH、FIN)到关闭的TCP端口上</td></tr></tbody></table><p>Nmap对目标主机进行一系列测试，利用得出的测试结果建立相应目标主机的Nmap指纹。最后，将此Nmap指纹与指纹库中的指纹进行查找匹配，从而得出目标主机的操作系统类型。</p><p>Nmap主要扫描类型如下：</p><table><thead><tr><th>Ping扫描</th><th>端口扫描</th></tr></thead><tbody><tr><td>TCP SYN扫描</td><td>UDP扫描</td></tr><tr><td>操作系统识别</td><td>隐藏扫描</td></tr></tbody></table><h2 id="使用Nmap识别活跃主机"><a href="#使用Nmap识别活跃主机" class="headerlink" title="使用Nmap识别活跃主机"></a>使用Nmap识别活跃主机</h2><h3 id="查看一个主机是否在线"><a href="#查看一个主机是否在线" class="headerlink" title="查看一个主机是否在线"></a>查看一个主机是否在线</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sP [目标地址]</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200805144529.png"></p><p>输出的信息中包含目标主机域名、主机在线和MAC地址等。也可以使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nping --echo-client <span class="string">&quot;public&quot;</span> <span class="built_in">echo</span>.[目标地址]</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200805144541.png"></p><p>输出的信息显示了与echo.nmap.org网站链接时的数据发送情况，用户也可以发送一些指定的十六进制数据到指定端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nping -tcp -p 445 -data [数据内容] [目标地址]</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200805144552.png"></p><p>输出的信息显示了主机与目标主机之间的TCP传输过程，通过发送数据包到指定端口模拟出一些常见的网络层攻击，以验证目标主机对这些测试的防御情况。</p><h2 id="TCP端口扫描工具Nmap"><a href="#TCP端口扫描工具Nmap" class="headerlink" title="TCP端口扫描工具Nmap"></a>TCP端口扫描工具Nmap</h2><h3 id="查看目标开放端口号："><a href="#查看目标开放端口号：" class="headerlink" title="查看目标开放端口号："></a>查看目标开放端口号：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap [目标地址]</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200805144645.png"></p><h3 id="指定扫描1-1000之间的端口号"><a href="#指定扫描1-1000之间的端口号" class="headerlink" title="指定扫描1-1000之间的端口号"></a>指定扫描1-1000之间的端口号</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -p 1-1000 [目标地址]</span><br></pre></td></tr></table></figure><h3 id="扫描特定端口"><a href="#扫描特定端口" class="headerlink" title="扫描特定端口:"></a>扫描特定端口:</h3><p>例如扫描指定网段192.168.31.*内所有开放22端口的主机：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -p 22 192.168.31.*</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200805144756.png"></p><h3 id="指定扫描结果输出格式"><a href="#指定扫描结果输出格式" class="headerlink" title="指定扫描结果输出格式"></a>指定扫描结果输出格式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -p 22 192.168.31.* -oG /home/test.txt</span><br></pre></td></tr></table></figure><h2 id="图形化工具Zenmap"><a href="#图形化工具Zenmap" class="headerlink" title="图形化工具Zenmap"></a>图形化工具Zenmap</h2><p>Zenmap是NMAP官方推出的基于Nmap的安全扫描图形用户界面，它的设计目标是快速扫描大型网络。</p><blockquote><p>注：kali2020.1版本不自带Zenmap工具了，使用apt安装也无法安装，所以这里附上安装步骤</p></blockquote><p>下载RPM包：<a href="https://nmap.org/download.html">https://nmap.org/download.html</a></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200805144909.png"></p><p>安装RMP转DEB工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install alien fakeroot</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200805144919.png"></p><p>安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install alien fakeroot --fix-missing</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200805144941.png"></p><p>转换包rpm-&gt;deb：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fakeroot alien zenmap-7.80-1.noarch.rpm</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200805144948.png"></p><p>安装deb包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg -i zenmap_7.80-2_all.deb</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200805144956.png"></p><p>安装成功，如果碰到如下报错：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200805145004.png"></p><p>改一下环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/usr/loca/sbin:/usr/sbin:/sbin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>安装成功</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200805145104.png"></p><p>回到正题，打开Zenmap：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200805145111.png"></p><p>直接输入目标地址，开始扫描：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200805145118.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200805145125.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200805145131.png"></p><p>很多信息都能被扫描出来。</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息收集 </tag>
            
            <tag> 识别活跃主机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息收集之枚举服务</title>
      <link href="/posts/4a15da8f/"/>
      <url>/posts/4a15da8f/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200804170106.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>枚举是一类程序，它允许用户从一个网络中收集某一类的所有相关信息。</p><p>DNS枚举可以收集本地所有DNS服务和相关条目，可以帮助用户收集目标组织的关键信息，如用户名、计算机名和IP地址等，可以使用DNSenum工具来进行。</p><p>SNMP枚举可以帮助用户分析一个网络内SNMP信息传输，可以使用SnmpEnum工具。</p><h2 id="DNS枚举"><a href="#DNS枚举" class="headerlink" title="DNS枚举"></a>DNS枚举</h2><h3 id="DNSenum"><a href="#DNSenum" class="headerlink" title="DNSenum"></a>DNSenum</h3><p>它是一个很强大的域名信息收集工具，可以通过Google或者字典猜测到可能存在的域名并对一个网段进行反向查询。它不仅可以查询网站主机地址信息、域名服务器和邮件交换记录，还可以在域名服务器上执行axfr请求然后通过Google脚本得到扩展域名信息，提取子域名并查询，最后计算C类地址并执行whois查询，执行反向查询，把地址写入文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dnsenum --enum [目标地址]</span><br></pre></td></tr></table></figure><blockquote><p>注：Google脚本查询需要进行科学上网，这里不做演示</p></blockquote><p>以<strong>baidu.com</strong>为例：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200804172229.webp"></p><p>输出的信息显示了DNS服务器的相信信息，包括主机地址、域名服务地址和邮件服务地址，某些情况下还可以看到区域传输信息。</p><p>其他参数：</p><ul><li><strong>–threads [数字]</strong>  设置用户同时运行多个进程数</li><li><strong>-r</strong>  允许用户启动递归查询</li><li><strong>-d</strong>  允许用户设置whois请求之间的时间延迟，单位s</li><li><strong>-o</strong>  指定输出位置</li><li><strong>-w</strong>  启用whois请求</li></ul><h3 id="fierce"><a href="#fierce" class="headerlink" title="fierce"></a>fierce</h3><p>fierce主要对子域名进行扫描和收集信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fierce -dns [地址]</span><br></pre></td></tr></table></figure><p>获取目标主机上所有的IP地址和主机信息：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200804172414.webp"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200804172436.webp"></p><p>输出的信息显示了所有baudu.com下所有的子域，也可以通过一个字典执行相同的操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fierce -dns [目标地址] -wordlist hosts.txt [输出路径]</span><br></pre></td></tr></table></figure><h2 id="SNMP枚举工具"><a href="#SNMP枚举工具" class="headerlink" title="SNMP枚举工具"></a>SNMP枚举工具</h2><h3 id="Snmpwalk"><a href="#Snmpwalk" class="headerlink" title="Snmpwalk"></a>Snmpwalk</h3><p>它是一个SNMP应用程序，使用SNMP的GETNEXT请求，查询指定的所有OID (SNMP协议中的对象标识) 树信息，并输出。</p><p>使用 <code>snmpwalk -h</code> 查看命令帮助，了解参数。</p><p>普通测试主机：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">snmpwalk -c public [目标地址] -v 2c</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200804172633.webp"></p><p>枚举安装软件：（以ftp为例）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">snmpwalk -c public [目标地址] -v 1 | grep ftp</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200804172705.webp"></p><p>枚举目标主机打开的TCP端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">snmpwalk -c public [目标地址] -v 1 | grep tcpConnState | <span class="built_in">cut</span> -d <span class="string">&quot;.&quot;</span> -f6 | <span class="built_in">sort</span> -nu</span><br></pre></td></tr></table></figure><h3 id="Snmpcheck"><a href="#Snmpcheck" class="headerlink" title="Snmpcheck"></a>Snmpcheck</h3><p>它允许用户枚举SNMP设备的同时将结果以可读的方式输出。</p><blockquote><p>注：snmpcheck版本不同用法不同，命令格式也不同，在kali中甚至是两个软件，一个使用 <code>snmpcheck</code> 命令，一个使用 <code>snmp-check</code> 命令。</p></blockquote><p>直接扫描主机：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">snmp-check [目标地址]</span><br></pre></td></tr></table></figure><p>或者加上相应时间参数，单位秒：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">snmp-check -t [时间] [目标地址]</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200804172940.webp"></p><h4 id="分析获得的数据"><a href="#分析获得的数据" class="headerlink" title="分析获得的数据"></a>分析获得的数据</h4><p>首先输出的是枚举运行信息：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200804173111.webp"></p><p>获取系统信息，如主机名、操作系统类型及架构等：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200804173127.webp"></p><p>获取用户账户信息：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200804173144.webp"></p><p>获取网络信息，如TTL值、TCP段和数据元：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200804173237.webp"></p><p>从上到下依次为：是否启用IP转发、默认TTL值、收到TCP段、发送TCP段、重发TCP段、输入数据元、传输数据元、输出数据元。</p><p>获取网络接口信息：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200804173300.webp"></p><p>还有IP地址等信息：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200804173316.webp"></p><p>获取路由信息：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200804173500.webp"></p><p>获取监听的TCP端口：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200804173515.webp"></p><p>获取监听UDP端口信息：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200804173530.webp"></p><p>获取网络服务信息：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200804173546.webp"></p><p>获取进程信息：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200804173607.webp" alt="img"></p><p>获取存储信息：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200804173628.webp" alt="img"></p><p>获取设备信息：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200804173720.webp" alt="img"></p><p>获取WEB服务信息：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200804173732.webp" alt="img"></p><p>如果安装其他软件还会有软件组件信息等。</p><h2 id="SMTP枚举工具：smtp-user-enum"><a href="#SMTP枚举工具：smtp-user-enum" class="headerlink" title="SMTP枚举工具：smtp-user-enum"></a>SMTP枚举工具：smtp-user-enum</h2><p>它是针对SMTP服务器的25端口，进行用户名枚举的工具，用来探测服务器已存在的邮箱账户。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smtp-user-enum -M VRFY -U /[字典]/ -t [目标地址]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息收集 </tag>
            
            <tag> 枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息收集之测试网络范围</title>
      <link href="/posts/898da453/"/>
      <url>/posts/898da453/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200805150733.png"></p><h2 id="域名查询工具DMitry"><a href="#域名查询工具DMitry" class="headerlink" title="域名查询工具DMitry"></a>域名查询工具DMitry</h2><p>DMitry工具是用来查询IP或域名WHOIS信息的，WHOIS是用来查询域名是否已经被注册及已经注册域名的详细信息的数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dmitry -wnpb [目标]</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200805151013.png"></p><p>输出的信息显示了目标域名额IP地址、WHOIS信息以及开放端口等，虽然可以看到很多信息，但是还不能判断出这个网络范围，因为一般路由器和防火墙等并不支持IP地址范围的方式，所以经常要把IP地址转换成子网掩码的格式、CIDR格式和思科反向子网掩码格式等。</p><p>可以使用netmask工具进行IP范围、子网掩码、CIDR和Cisco等格式之间进行互相转换，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netmask -s laugh0608.github.io</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200805151034.png"></p><h2 id="跟踪路由工具Scapy"><a href="#跟踪路由工具Scapy" class="headerlink" title="跟踪路由工具Scapy"></a>跟踪路由工具Scapy</h2><p>Scapy是一个强大的交互式数据包处理工具、数据包生成器、网络扫描器、网络发现和包嗅探工具。它提供多种类别的交互式生成数据包或数据包集合、对数据包进行操作、发送数据包、包嗅探、应答和反馈匹配等功能。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scapy</span><br></pre></td></tr></table></figure><p><strong>启动工具：</strong></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200805151107.png"></p><p>使用 <code>sr()</code> 函数实现发送和接受数据包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ans,unans=sr(IP(dst=<span class="string">&quot;www.rzchina.net/30&quot;</span>,ttl=(1,6))/TCP())</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200805151129.png"></p><p>收到24个包，相应24个，保留0个数据包。</p><p>以表的形式查看数据包发送情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ans.make_table(lambda(s,r):(s.dst,s.ttl,r.src))</span><br></pre></td></tr></table></figure><p>因为python版本原因，命令失效，无法演示。</p><p>查看TCP路由跟踪信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res,unans=traceroute([<span class="string">&quot;www.google.com&quot;</span>,<span class="string">&quot;www.kali.org&quot;</span>,<span class="string">&quot;www.rzchina.net&quot;</span>],dport=[80,443],maxttl=20,retry=-2)</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200805151322.png"></p><p>输出的信息显示了Google、kali、rzchina三个网站链接后经过的地址，RA表示路由区，SA表示服务区。路由区是指当前系统中移动台当前的位置，RA（Routing Area）的标识符是RAI，RA是包含在LA内的。服务区是指移动台可获得服务的区域，即不同通信网用户无需知道移动台的实际位置而与之通信的区域。</p><p>图形模式显示路由跟踪结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.graph()</span><br></pre></td></tr></table></figure><p>我的攻击机的环境好像启动不来，但是爆出了窗体的代码，估计是个bug，不过可以使用以下命令另存为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.graph(target=<span class="string">&quot;&gt;/home/graph.svg&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200805151349.png"></p><p>使用 <code>exit()</code> 命令退出</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息收集 </tag>
            
            <tag> 测试网络范围 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WordPress扫描神器WPScan</title>
      <link href="/posts/dea784a2/"/>
      <url>/posts/dea784a2/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200803162328.png"></p><h3 id="环境准备："><a href="#环境准备：" class="headerlink" title="环境准备："></a>环境准备：</h3><ul><li>Kali Linux201904版本</li><li>WPScan3.7.5版本</li><li>WordPress靶机V16.0</li></ul><p>kali下载：<a href="https://www.kali.org/downloads/">https://www.kali.org/downloads/</a></p><p>靶机下载：<a href="https://www.turnkeylinux.org/wordpress">https://www.turnkeylinux.org/wordpress</a></p><p>虚拟机下载：<a href="https://www.virtualbox.org/wiki/Downloads">https://www.virtualbox.org/wiki/Downloads</a> （依照个人习惯即可，我喜欢用VBOX，VM也行）</p><h4 id="环境安装："><a href="#环境安装：" class="headerlink" title="环境安装："></a>环境安装：</h4><p>  虚拟机安装不多赘述，建议安装扩展包以便使用共享文件夹和粘贴互通，VM虚拟机里则是VM Tools。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200803155730.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200803155740.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200803155758.png"></p><p><strong>注：</strong>如果安装kali时遇到中文安装乱码（我之前装的201904版本就是这个bug，至于最新版的有无不知道了）参考：<a href="http://mp.weixin.qq.com/s?__biz=MzIxMjQ4NzExMQ==&mid=2247483676&idx=2&sn=b6d828460ca62cf0495bfa70312352c6&chksm=97441fb4a03396a2f75b906104e57f221166e440c110ce9ec8d171fb16150e6b54cb8aaad854&scene=21#wechat_redirect">解决Kali 201904版本中文安装乱码</a></p><h3 id="WPScan使用："><a href="#WPScan使用：" class="headerlink" title="WPScan使用："></a>WPScan使用：</h3><h4 id="wpscan-–hh"><a href="#wpscan-–hh" class="headerlink" title="wpscan –hh"></a>wpscan –hh</h4><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200803155828.png"></p><p>查看命令帮助和参数，或者使用 <code>man wpscan</code> 也可以。</p><h4 id="wpscan-–update"><a href="#wpscan-–update" class="headerlink" title="wpscan –update"></a>wpscan –update</h4><p>对漏洞库进行更新。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200803155859.png"></p><h4 id="wpscan-–url-地址"><a href="#wpscan-–url-地址" class="headerlink" title="wpscan –url [地址]"></a>wpscan –url [地址]</h4><p>对目标地址进行扫描，以靶机为例：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200803160324.png"></p><p>出现感叹号就是我们要着重注意的，如果出现红色感叹号就说明扫描到该目标网站存在漏洞。</p><h4 id="wpscan-–url-地址-–enumerate-u"><a href="#wpscan-–url-地址-–enumerate-u" class="headerlink" title="wpscan –url [地址] –enumerate u"></a>wpscan –url [地址] –enumerate u</h4><p>对目标网站进行用户枚举，<strong>enumerate</strong> 可简写成**-e**</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200803160343.png"></p><p>可以看到，目标靶机有两个用户。</p><h4 id="wpscan-–url-地址-P-root-passwdlist-txt"><a href="#wpscan-–url-地址-P-root-passwdlist-txt" class="headerlink" title="wpscan –url [地址] -P &#x2F;root&#x2F;passwdlist.txt"></a>wpscan –url [地址] -P &#x2F;root&#x2F;passwdlist.txt</h4><p>使用字典对网站所有用户进行爆破，例如：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200803160400.png"></p><p>针对某一个用户或者特定用户名集可以加上**-U<strong>或者</strong>–usernames LIST**参数：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200803160409.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200803160416.png"></p><h4 id="wpscan-–url-地址-e-vt"><a href="#wpscan-–url-地址-e-vt" class="headerlink" title="wpscan –url [地址] -e vt"></a>wpscan –url [地址] -e vt</h4><p>扫描主题漏洞：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200803160431.png"></p><h4 id="wpscan-–url-地址-e-pt"><a href="#wpscan-–url-地址-e-pt" class="headerlink" title="wpscan –url [地址] -e pt"></a>wpscan –url [地址] -e pt</h4><p>扫描插件漏洞：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN2/20200803160446.png"></p><p><strong>其他更多用法请参考：<a href="https://wpscan.org/">https://wpscan.org/</a></strong></p><blockquote><p>注：请在法律允许的范围内使用各种安全工具，规范合法的上网冲浪，从你我做起。</p></blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s?__biz=MzIxMjQ4NzExMQ==&mid=2247483872&idx=1&sn=cca7ac0d215a35f27d0940e26aa3a56a&chksm=97441f48a033965ef76d42f7ae00c3fdbd66aa6c7b1b03ebda9564329565a79e946c163812d1&scene=126&sessionid=1596441044&key=9255e861c291e6d576a93eec278d0b35c6810deee85922850a29fcf7700c58ab8e6ca18d5c343adc8b3686bfc2513450305c2c8141e252c1017f31e0d7ec6c0f9a995b4d2875e61188bd87a048214827&ascene=1&uin=MTM5NTczNDgxNw==&devicetype=Windows+10+x64&version=62090529&lang=zh_CN&exportkey=A5nV9+epRvjwLXlfz/jMoLs=&pass_ticket=wmyFZRGmVGBluVpVbuUdIAybT3cehJ1SUU9mHBzVD5gWBow7QRuDKmwr9Gsxz0fW">WPScan</a>enz</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WPScan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue基础篇(一)</title>
      <link href="/posts/57a97b51/"/>
      <url>/posts/57a97b51/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue-js是什么"><a href="#Vue-js是什么" class="headerlink" title="Vue.js是什么"></a>Vue.js是什么</h2><p>Vue (读音 &#x2F;vjuː&#x2F;，类似于 <strong>view</strong>) 是一套用于构建用户界面的<strong>渐进式框架</strong>。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Vue <strong>不支持</strong> IE8 及以下版本，因为 Vue 使用了 IE8 无法模拟的 ECMAScript 5 特性。但它支持所有兼容 ECMAScript 5 的浏览器。</p><h3 id="Vue-Devtools"><a href="#Vue-Devtools" class="headerlink" title="Vue Devtools"></a>Vue Devtools</h3><p>在使用 Vue 时，推荐在你的浏览器上安装 <a href="https://github.com/vuejs/vue-devtools#vue-devtools">Vue Devtools</a>。它允许你在一个更友好的界面中审查和调试 Vue 应用。</p><h3 id="直接用引入"><a href="#直接用引入" class="headerlink" title="直接用&lt;script&gt;引入"></a>直接用&lt;script&gt;引入</h3><p>直接下载并用<code>script</code>标签引入，<code>Vue</code> 会被注册为一个全局变量。</p><p>对于制作原型或学习，你可以这样使用最新版本：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对于生产环境，我们推荐链接到一个明确的版本号和构建文件，以避免新版本造成的不可预期的破坏：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.11&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果你使用原生 ES Modules，这里也有一个兼容 ES Module 的构建文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;https://cdn.jsdelivr.net/npm/vue@2.6.11/dist/vue.esm.browser.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以在 <a href="https://cdn.jsdelivr.net/npm/vue/">cdn.jsdelivr.net&#x2F;npm&#x2F;vue</a> 浏览 NPM 包的源代码</p><h3 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h3><p>在用 Vue 构建大型应用时推荐使用 NPM 安装。NPM 能很好地和诸如 <a href="https://webpack.js.org/">webpack</a> 或 <a href="http://browserify.org/">Browserify</a> 模块打包器配合使用。同时 Vue 也提供配套工具来开发<a href="https://cn.vuejs.org/v2/guide/single-file-components.html">单文件组件</a>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install vue -g</span></span><br></pre></td></tr></table></figure><h3 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h3><p>Vue 提供了一个<a href="https://github.com/vuejs/vue-cli">官方的 CLI</a>，为单页面应用 (SPA) 快速搭建繁杂的脚手架。它为现代前端工作流提供了 batteries-included 的构建设置。只需要几分钟的时间就可以运行起来并带有热重载、保存时 lint 校验，以及生产环境可用的构建版本。更多详情可查阅 <a href="https://cli.vuejs.org/">Vue CLI 的文档</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install -g @vue/cli</span></span><br></pre></td></tr></table></figure><blockquote><p>关于旧版本</p><p>Vue CLI 的包名称由 <code>vue-cli</code> 改成了 <code>@vue/cli</code>。 如果你已经全局安装了旧版本的 <code>vue-cli</code> (1.x 或 2.x)，你需要先通过 <code>npm uninstall vue-cli -g</code> 或 <code>yarn global remove vue-cli</code> 卸载它。</p></blockquote><blockquote><p>Node 版本要求</p><p>Vue CLI 需要 <a href="https://nodejs.org/">Node.js</a> 8.9 或更高版本 (推荐 8.11.0+)。你可以使用 <a href="https://github.com/creationix/nvm">nvm</a> 或 <a href="https://github.com/coreybutler/nvm-windows">nvm-windows</a> 在同一台电脑中管理多个 Node 版本。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue --version<span class="comment">#查看版本信息是否安装成功</span></span><br></pre></td></tr></table></figure><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vue create hello-world</span></span><br></pre></td></tr></table></figure><blockquote><p>警告</p><p>如果你在 Windows 上通过 minTTY 使用 Git Bash，交互提示符并不工作。你必须通过 <code>winpty vue.cmd create hello-world</code> 启动这个命令。不过，如果你仍想使用 <code>vue create hello-world</code>，则可以通过在 <code>~/.bashrc</code> 文件中添加以下行来为命令添加别名。 <code>alias vue=&#39;winpty vue.cmd&#39;</code> 你需要重新启动 Git Bash 终端会话以使更新后的 bashrc 文件生效。</p></blockquote><p>你会被提示选取一个 preset。你可以选默认的包含了基本的 Babel + ESLint 设置的 preset，也可以选“手动选择特性”来选取需要的特性。</p><h3 id="vuerc"><a href="#vuerc" class="headerlink" title="~&#x2F;.vuerc"></a>~&#x2F;.vuerc</h3><p>被保存的 preset 将会存在用户的 home 目录下一个名为 <code>.vuerc</code> 的 JSON 文件里。如果你想要修改被保存的 preset &#x2F; 选项，可以编辑这个文件。</p><p>在项目创建的过程中，你也会被提示选择喜欢的包管理器或使用<a href="https://npm.taobao.org/">淘宝 npm 镜像源</a>以更快地安装依赖。这些选择也将会存入 <code>~/.vuerc</code>。</p><h3 id="查看帮助："><a href="#查看帮助：" class="headerlink" title="查看帮助："></a>查看帮助：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vue create --<span class="built_in">help</span></span></span><br></pre></td></tr></table></figure><h3 id="使用图形化界面"><a href="#使用图形化界面" class="headerlink" title="使用图形化界面"></a>使用图形化界面</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vue ui</span></span><br></pre></td></tr></table></figure><p>会在浏览器启动一个图形化界面来创建项目，也可以通过此命令来图形化管理项目。</p><h3 id="拉取-2-x-模板-旧版本"><a href="#拉取-2-x-模板-旧版本" class="headerlink" title="拉取 2.x 模板 (旧版本)"></a>拉取 2.x 模板 (旧版本)</h3><p>Vue CLI &gt;&#x3D; 3 和旧版使用了相同的 <code>vue</code> 命令，所以 Vue CLI 2 (<code>vue-cli</code>) 被覆盖了。如果你仍然需要使用旧版本的 <code>vue init</code> 功能，你可以全局安装一个桥接工具：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install -g @vue/cli-init</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># `vue init` 的运行效果将会跟 `vue-cli@2.x` 相同</span></span></span><br><span class="line">vue init webpack my-project</span><br></pre></td></tr></table></figure><h2 id="插件和-Preset"><a href="#插件和-Preset" class="headerlink" title="插件和 Preset"></a>插件和 Preset</h2><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>Vue CLI 使用了一套基于插件的架构。如果你查阅一个新创建项目的 <code>package.json</code>，就会发现依赖都是以 <code>@vue/cli-plugin-</code> 开头的。插件可以修改 webpack 的内部配置，也可以向 <code>vue-cli-service</code> 注入命令。在项目创建的过程中，绝大部分列出的特性都是通过插件来实现的。</p><p>基于插件的架构使得 Vue CLI 灵活且可扩展。</p><blockquote><p>可以通过 <code>vue ui</code> 命令使用 GUI 安装和管理插件。</p></blockquote><h3 id="在现有的项目中安装插件"><a href="#在现有的项目中安装插件" class="headerlink" title="在现有的项目中安装插件"></a>在现有的项目中安装插件</h3><p>每个 CLI 插件都会包含一个 (用来创建文件的) 生成器和一个 (用来调整 webpack 核心配置和注入命令的) 运行时插件。当你使用 <code>vue create</code> 来创建一个新项目的时候，有些插件会根据你选择的特性被预安装好。如果你想在一个已经被创建好的项目中安装一个插件，可以使用 <code>vue add</code> 命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vue add @vue/eslint</span></span><br></pre></td></tr></table></figure><blockquote><p>提示</p><p><code>vue add</code> 的设计意图是为了安装和调用 Vue CLI 插件。这不意味着替换掉普通的 npm 包。对于这些普通的 npm 包，你仍然需要选用包管理器。</p></blockquote><blockquote><p>警告</p><p>我们推荐在运行 <code>vue add</code> 之前将项目的最新状态提交，因为该命令可能调用插件的文件生成器并很有可能更改你现有的文件。</p></blockquote><p>这个命令将 <code>@vue/eslint</code> 解析为完整的包名 <code>@vue/cli-plugin-eslint</code>，然后从 npm 安装它，调用它的生成器。</p><p>如果不带 <code>@vue</code> 前缀，该命令会换作解析一个 unscoped 的包。例如以下命令会安装第三方插件 <code>vue-cli-plugin-apollo</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 安装并调用 vue-cli-plugin-apollo</span></span><br><span class="line">$ vue add apollo</span><br></pre></td></tr></table></figure><p>你也可以基于一个指定的 scope 使用第三方插件。例如如果一个插件名为 <code>@foo/vue-cli-plugin-bar</code>，你可以这样添加它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vue add @foo/bar</span><br></pre></td></tr></table></figure><p>你可以向被安装的插件传递生成器选项 (这样做会跳过命令提示)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue add eslint --config airbnb --lintOn save</span><br></pre></td></tr></table></figure><p>如果一个插件已经被安装，你可以使用 <code>vue invoke</code> 命令跳过安装过程，只调用它的生成器。这个命令会接受和 <code>vue add</code> 相同的参数。</p><h3 id="项目本地的插件"><a href="#项目本地的插件" class="headerlink" title="项目本地的插件"></a>项目本地的插件</h3><p>如果你需要在项目里直接访问插件 API 而不需要创建一个完整的插件，你可以在 <code>package.json</code> 文件中使用 <code>vuePlugins.service</code> 选项：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;vuePlugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;service&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;my-commands.js&quot;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Preset"><a href="#Preset" class="headerlink" title="Preset"></a>Preset</h3><p>一个 Vue CLI preset 是一个包含创建新项目所需预定义选项和插件的 JSON 对象，让用户无需在命令提示中选择它们。</p><p>在 <code>vue create</code> 过程中保存的 preset 会被放在你的 home 目录下的一个配置文件中 (<code>~/.vuerc</code>)。你可以通过直接编辑这个文件来调整、添加、删除保存好的 preset。</p><p>这里有一个 preset 的示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;useConfigFiles&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;cssPreprocessor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sass&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;plugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@vue/cli-plugin-babel&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@vue/cli-plugin-eslint&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;config&quot;</span><span class="punctuation">:</span> <span class="string">&quot;airbnb&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;lintOn&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;save&quot;</span><span class="punctuation">,</span> <span class="string">&quot;commit&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@vue/cli-plugin-router&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@vue/cli-plugin-vuex&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Preset 的数据会被插件生成器用来生成相应的项目文件。除了上述这些字段，你也可以为集成工具添加配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;useConfigFiles&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;plugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>...<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;configs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;vue&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>...<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;postcss&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>...<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eslintConfig&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>...<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jest&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>...<span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这些额外的配置将会根据 <code>useConfigFiles</code> 的值被合并到 <code>package.json</code> 或相应的配置文件中。例如，当 <code>&quot;useConfigFiles&quot;: true</code> 的时候，<code>configs</code> 的值将会被合并到 <code>vue.config.js</code> 中。</p><h3 id="Preset-插件的版本管理"><a href="#Preset-插件的版本管理" class="headerlink" title="Preset 插件的版本管理"></a>Preset 插件的版本管理</h3><p>你可以显式地指定用到的插件的版本：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;plugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@vue/cli-plugin-eslint&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="comment">// ... 该插件的其它选项</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>注意对于官方插件来说这不是必须的——当被忽略时，CLI 会自动使用 registry 中最新的版本。不过我们推荐为 preset 列出的所有第三方插件提供显式的版本范围。</p><h3 id="允许插件的命令提示"><a href="#允许插件的命令提示" class="headerlink" title="允许插件的命令提示"></a>允许插件的命令提示</h3><p>每个插件在项目创建的过程中都可以注入它自己的命令提示，不过当你使用了一个 preset，这些命令提示就会被跳过，因为 Vue CLI 假设所有的插件选项都已经在 preset 中声明过了。</p><p>在有些情况下你可能希望 preset 只声明需要的插件，同时让用户通过插件注入的命令提示来保留一些灵活性。</p><p>对于这种场景你可以在插件选项中指定 <code>&quot;prompts&quot;: true</code> 来允许注入命令提示：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;plugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@vue/cli-plugin-eslint&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="comment">// 让用户选取他们自己的 ESLint config</span></span><br><span class="line">      <span class="attr">&quot;prompts&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="远程-Preset"><a href="#远程-Preset" class="headerlink" title="远程 Preset"></a>远程 Preset</h3><p>你可以通过发布 git repo 将一个 preset 分享给其他开发者。这个 repo 应该包含以下文件：</p><ul><li><code>preset.json</code>: 包含 preset 数据的主要文件（必需）。</li><li><code>generator.js</code>: 一个可以注入或是修改项目中文件的 <a href="https://cli.vuejs.org/zh/dev-guide/plugin-dev.html#generator">Generator</a>。</li><li><code>prompts.js</code> 一个可以通过命令行对话为 generator 收集选项的 <a href="https://cli.vuejs.org/zh/dev-guide/plugin-dev.html#%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8F%92%E4%BB%B6%E7%9A%84%E5%AF%B9%E8%AF%9D">prompts 文件</a>。</li></ul><p>发布 repo 后，你就可以在创建项目的时候通过 <code>--preset</code> 选项使用这个远程的 preset 了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 从 GitHub repo 使用 preset</span></span><br><span class="line">vue create --preset username/repo my-project</span><br></pre></td></tr></table></figure><p>GitLab 和 BitBucket 也是支持的。如果要从私有 repo 获取，请确保使用 <code>--clone</code> 选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vue create --preset gitlab:username/repo --<span class="built_in">clone</span> my-project</span><br><span class="line">vue create --preset bitbucket:username/repo --<span class="built_in">clone</span> my-project</span><br></pre></td></tr></table></figure><h3 id="加载文件系统中的-Preset"><a href="#加载文件系统中的-Preset" class="headerlink" title="加载文件系统中的 Preset"></a>加载文件系统中的 Preset</h3><p>当开发一个远程 preset 的时候，你必须不厌其烦的向远程 repo 发出 push 进行反复测试。为了简化这个流程，你也可以直接在本地测试 preset。如果 <code>--preset</code> 选项的值是一个相对或绝对文件路径，或是以 <code>.json</code> 结尾，则 Vue CLI 会加载本地的 preset：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## ./my-preset 应当是一个包含 preset.json 的文件夹</span></span><br><span class="line">vue create --preset ./my-preset my-project</span><br><span class="line"></span><br><span class="line"><span class="comment">## 或者，直接使用当前工作目录下的 json 文件：</span></span><br><span class="line">vue create --preset my-preset.json my-project</span><br></pre></td></tr></table></figure><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>你可以使用 <code>vue serve</code> 和 <code>vue build</code> 命令对单个 <code>*.vue</code> 文件进行快速原型开发，不过这需要先额外安装一个全局的扩展：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli-service-global</span><br></pre></td></tr></table></figure><p><code>vue serve</code> 的缺点就是它需要安装全局依赖，这使得它在不同机器上的一致性不能得到保证。因此这只适用于快速原型开发。</p><h3 id="vue-serve"><a href="#vue-serve" class="headerlink" title="vue serve"></a>vue serve</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Usage: serve [options] [entry]</span><br><span class="line"></span><br><span class="line">在开发环境模式下零配置为 .js 或 .vue 文件启动一个服务器</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"></span><br><span class="line">  -o, --open  打开浏览器</span><br><span class="line">  -c, --copy  将本地 URL 复制到剪切板</span><br><span class="line">  -h, --help  输出用法信息</span><br></pre></td></tr></table></figure><p>你所需要的仅仅是一个 <code>App.vue</code> 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;Hello!&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>然后在这个 <code>App.vue</code> 文件所在的目录下运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue serve</span><br></pre></td></tr></table></figure><p><code>vue serve</code> 使用了和 <code>vue create</code> 创建的项目相同的默认设置 (webpack、Babel、PostCSS 和 ESLint)。它会在当前目录自动推导入口文件——入口可以是 <code>main.js</code>、<code>index.js</code>、<code>App.vue</code> 或 <code>app.vue</code> 中的一个。你也可以显式地指定入口文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue serve MyComponent.vue</span><br></pre></td></tr></table></figure><p>如果需要，你还可以提供一个 <code>index.html</code>、<code>package.json</code>、安装并使用本地依赖、甚至通过相应的配置文件配置 Babel、PostCSS 和 ESLint。</p><h3 id="vue-build"><a href="#vue-build" class="headerlink" title="vue build"></a>vue build</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Usage: build [options] [entry]</span><br><span class="line"></span><br><span class="line">在生产环境模式下零配置构建一个 .js 或 .vue 文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"></span><br><span class="line">  -t, --target &lt;target&gt;  构建目标 (app | lib | wc | wc-async, 默认值：app)</span><br><span class="line">  -n, --name &lt;name&gt;      库的名字或 Web Components 组件的名字 (默认值：入口文件名)</span><br><span class="line">  -d, --dest &lt;dir&gt;       输出目录 (默认值：dist)</span><br><span class="line">  -h, --help             输出用法信息</span><br></pre></td></tr></table></figure><p>你也可以使用 <code>vue build</code> 将目标文件构建成一个生产环境的包并用来部署：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue build MyComponent.vue</span><br></pre></td></tr></table></figure><p><code>vue build</code> 也提供了将组件构建成为一个库或一个 Web Components 组件的能力。查阅<a href="https://cli.vuejs.org/zh/guide/build-targets.html">构建目标</a>了解更多。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>在项目目录下使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>来构建，使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure><p>来调试和预览效果。</p><h2 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h2><p>每个 Vue 应用都需要通过实例化 Vue 来实现。</p><p>语法格式如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="comment">// 选项</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">dir</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; msg &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">msg</span>: <span class="string">&#x27;hello world&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到在 Vue 构造器中有一个<code>el </code>参数，它是 DOM 元素中的<code> id</code></p><p>和传统的开发模式相比：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> msg = <span class="string">&#x27;hello world&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;msg&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    div.<span class="property">innerHTML</span> = msg;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ol><li>提供标签用于填充数据</li><li>引入vue.js文件</li><li>创建vue实例，使用vue语法功能</li><li>将vue提供的数据填充到标签中</li></ol><p>在新建vue对象时，需要传入参数<code>el</code> 和<code>data</code> ，双花括号 &#123;&#123; }} 就是插值</p><ul><li><code>el</code> 参数：元素的挂载位置，值可以是CSS选择器或者DOM元素</li><li><code>data</code> 参数：模型数据，值是一个对象</li><li>&#123;&#123; }} ：插值表达式，可以将数据填充到HTML标签中，且支持简单的计算操作，例如：<code>&#123;&#123;1 + 2&#125;&#125;</code> 或者字符串拼接<code>&#123;&#123;'hello' + 'world'&#125;&#125;</code></li></ul><h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><h3 id="前端渲染"><a href="#前端渲染" class="headerlink" title="前端渲染"></a>前端渲染</h3><p>模板+数据&#x3D;&gt;渲染&#x3D;&#x3D;静态内容</p><h3 id="模板语法概览"><a href="#模板语法概览" class="headerlink" title="模板语法概览"></a>模板语法概览</h3><ul><li>插值表达式</li><li>指令</li><li>事件绑定</li><li>属性绑定</li><li>样式绑定</li><li>分支循环结构</li></ul><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p>指令的本质就是自定义属性，指令一般以<code>v-</code> 开头，比如<code>v-cloak</code> </p><h4 id="v-cloak指令用法"><a href="#v-cloak指令用法" class="headerlink" title="v-cloak指令用法"></a>v-cloak指令用法</h4><p>插值表达式存在一个问题，就是它是先显示<code>&lt;div&gt;</code> 中的内容再替换成它的值，如果数据较多，资源较复杂就会存在延迟和内容闪动，就可以使用<code>v-cloak</code> 指令解决。</p><p>原理就是先隐藏该区块内容，等替换好值之后再显示最终的值。</p><ol><li><p>提供样式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[v-cloak]&#123;</span><br><span class="line">display: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在插值表达式所在的标签中添加指令</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-attr">[v-cloak]</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">//---------------------------分割线</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-cloak</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="数据绑定指令"><a href="#数据绑定指令" class="headerlink" title="数据绑定指令"></a>数据绑定指令</h4><ul><li><code>v-text</code> ：填充纯文本，相比插值表达式更加简洁</li><li><code>v-html</code> ：填充HTML片段，但是存在安全问题，且本网站内部数据可用，来自第三方数据不可用</li><li><code>v-pre</code> ：填充原始信息，跳过编译过程</li></ul><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">&#x27;msg&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//输出：</span><br><span class="line">hello world</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><p>考虑到用户体验或者开发者方便推荐使用指令，插值表达式如果写的完美还需要用到<code>v-cloak</code> 指令，比较麻烦</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">&#x27;msg&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&#x27;msg1&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">msg</span>: <span class="string">&#x27;hello world&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">msg1</span>: <span class="string">&#x27;&lt;h1&gt;hello&lt;/h1&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>输出：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721130248.png"></p><p>在网站上动态渲染任意HTML是非常危险的，非常容易导致XSS攻击，所以只可以在可信任的内容上使用<code>v-html</code> 指令，切记不要在用户提交的内容上。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">msg</span>: <span class="string">&#x27;hello world&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">输出：</span><br><span class="line">hello world</span><br><span class="line">&#123;&#123;msg&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="数据响应式"><a href="#数据响应式" class="headerlink" title="数据响应式"></a>数据响应式</h3><p>HTML中的响应式是屏幕的尺寸变化会导致样式的变化，数据响应式是指数据的变化导致页面内容的变化。</p><p><code>v-once</code> 指令指编译一次，显示内容之后不再具有响应式的功能。应用场景：如果显示的信息后续不需要修改，就可以使用这个指令，可以提高性能。</p><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-once</span>&gt;</span>&#123;&#123; msg1 &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样一来，在开发者工具控制台中，可以通过<code>vm.msg=123</code>来修改msg的显示但是不能通过<code>vm.msg1=123</code> 来修改msg1的内容。</p><h3 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h3><p>双向数据绑定就是例如显示一串内容，有一个输入框，在输入框中输入数据，显示的内容会实时更新。即用户可以修改页面内容</p><p>双向数据绑定要用到<code>v-mode</code> 指令：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> <span class="attr">v-mode</span>=<span class="string">&#x27;msg&#x27;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="MVVM设计思想"><a href="#MVVM设计思想" class="headerlink" title="MVVM设计思想"></a>MVVM设计思想</h4><p>就是把不同的功能的代码放在不同的模块里，再通过特定的方式联系起来。</p><ul><li>M：model</li><li>V：view</li><li>VM：view-model</li></ul><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721130307.png"></p><h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><h4 id="vue如何处理事件"><a href="#vue如何处理事件" class="headerlink" title="vue如何处理事件"></a>vue如何处理事件</h4><p><code>v-on</code> 指令用法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;button&#x27;</span> <span class="attr">v-on:click</span>=<span class="string">&#x27;num++&#x27;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><code>v-on</code> 简写：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;button&#x27;</span> @<span class="attr">click</span>=<span class="string">&#x27;num++&#x27;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">dir</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; num &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&#x27;num++&#x27;</span>&gt;</span>点击+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">num</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>按钮每点击一下网页内容加一显示。</p><h4 id="事件函数的调用方式"><a href="#事件函数的调用方式" class="headerlink" title="事件函数的调用方式"></a>事件函数的调用方式</h4><p>直接绑定函数的名称：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&#x27;say&#x27;</span>&gt;</span>test<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>调用函数：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click-</span>&#x27;<span class="attr">say</span>()&#x27;&gt;</span>test<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">dir</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-attr">[v-cloak]</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-cloak</span>&gt;</span>&#123;&#123; num &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&#x27;num++&#x27;</span>&gt;</span>点击+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;num++&#x27;</span>&gt;</span>点击+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&#x27;handle&#x27;</span>&gt;</span>点击+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&#x27;handle()&#x27;</span>&gt;</span>点击+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">num</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">handle</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//这里的this是vue的实例对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span> === vm);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">num</span>++;</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="事件函数参数传递"><a href="#事件函数参数传递" class="headerlink" title="事件函数参数传递"></a>事件函数参数传递</h4><p>普通的参数和事件对象：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&#x27;say(&quot;hi&quot;,$event)&#x27;</span>&gt;</span>test<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果事件直接绑定函数名称，那么默认会传递事件对象作为事件函数的第一个参数；如果事件绑定函数调用，那么事件对象必须作为最后一个参数显示传递，并且事件对象的名称必须是<code>$event</code> </p><h4 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h4><p><code>.stop</code> 阻止冒泡：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">&quot;handle&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>.prevent</code> 阻止默认行为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.prevent</span>=<span class="string">&quot;handle&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>什么是冒泡？例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">dir</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;num&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&#x27;handle0&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&#x27;handle1&#x27;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">num</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">handle0</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">num</span>++;</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">handle1</span>: <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>每点击一次<code>num</code>就加一，但是点击这个事件是<code>handle1</code>的，<code>handle0</code>之所以被触发，是因为冒泡到按钮外面的<code>div</code>从而触发<code>num++</code> ，这就是冒泡。</p><p>阻止冒泡：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">handle1</span>: <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">    event.<span class="title function_">stopPropagation</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时再点击按钮就不会进行加一，这就是传统方式的阻止冒泡。</p><p>这是Vue的语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">v-on:click.stop</span>=<span class="string">&#x27;handle1&#x27;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>默认行为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点击百度就会进行跳转，如果阻止这个默认行为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;handle2&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">handle2: function(event)&#123;</span><br><span class="line">event.preventDefault();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在点击百度就不会进行跳转，这是原生js的写法，vue的语法为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span> <span class="attr">v-on:click.prevent</span>=<span class="string">&quot;handle2&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还有其他的修饰符：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 提交事件不再重载页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 修饰符可以串联 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop.prevent</span>=<span class="string">&quot;doThat&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只有修饰符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 即内部元素触发的事件先在此处理，然后才交由内部元素进行处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.capture</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">&quot;doThat&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>具体可以参考<a href="https://cn.vuejs.org/v2/guide/events.html#%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6">官方文档</a>。</p><h4 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h4><p><code>.enter</code>回车键</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">&#x27;submit&#x27;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>.delete</code> 删除键</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.delete</span>=<span class="string">&#x27;handle&#x27;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">dir</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">          用户名：</span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;uname&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">          密码：</span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;pwd&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&#x27;handleSubmit&#x27;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">uname</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">pwd</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">handleSubmit</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">uname</span>, <span class="variable language_">this</span>.<span class="property">pwd</span>);</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这时只有点击提交按钮才会才控制台看到输入结果，如果想要按一下回车也可以进行提交就需要按键绑定：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">&#x27;handleSubmit&#x27;</span> <span class="attr">v-model</span>=<span class="string">&#x27;pwd&#x27;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样在输完密码直接按回车键就可以提交了。如果用户名输入错了，就要删除，一个一个删除很麻烦，使用按键绑定让按一次删除键就清空输入框：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-on:keyup.delete</span>=<span class="string">&#x27;clear&#x27;</span> <span class="attr">v-model</span>=<span class="string">&#x27;uname&#x27;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">clear: function()&#123;</span><br><span class="line">this.uname=&#x27;&#x27;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>官方还有很多其他的按键修饰符，请看官方文档，除此之外，还有<strong>自定义按键修饰符</strong>。</p><p>全局<code>config.keyCodes</code> 对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">keyCodes</span>.<span class="property">fi</span> = <span class="number">112</span></span><br></pre></td></tr></table></figure><p>键盘上的每一个键都有对应的值，那么怎么获取呢：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">dir</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">v-on:keyup</span>=<span class="string">&quot;handle&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">info</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">handle</span>: <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">keyCode</span>)</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样在输入框按下键的时候在控制台就会输出对应的按键值。</p><p>如何自定义按键值呢？就用到上面提到的那个全局对象：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">dir</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">v-on:keyup.aaa</span>=<span class="string">&quot;handle&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">keyCodes</span>.<span class="property">aaa</span> = <span class="number">65</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">info</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">handle</span>: <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">keyCode</span>)</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>名称是自定义的，但是对应的值必须是按键对应<code>event.keyCode</code> 的值。</p><h2 id="案例：简单计算器"><a href="#案例：简单计算器" class="headerlink" title="案例：简单计算器"></a>案例：简单计算器</h2><p>步骤：</p><ul><li>通过<code>v-model</code> 指令实现数值双向绑定，获取输入的数值</li><li>给计算按钮绑定事件，实现计算</li><li>将计算结果绑定到指定位置</li></ul><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">dir</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>简单计算器<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>数值A：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>数值B：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;b&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;button&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;handle&quot;</span>&gt;</span>计算<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>计算结果：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;result&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">a</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">b</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">result</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">handle</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">result</span> = <span class="built_in">parseInt</span>(<span class="variable language_">this</span>.<span class="property">a</span>) + <span class="built_in">parseInt</span>(<span class="variable language_">this</span>.<span class="property">b</span>);</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h3><p><code>v-bind</code> 指令用法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>缩写：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">dir</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span> <span class="attr">v-text</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span> <span class="attr">v-text</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;button&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;handle&quot;</span>&gt;</span>切换查询方式<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">url</span>: <span class="string">&quot;https://www.baidu.com&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">name</span>: <span class="string">&quot;BaiDu&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">handle</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">url</span>=<span class="string">&quot;https://www.csdn.net&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">name</span>=<span class="string">&quot;CSDN&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong><code>v-model</code> 指令双向数据绑定的底层设计</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">v-on:input</span>=<span class="string">&quot;msg=$evemt.target.value&quot;</span></span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">dir</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span> <span class="attr">v-text</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 三种不同风格的代码实现同一种功能 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">v-on:input</span>=<span class="string">&quot;handle&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">v-on:input</span>=<span class="string">&quot;msg=$event.target.value&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">msg</span>: <span class="string">&quot;hello&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">handle</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 使用输入域中最新的数据覆盖原来的数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">msg</span> = event.<span class="property">target</span>.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web安全基础</title>
      <link href="/posts/43902f53/"/>
      <url>/posts/43902f53/</url>
      
        <content type="html"><![CDATA[<h2 id="Web安全基础"><a href="#Web安全基础" class="headerlink" title="Web安全基础"></a>Web安全基础</h2><p>安全问题的本质是信任的问题。</p><p>最大的漏洞是人！</p><p>在解决安全问题的过程中，不可能一劳永逸，安全是一个持续的过程。</p><h2 id="安全三要素"><a href="#安全三要素" class="headerlink" title="安全三要素"></a>安全三要素</h2><p>在设计安全方案之前，要正确的、全面的看待安全问题。前辈们经过无数实践，最后将安全的属性总结为安全三要素，简称CIA：</p><ul><li>机密性 Confidentiality</li><li>完整性 Integrity</li><li>可用性 Avaliability</li></ul><p>机密性要求保护数据内容不能泄露，加密是实现机密性要求的常见手段。</p><p>完整性要求保护数据内容是完整、没有被篡改的。常见的保证一致性的技术手段是数字签名。</p><p>可用性要求保护资源是“随需而得”。</p><p>在安全领域中最基本的要素就是这三个，后来有人扩充了可审计性和不可抵赖性。</p><h2 id="如何实施安全评估"><a href="#如何实施安全评估" class="headerlink" title="如何实施安全评估"></a>如何实施安全评估</h2><p>一个安全评估的过程可以简单的分为四个阶段：</p><ul><li>资产等级划分</li><li>威胁分析</li><li>风险分析</li><li>确认解决方案</li></ul><p>如果面对的是一个尚未评估的系统，那么应该从第一个阶段开始实施，如果是由专职的安全团队长期维护的系统，那么有些阶段可以只实施一次。在这几个阶段中，上一个阶段将决定下一个阶段的目标，需要实施到什么程度。</p><h3 id="资产等级划分"><a href="#资产等级划分" class="headerlink" title="资产等级划分"></a>资产等级划分</h3><p>资产等级划分是所有工作的基础，能帮我们明确目标是什么，需要保护什么。</p><p>互联网安全的核心问题就是数据安全的问题。</p><p>每个公司对数据的侧重点不同，做资产等级划分的过程需要与各个业务部门的负责人一一沟通，了解公司最重要的资产是什么，为后续的安全评估过程指明方向。</p><p>当完成资产等级划分之后，接下来就是要划分信任域和信任边界了。通常会使用一种最简单的划分方式，就是从网络逻辑上划分，比如最重要的数据放在数据库里，那就把数据库的服务器圈起来，Web应用可以从数据库中读写数据并对外提供服务，那就再把Web服务器圈起来，最外面就是不可信任的Internet。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721130543.png"></p><p>这只是最简单的例子，实际中会遇到比这复杂很多的案例，比如同样是两个应用，互相之间存在数据交互，那么就要考虑到这里的数据交互对于各自应用来说是否可靠，应该在两个应用之间划一道边界，然后对流经边界的数据进行检查。</p><h3 id="威胁分析"><a href="#威胁分析" class="headerlink" title="威胁分析"></a>威胁分析</h3><p>信任域规划好之后，就要确定危险的来源。我们把可能造成危害的来源叫做威胁(Threat)，而把可能出现的损失成为风险(Risk)。风险一定是和损失联系在一起的，又分为两个阶段：威胁建模和风险分析。</p><p>最早由微软提出一种模型叫做STRIDE模型，分别是一下六个方面：</p><table><thead><tr><th>威胁</th><th>定义</th><th>对应的安全属性</th></tr></thead><tbody><tr><td>Spoofing(伪装)</td><td>冒充他人身份</td><td>认证</td></tr><tr><td>Tampering(篡改)</td><td>修改数据或代码</td><td>完整性</td></tr><tr><td>Repudiation(抵赖)</td><td>否认做过的事情</td><td>不可抵赖性</td></tr><tr><td>InformationDisclosure(信息泄露)</td><td>机密信息泄露</td><td>机密性</td></tr><tr><td>Denial of Service(拒绝服务)</td><td>拒绝服务</td><td>可用性</td></tr><tr><td>Elevation of Privilege(提升权限)</td><td>未经授权获得许可</td><td>授权</td></tr></tbody></table><p>在进行威胁分析时，要尽可能的不漏掉威胁，头脑风暴的过程可以确定攻击面(AttackSurface)。</p><p>漏洞的定义是：系统中可能被威胁利用以造成危害的地方。</p><p>在维护安全的过程中，攻击者往往就是利用事先完全没有想到的漏洞完成了入侵，这就是在确定攻击面时想的不够周全。</p><h3 id="风险分析"><a href="#风险分析" class="headerlink" title="风险分析"></a>风险分析</h3><p>风险由以下因素组成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Risk = Probability * Damage Potential</span><br></pre></td></tr></table></figure><p>影响风险高低的因素，除了造成损失的大小以外，还要考虑到发生的可能性。</p><p>举个例子来说，地震造成的损失无法估量，但是发生地震的概率非常小，但是如果是在四川这种地震频发的位置，那就不得不提高这种风险的预警。</p><p>科学的衡量风险，有一个DREAD模型，也是由微软提出的：</p><table><thead><tr><th>等级</th><th>高(3)</th><th>中(2)</th><th>低(1)</th></tr></thead><tbody><tr><td>DamagePotential</td><td>获取完全验证权限；执行管理员操作；非法上传文件</td><td>泄露敏感信息</td><td>泄露其他信息</td></tr><tr><td>Reproducibility</td><td>攻击者可以随意再次攻击</td><td>攻击者可以重复攻击，但有时间限制</td><td>攻击者很难重复攻击过程</td></tr><tr><td>Exploitability</td><td>初学者在短期内能掌握攻击方法</td><td>熟练的攻击者才能完成这次攻击</td><td>漏洞利用条件非常苛刻</td></tr><tr><td>Affected users</td><td>所有用户，默认配置，关键用户</td><td>部分用户，非默认配置</td><td>极少数用户，匿名用户</td></tr><tr><td>Discoverability</td><td>漏洞很显眼，攻击条件很容易获得</td><td>在私有区域，部分人能看到，需要深入挖掘漏洞</td><td>发现该漏洞极其困难</td></tr></tbody></table><p>在这个模型里，每一个因素都有高、中、低三个等级，每一个等级的3、2、1代表其权重值，因此我们可以具体的计算出某一个威胁的风险值。</p><p>比如，从正面进攻：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Risk = D(3) + R(3) + E(3) + A(3) + D(3) = 3+3+3+3+3 = 15</span><br></pre></td></tr></table></figure><p>绕一些小路：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Risk = D(3) + R(1) + E(1) + A(3) + D(1) = 3+1+1+3+1 = 9</span><br></pre></td></tr></table></figure><p>所以把风险高低定义如下：</p><ul><li>高危：12~15分</li><li>中危：8~11分</li><li>低危：0~7分</li></ul><p>但是在任何时候都应该记住，模型是死的人是活的，再好的模型也是需要人来用的，模型只是起到一个辅助的作用，最终做决策的还是人。</p><h3 id="设计安全方案"><a href="#设计安全方案" class="headerlink" title="设计安全方案"></a>设计安全方案</h3><p>安全评估的产出物就是安全解决方案，解决方案一定要有针对性，这种针对性是由等级划分、威胁分析、风险分析等阶段的结果给出的。</p><p>好的安全产品或模块除了要兼顾用户体验外，还要易于持续改进。一个好的安全模块，同时也应该是一个优秀的程序，从设计上也需要做到高聚合、低耦合、易于扩展。</p><p>最终一个优秀的安全方案应该具备以下特点：</p><ul><li>能够有效解决问题</li><li>用户体验好</li><li>高性能</li><li>低耦合</li><li>易于扩展和升级</li></ul><h2 id="白帽子技巧"><a href="#白帽子技巧" class="headerlink" title="白帽子技巧"></a>白帽子技巧</h2><h3 id="Secure-By-Default-原则"><a href="#Secure-By-Default-原则" class="headerlink" title="Secure By Default 原则"></a>Secure By Default 原则</h3><h4 id="黑名单、白名单"><a href="#黑名单、白名单" class="headerlink" title="黑名单、白名单"></a>黑名单、白名单</h4><p>例如在制定防火墙的网络访问控制策略时，如果只提供web服务，那么正确的做法是只允许网站服务器的80和443端口对外提供服务，屏蔽除此之外的其他端口，这就是一种典型的白名单做法。</p><p>如果上个例子使用的是黑名单规则，就可能出现问题，比如服务器不允许SSH连接，那么就会审计SSH的默认端口22，关闭其对Internet的开放，但是有些工程师为了偷懒或者图方便，会把端口改为2222或者其他，从而绕过安全策略。</p><h4 id="最小权限原则"><a href="#最小权限原则" class="headerlink" title="最小权限原则"></a>最小权限原则</h4><p>最小权限原则也是安全设计的基本原则之一。最小权限原则要求系统只授予主题必要的权限，不要过度授权。</p><p>最生动的例子就是Linux运维工程师都知道，最良好的操作习惯就是使用普通用户登录，而需要使用root权限时再使用sudo命令来完成。</p><h3 id="纵深防御原则"><a href="#纵深防御原则" class="headerlink" title="纵深防御原则"></a>纵深防御原则</h3><p>Defense in Depth(纵深防御) 也是设计安全方案时的重要思想。</p><p>纵深防御包含两层含义：首先，要在各个不同层面、不同方面实施安全方案，避免出现疏漏，不同安全方案之间需要相互配合，构成一个整体；其次，在解决根本问题的地方实施针对性的安全方案。</p><p>纵深防御并不是同一个安全方案要做多遍，而是要从不同层面、不同角度做出整体的解决方案。</p><p>常见的入侵案例中，大多数是利用web应用的漏洞攻击者先获得一个低权限的webshell然后通过低权限的webshell上传更多的文件，并尝试执行更高权限的系统命令，尝试在服务器上提升权限为root，接下来攻击者就会尝试再进一步渗透内网，比如数据库所在的网段。</p><p>在这类案例中，如果能在攻击过程中的任何一个环节设置有效的防范措施，都有可能会导致攻击过程功亏一篑。</p><p>就入侵的防御来说，需要考虑的可能有web应用安全、os系统安全、数据库安全、网络环境安全等。在这些不同的层面设计的安全方案，组成整个安全体系，这就是纵深防御的思想。</p><p>纵深防御的第二层含义，就是在对的地方做对的事。</p><p>举个例子就是XSS防御技术的发展，最初的时候只是过滤掉一些特殊字符，但是这种做法常常会改变用户原本想表达的意思。过滤用户输入并不合适，XSS真正产生危害的场景是在用户的浏览器上，或者说服务器输出的HTML页面，被注入了恶意代码。所以必须把防御方案放到最合适的地方去解决。</p><h3 id="数据与代码分离原则"><a href="#数据与代码分离原则" class="headerlink" title="数据与代码分离原则"></a>数据与代码分离原则</h3><p>这一原则广泛用于各种由于“注入”而引发的安全问题。实际上缓冲区溢出，程序在栈或者堆中，将用户数据当做代码执行，混淆了代码与数据的边界，就会导致安全问题的发生。</p><p>在web安全中，由于注入引起的问题有：XSS、SQL Injection、CRLF Injection、X-Path Injection等。</p><p>以XSS为例，它产生的原因是HTML Injection或者JavaScript injection，举个例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        test</span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        $var</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中<code>$var</code> 就是用户控制的变量，那么对于这段代码来说：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        test</span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>就是程序的代码执行片段而<code>$var</code> 就是程序的用户数据片段。如果把用户数据<code>$var</code> 当做代码片段来执行，就会引发安全问题，比如如果<code>$var</code> 的值是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://evil&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用户数据就会被注入到代码片段中，解析脚本并执行的过程，是由浏览器来完成的，浏览器将用户数据里的<code>&lt;script&gt;</code> 标签当做代码来解释。</p><p>根据数据与代码分离原则，在这里应该对用户数据片段<code>$var</code> 进行安全处理，可以使用过滤，编码等手段，把可能造成代码混淆的用户数据清理掉。</p><h3 id="不可预测性原则"><a href="#不可预测性原则" class="headerlink" title="不可预测性原则"></a>不可预测性原则</h3><p>Secure By Default是总则，纵深防御是更全面、更正确的看待问题，数据与代码分离是从漏洞成因上看问题，而不可预测性原则是从克服攻击方法的角度看待问题。</p><p>微软应对缓冲区溢出攻击的思路，使用DEP来保证堆栈不可执行，使用ASLR让进程的栈基址随机变化，从而使攻击程序无法准确的猜到内存地址，有一定的随机性，对于攻击者来说就是不可预测性。</p><p>不可预测性(Unpredictable)能有效地对抗基于篡改、伪造的攻击。</p><p>不可预测性原则可以巧妙的运用在一些敏感数据上，比如在CSRF的防御技术中，通常会使用一个token来进行有效防御，token能成功防御CSRF就是因为攻击者在实施CSRF攻击过程中，是无法提前预知这个token值的。</p><p>不可预测性的实现往往需要用到加密算法、随机数算法、哈希算法等。</p><h3 id="安全是一门朴素的学问，也是一种平衡的艺术。"><a href="#安全是一门朴素的学问，也是一种平衡的艺术。" class="headerlink" title="安全是一门朴素的学问，也是一种平衡的艺术。"></a>安全是一门朴素的学问，也是一种平衡的艺术。</h3><h2 id="浏览器安全"><a href="#浏览器安全" class="headerlink" title="浏览器安全"></a>浏览器安全</h2><h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h3><p>浏览器的同源策略，限制了来自不同源的“document”或者脚本，对当前”document”读取或设置某些属性。</p><p>a.com的一段JavaScript脚本，在b.com未曾加载此脚本时，也可以随意涂改b.com的页面（在浏览器里的显示），为了不让浏览器的页面行为发生混乱，浏览器提出了“Origin”源的概念，来自不同源的对象无法互相干扰。例如：</p><table><thead><tr><th>URL</th><th>Outcome</th><th>Reason</th></tr></thead><tbody><tr><td><a href="http://store.company.com/dir2/other.html">http://store.company.com/dir2/other.html</a></td><td>Success</td><td></td></tr><tr><td><a href="http://store.company.com/dir/inner/another.html">http://store.company.com/dir/inner/another.html</a></td><td>Success</td><td></td></tr><tr><td><a href="https://store.company.com/secure.html">https://store.company.com/secure.html</a></td><td>Faiure</td><td>Different protocol</td></tr><tr><td><a href="http://store.company.com:81/dir/etc.html">http://store.company.com:81/dir/etc.html</a></td><td>Faiure</td><td>Different port</td></tr><tr><td><a href="http://news.company.com/dir/other.html">http://news.company.com/dir/other.html</a></td><td>Faiure</td><td>Different host</td></tr></tbody></table><p>上表就是浏览器中JavaScript的同源策略，当JavaScript被浏览器认为来自不同源时，请求被拒绝。影响源的因素有：host(域名或IP地址，如果是IP地址则看做一个根域名)、子域名、端口、协议。</p><p>需要注意的是，对于当前页面来说，页面内存放JavaScript文件的域并不重要，重要的事加载JavaScript页面所在的域是什么。换句话来说，a.com可以通过以下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://b.com/b.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>加载了b.com上的b.js，但是b.js是运行在a.com页面中的，因此对当前打开的页面(a.com)来说，b.js的源就应该是a.com而非b.com。</p><p>在浏览器中，<code>&lt;script</code> 、<code>&lt;img&gt;</code> 、<code>&lt;iframe&gt;</code> 、<code>&lt;link&gt;</code>等标签都可以跨域加载资源，而不受同源策略的限制。</p><p>这些带<code>src</code> 属性的标签每次加载时，实际上就是由浏览器发起了一次GET请求，不同于XMLHttpRequest的是，通过<code>src</code> 的属性加载的资源，浏览器限制了JavaScript的权限，使其不能读、写返回的内容。</p><p>随着互联网的发展，跨域请求越来越迫切，因此W3C制定了XMLHttpRequest跨域访问标准，它需要通过目标返回的HTTP头来授权是否允许跨域访问，但是这一切都是建立在“JavaScript无法控制该HTTP头”，如果这个规则被打破，这个方案也再不安全。</p><p>以Flash为例，它主要通过目标网站提供的crossdomain.xml文件判断是否允许当前源的flash跨域访问目标资源。</p><h3 id="浏览器沙箱"><a href="#浏览器沙箱" class="headerlink" title="浏览器沙箱"></a>浏览器沙箱</h3><p>在网页中插入一段恶意代码，利用浏览器漏洞执行任意代码的攻击方式，在黑客圈子被形象的成为“挂马”。比如在Windows系统中，浏览器密切结合DEP、ASLR、SafeSEH等操作系统提供的保护技术，对抗内存攻击，与此同时浏览器还发展出了多进程架构，从安全性上有了很大保证。</p><p>Google Chrome是第一个采取多进程架构的浏览器。主要分为浏览器进程、渲染进程、插件进程、扩展进程。插件进程如flash、Java、PDF等于浏览器严格隔离，不互相影响。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721130604.png"></p><p>渲染引擎由sandbox隔离，网页代码要与浏览器内核进程通信、于操作系统通信都需要通过IPC channel，其中会进行一些安全检查。</p><p>sandbox即沙箱，现在泛指资源隔离模块。它的设计目的一般是为了让不可信任的代码运行在一定的环境中，限制不可信任的代码访问隔离区之外的资源。</p><h3 id="恶意网站拦截"><a href="#恶意网站拦截" class="headerlink" title="恶意网站拦截"></a>恶意网站拦截</h3><p>目前来说，各个浏览器的拦截恶意网址的功能都是基于黑名单规则的，工作原理很简单，一般都是浏览器周期性的从服务器端获取一份最新的恶意网址名单，如果用户访问就会拦截警告。</p><p>常见的恶意网址分为两类，一类是挂马网站，这些网站通常包含有恶意的脚本如JavaScript或者Flash，通过利用浏览器的漏洞执行shellcode，在用户电脑中植入木马，另一类是钓鱼网站，通过模仿知名网站的相似页面来欺骗用户。</p><p>要识别这两种网址，需要建立很多基于页面特征的模型，而这些模型显然是不适合放在客户端的，因为会让攻击者分析研究并绕过这些规则。同时对于收集用户浏览历史是一种侵犯隐私权的行为。</p><p>基于这两种原因，浏览器厂商目前只是以推送恶意网站黑名单为主，一般而言，浏览器厂商选择与专业的安全厂商或机构合作，由他们定期提供黑名单。</p><p>除了黑名单拦截功能之外，现在也有EV SSL证书以增强对安全网站的识别。这个证书是全球数字证书颁发机构与浏览器厂商一起打造的增强型证书，其主要特色是浏览器会给予EVSSL证书特殊待遇。</p><blockquote><p>现在的浏览器飞速发展，更完备的安全性能，更丰富的功能和扩展，同时也带来了更大的挑战。</p></blockquote><h2 id="跨站脚本攻击XSS"><a href="#跨站脚本攻击XSS" class="headerlink" title="跨站脚本攻击XSS"></a>跨站脚本攻击XSS</h2><h3 id="XSS简介"><a href="#XSS简介" class="headerlink" title="XSS简介"></a>XSS简介</h3><p>跨站脚本攻击，英文全称是Cross Site Script本来缩写是CSS，但是为了和层叠样式表(Casading Style Sheet)区别，所以在安全领域叫做XSS。</p><p>XSS攻击通常指黑客通过“HTML注入“篡改了网页，插入恶意的脚本从而在用户浏览网页的时候，控制用户浏览器的一种攻击方式。</p><p>XSS长期以来被列为客户端Web安全的头号大敌。因为XSS破坏力强大且产生的场景复杂，难以一次性解决，业内达成的共识是：针对各种不同场景产生的XSS，需要区分情景对待，即便如此，复杂的应用环境仍然是XSS滋生的温床。</p><p>那么到底什么是XSS呢？举一个具体的例子：</p><p>假设一个页面把用户输入的参数直接输入在页面上：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$input</span> = <span class="variable">$_GET</span>[<span class="string">&quot;param&quot;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;div&gt;&quot;</span>.<span class="variable">$input</span>.<span class="string">&quot;&lt;/div&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在正常情况下用户向param提交的数据会展示到页面中，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.43/test.php?parm=测试</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721130613.png"></p><p>网页的源代码可以看到：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    测试</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果要是提交一段HTML代码呢：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//192.168.1.43/test.php?param=&lt;script&gt;alert(/XSS/)&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>结果：<img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721130619.png"></p><p>代码被成功执行，网页源代码中也被插入了脚本的代码。</p><p>这就是XSS的第一种类型：反射型XSS</p><p>XSS按照效果的不同可以分为以下几类：</p><ul><li>反射型XSS：只是简单的把用户输入的数据“反射”给浏览器，也就是说黑客往往需要诱导用户“点击”一个恶意链接才能攻击成功，所以也叫“非持久型XSS”(Non-persistent XSS)</li><li>存储型XSS：存储型XSS会把用户输入的数据“存储”在服务器端，具有很强的稳定性。也叫“持久性XSS”(Persistent XSS)</li><li>DOM Based XSS：从效果上来说也是反射型XSS，单独提出来是因为它的形成原因比较特殊复杂。</li></ul><p>通过修改页面DOM节点形成的XSS，称之为DOM Based XSS，举个例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = document.<span class="title function_ invoke__">getElementById</span>(<span class="string">&quot;test&quot;</span>).value;</span><br><span class="line">    document.<span class="title function_ invoke__">getElementById</span>(<span class="string">&quot;t&quot;</span>).innerHTML = <span class="string">&quot;&lt;a href=&#x27; &quot;</span>+str+<span class="string">&quot; &#x27; &gt;testLink&lt;/a&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">&quot;t&quot;</span>&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;text&quot;</span> value=<span class="string">&quot;&quot;</span>/&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> id=<span class="string">&quot;s&quot;</span> value=<span class="string">&quot;write&quot;</span> onclick=<span class="string">&quot;test()&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
            <tag> WebSec </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Makefile基础</title>
      <link href="/posts/6f34c617/"/>
      <url>/posts/6f34c617/</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><h3 id="什么是makefile"><a href="#什么是makefile" class="headerlink" title="什么是makefile"></a>什么是makefile</h3><p>一个工程中的源文件不计其数，其按类型、功能、模块分别放在若干个目录中，makefile定义了一系列的规则来指定哪些文件需要先编译，哪些文件需要后编译，哪些文件需要重新编译，甚至于进行更复杂的功能操作，因为 makefile就像一个<a href="https://baike.baidu.com/item/Shell%E8%84%9A%E6%9C%AC">Shell脚本</a>一样，也可以执行操作系统的<a href="https://baike.baidu.com/item/%E5%91%BD%E4%BB%A4/8135974">命令</a>。（摘自百度百科）</p><p>简单来说就是面对大型项目中的源文件手动一个个执行编译太过繁琐，建立makefile文件进行一键执行，是Linux下进行开发的重要工具。</p><p>当然Windows下就几乎用不到，因为有很多方便的IDE。</p><h3 id="编译和链接"><a href="#编译和链接" class="headerlink" title="编译和链接"></a>编译和链接</h3><p>无论是C语言还是C++，都需要把源文件先编译成中间目标文件，就是<code>.o</code> 文件即ObjectFile，这个动作就是编译。然后再把相关中间目标文件合成执行文件，这个动作叫做链接。</p><h3 id="makefile"><a href="#makefile" class="headerlink" title="makefile"></a>makefile</h3><p><code>make</code> 命令执行时，需要一个makefile文件，告诉<code>make</code> 命令该以什么规则去编译源文件。</p><p>举一个例子，我们有一个工程需要编译，可能会出现以下方案：</p><ul><li>该工程没有被编译过，所有的c文件都要进行编译和链接</li><li>该工程只有一部分c文件被修改，需要重新编译</li><li>该工程的头文件改变，需要编译引用了这个头文件的源文件并链接目标程序</li></ul><p>只要定义好了makefile文件，我们就只需要执行一次<code>make</code> 命令就可以方便的完成编译任务。</p><h3 id="make命令运行方式"><a href="#make命令运行方式" class="headerlink" title="make命令运行方式"></a>make命令运行方式</h3><ol><li>读入所有的Makefile。</li><li>读入被include的其它Makefile。</li><li>初始化文件中的变量。</li><li>推导隐晦规则，并分析所有规则。</li><li>为所有的目标文件创建依赖关系链。</li><li>根据依赖关系，决定哪些目标要重新生成。</li><li>执行生成命令。</li></ol><p>1-5步为第一个阶段，6-7为第二个阶段。第一个阶段中，如果定义的变量被使用了，那么，make会把其展 开在使用的位置。但make并不会完全马上展开，make使用的是拖延战术，如果变量出现在依赖关系的规则 中，那么仅当这条依赖被决定要使用了，变量才会在其内部展开。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">target:prerequisites</span></span><br><span class="line">commands</span><br></pre></td></tr></table></figure><ul><li>target：可以是目标文件、执行文件、标签</li><li>prerequisites：生成该target所依赖的文件和&#x2F;或target</li><li>command：该target要执行的命令</li></ul><p>这是一个文件的依赖关系，也就是说，target这一个或多个的目标文件依赖于prerequisites中的文件， 其生成规则定义在command中。说白一点就是说:</p><p>prerequisites中如果有一个以上的文件比target文件要新的话，command所定义的命令就会被执行。</p><p>这就是makefile的规则，也是核心内容。</p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">foo.o: foo.c defs.h</span></span><br><span class="line">    cc -c -g foo.c</span><br></pre></td></tr></table></figure><p><code>foo.o</code> 是我们的目标， <code>foo.c</code> 和 <code>defs.h</code> 是目标所依赖的源文件，而只有一个命令 <code>cc -c -g foo.c</code> （以Tab键开头）。这个 规则告诉我们两件事：</p><ol><li>文件的依赖关系， <code>foo.o</code> 依赖于 <code>foo.c</code> 和 <code>defs.h</code> 的文件，如果 <code>foo.c</code> 和 <code>defs.h</code> 的文件日期要比 <code>foo.o</code> 文件日期要新，或是 <code>foo.o</code> 不存在，那么依赖 关系发生。</li><li>生成或更新 <code>foo.o</code> 文件，就是那个cc命令。它说明了如何生成 <code>foo.o</code> 这个文件。 （当然，<code>foo.c</code>文件<code>include</code>了<code>defs.h</code>文件）</li></ol><h3 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h3><p>如果工程中源文件较多，新增或者删除文件就容易弄混，就可以使用变量来定义：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">object=main.o aaa.o bbb.o ccc.o ddd.o</span><br></pre></td></tr></table></figure><p>然后就可以使用<code>$(object)</code> 来使用变量：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">object=main.o aaa.o bbb.o ccc.o ddd.o</span><br><span class="line"><span class="section">edit:<span class="variable">$(object)</span></span></span><br><span class="line">cc -o edit <span class="variable">$(object)</span></span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>:clean</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm edit <span class="variable">$(object)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Makefile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础篇(一)</title>
      <link href="/posts/a9ba4134/"/>
      <url>/posts/a9ba4134/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript实现"><a href="#JavaScript实现" class="headerlink" title="JavaScript实现"></a>JavaScript实现</h2><p>一个完整的javascript实现应该由三个部分组成：</p><ul><li>核心（ECMAScript）</li><li>文档对象模型（DOM）</li><li>浏览器对象模型（BOM）</li></ul><h3 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h3><p>由 ECMA-262 定义的 ECMAScript 与 Web 浏览器没有依赖关系。实际上，这门语言本身并不包含输 入和输出定义。Web 浏览器只是 ECMAScript 实现可能的宿主环境之一。</p><p>ECMA-262 标准规定了这门语言有 下列组成部分：</p><ul><li>语法</li><li>类型</li><li>语句</li><li>关键字</li><li>保留字</li><li>操作符</li><li>对象</li></ul><p>ECMAScript 就是对实现该标准规定的各个方面内容的语言的描述。</p><p><strong>什么是ECMAScript 兼容？</strong></p><ul><li>支持 ECMA-262 描述的所有“类型、值、对象、属性、函数以及程序句法和语义”</li><li>支持 Unicode 字符标准</li><li>添加 ECMA-262 没有描述的“更多类型、值、对象、属性和函数”。ECMA-262 所说的这些新增 特性，主要是指该标准中没有规定的新对象和对象的新属性。</li><li>支持 ECMA-262 没有定义的“程序和正则表达式语法”。（也就是说，可以修改和扩展内置的正 则表达式语法。）</li></ul><h3 id="文档对象模型（DOM）"><a href="#文档对象模型（DOM）" class="headerlink" title="文档对象模型（DOM）"></a>文档对象模型（DOM）</h3><p>文档对象模型（DOM，Document Object Model）是针对 XML 但经过扩展用于 HTML 的应用程序编 程接口（API，Application Programming Interface）。</p><p>DOM 把整个页面映射为一个多层节点结构。HTML 或 XML 页面中的每个组成部分都是某种类型的节点，这些节点又包含着不同类型的数据。</p><p>举个例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Sample Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>DOM分层节点图:</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721093638.png"></p><p>通过 DOM 创建的这个表示文档的树形图，开发人员获得了控制页面内容和结构的主动权。借助 DOM 提供的 API，开发人员可以轻松自如地删除、添加、替换或修改任何节点。</p><h3 id="浏览器对象模型（BOM）"><a href="#浏览器对象模型（BOM）" class="headerlink" title="浏览器对象模型（BOM）"></a>浏览器对象模型（BOM）</h3><p>从根本上讲，BOM 只处理浏览器窗口和框架；但人们习惯上也把所有针对浏览器的 JavaScript 扩展 算作 BOM 的一部分。下面就是一些这样的扩展：</p><ul><li>弹出新浏览器窗口的功能</li><li>移动、缩放和关闭浏览器窗口的功能</li><li>提供浏览器详细信息的 navigator 对象</li><li>提供浏览器所加载页面的详细信息的 location 对象</li><li>提供用户显示器分辨率详细信息的 screen 对象</li><li>对 cookies 的支持</li><li>像 XMLHttpRequest 和 IE 的 ActiveXObject 这样的自定义对象</li></ul><p>由于没有 BOM 标准可以遵循，因此每个浏览器都有自己的实现，但是现在有了 HTML5，BOM 实现的细节有望朝着兼容性越来越高的方向发展。</p><h2 id="元素"><a href="#元素" class="headerlink" title="&lt;script&gt;元素"></a>&lt;script&gt;元素</h2><p>在HTML中插入javascript就要使用到<code>&lt;script&gt;</code>元素，H5中script的新特性：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721093643.png"></p><p>使用<code>&lt;script&gt;</code> 元素的方式有两种：</p><ul><li>直接页面嵌入</li><li>包含外部文件</li></ul><p>直接嵌入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"> <span class="title function_">alert</span>(<span class="string">&quot;Hi!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"> &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br></pre></td></tr></table></figure><blockquote><p>在使用<code>&lt;script&gt;</code>嵌入 JavaScript 代码时，记住不要在代码中的任何地方出现”&lt;&#x2F;script&gt;”字符串，除非是代码结束，如果要打印这个内容，请记得使用转义符。</p></blockquote><p>引用<code>.js</code>外部文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;example.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>按照惯例，外部 JavaScript 文件带有.js 扩展名。但这个扩展名不是必需的，因为 浏览器不会检查包含 JavaScript 的文件的扩展名。这样一来，使用 JSP、PHP 或其他 服务器端语言动态生成 JavaScript 代码也就成为了可能。但是，服务器通常还是需要 看扩展名决定为响应应用哪种 MIME 类型。如果不使用.js 扩展名，请确保服务器能 返回正确的 MIME 类型。</p></blockquote><p><strong>需要注意的是</strong>，带有 <code>src </code>属性的标签之间再 包含额外的 JavaScript 代码。如果包含了嵌入的代码，则只会下载并执行外部脚本文件，嵌入的代码 会被忽略。</p><p>当然，除了指定外部文件之外，还可以使用CDN，<code>src</code> 属性的值还可以是完整的URL。</p><h3 id="标签的位置"><a href="#标签的位置" class="headerlink" title="标签的位置"></a>标签的位置</h3><p>按照传统的做法，所有<code>&lt;script&gt;</code>元素都应该放在页面的<code>&lt;head&gt;</code>元素中，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>Example HTML Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;example1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;example2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 这里放内容 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果把js文件放在<code>&lt;head&gt;</code> 中，则意味着必须等到全部的js文件被下载完成之后才能开始呈现页面内容，无疑会增加页面延迟。为了解决这个问题，一般而言会把js文件放在<code>&lt;/body&gt;</code> 之前，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>Example HTML Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 这里放内容 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;example1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;example2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="延迟脚本"><a href="#延迟脚本" class="headerlink" title="延迟脚本"></a>延迟脚本</h3><p>HTML 4.01 为<code>&lt;script&gt;</code>标签定义了 defer 属性，表明脚本在执行时不会影响页 面的构造。也就是说，脚本会被延迟到整个页面都解析完毕后再运行：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>Example HTML Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">defer</span>=<span class="string">&quot;defer&quot;</span> <span class="attr">src</span>=<span class="string">&quot;example1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">defer</span>=<span class="string">&quot;defer&quot;</span> <span class="attr">src</span>=<span class="string">&quot;example2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 这里放内容 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>虽然我们把<code>&lt;script&gt;</code>元素放在了文档的<code>&lt;head&gt;</code>元素中，但其中包含的js将延迟到浏览器遇到<code>&lt;/html&gt;</code>标签后再执行。</p><p>defer 属性只适用于外部脚本文件。这一点在 HTML5 中已经明确规定，因此支持 HTML5 的实现会忽略给嵌入脚本设置的 defer 属性。IE4～IE7 还支持对嵌入脚本的 defer 属性，但 IE8 及之后版本则完全支持 HTML5 规定的行为。</p><blockquote><p>把延迟脚本放在页面底部仍然是最佳选择</p></blockquote><h3 id="异步脚本"><a href="#异步脚本" class="headerlink" title="异步脚本"></a>异步脚本</h3><p>HTML5 为<code>&lt;script&gt;</code>元素定义了 async 属性。这个属性与 defer 属性类似，都用于改变处理脚本的行为，async 只适用于外部脚本文件，并告诉浏览器立即下载文件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>Example HTML Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;example1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;example2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 这里放内容 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>标记为 async 的脚本并不保证按照指定它们的先后顺序执行，第二个脚本文件可能会在第一个脚本文件之前执行，确保两者之间互不依赖非常重要</p></blockquote><p>在 XHTML 文档中，要把 async 属性设置为<code> async=&quot;async&quot;</code></p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h4 id="区分大小写"><a href="#区分大小写" class="headerlink" title="区分大小写"></a>区分大小写</h4><p>ECMAScript 中的一切（变量、函数名和操作符）都区分大小写。这也就意味着，变量名 test 和变量名 Test 分别表示两个不同的变量，而函数名不能使用 typeof，因为它是一个关键字，但 typeOf 则完全可以是一个有效的函数名。</p><h4 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h4><p>标识符，就是指变量、函数、属性的名字，或者函数的参数，规则如下：</p><ul><li>第一个字符必须是一个字母、下划线（_）或一个美元符号（$）</li><li>其他字符可以是字母、下划线、美元符号或数字</li></ul><p>一般来说标识符采用驼峰大小写格式，也就是第一个字母小写，剩下的每个单词的首字母大写，比如：firstSecond、myCar、doSomethingImportant</p><blockquote><p>不能把关键字、保留字、<strong>true</strong>、<strong>false</strong> 和 <strong>null</strong> 用作标识符</p></blockquote><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>使用 C 语言风格的注释，包括单行注释和块级注释</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//这是单行注释</span><br><span class="line">/*</span><br><span class="line"> * 这是多行</span><br><span class="line"> * 注释</span><br><span class="line"> * 块注释,第二三四行开头的星号并不是必须，只是为了好看</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h4 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h4><p>ECMAScript 5 引入了严格模式（strict mode）的概念。严格模式是为 JavaScript 定义了一种不同的解析与执行模型。在严格模式下，ECMAScript 3 中的一些不确定的行为将得到处理，而且对某些不安全的操作也会抛出错误。要在整个脚本中启用严格模式，可以在顶部添加如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br></pre></td></tr></table></figure><p>它是一个编译指示（pragma），用于告诉支持的 JavaScript 引擎切换到严格模式。在函数内部的上方包含这条编译指示，也可以指定函数在严格模式下执行：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params"></span>)&#123; </span><br><span class="line"> <span class="string">&quot;use strict&quot;</span>; </span><br><span class="line"> <span class="comment">//函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h4><p>语句以一个分号结尾<code>；</code>如果省略分号，则由解析器确定语句的结尾:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = a + b</span><br><span class="line"><span class="keyword">var</span> diff = a - b;</span><br></pre></td></tr></table></figure><p>可以使用 C 语言风格的语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (test)&#123; </span><br><span class="line"> test = <span class="literal">false</span>; </span><br><span class="line"> <span class="title function_">alert</span>(test); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面这两种也是有效的，但是建议用花括号括起来：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (test) </span><br><span class="line"> <span class="title function_">alert</span>(test);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (test)&#123;</span><br><span class="line"> <span class="title function_">alert</span>(test); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关键字和保留字"><a href="#关键字和保留字" class="headerlink" title="关键字和保留字"></a>关键字和保留字</h3><p>关键字可用于表示控制语句的开始或结束，或者用于执行特定操作等。</p><table><thead><tr><th>break</th><th>do</th><th>instanceof</th><th>typeof</th><th>case</th></tr></thead><tbody><tr><td>else</td><td>new</td><td>var</td><td>catch</td><td>finally</td></tr><tr><td>return</td><td>void</td><td>continue</td><td>for</td><td>switch</td></tr><tr><td>while</td><td>debugger</td><td>function</td><td>this</td><td>with</td></tr><tr><td>default</td><td>if</td><td>throw</td><td>delete</td><td>in</td></tr><tr><td>try</td><td></td><td></td><td></td><td></td></tr></tbody></table><p>不能用作标识符的保留字，即就是以后可能会被用作关键字，以下是 ECMA-262 第 3 版定义的全部保留字：</p><table><thead><tr><th>abstract</th><th>enum</th><th>int</th><th>short</th><th>boolean</th></tr></thead><tbody><tr><td>export</td><td>interface</td><td>static</td><td>byte</td><td>extends</td></tr><tr><td>long</td><td>super</td><td>char</td><td>final</td><td>native</td></tr><tr><td>synchronized</td><td>class</td><td>float</td><td>package</td><td>throws</td></tr><tr><td>const</td><td>goto</td><td>private</td><td>transient</td><td>debugger</td></tr><tr><td>implements</td><td>protected</td><td>volatile</td><td>double</td><td>import</td></tr><tr><td>public</td><td>let</td><td>yield</td><td></td><td></td></tr></tbody></table><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>ECMAScript 的变量是松散类型的，所谓松散类型就是可以用来保存任何类型的数据。换句话说，每个变量仅仅是一个用于保存值的占位符而已。定义变量时要使用 var 操作符，后跟变量名（即一个标识符），如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message;</span><br></pre></td></tr></table></figure><p>这行代码定义了一个名为 message 的变量，该变量可以用来保存任何值（像这样未经过初始化的变量，会保存一个特殊的值<code>undefined</code></p><p>ECMAScript 也支持直接初始化变量，因此在定义变量的同时就可以设置变量的值，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="string">&quot;hi&quot;</span>;</span><br></pre></td></tr></table></figure><p>变量 message 中保存了一个字符串值”hi”。像这样初始化变量并不会把它标记为字符串类型，初始化的过程就是给变量赋一个值那么简单。因此，可以在修改变量值的同时修改值的类型，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="string">&quot;hi&quot;</span>; </span><br><span class="line">message = <span class="number">100</span>;</span><br></pre></td></tr></table></figure><p>用 var 操作符定义的变量将成为定义该变量的作用域中的局部变量。也就是说，如果在函数中使用 var 定义一个变量，那么这个变量在函数退出后就会无效：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123; </span><br><span class="line"> <span class="keyword">var</span> message = <span class="string">&quot;hi&quot;</span>; <span class="comment">// 局部变量</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="title function_">test</span>(); </span><br><span class="line"><span class="title function_">alert</span>(message); <span class="comment">// 这样并不会打印变量的内容</span></span><br></pre></td></tr></table></figure><p>创建一个全局变量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">    message = <span class="string">&quot;hi&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>()</span><br><span class="line"><span class="title function_">alert</span>(message);<span class="comment">//这样就能打印出来了</span></span><br></pre></td></tr></table></figure><p>可以使用一条语句定义多个变量，只要像下面这样把每个变量（初始化或不初始化均可）用逗号分隔开即可：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="string">&quot;hi&quot;</span>, </span><br><span class="line"> found = <span class="literal">false</span>, </span><br><span class="line"> age = <span class="number">29</span>;</span><br></pre></td></tr></table></figure><p>当然不换行也是可以的。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>ECMAScript 中有 5 种简单数据类型（也称为基本数据类型）：Undefined、Null、Boolean、Number 和 String。还有 1种复杂数据类型——Object，Object 本质上是由一组无序的名值对组成的。</p><h3 id="typeof操作符"><a href="#typeof操作符" class="headerlink" title="typeof操作符"></a><strong>typeof</strong>操作符</h3><p>typeof 就是负责检测给定变量的数据类型的操作符。对一个值使用 typeof 操作符可能返回下列某个字符串：</p><ul><li>“undefined”——如果这个值未定义</li><li>“boolean”——如果这个值是布尔值</li><li>“string”——如果这个值是字符串</li><li>“number”——如果这个值是数值</li><li>“object”——如果这个值是对象或 null</li><li>“function”——如果这个值是函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="string">&quot;some string&quot;</span>; </span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> message); <span class="comment">// &quot;string&quot; </span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title function_">typeof</span>(message)); <span class="comment">// &quot;string&quot; </span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="number">95</span>); <span class="comment">// &quot;number&quot;</span></span><br></pre></td></tr></table></figure><p>上面就是例子。</p><blockquote><p>typeof 是一个操作符而不是函数，因此例子中的圆括号尽管可以使用，但不是必需的</p></blockquote><h3 id="Undefined类型"><a href="#Undefined类型" class="headerlink" title="Undefined类型"></a><strong>Undefined</strong>类型</h3><p>Undefined 类型只有一个值，即特殊的 undefined。在使用 var 声明变量但未对其加以初始化时，这个变量的值就是 <code>undefined</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message; </span><br><span class="line"><span class="title function_">alert</span>(message == <span class="literal">undefined</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>另一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message; <span class="comment">// 这个变量声明之后默认取得了 undefined 值</span></span><br><span class="line"><span class="comment">// 下面这个变量并没有声明</span></span><br><span class="line"><span class="comment">// var age </span></span><br><span class="line"><span class="title function_">alert</span>(message); <span class="comment">// &quot;undefined&quot; </span></span><br><span class="line"><span class="title function_">alert</span>(age); <span class="comment">// 产生错误</span></span><br></pre></td></tr></table></figure><p>需要注意的是对未初始化的变量执行 typeof 操作符会返回 undefined 值，而对未声明的变量执行 typeof 操作符同样也会返回 undefined 值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message; <span class="comment">// 这个变量声明之后默认取得了 undefined 值</span></span><br><span class="line"><span class="comment">// 下面这个变量并没有声明</span></span><br><span class="line"><span class="comment">// var age </span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> message); <span class="comment">// &quot;undefined&quot; </span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> age); <span class="comment">// &quot;undefined&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Null类型"><a href="#Null类型" class="headerlink" title="Null类型"></a><strong>Null</strong>类型</h3><p>Null 类型是第二个只有一个值的数据类型，这个特殊的值是 null。null 值表示一个空对象指针，而这也正是使用 typeof 操作符检测 null 值时会返回”object”的原因。</p><p>如果定义的变量准备在将来用于保存对象，那么最好将该变量初始化为 null 而不是其他值。这样一来，只要直接检查 null 值就可以知道相应的变量是否已经保存了一个对象的引用，如下面的例子所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (car != <span class="literal">null</span>)&#123; </span><br><span class="line"> <span class="comment">// 对 car 对象执行某些操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上，undefined 值是派生自 null 值的，因此 ECMA-262 规定对它们的相等性测试要返回 true：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="literal">null</span> == <span class="literal">undefined</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="Boolean类型"><a href="#Boolean类型" class="headerlink" title="Boolean类型"></a><strong>Boolean</strong>类型</h3><p>Boolean 类型是 ECMAScript 中使用得最多的一种类型，该类型只有两个字面值：true 和 false。需要注意的是，Boolean 类型的字面值 true 和 false 是区分大小写的。</p><p>虽然 Boolean 类型的字面值只有两个，但 ECMAScript 中所有类型的值都有与这两个 Boolean 值等价的值。要将一个值转换为其对应的 Boolean 值，可以调用转型函数 Boolean()，如下例所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="string">&quot;Hello world!&quot;</span>; </span><br><span class="line"><span class="keyword">var</span> messageAsBoolean = <span class="title class_">Boolean</span>(message);</span><br></pre></td></tr></table></figure><p>在这个例子中，字符串 message 被转换成了一个 Boolean 值，该值被保存在 messageAsBoolean变量中。可以对任何数据类型的值调用 Boolean()函数，而且总会返回一个 Boolean 值。至于返回的这个值是 true 还是 false，取决于要转换值的数据类型及其实际值。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721093713.png"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721093716.png"></p><p>转换规则对理解流控制语句（如 if 语句）自动执行相应的 Boolean 转换非常重要，请看下面的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="string">&quot;Hello world!&quot;</span>; </span><br><span class="line"><span class="keyword">if</span> (message)&#123; </span><br><span class="line"> <span class="title function_">alert</span>(<span class="string">&quot;Value is true&quot;</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行这个示例，就会显示一个警告框，因为字符串 message 被自动转换成了对应的 Boolean 值 （true）。</p><h3 id="Number类型"><a href="#Number类型" class="headerlink" title="Number类型"></a><strong>Number</strong>类型</h3><p>数值可以用十进制、八进制（以 8 为基数）或十六进制（以 16 为基数）来表示，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> intNum = <span class="number">55</span>; <span class="comment">// 整数</span></span><br><span class="line"><span class="keyword">var</span> octalNum1 = <span class="number">070</span>; <span class="comment">// 八进制的 56</span></span><br><span class="line"><span class="keyword">var</span> octalNum2 = <span class="number">079</span>; <span class="comment">// 无效的八进制数值,解析为 79</span></span><br><span class="line"><span class="keyword">var</span> octalNum3 = <span class="number">08</span>; <span class="comment">// 无效的八进制数值,解析为 8</span></span><br><span class="line"><span class="keyword">var</span> hexNum1 = <span class="number">0xA</span>; <span class="comment">// 十六进制的 10</span></span><br><span class="line"><span class="keyword">var</span> hexNum2 = <span class="number">0x1f</span>; <span class="comment">// 十六进制的 31</span></span><br></pre></td></tr></table></figure><p>八进制字面量在严格模式下是无效的，会导致支持的 JavaScript 引擎抛出错误，在进行算术计算时，所有以八进制和十六进制表示的数值最终都将被转换成十进制数值。</p><h4 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h4><p>该数值中必须包含一个小数点，并且小数点后面必须至少有一位数字。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> floatNum1 = <span class="number">1.1</span>; </span><br><span class="line"><span class="keyword">var</span> floatNum2 = <span class="number">0.1</span>; </span><br><span class="line"><span class="keyword">var</span> floatNum3 = <span class="number">.1</span>; <span class="comment">// 有效，但不推荐这种写法</span></span><br></pre></td></tr></table></figure><p>对于那些极大或极小的数值，可以用 e 表示法（即科学计数法）表示的浮点数值表示。用 e 表示法表示的数值等于 e 前面的数值乘以 10 的指数次幂。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> floatNum = <span class="number">3.125e7</span>; <span class="comment">// 等于 31250000</span></span><br><span class="line"><span class="keyword">var</span> floatNum = <span class="number">3e-17</span>;<span class="comment">//等于 0.00000000000000003</span></span><br></pre></td></tr></table></figure><p>浮点数值的最高精度是 17 位小数，但在进行算术计算时其精确度远远不如整数。</p><p>非常需要注意的是，有些特定的浮点数由于运算会存在舍入误差，得到的结果并不准确，例如0.1 加 0.2的结果不是 0.3，而是 0.30000000000000004。所以对浮点数的运算和比较要特别注意。</p><h4 id="数值范围"><a href="#数值范围" class="headerlink" title="数值范围"></a>数值范围</h4><p>由于内存的限制，js 并不能保存世界上所有的数值。js能够表示的最小数值保存在 Number.MIN_VALUE 中，这个值是 5e-324；能够表示的最大数值保存在Number.MAX_VALUE 中，这个值是 1.7976931348623157e+308。</p><p>如果某次计算的结果得到了一个超出 JavaScript 数值范围的值，那么这个数值将被自动转换成特殊的 Infinity 值。具体来说，如果这个数值是负数，则会被转换成-Infinity（负无穷），如果这个数值是正数，则会被转换成 Infinity（正无穷）。</p><p>要想确定一个数值是不是有穷的（换句话说，是不是位于最小和最大的数值之间），可以使用 isFinite()函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="title class_">Number</span>.<span class="property">MIN_VALUE</span> + <span class="title class_">Number</span>.<span class="property">MAX_VALUE</span>; </span><br><span class="line"><span class="title function_">alert</span>(<span class="built_in">isFinite</span>(result)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><blockquote><p>打印<code>Number.NEGATIVE_INFINITY</code> 和 <code>Number.POSITIVE_INFINITY</code> 也可以得到负和正 <strong>Infinity</strong> 的值。</p></blockquote><h4 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h4><p>NaN，即非数值（Not a Number）是一个特殊的数值，这个数值用于表示一个本来要返回数值的操作数未返回数值的情况，例如，在其他编程语言中，任何数值除以 0都会导致错误，从而停止代码执行。但在 js中，任何数值除以 0会返回 NaN，因此不会影响其他代码的执行。</p><p>NaN有两个特点：</p><ul><li>0 除以 0 返回 NaN，正数除以 0 返回 Infinity，负数除以 0 返回-Infinity</li><li>NaN 与任何值都不相等，包括 NaN 本身</li></ul><p>针对 NaN 的这两个特点，js定义了 <code>isNaN()</code>函数，这个函数接受一个参数，该参数可以是任何类型，而函数会帮我们确定这个参数是否<strong>不是数值</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="built_in">isNaN</span>(<span class="title class_">NaN</span>)); <span class="comment">//true </span></span><br><span class="line"><span class="title function_">alert</span>(<span class="built_in">isNaN</span>(<span class="number">10</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="built_in">isNaN</span>(<span class="string">&quot;10&quot;</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="built_in">isNaN</span>(<span class="string">&quot;blue&quot;</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="built_in">isNaN</span>(<span class="literal">true</span>)); <span class="comment">//false（可以被转换成数值 1）</span></span><br></pre></td></tr></table></figure><blockquote><p>注意，<strong>不是数值</strong>的情况才会返回true</p></blockquote><p><code>isNaN()</code>确实也适用于对象。在基于对象调用 <code>isNaN()</code>函数时，会首先调用对象的<code> valueOf()</code>方法，然后确定该方法返回的值是否可以转换为数值。如果不能，则基于这个返回值再调用<code> toString()</code>方法，再测试返回值。</p><h4 id="数值转换"><a href="#数值转换" class="headerlink" title="数值转换"></a>数值转换</h4><p>有 3 个函数可以把非数值转换为数值：</p><ul><li>Number()</li><li>parseInt()</li><li>parseFloat()</li></ul><p>第一个函数即转型函数 <code>Number()</code>可以用于任何数据类型，而另两个函数则专门用于把字符串转换成数值。</p><p><code>Number()</code>函数的转换规则如下：</p><ul><li>如果是 Boolean 值，true 和 false 将分别被转换为 1 和 0</li><li>如果是数字值，只是简单的传入和返回</li><li>如果是 null 值，返回 0</li><li>如果是 undefined，返回 NaN</li><li>如果是对象，则调用对象的 <code>valueOf()</code>方法，然后依照前面的规则转换返回的值。如果转换的结果是 NaN，则调用对象的 <code>toString()</code>方法，然后再次依照前面的规则转换返回的字符串值。</li></ul><p>如果是字符串，遵循下列规则：</p><ul><li>如果字符串中只包含数字（包括前面带正号或负号的情况），则将其转换为十进制数值，即”1”会变成 1，”123”会变成 123，而”011”会变成 11（注意：前导的零被忽略了）</li><li>如果字符串中包含有效的浮点格式，如”1.1”，则将其转换为对应的浮点数值（同样，也会忽略前导零）</li><li>如果字符串中包含有效的十六进制格式，例如”0xf”，则将其转换为相同大小的十进制整数值</li><li>如果字符串是空的（不包含任何字符），则将其转换为 0</li><li>如果字符串中包含除上述格式之外的字符，则将其转换为 NaN</li></ul><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="title class_">Number</span>(<span class="string">&quot;Hello world!&quot;</span>); <span class="comment">//NaN </span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="title class_">Number</span>(<span class="string">&quot;&quot;</span>); <span class="comment">//0 </span></span><br><span class="line"><span class="keyword">var</span> num3 = <span class="title class_">Number</span>(<span class="string">&quot;000011&quot;</span>); <span class="comment">//11 </span></span><br><span class="line"><span class="keyword">var</span> num4 = <span class="title class_">Number</span>(<span class="literal">true</span>); <span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>由于<code> Number()</code>函数在转换字符串时比较复杂而且不够合理，因此在处理整数的时候更常用的是<code>parseInt()</code>函数。<code>parseInt()</code>函数在转换字符串时，更多的是看其是否符合数值模式。它会忽略字符串前面的空格，直至找到第一个非空格字符。如果第一个字符不是数字字符或者负号，<code>parseInt()</code>就会返回 NaN；也就是说，用<code> parseInt()</code>转换空字符串会返回 NaN（<code>Number()</code>对空字符返回 0）。如果第一个字符是数字字符，<code>parseInt()</code>会继续解析第二个字符，直到解析完所有后续字符或者遇到了一个非数字字符。例如，”1234blue”会被转换为 1234，因为”blue”会被完全忽略。类似地，”22.5”会被转换为 22，因为小数点并不是有效的数字字符。</p><p>如果字符串中的第一个字符是数字字符，parseInt()也能够识别出各种整数格式（即十进制、八进制和十六进制数）。也就是说，如果字符串以”0x”开头且后跟数字字符，就会将其当作一个十六进制整数；如果字符串以”0”开头且后跟数字字符，则会将其当作一个八进制数来解析：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="built_in">parseInt</span>(<span class="string">&quot;1234blue&quot;</span>); <span class="comment">// 1234 </span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="built_in">parseInt</span>(<span class="string">&quot;&quot;</span>); <span class="comment">// NaN </span></span><br><span class="line"><span class="keyword">var</span> num3 = <span class="built_in">parseInt</span>(<span class="string">&quot;0xA&quot;</span>); <span class="comment">// 10（十六进制数）</span></span><br><span class="line"><span class="keyword">var</span> num4 = <span class="built_in">parseInt</span>(<span class="number">22.5</span>); <span class="comment">// 22 </span></span><br><span class="line"><span class="keyword">var</span> num5 = <span class="built_in">parseInt</span>(<span class="string">&quot;070&quot;</span>); <span class="comment">// 56（八进制数）</span></span><br><span class="line"><span class="keyword">var</span> num6 = <span class="built_in">parseInt</span>(<span class="string">&quot;70&quot;</span>); <span class="comment">// 70（十进制数）</span></span><br><span class="line"><span class="keyword">var</span> num7 = <span class="built_in">parseInt</span>(<span class="string">&quot;0xf&quot;</span>); <span class="comment">// 15（十六进制数）</span></span><br></pre></td></tr></table></figure><p>但是还有一种情况：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="built_in">parseInt</span>(<span class="string">&quot;070&quot;</span>);</span><br><span class="line"><span class="comment">//ECMAScript 3 认为是 56（八进制），ECMAScript 5 认为是 70（十进制）</span></span><br></pre></td></tr></table></figure><p>为了解决这个问题，可以给函数提供第二个参数，转换时使用的基数（即多少进制）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="built_in">parseInt</span>(<span class="string">&quot;0xAF&quot;</span>, <span class="number">16</span>); <span class="comment">//175</span></span><br></pre></td></tr></table></figure><p>指定不同进制就会得到不同结果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="built_in">parseInt</span>(<span class="string">&quot;10&quot;</span>, <span class="number">2</span>); <span class="comment">//2 （按二进制解析）</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="built_in">parseInt</span>(<span class="string">&quot;10&quot;</span>, <span class="number">8</span>); <span class="comment">//8 （按八进制解析）</span></span><br><span class="line"><span class="keyword">var</span> num3 = <span class="built_in">parseInt</span>(<span class="string">&quot;10&quot;</span>, <span class="number">10</span>); <span class="comment">//10 （按十进制解析）</span></span><br><span class="line"><span class="keyword">var</span> num4 = <span class="built_in">parseInt</span>(<span class="string">&quot;10&quot;</span>, <span class="number">16</span>); <span class="comment">//16 （按十六进制解析）</span></span><br></pre></td></tr></table></figure><p><code>parseFloat()</code>也是从第一个字符（位置 0）开始解析每个字符。而且也是一直解析到字符串末尾，或者解析到遇见一个无效的浮点数字字符为止。也就是说，字符串中的第一个小数点是有效的，而第二个小数点就是无效的了，因此它后面的字符串将被忽略。</p><p>除了第一个小数点有效之外，<code>parseFloat()</code>与 <code>parseInt()</code>的第二个区别在于它始终都会忽略前导的零。</p><p>由于 <code>parseFloat()</code>只解析十进制值，因此它没有用第二个参数指定基数的用法。最后还要注意一点：如果字符串包含的是一个可解析为整数的数（没有小数点，或者小数点后都是零），<code>parseFloat()</code>会返回整数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="built_in">parseFloat</span>(<span class="string">&quot;1234blue&quot;</span>); <span class="comment">//1234 （整数）</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="built_in">parseFloat</span>(<span class="string">&quot;0xA&quot;</span>); <span class="comment">//0 </span></span><br><span class="line"><span class="keyword">var</span> num3 = <span class="built_in">parseFloat</span>(<span class="string">&quot;22.5&quot;</span>); <span class="comment">//22.5 </span></span><br><span class="line"><span class="keyword">var</span> num4 = <span class="built_in">parseFloat</span>(<span class="string">&quot;22.34.5&quot;</span>); <span class="comment">//22.34 </span></span><br><span class="line"><span class="keyword">var</span> num5 = <span class="built_in">parseFloat</span>(<span class="string">&quot;0908.5&quot;</span>); <span class="comment">//908.5 </span></span><br><span class="line"><span class="keyword">var</span> num6 = <span class="built_in">parseFloat</span>(<span class="string">&quot;3.125e7&quot;</span>); <span class="comment">//31250000</span></span><br></pre></td></tr></table></figure><h3 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h3><p>String 类型用于表示由零或多个 16 位 Unicode 字符组成的字符序列，即字符串。字符串可以由双引号<code>&quot;</code>或单引号<code>&#39;</code>表示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> firstName = <span class="string">&quot;hahaha&quot;</span>; </span><br><span class="line"><span class="keyword">var</span> lastName = <span class="string">&#x27;heiheihei&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>PHP 中的双引号和单引号会影响对字符串的解释方式不同</p></blockquote><h4 id="字符字面量"><a href="#字符字面量" class="headerlink" title="字符字面量"></a>字符字面量</h4><p>String 数据类型包含一些特殊的字符字面量，也叫转义序列，用于表示非打印字符，或者具有其他用途的字符：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721093730.png"></p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> text = <span class="string">&quot;This is the letter sigma: \u03a3.&quot;</span>;</span><br></pre></td></tr></table></figure><p>这个例子中的变量 text 有 28 个字符，其中 6 个字符长的转义序列表示 1 个字符。任何字符串的长度都可以通过访问其 length 属性取得，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>(text.<span class="property">length</span>); <span class="comment">// 输出 28</span></span><br></pre></td></tr></table></figure><h4 id="字符串的特点"><a href="#字符串的特点" class="headerlink" title="字符串的特点"></a>字符串的特点</h4><p>ECMAScript 中的字符串是不可变的，也就是说，字符串一旦创建，它们的值就不能改变。要改变某个变量保存的字符串，首先要销毁原来的字符串，然后再用另一个包含新值的字符串填充该变量，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lang = <span class="string">&quot;Java&quot;</span>; </span><br><span class="line">lang = lang + <span class="string">&quot;Script&quot;</span>;</span><br></pre></td></tr></table></figure><h4 id="转换为字符串"><a href="#转换为字符串" class="headerlink" title="转换为字符串"></a>转换为字符串</h4><p>数值、布尔值、对象和字符串值都有<code> toString()</code>方法，但 null 和 undefined 值没有这个方法。</p><p>多数情况下，调用<code> toString()</code>方法不必传递参数。但是，在调用数值的 <code>toString()</code>方法时，可以传递一个参数：输出数值的基数。默认情况下，<code>toString()</code>方法以十进制格式返回数值的字符串表示。而通过传递基数，<code>toString()</code>可以输出以二进制、八进制、十六进制，乃至其他任意有效进制格式表示的字符串值，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>; </span><br><span class="line"><span class="title function_">alert</span>(num.<span class="title function_">toString</span>()); <span class="comment">// &quot;10&quot; </span></span><br><span class="line"><span class="title function_">alert</span>(num.<span class="title function_">toString</span>(<span class="number">2</span>)); <span class="comment">// &quot;1010&quot; </span></span><br><span class="line"><span class="title function_">alert</span>(num.<span class="title function_">toString</span>(<span class="number">8</span>)); <span class="comment">// &quot;12&quot; </span></span><br><span class="line"><span class="title function_">alert</span>(num.<span class="title function_">toString</span>(<span class="number">10</span>)); <span class="comment">// &quot;10&quot; </span></span><br><span class="line"><span class="title function_">alert</span>(num.<span class="title function_">toString</span>(<span class="number">16</span>)); <span class="comment">// &quot;a&quot;</span></span><br></pre></td></tr></table></figure><p>在不知道要转换的值是不是 null 或 undefined 的情况下，还可以使用转型函数 <code>String()</code>，这个函数能够将任何类型的值转换为字符串。String()函数遵循下列转换规则：</p><ul><li>如果值有<code> toString()</code>方法，则调用该方法（没有参数）并返回相应的结果</li><li>如果值是 null，则返回”null”</li><li>如果值是 undefined，则返回”undefined”</li></ul><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> value1 = <span class="number">10</span>; </span><br><span class="line"><span class="keyword">var</span> value2 = <span class="literal">true</span>; </span><br><span class="line"><span class="keyword">var</span> value3 = <span class="literal">null</span>; </span><br><span class="line"><span class="keyword">var</span> value4; </span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">String</span>(value1)); <span class="comment">// &quot;10&quot; </span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">String</span>(value2)); <span class="comment">// &quot;true&quot; </span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">String</span>(value3)); <span class="comment">// &quot;null&quot; </span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">String</span>(value4)); <span class="comment">// &quot;undefined&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Object类型"><a href="#Object类型" class="headerlink" title="Object类型"></a><strong>Object</strong>类型</h3><p>JavaScript中的对象其实就是一组数据和功能的集合，对象可以通过执行 new 操作符后跟要创建的对象类型的名称来创建，而创建 Object 类型的实例并为其添加属性和（或）方法，就可以创建自定义对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br></pre></td></tr></table></figure><p>Object 的每个实例都具有下列属性和方法：</p><ul><li>constructor：保存着用于创建当前对象的函数。对于前面的例子而言，构造函数（constructor）就是 <code>Object()</code></li><li>hasOwnProperty(<em>propertyName</em>)：用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。其中，作为参数的属性名（<em>propertyName</em>）必须以字符串形式指定，例如：o.hasOwnProperty(“name”)</li><li>isPrototypeOf(object)：用于检查传入的对象是否是传入对象的原型</li><li>propertyIsEnumerable(<em>propertyName</em>)：用于检查给定的属性是否能够使用 for-in 语句来枚举。与 <code>hasOwnProperty()</code>方法一样，作为参数的属性名必须以字符串形式指定</li><li>toLocaleString()：返回对象的字符串表示，该字符串与执行环境的地区对应</li><li>toString()：返回对象的字符串表示</li><li>valueOf()：返回对象的字符串、数值或布尔值表示。通常与<code> toString()</code>方法的返回值相同</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言基础篇(一)</title>
      <link href="/posts/511aee48/"/>
      <url>/posts/511aee48/</url>
      
        <content type="html"><![CDATA[<h2 id="C语言基础"><a href="#C语言基础" class="headerlink" title="C语言基础"></a>C语言基础</h2><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>C语言是一门面向过程的、抽象化的通用程序设计语言，广泛应用于底层开发。C语言能以简易的方式<a href="https://baike.baidu.com/item/%E7%BC%96%E8%AF%91/1258343">编译</a>、处理低级<a href="https://baike.baidu.com/item/%E5%AD%98%E5%82%A8%E5%99%A8/1583185">存储器</a>。C语言是仅产生少量的<a href="https://baike.baidu.com/item/%E6%9C%BA%E5%99%A8%E8%AF%AD%E8%A8%80/2019225">机器语言</a>以及不需要任何运行环境支持便能运行的高效率程序设计语言。尽管C语言提供了许多低级处理的<a href="https://baike.baidu.com/item/%E5%8A%9F%E8%83%BD/10346898">功能</a>，但仍然保持着跨平台的特性，以一个标准规格写出的C语言程序可在包括类似<a href="https://baike.baidu.com/item/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%A4%84%E7%90%86%E5%99%A8/9242667">嵌入式处理器</a>以及超级计算机等作业平台的许多<a href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%B9%B3%E5%8F%B0/2606037">计算机平台</a>上进行编译。(来自百度百科)</p><h2 id="编程的7个步骤"><a href="#编程的7个步骤" class="headerlink" title="编程的7个步骤"></a>编程的7个步骤</h2><h3 id="定义程序的目标"><a href="#定义程序的目标" class="headerlink" title="定义程序的目标"></a>定义程序的目标</h3><p>在动手写程序之前，要在大脑中有一个清晰的思路。要想让程序去做什么首先要自己明确自己想要什么，思考你的程序需要哪些信息，要进行哪些计算和控制，以及程序应该要报告什么信息。</p><h3 id="设计程序"><a href="#设计程序" class="headerlink" title="设计程序"></a>设计程序</h3><p>例如：用户界面是怎么样的？如何组织程序？目标用户是谁？等等。除此之外还要决定在程序（或者辅助文件）中如何表示数据，以及用什么方法处理数据。</p><h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><p>一般而言使用编辑器创建源代码文件，这个过程中要尽量对自己的代码添加上注释，编辑环境稍后再说。</p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>编译的细节取决于编程的环境，编译器就是把源代码转换成了可执行代码的程序。可执行代码是用计算机的机器语言表示的代码，这种语言由数字码表示的指令组成。</p><p>编译器还会检查c语言程序是否有效，如果有错误就会生成错误信息提示开发者。所以理解报错信息是开发者的一个重要的技能。</p><h3 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h3><p>一般来讲，可执行文件是可运行的程序，在常见环境下（包括Windows、Unix、Linux）可直接执行，或者使用相应命令等。</p><h3 id="测试和调试程序"><a href="#测试和调试程序" class="headerlink" title="测试和调试程序"></a>测试和调试程序</h3><p>程序能成功跑起来就是个好兆头，但是有时候也会出现错误，俗称bug，查找并修复bug的过程就叫做调试。</p><h3 id="维护和修改代码"><a href="#维护和修改代码" class="headerlink" title="维护和修改代码"></a>维护和修改代码</h3><p>如果程序有bug或者要扩展程序的功能的话就要修改程序。</p><blockquote><p>大部分时候编程并非像描述的那样是一个线性的过程，往往要在很多骤之间反复，特别是找bug和修复。</p><p>磨刀不误砍柴工，最好养成先规划再动手编写代码的好习惯，最好的办法就是一定要养成写注释的好习惯。</p></blockquote><h2 id="编程机制"><a href="#编程机制" class="headerlink" title="编程机制"></a>编程机制</h2><p>生成程序的过程依计算机环境的不同而大有不同，特别是Windows、Linux、MacOS之间。</p><p>用C语言编写程序时，编写的内容被储存在文本文件中，称为源代码文件，大部分环境下，源代码都是以<code>.c</code>作为后缀名的。小数点之前叫做基本名，之后叫做扩展名，加起来就是文件名。</p><h3 id="目标代码文件、可执行文件和库"><a href="#目标代码文件、可执行文件和库" class="headerlink" title="目标代码文件、可执行文件和库"></a>目标代码文件、可执行文件和库</h3><p>C语言的基本策略是，用程序把源代码文件转换为可执行文件，一般的实现通过编译和链接两个步骤完成这个过程。编译器把源代码转换成中间代码，链接器把中间代码和其他代码合并，生成可执行文件。C语言利用这种方法对程序进行模块化，可编译独立的模块。还可以将你编写的程序和预编译的库代码合并。</p><p>中间文件一般最常用的形式为：把源代码转换为机器码并把结果放在目标代码文件(目标文件)，所以这并不是一个完整的程序，因为它只包含转换后的机器码并不能直接运行该文件。</p><p>启动代码的作用是程序和操作系统之间的接口。还有库函数，几乎所有的C语言程序都要使用C标准库中的函数。链接器的作用是把你编写的目标代码、系统的标准启动代码和库代码合并为一个文件，即可执行文件。</p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>我的开发环境为Windows10 1903 教育版、VisualStudio2017 Community，偶尔示例会使用WSL下的VIM编辑器和GCC编译器或者CentOS8，现在让我们来创建第一个C语言程序吧。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720225228.png" alt="第一步"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720225231.png" alt="空项目"></p><p>然后在源.cpp右键新建即可。</p><p>第一个程序当然是hello world啦：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span> <span class="comment">//头文件</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//主函数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    num = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello world \n&quot;</span>);<span class="comment">//语句</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the num is %d&quot;</span>, num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">/*返回值*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720225237.png" alt="Linux系统输出"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720225240.png" alt="VS2017输出"></p><p>简单的来说，c程序分为头文件、主函数、语句、函数返回值。</p><ul><li>头文件：写代码的过程中并不是所有代码都由我们自己写的，在编译器中会实现留有很多的代码都是由前辈实现写好留下来的，而这些代码都会被封装为一个又一个的头文件，提供给开发者使用，比如上面那个例子的<code>printf</code> 语句</li><li>主函数：C语言程序包含一个或多个函数，是基本模块。上述例子中包含一个名为<code>main</code> 的函数，圆括号表示<code>main()</code> 是一个函数名，<code>int</code> 表明函数返回一个整数，<code>void</code> 表示函数不带任何参数。</li><li>注释：<code>/* */</code>和<code>// </code>都是注释，编译器会忽略掉注释的内容。</li><li>函数体：花括号代表函数的开始与结束。</li><li>声明：<code>int num;</code> 这个声明表示将使用一个名为num的变量，且该变量是整数类型。</li><li>赋值：<code>num = 1;</code> 意思是把值1赋给num变量</li><li>调用函数：<code>printf(&quot;hello world&quot;);</code> 这是调用了<code>printf() </code>函数，在屏幕上输出hell world的信息，<code>\n</code> 代表换行，<code>%d, num</code> 代表把变量num的值输出，%d告诉计算机用什么形式在那个位置输出num的值。</li><li>返回值：<code>return 0;</code> 简单来看就是代表main函数结束。</li></ul><h2 id="程序详解"><a href="#程序详解" class="headerlink" title="程序详解"></a>程序详解</h2><h3 id="include指令和头文件"><a href="#include指令和头文件" class="headerlink" title="#include指令和头文件"></a>#include指令和头文件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>这是程序的第一行，它的作用相当于把<code>stdio.h</code> 文件的所有内容都输入该行所在的位置。这行代码是一条c预处理指令，编译器在编译前会对代码做一些准备工作，就是预处理。</p><p>所有的c编译器软件包都提供<code>stdio.h</code>文件，该文件中包含了供编译器使用的输入和输出函数，标准输入和输出头文件。</p><blockquote><p>最重要的一点，在Linux系统中可以使用<code>man</code> 命令来调出各个头文件的使用手册和文档，例如<code>man stdio</code> 。</p></blockquote><h3 id="main-函数"><a href="#main-函数" class="headerlink" title="main()函数"></a>main()函数</h3><p>一般来说c程序一定从main函数开始执行，圆括号用于识别main是一个函数，<code>int</code> 是<code>main()</code> 函数的返回类型，返回给操作系统。一般情况下，圆括号内包含传入函数的信息。</p><p>注释就不多详细说了，略过。</p><h3 id="花括号、函数体和块"><a href="#花括号、函数体和块" class="headerlink" title="花括号、函数体和块"></a>花括号、函数体和块</h3><p>花括号标记着函数体的开始和结束，一定要注意，花括号还可以用于把函数中的多条语句合并为一个单元或者块。</p><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> num;</span><br></pre></td></tr></table></figure><p>声明是C语言最重要的特性之一。声明的作用有两个：第一，在函数中有一个名为num的变量，第二，int表示num变量是一个整数。int是一种数据类型，编译器使用这些信息为num变量在内存中分配存储空间，分号在C语言中是大部分语句和声明的一部分。</p><p>int是C语言的一个关键字，表示一种最基本的C语言数据类型。num是一个标识符，也就是一个变量、函数或者其他实例的名称。声明把特定标识符与计算机内存中的特定位置的信息类型或数据类型。</p><p>在C语言中所有变量都必须先声明才能使用。</p><h2 id="简单程序"><a href="#简单程序" class="headerlink" title="简单程序"></a>简单程序</h2><h3 id="多条声明"><a href="#多条声明" class="headerlink" title="多条声明"></a>多条声明</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> num1, num2;</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> num1;</span><br><span class="line"><span class="type">int</span> num2;</span><br></pre></td></tr></table></figure><h3 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h3><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">2</span> * <span class="number">5</span>;</span><br><span class="line"><span class="comment">//或者使用变量</span></span><br><span class="line">num = <span class="number">2</span> * var;</span><br></pre></td></tr></table></figure><h2 id="多个函数"><a href="#多个函数" class="headerlink" title="多个函数"></a>多个函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">butler</span><span class="params">(<span class="type">void</span>)</span>;<span class="comment">//ANSI/ISO C函数原型</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;i will summon the butler function.\n&quot;</span>);</span><br><span class="line">    butler();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;yes bring me some tea and writeable DVDs.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">butler</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//函数定义开始</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;you rang,sir?\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720225250.png" alt="结果"></p><p><code>butler</code> 在程序中出现了三次，第一次是函数原型，告知编译器在程序中要使用该函数。第二次以函数调用出现在<code>main</code>中。第三次出现在函数定义中，函数定义即是函数本身的源代码。</p><p>C90新增了函数原型，旧式的编译器可能无法识别。函数原型是一种声明，告知编译器正在使用某函数，也叫做函数声明。函数原型也指明函数的属性。</p><p>要注意的是，<code>butler</code> 什么时候被执行，并不取决于它在程序中的位置，即使把它放在main之前也不会影响程序执行，无论main函数在哪个位置，都是从main开始执行。</p><p>C语言的标准建议，要为程序中的所有函数提供函数原型。例如stdio.h就是为printf函数提供函数原型。</p><h2 id="调试程序"><a href="#调试程序" class="headerlink" title="调试程序"></a>调试程序</h2><p>程序的错误叫做bug，调试和修改错误的过程叫做debug。</p><p>错误示范：（数字是指数）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n, <span class="type">int</span> n2, <span class="type">int</span> n3;</span><br><span class="line">    n = <span class="number">5</span>;</span><br><span class="line">    n2 = n * n;</span><br><span class="line">    n3 = n2 * n2;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;n = %d, n squard = %d, n cubed = %d\n&quot;</span>, n, n2. n3)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="语法错误"><a href="#语法错误" class="headerlink" title="语法错误"></a>语法错误</h3><p>不遵循Ｃ语言语法规则的就是语法错误，第四行就是典型的语法错误，变量声明应该如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n, n2, n3;</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> n2;</span><br><span class="line"><span class="type">int</span> n3;</span><br></pre></td></tr></table></figure><p>还有就是<code>printf()</code> 语句最后面没有结束的分号</p><h3 id="语义错误"><a href="#语义错误" class="headerlink" title="语义错误"></a>语义错误</h3><p>如果语法没有问题，但是编译器还是报错了，那应该考虑是语义错误，例子中的<code>n3 = n2 * n2;</code> ｎ的三次方显然不会等于ｎ的平方乘以ｎ的平方，但是语句的语法并没有问题，这就是语义错误。</p><h3 id="程序状态"><a href="#程序状态" class="headerlink" title="程序状态"></a>程序状态</h3><p>程序状态是程序的执行过程中某给定点上的所有变量值的集合。</p><p>查看程序的运行状态可以一步一步的推算查看每个变量的状态，但是这样过于繁琐。</p><p>定位语义错误的另一种方法是：在程序中的关键点插入额外的<code>printf()</code> 语句，以监视制定变量值的变化，通过查看值得变化来了解程序的执行情况。</p><p>检测程序状态还有一种方法就是使用调试器，调试器可以让你一步一步运行程序并检查程序的值。</p><h2 id="关键字和保留标识符"><a href="#关键字和保留标识符" class="headerlink" title="关键字和保留标识符"></a>关键字和保留标识符</h2><p>关键字是C语言的词汇。它们对C而言比较特殊，不能用它们作为标识符（如，变量名）。许多关键字用于指定不同的类型，如int 。还有一些关键字（如，if ）用于控制程序中语句的执行顺序。</p><table><thead><tr><th>auto</th><th>extern</th><th>short</th><th>while</th></tr></thead><tbody><tr><td>break</td><td>float</td><td>signed</td><td>_Alignas</td></tr><tr><td>case</td><td>for</td><td>sizeof</td><td>_Alignof</td></tr><tr><td>char</td><td>goto</td><td>static</td><td>_Atomic</td></tr><tr><td>const</td><td>if</td><td>struct</td><td>_Bool</td></tr><tr><td>continue</td><td>inline</td><td>switch</td><td>_Complex</td></tr><tr><td>default</td><td>int</td><td>typedef</td><td>_Generic</td></tr><tr><td>do</td><td>long</td><td>union</td><td>_Imaginary</td></tr><tr><td>double</td><td>register</td><td>unsigned</td><td>_Noreturn</td></tr><tr><td>else</td><td>restrict</td><td>void</td><td>_Static_assert</td></tr><tr><td>enum</td><td>return</td><td>volatile</td><td>_Thread_local</td></tr></tbody></table><p>如果使用关键字不当（如，用关键字作为变量名），编译器会将其 视为语法错误。</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Kali201904版本中文安装乱码问题</title>
      <link href="/posts/2a531559/"/>
      <url>/posts/2a531559/</url>
      
        <content type="html"><![CDATA[<h4 id="kali-201904中文乱码解决方法"><a href="#kali-201904中文乱码解决方法" class="headerlink" title="kali 201904中文乱码解决方法"></a>kali 201904中文乱码解决方法</h4><ol><li><p>更换阿里源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim /etc/apt/sources.list</span></span><br></pre></td></tr></table></figure><p>添加下列内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#阿里云</span><br><span class="line">deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br></pre></td></tr></table></figure><p>编辑源之后，执行一下更新</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">apt-get update &amp;&amp; apt-get upgrade</span></span><br></pre></td></tr></table></figure></li><li><p>然后在终端打开编码方式选择器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">dpkg-reconfigure locales</span></span><br></pre></td></tr></table></figure><p>进入图形化界面之后，（空格是选择，Tab是切换，*是选中），选中<code>zh_CN.UTF-8</code>，确定后(确定是左边的按钮)，将<code>zh_CN.UTF-8</code>选为默认。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721094037.png" alt="选择编码方式"></p></li><li><p>安装中文字体</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">apt-get install xfonts-intl-chinese</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">apt-get install ttf-wqy-microhei</span> </span><br></pre></td></tr></table></figure></li><li><p>重启系统，到登录界面，右上角语言列表注意是否为<code>zh_CN.utf8</code>,点开列表，确定选中的为中文-中国</p></li><li><p>如果都设置改好中文之后有部分界面中文没切换好，可以重启几次系统就好，一般是重启2次就都换好</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell脚本基础篇(二)</title>
      <link href="/posts/931fc2ad/"/>
      <url>/posts/931fc2ad/</url>
      
        <content type="html"><![CDATA[<blockquote><p>上一节我们讲到变量的系统变量</p></blockquote><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="用户变量"><a href="#用户变量" class="headerlink" title="用户变量"></a>用户变量</h3><p>用户变量可以由任何字母、数字或者下划线组成的字符串，长度不超过20个字符，且区分大小写。</p><p>赋值时变量、等号、值之间不允许出现空格。shell脚本会自动决定变量值的数据类型。</p><p>变量每次被引用时，都会输出当前赋给它的值且赋值时不需要美元符号来引用，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">var1=10</span><br><span class="line">var2=$var1</span><br><span class="line">echo the true = $var2</span><br></pre></td></tr></table></figure><p>那么输出结果就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">the true = 10</span><br></pre></td></tr></table></figure><p>如果不加美元符号，赋值语句变成了<code>var2=var1</code>，那么输出结果会变成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">the true = var1</span><br></pre></td></tr></table></figure><h3 id="命令替换"><a href="#命令替换" class="headerlink" title="命令替换"></a>命令替换</h3><p>Shell脚本中的特性：从命令输出中提取信息，并赋值给变量。有两种方法：</p><ul><li>反引号&#96;&#96; &#96;</li><li><code>$()</code> 格式</li></ul><p>反引号的用法就是把命令用两个反引号包裹起来，很麻烦，不好示例，有兴趣自己去研究一下，我们主要以<code>$()</code> 方法为例。</p><p>例如：<code>test=$(date)</code> 会把<code>date</code>命令的输出结果赋值给test变量</p><p>再利用<code>echo</code>语句就可以输出结果啦：<code>echo &quot;the date is $test&quot;</code> </p><p>示例：通过命令替换获得当前日期并用来生成唯一文件名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">today=$(date +%y%m%d)</span><br><span class="line">ls /usr/bin -al &gt; log.$today</span><br></pre></td></tr></table></figure><p><code>today</code>变量是格式化后的<code>date</code>命令输出结果，这是提取日期信息生成日志文件名常用的方法，<code>+%y%m%d</code>是告诉<code>date</code>命令将日期显示为两位数的年月日组合。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">date</span> +%y%m%d</span></span><br><span class="line">200123</span><br></pre></td></tr></table></figure><blockquote><p>命令替换会创建一个子shell来运行对应的命令，subshell是由运行该脚本的shell所创建出来的独立的子shell，所以该子shell所执行命令是无法使用脚本所创建的变量的。</p></blockquote><h2 id="重新定向输入和输出"><a href="#重新定向输入和输出" class="headerlink" title="重新定向输入和输出"></a>重新定向输入和输出</h2><h3 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h3><p>最基本的重定向是将命令的输出发送到一个文件中，BashShell中用大于号<code>&gt;</code> 来实现这个功能。例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">date</span> &gt; test1.txt</span></span><br></pre></td></tr></table></figure><p>重定向操作创建了一个新文件test1.txt，文件权限由<code>umask</code> 决定，并将<code>date</code> 命令的输出结果写入test1.txt文件中，如果这个文件已经存在并有内容，那么重定向操作会覆盖这个文件的内容。</p><p>如果不想覆盖原文件的内容，只是追加写入该文件，可以使用两个大于号<code>&gt;&gt;</code> 来追加写入。例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">date</span> &gt; test.txt</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">who</span> &gt;&gt; test.txt</span></span><br></pre></td></tr></table></figure><p>这样test.txt文件中就会有两条内容，分别是两个命令的输出内容。</p><h3 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a>输入重定向</h3><p>输入重定向和输出正好相反，输入重定向的功能是把文件中的内容重定到命令，符号是小于号<code>&lt;</code> </p><p>简单的记忆方法就是，在命令行里，命令总是在左边，而重定向符号是“指向”数据的流向。</p><p>举一个例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">date</span> &gt; <span class="built_in">test</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">wc</span> &lt; <span class="built_in">test</span></span></span><br><span class="line">1629</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721122614.png" alt="输入重定向"></p><p><code>wc</code> 命令可以对数据中的文本进行计数，默认情况下，它会输出三个数值：</p><ul><li>文本的行数</li><li>文本的词数</li><li>文本的字节数</li></ul><h3 id="内联输入重定向"><a href="#内联输入重定向" class="headerlink" title="内联输入重定向"></a>内联输入重定向</h3><p>这种方法无需使用文件进行重定向，只需要在命令行中指定用于输入重定向的数据即可，符号为<code>&lt;&lt;</code> </p><p>在命令行中使用内联输入重定向时，shell会使用<code>PS2</code> 环境变量中的次提示符来提示输入数据，例如：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721122619.png" alt="内联"></p><p>次提示符会一直进行提示输入数据，直到输入了作为文本标记的那个字符串。</p><h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><p>有时候需要把一个命令的输出作为另一个命令的输入，虽然可以使用重定向来实现但是很麻烦，所以有了<strong>管道连接</strong>。</p><p>管道符号是一条单竖线<code>|</code> ，连接两个命令，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd1 | cmd2</span><br></pre></td></tr></table></figure><p>但是这两个命令并不是依次执行的，Linux实际上会同时运行这两个命令，在系统内部将它们联系起来，在第一个命令产生输出的同时，输出会被立即送给第二个命令，数据传输并不会用到任何中间文件和缓冲区。</p><p>比如使用<code>ls -al</code> 命令时输出结果太长，屏幕无法显示完全，我们可以使用<code>more</code> 命令进行分页显示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -al | more</span><br></pre></td></tr></table></figure><h2 id="执行数学运算"><a href="#执行数学运算" class="headerlink" title="执行数学运算"></a>执行数学运算</h2><p>在shell脚本中有两种方式可以执行数学运算：</p><h3 id="expr"><a href="#expr" class="headerlink" title="expr"></a>expr</h3><p>例如：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721122625.png" alt="expr"></p><p>但是<code>expr</code> 命令只能识别少数的数学和字符串操作符：</p><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>ARG1 | ARG2</td><td>如果ARG1既不是<code>null</code> 也不是零值，返回ARG1，否则返回ARG2</td></tr><tr><td>ARG1 &amp; ARG2</td><td>如果没有参数是<code>null</code> 或零值，返回ARG1，否则返回0</td></tr><tr><td>ARG1 &lt; ARG2</td><td>小于返回1，否则返回0</td></tr><tr><td>ARG1 &lt;&#x3D; ARG2</td><td>小于等于返回1，否则返回0</td></tr><tr><td>ARG1 &#x3D; ARG2</td><td>等于返回1，否则返回0</td></tr><tr><td>ARG1 !&#x3D; ARG2</td><td>不等于返回1，否则返回0</td></tr><tr><td>ARG1 &gt;&#x3D; ARG2</td><td>大于等于返回1，否则返回0</td></tr><tr><td>ARG1 &gt; ARG2</td><td>大于返回1，否则返回0</td></tr><tr><td>ARG1 + ARG2</td><td>运算和</td></tr><tr><td>ARG1 - ARG2</td><td>运算差</td></tr><tr><td>ARG1 * ARG2</td><td>乘积</td></tr><tr><td>ARG1 &#x2F; ARG2</td><td>算术商</td></tr><tr><td>ARG1 % ARG2</td><td>算术余数</td></tr><tr><td>STRING : REGEXP</td><td>如果REGEXP匹配到了STRING中的某个模式，返回该模式匹配</td></tr><tr><td>match STRING REGEXP</td><td>如果REGEXP匹配到了STRING中的某个模式，返回该模式匹配</td></tr><tr><td>substr STRING POS LENGTH</td><td>返回起始位置为POS(从1开始计数)、长度为LANGTH个字符的子字符串</td></tr><tr><td>index STRING CHARS</td><td>返回在SREING中找到CHARS字符串的位置，否则返回0</td></tr><tr><td>length STRING</td><td>返回字符串STRING的数值长度</td></tr><tr><td>+ TOKEN</td><td>将TOKEN解释成字符串，即使是个关键字</td></tr><tr><td>(EXPRESSION)</td><td>返回EXPRESSION的值</td></tr></tbody></table><p>但是非常严重的一点就是很多操作符在shell中是有特殊含义的，比如星号<code>*</code> ，如果进行乘法运算就会有诡异的结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721122630.png" alt="报错"></p><p>要让<code>expr</code> 命令正确执行运算就要用到转义符<code>\</code> :</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expr 1 \* 2</span><br></pre></td></tr></table></figure><p>那么就可以在shell脚本中使用数学计算了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">var1=10</span><br><span class="line">var2=20</span><br><span class="line">var3=$(expr $var2 / $var1)</span><br><span class="line">echo result is $var3</span><br></pre></td></tr></table></figure><p>结果自然是：<code>result is 2</code>。</p><h3 id="使用方括号"><a href="#使用方括号" class="headerlink" title="使用方括号"></a>使用方括号</h3><p>在bash中将一个数学运算结果赋给某个变量时，可以用方括号将表达式括起来：<code>$[1 + 1]</code></p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">var1=100</span><br><span class="line">var2=50</span><br><span class="line">var3=45</span><br><span class="line">var4=$[$var1 * ($var2 - $var3)]</span><br><span class="line">echo &quot;result is $var4&quot; </span><br></pre></td></tr></table></figure><p>输出结果为：<code>result is 500</code></p><p>在方括号内不用担心转义，shell知道那是运算符而不是通配符。</p><blockquote><p>bash shell只支持整数运算，而zsh shell支持完整的浮点数算术操作</p></blockquote><h3 id="浮点解决方案"><a href="#浮点解决方案" class="headerlink" title="浮点解决方案"></a>浮点解决方案</h3><h4 id="bc基本用法"><a href="#bc基本用法" class="headerlink" title="bc基本用法"></a>bc基本用法</h4><p>bash计算器实际上是一种编程语言，它允许在命令行中输入浮点表达式，然后解释计算，bash计算器能够识别：</p><ul><li>数字（整数和浮点数）</li><li>变量（简单变量和数组）</li><li>注释（以#或者&#x2F;* *&#x2F;开头的行）</li><li>表达式</li><li>编程语句（例如if then语句）</li><li>函数</li></ul><p>bash shell环境下可以通过<code>bc</code> 命令访问bash计算器：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721122635.png" alt="bc"></p><p>现在就可以通过在脚本中使用<code>bc</code>来进行运算了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">var1=10.46</span><br><span class="line">var2=43.67</span><br><span class="line">var3=33.2</span><br><span class="line">var4=71</span><br><span class="line"></span><br><span class="line">var5=$(bc &lt;&lt; EOF</span><br><span class="line">scale = 4</span><br><span class="line">al = ($var1 * $var2)</span><br><span class="line">bl = ($var3 * $var4)</span><br><span class="line">al + bl</span><br><span class="line">EOF</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">echo &quot;result is $var5&quot;</span><br></pre></td></tr></table></figure><blockquote><p>我们在bc计算器中创建了变量<code>al</code> 、<code>bl</code> 等并且可以进行赋值，但是在bc计算器中的变量只能在计算器中使用，不能在shell脚本中使用，、。</p></blockquote><h2 id="退出脚本"><a href="#退出脚本" class="headerlink" title="退出脚本"></a>退出脚本</h2><p>shell脚本中的每个命令都使用<strong>退出状态码</strong>告诉shell它已经运行完毕，退出状态码是一个0~255之间的整数值，在命令结束时由命令传给shell。</p><h3 id="查看退出状态码"><a href="#查看退出状态码" class="headerlink" title="查看退出状态码"></a>查看退出状态码</h3><p>Linux提供了一个专门的变量<code>$?</code> 来保存上一个已执行命令的退出状态码。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721122640.png" alt="退出状态码"></p><p>默认情况下，如果一个命令成功执行，那么退出状态码就是0，反之，命令执行错误那它的退出状态码就是一个正常数值：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721122644.png" alt="错误状态码"></p><p>虽然Linux的错误码没有规律，但是默认情况下会有一个参考：</p><table><thead><tr><th>状态码</th><th>描述</th></tr></thead><tbody><tr><td>0</td><td>命令成功结束</td></tr><tr><td>1</td><td>一般性未知错误</td></tr><tr><td>2</td><td>不适合的shell命令</td></tr><tr><td>126</td><td>命令不可执行</td></tr><tr><td>127</td><td>没找到命令</td></tr><tr><td>128</td><td>无效的退出参数</td></tr><tr><td>128+x</td><td>与Linux系统信号x相关的严重错误</td></tr><tr><td>130</td><td>通过<code>Ctrl + C</code> 结束的命令</td></tr><tr><td>255</td><td>正常范围之外的退出状态码</td></tr></tbody></table><h3 id="exit"><a href="#exit" class="headerlink" title="exit"></a>exit</h3><p>默认情况下，shell脚本会以脚本中最后一个执行的命令的退出状态码退出。</p><p><code>exit</code> 命令可以让你自己指定一个退出状态码，甚至可以是变量。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">var1=10</span><br><span class="line">var2=20</span><br><span class="line">var3=$(expr $var2 / $var1)</span><br><span class="line">echo result is $var3</span><br><span class="line">exit $var3</span><br></pre></td></tr></table></figure><p>但是有一点要注意，退出状态码的最大值为255，如果超过这个数值，shell就会通过模运算得到最终的退出状态码值，例如指定状态码为300，shell会拿它除以256，余数是44，那么最终的退出状态码就是44：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721122649.png" alt="44"></p><h2 id="结构化命令"><a href="#结构化命令" class="headerlink" title="结构化命令"></a>结构化命令</h2><h3 id="使用if-then语句"><a href="#使用if-then语句" class="headerlink" title="使用if then语句"></a>使用if then语句</h3><p>语法如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if command</span><br><span class="line">then</span><br><span class="line">command</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p><code>if</code>后面那个命令的退出状态码就是<code>if</code> 的判断条件，如果命令成功执行状态码为0，<code>if</code>语句继续执行，如果命令的状态码是其他值，那么<code>then</code> 部分的命令就不会执行，<code>fi</code> 表示语句结束。</p><p>举一个简单的例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">if pwd</span><br><span class="line">then</span><br><span class="line">echo &quot;test&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p><code>pwd</code>命令成功执行，结果自然就是输出test文本，举一个反例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bsah</span></span><br><span class="line">if notcommand</span><br><span class="line">then</span><br><span class="line">echo &quot;test&quot;</span><br><span class="line">fi</span><br><span class="line">echo &quot;not test&quot;</span><br></pre></td></tr></table></figure><p><code>notcommnd</code> 就不是一个shell的命令，所以<code>then</code> 里面的命令并不会执行，脚本执行的输出自然是not test。</p><p>当然<code>if then</code>还有另外一种写法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if command; then</span><br><span class="line">command</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>用法是一样的啦，不过把<code>then</code>放在<code>if</code>的同一行了。</p><h3 id="if-then-else语句"><a href="#if-then-else语句" class="headerlink" title="if then else语句"></a>if then else语句</h3><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if command</span><br><span class="line">then</span><br><span class="line">command</span><br><span class="line">else</span><br><span class="line">command</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>举个例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">testusr=laugh</span><br><span class="line">if grep $testusr /etc/passwd</span><br><span class="line">then</span><br><span class="line">echo &quot;The bash files for usr $testusr are:&quot;</span><br><span class="line">ls -a /home/$testusr/.b*</span><br><span class="line">echo</span><br><span class="line">else</span><br><span class="line">echo &quot;The usr $testusr does not exist on this system.&quot;</span><br><span class="line">echo</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>上述例子中，如果<code>testusr</code> 的值是系统中存在的用户名，则正常输出家目录下的bash信息，如果不存在则输出一句话告诉这个用户不存在。</p><h3 id="嵌套if"><a href="#嵌套if" class="headerlink" title="嵌套if"></a>嵌套if</h3><p>还是用例子来说明吧：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">testusr=NoUser</span><br><span class="line">if grep $testusr /etc/passwd</span><br><span class="line">then</span><br><span class="line">echo &quot;the usr $testusr exists on this system&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;the usr $testusr does not exist on this system&quot;</span><br><span class="line">if ls -d /home/$testusr/</span><br><span class="line">then</span><br><span class="line">echo &quot;however $testusr have a directory&quot;</span><br><span class="line">fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>检测是否存在这个用户，存在输出存在不存在输出不存在并且查看家目录下是否有这个用户的家目录。</p><p>嵌套if还有另外一个形式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if command</span><br><span class="line">then</span><br><span class="line">command</span><br><span class="line">elif command2</span><br><span class="line">then</span><br><span class="line">commands</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>喜欢用那种看个人。</p><p>再来看个例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">testusr=NoUsr</span><br><span class="line">if grep $testusr /etc/passwd</span><br><span class="line">then</span><br><span class="line">echo &quot;the usr $testusr exists on this system&quot;</span><br><span class="line">elif ls -d /home/$testusr</span><br><span class="line">then</span><br><span class="line">echo &quot;the usr $testusr does not exist on this system&quot;</span><br><span class="line">echo &quot;however $testusr has a directory&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;the usr $testusr does not exist on this system&quot;</span><br><span class="line">echo &quot;and $testusr does not have a directory&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>当然使用更多的嵌套也是可以的，但是上面这个例子要注意的是else块是属于elif块的而不是if-then块的。</p><h2 id="test命令"><a href="#test命令" class="headerlink" title="test命令"></a>test命令</h2><p><code>if-then</code>语句有一个致命的缺点就是不能判断退出状态码之外的条件，<code>test</code> 命令提供了在<code>if-then</code>语句中测试不同条件的途径。如果<code>test</code> 命令中的条件成立，命令就会退出并返回退出状态码0，反之则是其他。如果<code>test</code>命令的参数部分为空，也会以非零的状态码退出。例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">testnr=&quot;FULL&quot;</span><br><span class="line">if test $testnr</span><br><span class="line">then</span><br><span class="line">echo &quot;true&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;false&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>就上述例子而言，输出结果就是<code>true</code> 如果变量<code>testnr</code> 的值是空的<code>testur=&quot;&quot;</code>那么输出结果就是<code>false</code> 。</p><h4 id="方括号判断"><a href="#方括号判断" class="headerlink" title="方括号判断"></a>方括号判断</h4><p>还有一种更方便的判断方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if [ command ]</span><br><span class="line">then</span><br><span class="line">commands</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>用法和<code>test</code>命令相同，但是要特别注意空格哦。</p><p><code>test</code>命令可以判断三种条件：</p><ul><li>数值比较</li><li>字符串比较</li><li>文件比较</li></ul><h3 id="数值比较"><a href="#数值比较" class="headerlink" title="数值比较"></a>数值比较</h3><p>常见参数：</p><table><thead><tr><th align="center">语句</th><th>描述</th></tr></thead><tbody><tr><td align="center">n1 -eq n2</td><td>检查n1是否等于n2</td></tr><tr><td align="center">n1 -ge n2</td><td>检查n1是否大于等于n2</td></tr><tr><td align="center">n1 -gt n2</td><td>检查n1是否大于n2</td></tr><tr><td align="center">n1 -le n2</td><td>检查n1是否小于等于n2</td></tr><tr><td align="center">n1 -lt n2</td><td>检查n1是否小于n2</td></tr><tr><td align="center">n1 -ne n2</td><td>检查n1是否不等于n2</td></tr></tbody></table><p>举个例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var1=10</span><br><span class="line">var2=20</span><br><span class="line">if [ $var1 -lt $var2 ]</span><br><span class="line">then</span><br><span class="line">echo &quot;true&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;false&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>输出结果自然是<code>true</code>，反之把<code>var1</code>和<code>var2</code>的值换一下输出结果则是<code>flase</code></p><blockquote><p>注意<code>test</code> 命令和方括号都不支持浮点数的比较。只能使用整数</p></blockquote><h3 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h3><table><thead><tr><th>语句</th><th>描述</th></tr></thead><tbody><tr><td>str1 &#x3D; str2</td><td>检查str1是否与str2相同</td></tr><tr><td>str1 !&#x3D; str2</td><td>检查str1是否与str2不同</td></tr><tr><td>str1 &lt; str2</td><td>检查str1是否比str2小</td></tr><tr><td>str1 &gt; str2</td><td>检查str1是否比str2大</td></tr><tr><td>-n str</td><td>检查str的长度是否非零</td></tr><tr><td>-z str</td><td>检查str的长度是否为零</td></tr></tbody></table><p>比较字符串值相等就不用说了，麻烦的是比较字符串的大小，因为shell会把大于小于号识别为重定向符号，举一个反例：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721122701.png" alt="反例"></p><p>可以看到脚本报错并创建了一个新文件，且输出了<code>false</code> 是由于shell把大于号判定为重定向操作符，此时只需要转义即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">var1=hahaha</span><br><span class="line">var2=ha</span><br><span class="line">if [ $var1 \&gt; $var2 ]</span><br><span class="line">then</span><br><span class="line">echo &quot;true&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;false&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>这样就能正确判断并输出啦。</p><p>还有一种困扰，如果当两个字符串长度相等只是大小写不同怎么进行比较，<code>test</code>命令使用标准的ASCII顺序，根据每个字符的ASCII数值来决定排序结果，所以会判定大写字母<strong>小于</strong>小写字母，来看个例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">var1=test</span><br><span class="line">var2=Test</span><br><span class="line">if [ $var1 \&gt; $var2 ]</span><br><span class="line">then</span><br><span class="line">echo &quot;true&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;false&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721122710.png" alt="结果"></p><p>字符串大小比较参数<code>-n、-z</code> 没啥说的，要注意的是<code>-z</code>即使这个变量没有被定义它也会成功执行，判断为变量长度为零。</p><h3 id="文件比较"><a href="#文件比较" class="headerlink" title="文件比较"></a>文件比较</h3><p>文件比较可以测试系统上文件和目录的状态。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>-d file</td><td>检查file是否存在并是一个目录</td></tr><tr><td>-e</td><td>检查file是否存在</td></tr><tr><td>-f</td><td>检查file是否存在并是一个文件</td></tr><tr><td>-r</td><td>检查file是否存在并可读</td></tr><tr><td>-s</td><td>检查file是否存在并非空</td></tr><tr><td>-w</td><td>检查file是否存在并可写</td></tr><tr><td>-x</td><td>检查file是否存在并可执行</td></tr><tr><td>-O</td><td>检查file是否存在并属当前用户所有</td></tr><tr><td>-G</td><td>检查file是否存在并默认组与当前用户相同</td></tr><tr><td>file1 -nt file2</td><td>检查file1是否比file2新</td></tr><tr><td>file1 -ot file2</td><td>检查file是否比file2旧</td></tr></tbody></table><p>直接上例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">testdir=/home/test</span><br><span class="line">if [ -d $testdir ]</span><br><span class="line">then</span><br><span class="line">echo &quot;the $testdir directory exists&quot;</span><br><span class="line">cd $testdir</span><br><span class="line">ls -al</span><br><span class="line">else</span><br><span class="line">echo &quot;the $testdir directory does not exist&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>检测<code>$testdir</code>变量中的文件夹是否存在，如果存在则切换到该工作目录并输出所有文件信息，如果不存在则输出不存在。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">location=$HOME/test</span><br><span class="line">filename=test.sh</span><br><span class="line">if [ -e $location ]</span><br><span class="line">then</span><br><span class="line">echo &quot;the dir is true&quot;</span><br><span class="line">echo &quot;now check on the file $filename&quot;</span><br><span class="line">if [ -e $HOME/test/$filename ]</span><br><span class="line">then</span><br><span class="line">echo &quot;the file is true&quot;</span><br><span class="line">ls -l /$HOME/test/$filename</span><br><span class="line">else</span><br><span class="line">echo &quot;the file is false&quot;</span><br><span class="line">fi</span><br><span class="line">else</span><br><span class="line">echo &quot;the dir is false&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>先检查<code>location</code>的目录是否存在，若存在则输出文件夹true并检查该目录下是否有<code>filename</code> 这个文件，如果有则输出文件true并显示文件详细信息如果没有则显示文件false，如果文件夹不存在则输出文件夹false：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721122716.png" alt="执行结果"></p><p><code>-e </code>这个参数可用于文件或者目录是否存在，但是要确定的指定对象为文件，必须用<code>-f</code> 参数，确定为目录就要用<code>-d</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">filename=$HOME/test</span><br><span class="line">echo</span><br><span class="line">echo &quot;now i will check the file $filename&quot;</span><br><span class="line">echo</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">检查该文件是否存在</span></span><br><span class="line">if [ -e $filename ]</span><br><span class="line">then</span><br><span class="line">echo &quot;the $filename is true&quot;</span><br><span class="line">echo &quot;but it is a file ?&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">检查是否是一个文件</span></span><br><span class="line">if [ -f $filename ]</span><br><span class="line">then</span><br><span class="line">echo &quot;yes it is a file&quot; #是文件并输出相信信息</span><br><span class="line">ls -l $filename</span><br><span class="line">else</span><br><span class="line">echo &quot;no it is not a file&quot; #不是一个文件</span><br><span class="line">echo &quot;but it is a dir ?&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">检查是否是一个文件夹</span></span><br><span class="line">if [ -d $filename ]</span><br><span class="line">then</span><br><span class="line">echo &quot;yes it is a dir&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;i do not know&quot;</span><br><span class="line">fi</span><br><span class="line">fi</span><br><span class="line">else</span><br><span class="line">echo &quot;the $filename is false&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>除了检查文件存在还能检查文件的权限等，用法和<code>-d、-e</code> 差不多就不赘述了，还有检查文件的日期，比较两个文件的更改时间等。</p><h2 id="复合条件测试"><a href="#复合条件测试" class="headerlink" title="复合条件测试"></a>复合条件测试</h2><p><code>if-then</code>语句可以使用布尔逻辑运算符，语法如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ command1 ] &amp;&amp; [ command2 ]</span><br><span class="line">[ command1 ] || [ command2 ]</span><br></pre></td></tr></table></figure><p>第一种运算符是<code>AND</code>运算，两个条件必须同时满足才可以返回退出状态码0，第二种是<code>OR</code>运算，两个条件中有一个条件复合即可。例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">if [ -d $HOME/test ] &amp;&amp; [ -d $HOME/test ]</span><br><span class="line">then</span><br><span class="line">echo &quot;dir is true and you can write it&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;i do not know&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>如果test不是一个目录或者没有可写的权限就会输出idonotknow</p><h2 id="if-then的高级特性"><a href="#if-then的高级特性" class="headerlink" title="if-then的高级特性"></a>if-then的高级特性</h2><ul><li>用于数学表达式的双括号</li><li>用于高级字符串处理功能的双方括号</li></ul><h3 id="双括号"><a href="#双括号" class="headerlink" title="双括号"></a>双括号</h3><p><code>test</code> 命令只能进行简单的数学运算，但是双括号允许在bash中使用更高级的数学表达式。</p><table><thead><tr><th>符号</th><th>描述</th></tr></thead><tbody><tr><td>val++</td><td>后增</td></tr><tr><td>val–</td><td>后减</td></tr><tr><td>++val</td><td>先增</td></tr><tr><td>–val</td><td>先减</td></tr><tr><td>!</td><td>逻辑求反</td></tr><tr><td>~</td><td>位求反</td></tr><tr><td>**</td><td>幂运算</td></tr><tr><td>&lt;&lt;</td><td>左位移</td></tr><tr><td>&gt;&gt;</td><td>右位移</td></tr><tr><td>&amp;</td><td>位布尔和</td></tr><tr><td>|</td><td>位布尔或</td></tr><tr><td>&amp;&amp;</td><td>逻辑和</td></tr><tr><td>||</td><td>逻辑减</td></tr></tbody></table><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">var1=10</span><br><span class="line">if (( $var1 ** 2 &gt; 90 ))</span><br><span class="line">then</span><br><span class="line">(( var2 = $var1 ** 2 ))</span><br><span class="line">echo &quot;the square of $var1 is $var2&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721122723.png" alt="输出结果"></p><h3 id="双方括号"><a href="#双方括号" class="headerlink" title="双方括号"></a>双方括号</h3><p>双方括号命令提供了针对字符串比较的高级特性，它采用了<code>test</code> 命令中的标准字符串比较，而且支持一个<code>test</code> 命令中所没有的新特性：模式匹配</p><blockquote><p>注意，双方括号在bash shell中工作良好，但是其他shell支持不支持我就不知道了。</p></blockquote><p>在模式匹配中可以自定义一个正则表达式来匹配字符串：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">if [[ $USER == l* ]]</span><br><span class="line">then</span><br><span class="line">echo &quot;hello $USER&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;i do not know&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>正则表达式之后再讲。</p><h2 id="case命令"><a href="#case命令" class="headerlink" title="case命令"></a>case命令</h2><p>如果要在一组值中匹配特定的值，但是如果写<code>if-then-else</code> 语句的话会很长很长，用<code>case</code> 命令就会简单很多，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">case $USER in</span><br><span class="line">laugh | laugh-ubuntu )</span><br><span class="line">echo &quot;welcome $USER&quot;</span><br><span class="line">echo &quot;hello&quot; ;;</span><br><span class="line">testing )</span><br><span class="line">echo &quot;do not forget to log off when you are done&quot; ;;</span><br><span class="line">testing2 )</span><br><span class="line">echo &quot;hello world&quot; ;;</span><br><span class="line">* )</span><br><span class="line">echo &quot;hahahah&quot; ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><blockquote><p>注意分号和小括号哦</p></blockquote><h2 id="for命令"><a href="#for命令" class="headerlink" title="for命令"></a>for命令</h2><p><code>for</code> 命令可以循环执行定义好的一组命令，基本格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for var in list</span><br><span class="line">do</span><br><span class="line">commands</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>如果你愿意，也可以这么写<code>for var in list ; do</code> 。</p><p>在<code>list</code> 参数中要提供迭代要用到的一系列值，在每次迭代中变量<code>var</code> 会包含列表中的当前值，第一次迭代会使用列表的第一个值，第二次使用第二个，以此类推，直到列表的值都过一遍。</p><p>讲着很麻烦，来个例子更直观：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">for test in 1 2 3 4 5</span><br><span class="line">do</span><br><span class="line">echo &quot;this is $test&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721122730.png" alt="结果"></p><h3 id="读取列表中的复杂值"><a href="#读取列表中的复杂值" class="headerlink" title="读取列表中的复杂值"></a>读取列表中的复杂值</h3><p>举个例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">for test in i don&#x27;t know if this&#x27;ll work</span><br><span class="line">do</span><br><span class="line">echo &quot;word:$test&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721122735.png" alt="结果"></p><p>引号导致语句读取出现错误，有两种办法解决：</p><ul><li>转义符</li><li>双引号定义含有单引号的单词</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">for test in i &quot;don&#x27;t&quot; know if &quot;this&#x27;ll&quot; work</span><br><span class="line">do</span><br><span class="line">echo &quot;word:$test&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">for test in i don\&#x27;t know if this\&#x27;ll work</span><br><span class="line">do</span><br><span class="line">echo &quot;word:$test&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721122739.png" alt="结果"></p><p>当然同理，如果是取两个单词，也可以使用双引号括起来，值得注意的是引号并不会被识别为字符。</p><h3 id="从变量读取列表"><a href="#从变量读取列表" class="headerlink" title="从变量读取列表"></a>从变量读取列表</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">list=&quot;1 2 3 4 5&quot;</span><br><span class="line">for test in $list</span><br><span class="line">do</span><br><span class="line">echo &quot;this is $test&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="从命令读取值"><a href="#从命令读取值" class="headerlink" title="从命令读取值"></a>从命令读取值</h3><p>举例：我现在创建一个文件，文件中有1~5五个数，就可以使用<code>cat</code> 命令来查看，然后使用到<code>for</code>命令中</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721122744.png" alt="示例"></p><blockquote><p>注意语句的语法和<strong>文件的路径</strong>！这个很重要。</p></blockquote><h3 id="更改字段分隔符"><a href="#更改字段分隔符" class="headerlink" title="更改字段分隔符"></a>更改字段分隔符</h3><p>有一个特殊的环境变量<code>IFS</code> 叫做内部字段分隔符，默认情况下bash shell会把以下几个当做字段分隔符：</p><ul><li>空格</li><li>制表符</li><li>换行符</li></ul><p>修改<code>IFS</code> 的值：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IFS=$&#x27;\n&#x27;</span><br></pre></td></tr></table></figure><p>这样字段分隔符只会识别换行符了，如果要指定多个字符，用冒号<code>:</code>隔开即可。</p><h3 id="用通配符读取目录"><a href="#用通配符读取目录" class="headerlink" title="用通配符读取目录"></a>用通配符读取目录</h3><p>用<code>for</code> 命令遍历目录中的文件，进行这个操作时，必须在文件名或者路径中使用通配符，它会强制shell使用文件扩展匹配，文件扩展匹配是生成匹配指定通配符的文件名或路径名的过程。例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">for file in $HOME/test/*</span><br><span class="line">do</span><br><span class="line">if [ -d &quot;$file&quot; ]#引号是防止文件名中含有特殊字符影响匹配</span><br><span class="line">then</span><br><span class="line">echo &quot;$file is a dir&quot;</span><br><span class="line">elif [ -f &quot;$file&quot; ]</span><br><span class="line">then</span><br><span class="line">echo &quot;$file is a file&quot;</span><br><span class="line">fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721122752.png" alt="输出结果"></p><p>当然也可以使用多个目录，用空格隔开即可，有一个缺点就是如果你指定的目录不存在，<code>for</code> 语句也会执行遍历，并不会报错，所以最好在执行遍历的时候检查一下该目录是否存在：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">for file in $HOME/test/* $HOME/testing</span><br><span class="line">do</span><br><span class="line">if [ -d &quot;$file&quot; ]</span><br><span class="line">then</span><br><span class="line">echo &quot;$file is a dir&quot;</span><br><span class="line">elif [ -f &quot;$file&quot; ]</span><br><span class="line">then</span><br><span class="line">echo &quot;$file is a file&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;$file does not exist&quot;</span><br><span class="line">fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721122800.png" alt="输出结果"></p><h2 id="预知后事如何，请听下期更新"><a href="#预知后事如何，请听下期更新" class="headerlink" title="预知后事如何，请听下期更新~"></a>预知后事如何，请听下期更新~</h2>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Excel常用快捷键及小技巧</title>
      <link href="/posts/60150ec6/"/>
      <url>/posts/60150ec6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文作者：萌萌哒ㄛ团团</p></blockquote><h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Alt + Enter</span><br></pre></td></tr></table></figure><p>强制换行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Tab</span><br></pre></td></tr></table></figure><p>向右输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Shift + Enter</span><br></pre></td></tr></table></figure><p>向上输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Shift + Tab</span><br></pre></td></tr></table></figure><p>向左输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + Enter</span><br></pre></td></tr></table></figure><p>在多个单元格同时输入数据（在编辑栏）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">F4</span><br></pre></td></tr></table></figure><p>重复上一个操作步骤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + 方向键</span><br></pre></td></tr></table></figure><p>快速定位到表格端点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + Shift + 方向键</span><br></pre></td></tr></table></figure><p>快速定位到有数据表格的端点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Shift + 单元格网格线双击</span><br></pre></td></tr></table></figure><p>快速选中数据，根据网格线双击位置选择</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + G</span><br></pre></td></tr></table></figure><p>快速定位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + H</span><br></pre></td></tr></table></figure><p>查找与替换</p><h2 id="分数输入格式"><a href="#分数输入格式" class="headerlink" title="分数输入格式"></a>分数输入格式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x（空格）m/n</span><br></pre></td></tr></table></figure><blockquote><p>系统会默认化简到最简</p></blockquote><h2 id="插入大量小数"><a href="#插入大量小数" class="headerlink" title="插入大量小数"></a>插入大量小数</h2><p>选项—&gt;高级—&gt;自动插入小数点</p><blockquote><p>如果要保留两位，那么输入数据要比原数据大100倍，以此类推，使用完毕后建议关闭</p></blockquote><h2 id="快速复制到多个表"><a href="#快速复制到多个表" class="headerlink" title="快速复制到多个表"></a>快速复制到多个表</h2><p>选中要复制的内容，在左下角选择多个表，填充—&gt;至同组工作表即可</p><h2 id="将数值转换为文本"><a href="#将数值转换为文本" class="headerlink" title="将数值转换为文本"></a>将数值转换为文本</h2><p>在数值前加上<code>&#39;</code>符号即可</p><h2 id="格式刷"><a href="#格式刷" class="headerlink" title="格式刷"></a>格式刷</h2><p>先选中要刷的格式的单元格，点击格式刷选择即可，如果需要刷不连续的单元格，则双击格式刷按钮即可</p><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><p><code>?</code>表示一个字符，<code>*</code>表示所有</p><h2 id="高级筛选"><a href="#高级筛选" class="headerlink" title="高级筛选"></a>高级筛选</h2><p>首先制作条件区域，第一行必须是标题行且与原表标题一致，第二行必须是筛选的值条件，在数据–&gt;排列和筛选–&gt;高级中操作，如果条件在一行的表示与的关系，在不同行的时候表示</p><h2 id="彻底隐藏工作表"><a href="#彻底隐藏工作表" class="headerlink" title="彻底隐藏工作表"></a>彻底隐藏工作表</h2><p><code>Alt + F11</code>打开窗口，将<code>visible</code>属性改为<code>2</code>即可</p><h2 id="快速填充序列号"><a href="#快速填充序列号" class="headerlink" title="快速填充序列号"></a>快速填充序列号</h2><p><code>Ctrl + Shift + 下方向键</code>全选列，然后填充–&gt;序列–&gt;设置步长</p><h2 id="表格美化要点"><a href="#表格美化要点" class="headerlink" title="表格美化要点"></a>表格美化要点</h2><ul><li>不显示网格线，设置浅色边框</li><li>数字和英文字体设置为Arial字体，汉字使用等线或微软雅黑</li><li>正文使用10号字体，标题使用12号字体，大标题使用20号字体</li><li>表头和标题设置深色底纹，白色文字</li><li>隔行填充浅色底纹</li><li>一张表使用同一色系，不同区域用颜色深浅来区别</li></ul><h2 id="计算被标记的不同列的和"><a href="#计算被标记的不同列的和" class="headerlink" title="计算被标记的不同列的和"></a>计算被标记的不同列的和</h2><p> 查找后全选，取别名，使用<code>sum</code>函数计算</p><h2 id="公式部分"><a href="#公式部分" class="headerlink" title="公式部分"></a>公式部分</h2><p>向右填充前<strong>列</strong>不变，向下填充后<strong>行</strong>不变</p><p><code>Ctrl + Shift + Enter</code> 结束函数输入并计算</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><p>可以运算，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A&amp;&quot;与&quot;&amp;B  A与B</span><br></pre></td></tr></table></figure><h3 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h3><p>文本型数字和数值型数字，数值型数字可以用于计算，在函数名之前加<code> --</code>可将返回值变成数值型数字，在输入文本型数字时，在数据前加<code>‘</code>，分列可以改变字符集</p><h3 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h3><p>日期也是一种数值，也可以进行计算，日期规定：1代表一整天。从1900年1  月0日（实际不存在）到9999年，小数代表时间。</p><h3 id="逻辑值"><a href="#逻辑值" class="headerlink" title="逻辑值"></a>逻辑值</h3><p>在四则运算中<code>TRUE</code>为1，<code>FALSE</code>为0，可参与计算</p><p> 在逻辑判断时，<code>FALSE</code>为0，其他非0数值为<code>TRUE</code></p><p> 在比较运算中，<code>TRUE</code>&gt;<code>FALSE</code>&gt;文本&gt;数值</p><h2 id="数组的定义和分类"><a href="#数组的定义和分类" class="headerlink" title="数组的定义和分类"></a>数组的定义和分类</h2><p>数组是一个或多个元素按照行列方式组合的集合</p><ul><li>常量数组: <code>&#123;1,2,3&#125;</code> 或 <code>&#123;1;2;3&#125;</code></li><li>区域数组: 引用单元格内的数组</li><li>内存数组: 通过公式计算得来的，单元格放不下，在内存中暂时存放，或者不需要展示，依然可以参与计算</li></ul><h3 id="数组维度和计算"><a href="#数组维度和计算" class="headerlink" title="数组维度和计算"></a>数组维度和计算</h3><ul><li>一维数组：<code>&#123;1,2,3&#125;</code> 或 <code>&#123;1;2;3&#125;</code></li><li>二维数组：<code>&#123;1,2,3,4;1,2,3,4&#125;</code></li></ul><h3 id="数组运算"><a href="#数组运算" class="headerlink" title="数组运算"></a>数组运算</h3><p>同方向一维数组运算，相对应的数据运算，多出来的部分返回错误值</p><p>二维数组运算：与线性代数中数组计算完全相同</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="SUM-函数"><a href="#SUM-函数" class="headerlink" title="SUM()函数"></a>SUM()函数</h3><p>只能求和，参数可以是常量，也可以单元格引用，参数最多为254个，参数与参数之间为相加（逗号隔开），不需要使用运算符</p><h3 id="AVERAGE-函数"><a href="#AVERAGE-函数" class="headerlink" title="AVERAGE()函数"></a>AVERAGE()函数</h3><p>求平均值，参数可以引用单元格也可以手动输入，当内容全部为文本时，会返回错误值，不会忽略错误值</p><h3 id="MAX-MIN-函数"><a href="#MAX-MIN-函数" class="headerlink" title="MAX()&#x2F;MIN()函数"></a>MAX()&#x2F;MIN()函数</h3><p>求极值，不会忽略错误值</p><h3 id="COUNT-函数"><a href="#COUNT-函数" class="headerlink" title="COUNT()函数"></a>COUNT()函数</h3><p>计数，出现错误值时会忽略</p><blockquote><p>注意：</p><p>引用单元格内的逻辑值会不参与计算，但是手动输入的逻辑值会参与计算，把<code>TRUE</code>当1计算，手动输入常量时需要半角双号引起来，数值之间使用半角逗号隔开</p></blockquote><h3 id="IF-函数"><a href="#IF-函数" class="headerlink" title="IF()函数"></a>IF()函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IF(条件，真值，假值)</span><br></pre></td></tr></table></figure><p>条件成立返回真值，否则返回假值，例如：<code>IF(F16 = &quot;真&quot;,1,-1)</code>表示F16单元格内内容为“真”时返回1，否则返回-1，当判断条件 件，当有多个条件时需要嵌套，当不需要返回内容的时，将返回参数设置 为<code>&quot;&quot;</code>(半角符号)即可，如：<code>IF(F16=10,&quot;对&quot;,&quot;&quot;)</code>也可以判断该单元格如：   IF(1,”真”,”假”)</p><h3 id="VLOOKUP-函数"><a href="#VLOOKUP-函数" class="headerlink" title="VLOOKUP()函数"></a>VLOOKUP()函数</h3><p>查找函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=VlOOKUP(查找值,查找区域,查找序列,查找方式)</span><br></pre></td></tr></table></figure><ul><li>查找值：需要查找内容的条件</li><li>查找区域：查找内容所在的区域，可以多选不能少选</li><li>查找序列：需要查找的内容在查找条件后的第几列</li><li>查找方式：精确查找为0，相似查找为1</li></ul><blockquote><p>注意： </p><ol><li><p>当查找内容为空时返回错误值</p></li><li><p>查找值有重复时，只能返回第一个值</p><pre><code>            3. 需要查找很多内容需要下拉填充时，将查找区域改为绝对引用，否则查找条件随着填充区域变化而变化，选中查找区域，快捷键`F4`            4. 查找区域必须将查找值作为第一列            5. 函数可以跨、表跨工作簿使用</code></pre></li></ol></blockquote><h3 id="AND-OR-函数"><a href="#AND-OR-函数" class="headerlink" title="AND()&#x2F;OR()函数"></a>AND()&#x2F;OR()函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=AND(逻辑值1，逻辑值2........逻辑30)</span><br></pre></td></tr></table></figure><p>有一个为<code>FALSE</code>则返回<code>FALSE</code>，选中逻辑条件，按<code>F9</code>可以查看每一步结果，可以参与乘法计算如：<code>AND(F16=XX,E8)=(F16=XX)*(E8)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=OR(逻辑值1，逻辑值2........)</span><br></pre></td></tr></table></figure><p>有一个返回<code>TRUE</code>则返回<code>TRUE</code>，全为<code>FALSE</code>则返回<code>FALSE</code>，可参与加法计算：<code>OR(F16,E8)=(F16=XX)+(E8)</code></p><p><strong>应用：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">=IF((F16=XX)+(E8&gt;200),200,0)或</span><br><span class="line">=IF((F16=XX)*(E8&gt;200),200,0)</span><br></pre></td></tr></table></figure><blockquote><p>在逻辑判断时，<code>FALSE</code>为0，其他非0数值为<code>TRUE</code></p></blockquote><h3 id="函数的嵌套"><a href="#函数的嵌套" class="headerlink" title="函数的嵌套"></a>函数的嵌套</h3><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=IF(OR(F16=XX,E8&gt;250),250,0)</span><br></pre></td></tr></table></figure><h3 id="MOD-函数"><a href="#MOD-函数" class="headerlink" title="MOD()函数"></a>MOD()函数</h3><p>计算余数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MOD(被除数，除数)</span><br></pre></td></tr></table></figure><p>结果的正负只取决于除数的正负</p><h3 id="INT-TRUNC-ROUND-函数"><a href="#INT-TRUNC-ROUND-函数" class="headerlink" title="INT()&#x2F;TRUNC()&#x2F;ROUND()函数"></a>INT()&#x2F;TRUNC()&#x2F;ROUND()函数</h3><p>保留小数函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INT(数字)//返回不大于目标数值的最大整数</span><br><span class="line">TRUNC(数字，保留小数位数)//对目标值进行截取，如果是0是可以省略，也可以是负数，表示保留整数位</span><br><span class="line">ROUND(数字，保留小数位数)//四舍五入保留</span><br><span class="line">ROUNDUP(数字，保留小数位数)//无条件向上舍入</span><br><span class="line">ROUNDDOWN(数字，保留小数位数)//无条件向下舍入</span><br></pre></td></tr></table></figure><h3 id="CEILING-FIOOR-函数"><a href="#CEILING-FIOOR-函数" class="headerlink" title="CEILING()&#x2F;FIOOR()函数"></a>CEILING()&#x2F;FIOOR()函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CEILING(待取整数，基数)//返回大于等于待取整数且是基数的整倍数</span><br><span class="line">FLOOR(待取整数，基数)//返回小于等于待取整数且是基数的整倍数</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>当待取整数为正，基数为负时，返回错误值，因为返回值是大于或小于基数的整数倍</p></blockquote><h3 id="RAND-RANDBETEEEN-A-B-函数"><a href="#RAND-RANDBETEEEN-A-B-函数" class="headerlink" title="RAND()&#x2F;RANDBETEEEN(A,B)函数"></a>RAND()&#x2F;RANDBETEEEN(A,B)函数</h3><p>返回随机数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">=RAND()//返回0到1之间的小数</span><br><span class="line">=RANDBETEEEN(A,B)//返回A到B之间的整数</span><br><span class="line">=RAND()*(N-M)+M</span><br></pre></td></tr></table></figure><h3 id="SUMIF-函数"><a href="#SUMIF-函数" class="headerlink" title="SUMIF()函数"></a>SUMIF()函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SUMIF(条件判断区域，条件，求和区域)</span><br></pre></td></tr></table></figure><p>当条件判读区域与求和区域在同  一区域时可以省略球和区域，也可以有多个参数如：<code>SUMIF(条件判断区域，   &#123;“条件1“，”条件2“&#125;，求和区域)</code>，该函数可以结合通配符使用，如：<code>SUMIF(条件 判断区域，&quot;?条件*&quot;，求和区域)</code>,也可以嵌套使用，如：<code>=SUM(SUMIF($C$2:$C   $15,&#123;&quot;入&quot;,&quot;出&quot;&#125;,D2:D15)*&#123;1,-1&#125;)</code></p><blockquote><p>注意：</p><p>当求和区域与条件区域是二维时，条件区域与求和区域尺寸必须一致，数据一一对应，在条件区域第一列判断时会返回求和区域第一列数据</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Office </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Excel </tag>
            
            <tag> Office </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓手机搭建简易WEB服务器</title>
      <link href="/posts/69085f9e/"/>
      <url>/posts/69085f9e/</url>
      
        <content type="html"><![CDATA[<h2 id="利用闲置安卓手机搭建本地测试环境或者低性能外网服务器"><a href="#利用闲置安卓手机搭建本地测试环境或者低性能外网服务器" class="headerlink" title="利用闲置安卓手机搭建本地测试环境或者低性能外网服务器"></a>利用闲置安卓手机搭建本地测试环境或者低性能外网服务器</h2><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>首先我们要了解安卓手机的优势，有以下几点：</p><ul><li>低功耗，全天24小时不间断开机也费不了多少电</li><li>稳定，很少因为意外宕机，就算宕机也能很快排查重启</li><li>性能高，一台四核多线程的云服务器的租金可是天价阿，但是一台四核甚至八核的手机就很便宜了吧（手动滑稽）</li><li>自带屏幕，方便操作，随身携带，超常待机，不怕突然断电</li><li>流量便宜</li></ul><p>当然缺点也是非常之明显的：</p><ul><li>需要额外安装大量环境，偶尔容器不稳定</li><li>如果需要更高级的操作就需要获取root权限，而当今社会root比登天都难， <del>如果你是VIVO那么还是少折腾，当个闹钟还是很不错的!</del></li><li>最重要的就是需要做内网穿透，当然如果你是在局域网内玩玩就当我没说嘻嘻</li></ul><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>安卓手机一台(最好最好是root过的，就完美了)</li><li>Termux终端</li><li>注册ngrok.cc并开通隧道</li><li>下载ngrok客户端(php&#x2F;python任选其一就可)</li></ul><h2 id="安装Termux"><a href="#安装Termux" class="headerlink" title="安装Termux"></a>安装Termux</h2><p>termux可以去官网下载，百度一下就可以：<a href="https://github.com/termux/termux-app">https://github.com/termux/termux-app</a></p><p>安装之后就是这样的界面：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720222418.png" alt="termux"></p><h3 id="更换bash："><a href="#更换bash：" class="headerlink" title="更换bash："></a>更换bash：</h3><p>输入<code>which bash</code> 输出结果如果是<code>/usr/bin/bash</code> 结尾的那么就可以跳过这一步了，当然如果你喜欢其他比如<code>zsh</code> 、<code>ash</code> 的话可自行更换</p><p>输入<code>chsh -s bash</code> 即可，如果报错呢就执行<code>pkg install bash</code> 安装以一下就好了</p><h3 id="编辑PS1"><a href="#编辑PS1" class="headerlink" title="编辑PS1"></a>编辑PS1</h3><p>先安装最基本的VIM编辑器：<code>pkg install vim</code> 执行完毕即可</p><p>输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim ../usr/etc/bash.bashrc</span></span><br></pre></td></tr></table></figure><blockquote><p>因为每个人手机的目录不尽相同，所以使用相对路径，所以保证此时工作目录在<code>~/</code> 下，如果没有，请执行一次<code>cd</code>回车</p></blockquote><p>然后修改如下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720222429.png" alt="bash.bashrc文件"></p><p>修改为个人喜好即可，但是为了方便，建议加上<code>\w</code>和<code>\u</code> 选项，前者能显示当前工作目录路径，后者显示当先用户，编辑完之后执行<code>:wq</code>保存退出。</p><h2 id="安装nginx服务器"><a href="#安装nginx服务器" class="headerlink" title="安装nginx服务器"></a>安装nginx服务器</h2><p>先执行一下更新：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">apt update &amp;&amp; apt upgrade</span></span><br></pre></td></tr></table></figure><p>安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pkg install nginx</span></span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720222435.png" alt="nginx"></p><h3 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h3><p>输入<code>nginx</code> 回车启动服务器</p><h2 id="检查服务器状态"><a href="#检查服务器状态" class="headerlink" title="检查服务器状态"></a>检查服务器状态</h2><p>输入<code>pkg install termux-tools</code> 安装termux工具，安装完成之后执行<code>ifconfig</code> 查看本机IP或者可以去路由器管理界面查看ip</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720222441.png" alt="查看"></p><p>也因该能看到localhost是127.0.0.1</p><p>在手机浏览器地址栏输入127.0.0.1或者在与手机在同一局域网内的电脑上就可以看到如下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720222451.png" alt="nginx"></p><blockquote><p>如果127.0.0.1报错的话那么就是本机端口被改，试试127.0.0.1:8080，如果还报错，请检查nginx服务器的状态，重启试试</p></blockquote><p>到这里，局域网内的服务器已经搭建完成，如何让不在此wifi下的其他小伙伴访问我们的服务器呢？这个时候就需要内网穿透了。</p><h2 id="注册隧道"><a href="#注册隧道" class="headerlink" title="注册隧道"></a>注册隧道</h2><p>内网穿透一般都是通过公网服务器对内网ip进行映射，可自行选择服务商，这里以<a href="http://www.ngrok.cc为例./">www.ngrok.cc为例。</a></p><p>首先需要注册账号，然后购买隧道，选用免费的即可，当然土豪请随意。</p><p>隧道的映射端口一定要填写本机的服务器端口，我的就是127.0.0.1:8080</p><p>开通好隧道之后来到隧道管理就会有一个隧道id和赠送域名，这个记下来，等会要用。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720222459.png" alt="隧道id"></p><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>Sunny-Ngork客户端下载：<a href="https://www.ngrok.cc/download.html">https://www.ngrok.cc/download.html</a></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720222503.png" alt="下载客户端"></p><p>有php和python版本，根据自己喜好选择，两个安装方法一模一样，下面以php版本为例：</p><h3 id="安装php"><a href="#安装php" class="headerlink" title="安装php"></a>安装php</h3><p>执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pkg install php</span></span><br></pre></td></tr></table></figure><p>完毕后执行<code>php -v </code> 查看php版本</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720222509.png" alt="安装php"></p><p>注意到了php (7.3.10-1),python同理</p><h2 id="使用Sunny-Norgk"><a href="#使用Sunny-Norgk" class="headerlink" title="使用Sunny-Norgk"></a>使用Sunny-Norgk</h2><p>解压下载好的客户端，是一个sunny.php的可执行文件</p><p>执行:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">php sunny.php</span></span><br></pre></td></tr></table></figure><p>如果报错没有权限，执行<code>chmod +x sunny.php</code> 即可</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720222516.png" alt="sunny"></p><p>执行完毕之后输入刚才获得的隧道id，等待链接服务器，链接成功之后就可以在公网输入获得的赠送域名就可以访问到本地的nginx了。</p><blockquote><p>便宜没好货，免费的服务器链接很慢，多链接几遍就会成功的。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> Android </tag>
            
            <tag> Termux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Katoolin工具集</title>
      <link href="/posts/36791001/"/>
      <url>/posts/36791001/</url>
      
        <content type="html"><![CDATA[<p>Katoolin是一个基于Python的工具，可以自动安装所有Kali Linux工具。不喜欢虚拟机，物理机安装又麻烦和危险，所以诞生了Katoolin这个工具集，让我们可以在其他发行版使用Kali的所有工具。</p><p><a href="https://github.com/LionSec/katoolin">官方地址</a></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721094250.png" alt="Katoolin"></p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>可添加和移除kali的官方仓库</li><li>安装需要的kali工具</li></ul><h2 id="依赖环境"><a href="#依赖环境" class="headerlink" title="依赖环境"></a>依赖环境</h2><ul><li>Python 2.7</li><li>Linux (推荐Ubuntu)</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">su</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span>  https://github.com/LionSec/katoolin.git &amp;&amp; <span class="built_in">cp</span> katoolin/katoolin.py /usr/bin/katoolin</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">chmod</span> +x /usr/bin/katoolin</span></span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo katoolin</span></span><br></pre></td></tr></table></figure><ul><li>使用数字安装对应的工具</li><li><code>0</code> 直接安装所有kali工具</li><li><code>back</code> 返回</li><li><code>gohome</code> 回到主菜单</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>如果要更新自己的系统，请务必记得先移除Kali的源。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721094338.png" alt="工具分类"></p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 18.04更改截图工具</title>
      <link href="/posts/ee9c1199/"/>
      <url>/posts/ee9c1199/</url>
      
        <content type="html"><![CDATA[<p>在写一些技术文章或者教程的时候，经常要用到截图工具，但是Ubuntu的截图工具实在是令人无法吐槽，之前用Deepin的时候截图工具真的非常棒，不仅能自动选区，还能顺手就编辑，而且已经有大佬对Ubuntu进行了打包，我们直接安装即可。</p><h2 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt-get install deepin-screenshot</span></span><br></pre></td></tr></table></figure><p>会自动安装依赖，只需要<code>y</code>即可。</p><h2 id="更改快捷键"><a href="#更改快捷键" class="headerlink" title="更改快捷键"></a>更改快捷键</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721124707.png" alt="第一步"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721124742.png" alt="第二步"></p><blockquote><p>添加快捷键时的命令是：<code>deepin-screenshot</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 18.04美化之MacOS主题</title>
      <link href="/posts/405b6fbe/"/>
      <url>/posts/405b6fbe/</url>
      
        <content type="html"><![CDATA[<h2 id="Ubuntu如何更换主题"><a href="#Ubuntu如何更换主题" class="headerlink" title="Ubuntu如何更换主题"></a>Ubuntu如何更换主题</h2><p>首先要知道几个配置目录：</p><ul><li><p>更改GTK、Shell主题的目录是<code>/usr/share/themes</code></p></li><li><p>更改图标的目录是<code>/usr/share/icons</code></p></li></ul><p>主题文件放到<code>/usr/share/</code>下是全局修改，也就是说如果你换一个账户登陆，也是可以用这些主题文件的。弊端就是操作较复杂，需要sudo权限。</p><p>如果仅仅是想修改当前账户的主题，可以选择在当前用户的根目录下新建两个目录即就是：<code>~/.themes</code> 和<code>~/ .icons</code>。注意，目录名称前面有个点 “ . ” ，然后把shell、GTK主题文件放到<code> .themes</code>中，图标文件放到<code> .icons</code> 中。</p><h2 id="安装主题工具"><a href="#安装主题工具" class="headerlink" title="安装主题工具"></a>安装主题工具</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt-get install gnome-tweaks</span></span><br></pre></td></tr></table></figure><p>完成后打开软件，在启动器里找到一个叫做“优化”的打开：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125001.png" alt="优化"></p><h2 id="修改窗口按钮位置"><a href="#修改窗口按钮位置" class="headerlink" title="修改窗口按钮位置"></a>修改窗口按钮位置</h2><p>当然如果你不喜欢把按钮放在左边就可以跳过此步骤</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125005.png" alt="修改窗口按钮位置"></p><h2 id="关闭桌面图标显示"><a href="#关闭桌面图标显示" class="headerlink" title="关闭桌面图标显示"></a>关闭桌面图标显示</h2><p>一样，如果不喜欢可以跳过</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125011.png" alt="关闭图标显示"></p><h2 id="修改鼠标图标"><a href="#修改鼠标图标" class="headerlink" title="修改鼠标图标"></a>修改鼠标图标</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125015.png" alt="修改鼠标"></p><h2 id="安装修改Shell扩展"><a href="#安装修改Shell扩展" class="headerlink" title="安装修改Shell扩展"></a>安装修改Shell扩展</h2><p>没有安装扩展之前如图所示的地方是一个感叹号：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125019.png" alt="之前"></p><p>在Ubuntu商店里搜索扩展，安装：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125023.png" alt="安装扩展"></p><p>启用扩展：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125026.png" alt="启用"></p><p>效果:</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125031.png" alt="之后"></p><h2 id="安装应用窗口主题"><a href="#安装应用窗口主题" class="headerlink" title="安装应用窗口主题"></a>安装应用窗口主题</h2><p>下载：<a href="https://www.pling.com/s/Gnome/p/1241688">下载链接</a></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125035.png" alt="主题"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125047.png" alt="下载"></p><p>可以看到这里一共有6个压缩文件，分别包装各种主题。通过文件名能发现每一个文件都有一个“2”，这个2的意思是该压缩包下有两个主题。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125056.png" alt="解压"></p><p>将两个主题文件夹移动到<code>/usr/share/themes/</code>下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125059.png" alt="效果"></p><p>这两个主题从名字上看只有transparent前面是否有个not，顾名思义就是有没有透明效果。</p><h2 id="修改图标"><a href="#修改图标" class="headerlink" title="修改图标"></a>修改图标</h2><p>下载图标包：<a href="https://www.opendesktop.org/s/Gnome/p/1102582/">下载链接</a></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125105.png" alt="下载"></p><p>解压，放在<code>/usr/share/icons</code>下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125110.png" alt="路径"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125114.png" alt="效果"></p><h2 id="修改桌面Shell"><a href="#修改桌面Shell" class="headerlink" title="修改桌面Shell"></a>修改桌面Shell</h2><p>下载：<a href="https://www.opendesktop.org/s/Gnome/p/1013741/">下载链接</a></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125118.png" alt="下载"></p><p>解压，放入<code>/usr/share/themes/</code>:</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125122.png" alt="路径"></p><p>应用：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125126.png" alt="选择主题"></p><h2 id="修改登录界面的主题"><a href="#修改登录界面的主题" class="headerlink" title="修改登录界面的主题"></a>修改登录界面的主题</h2><p>下载：<a href="https://www.pling.com/s/Gnome/p/1207015/">下载传送门</a></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125131.png" alt="下载"></p><p>解压：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125134.png" alt="路径"></p><p>其实放在哪个路径都一样，只不过放在这里方便管理，然后执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo ./install.sh</span></span><br></pre></td></tr></table></figure><p>卸载就是执行<code>./uninatall.sh</code> </p><p>然后根据提示先按<code>Alt+F2</code> 输入<code>r</code> 回车即可</p><blockquote><p>修改登陆界面壁纸：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo vim  /usr/share/gnome-shell/theme/ubuntu.css</span> </span><br></pre></td></tr></table></figure><p>修改下面的参数即可：<img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125141.png" alt="修改壁纸"></p></blockquote><h2 id="修改Dock栏"><a href="#修改Dock栏" class="headerlink" title="修改Dock栏"></a>修改Dock栏</h2><p>打开Ubuntu商店，搜索dash to dock，安装扩展：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125148.png" alt="安装扩展"></p><p>打开优化，修改参数：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125152.png" alt="打开优化"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125157.png" alt="配置"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125201.png" alt="配置"></p><h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125207.png" alt="效果"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125213.png" alt="效果"></p><p>再发现好玩的再来更新～拜拜</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> MacOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Ubuntu顶栏显示系统运行信息</title>
      <link href="/posts/5b43aea/"/>
      <url>/posts/5b43aea/</url>
      
        <content type="html"><![CDATA[<p>有一个Gnome扩展允许在Ubuntu 18.04 Gnome状态栏中显示CPU使用率，内存使用率，网络速度，磁盘，GPU和电池信息。</p><blockquote><p>OS: Ubuntu 18.04.3 LTS</p></blockquote><h2 id="安装依赖库"><a href="#安装依赖库" class="headerlink" title="安装依赖库"></a>安装依赖库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt-get install gir1.2-gtop-2.0 gir1.2-networkmanager-1.0  gir1.2-clutter-1.0</span></span><br></pre></td></tr></table></figure><h1 id="安装Ubuntu扩展包"><a href="#安装Ubuntu扩展包" class="headerlink" title="安装Ubuntu扩展包"></a>安装Ubuntu扩展包</h1><p>在Ubuntu软件商店里搜索：<code>system monitor extension</code></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125415.png" alt="扩展"></p><p>如图所示，安装扩展。</p><h1 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h1><p>安装扩展之后顶栏应该就会有一个小程序，点开设置自己想要的效果就OK</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125419.png" alt="效果"></p><p>嘻嘻~</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu安装deepin-wine环境</title>
      <link href="/posts/f31e7828/"/>
      <url>/posts/f31e7828/</url>
      
        <content type="html"><![CDATA[<blockquote><p>OS: Ubuntu 18.04.3 LTS</p></blockquote><p>既然已经有大佬打包好了ubuntu下的deepin-wine环境，那我们就直接用吧，在此感谢这些无私奉献的前辈们（至于我为什么从deepin换到了ubuntu，emmm，说来话长。。。）</p><h2 id="首先安装deepin-wine环境"><a href="#首先安装deepin-wine环境" class="headerlink" title="首先安装deepin-wine环境"></a>首先安装deepin-wine环境</h2><p>地址先放上：<a href="https://github.com/wszqkzqk/deepin-wine-ubuntu">Github</a></p><p>先<code>clone</code>源码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/wszqkzqk/deepin-wine-ubuntu.git</span></span><br></pre></td></tr></table></figure><p>或者您可以去仓库阅读在线安装方法</p><p>然后进入目录执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo ./install.sh</span></span><br></pre></td></tr></table></figure><p>KDE或其他按照普通安装方式安装后运行出现X错误的桌面环境执行 :</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo ./KDE-install.sh</span></span><br></pre></td></tr></table></figure><h2 id="下载想要安装的容器："><a href="#下载想要安装的容器：" class="headerlink" title="下载想要安装的容器："></a>下载想要安装的容器：</h2><ul><li><a href="https://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im/">QQ</a></li><li><a href="https://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.office/">TIM</a></li><li><a href="https://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.wechat/">微信</a></li><li><a href="https://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.cn.360.yasuo/">360压缩</a></li><li><a href="https://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.thunderspeed/">迅雷极速版</a></li><li><a href="https://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.wechat.devtools/deepin.com.wechat.devtools_1.01.1711160deepin0_i386.deb">微信开发者工具</a></li></ul><p>更多容器请移步：<a href="https://mirrors.aliyun.com/deepin/pool/non-free/d/">阿里云镜像站</a></p><h2 id="安装容器"><a href="#安装容器" class="headerlink" title="安装容器"></a>安装容器</h2><p>推荐使用<code>dpkg</code>安装，不然会有依赖问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo dpkg -i 包名称</span></span><br></pre></td></tr></table></figure><h2 id="卸载环境"><a href="#卸载环境" class="headerlink" title="卸载环境"></a>卸载环境</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo ./uninstall.sh</span></span><br></pre></td></tr></table></figure><h2 id="托盘问题"><a href="#托盘问题" class="headerlink" title="托盘问题"></a>托盘问题</h2><p>Ubuntu 18.04 下（Gnome 桌面）：</p><p>安装 Gnome Shell 插件：<a href="https://extensions.gnome.org/extension/1031/topicons/">TopIcons Plus</a></p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721124522.png" alt="环境安装成功"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721124527.png" alt="TIM"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721124532.png" alt="TIM"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Deepin </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> Wine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL命令大全(基础)</title>
      <link href="/posts/75a9f85f/"/>
      <url>/posts/75a9f85f/</url>
      
        <content type="html"><![CDATA[<h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE dbname;</span><br></pre></td></tr></table></figure><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE dbname;</span><br></pre></td></tr></table></figure><h3 id="创建新表"><a href="#创建新表" class="headerlink" title="创建新表"></a>创建新表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tabname(col1 type1 [<span class="keyword">not</span> <span class="keyword">null</span>] [<span class="keyword">primary</span> key],col2 type2 [<span class="keyword">not</span> <span class="keyword">null</span>],..);</span><br></pre></td></tr></table></figure><p>根据已有的表创建新表:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tab_new <span class="keyword">LIKE</span> tab_old;<span class="operator">/</span><span class="operator">/</span>使用旧表创建新表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tab_new <span class="keyword">AS</span> <span class="keyword">SELECT</span> col1,col2… <span class="keyword">FROM</span> tab_old DEFINITION <span class="keyword">ONLY</span>;</span><br></pre></td></tr></table></figure><h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> tabname;</span><br></pre></td></tr></table></figure><h3 id="增加一个列"><a href="#增加一个列" class="headerlink" title="增加一个列"></a>增加一个列</h3><blockquote><p>注：列增加后将不能删除。DB2中列加上后数据类型也不能改变，唯一能改变的是增加varchar类型的长度</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tabname <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> COL TYPE;</span><br></pre></td></tr></table></figure><h3 id="添加和删除主键"><a href="#添加和删除主键" class="headerlink" title="添加和删除主键"></a>添加和删除主键</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tabname <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY(col);添加</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tabname <span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY(col);删除</span><br></pre></td></tr></table></figure><h3 id="创建和删除索引"><a href="#创建和删除索引" class="headerlink" title="创建和删除索引"></a>创建和删除索引</h3><blockquote><p>索引是不可更改的，想更改必须删除重新建</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">unique</span>] INDEX idxname <span class="keyword">ON</span> tabname(col….);创建</span><br><span class="line"><span class="keyword">DROP</span> INDEX idxname;删除</span><br></pre></td></tr></table></figure><h3 id="创建和删除视图"><a href="#创建和删除视图" class="headerlink" title="创建和删除视图"></a>创建和删除视图</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> viewname <span class="keyword">AS</span> <span class="keyword">SELECT</span> statement;创建</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> viewname;删除</span><br></pre></td></tr></table></figure><h3 id="修改数据库名称"><a href="#修改数据库名称" class="headerlink" title="修改数据库名称"></a>修改数据库名称</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SP_RENAMEDB <span class="string">&#x27;old_name&#x27;</span>, <span class="string">&#x27;new_name&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="简单的基本的SQL语句"><a href="#简单的基本的SQL语句" class="headerlink" title="简单的基本的SQL语句"></a>简单的基本的SQL语句</h2><h3 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table1 <span class="keyword">WHERE</span> 范围;</span><br></pre></td></tr></table></figure><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table1(field1,field2) <span class="keyword">VALUES</span>(value1,value2);</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table1 <span class="keyword">WHERE</span> 范围更新：<span class="keyword">UPDATE</span> table1 <span class="keyword">SET</span> field1<span class="operator">=</span>value1 <span class="keyword">WHERE</span> 范围;</span><br></pre></td></tr></table></figure><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table1 <span class="keyword">WHERE</span> field1 <span class="keyword">LIKE</span> ’<span class="operator">%</span>value1<span class="operator">%</span>’;</span><br></pre></td></tr></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table1 <span class="keyword">ORDER</span> <span class="keyword">BY</span> field1,field2 [<span class="keyword">desc</span>];</span><br></pre></td></tr></table></figure><h3 id="总数"><a href="#总数" class="headerlink" title="总数"></a>总数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> COUNT <span class="keyword">AS</span> totalcount <span class="keyword">FROM</span> table1;</span><br></pre></td></tr></table></figure><h3 id="求和"><a href="#求和" class="headerlink" title="求和"></a>求和</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(field1) <span class="keyword">AS</span> SUMVALUE <span class="keyword">FROM</span> table1;</span><br></pre></td></tr></table></figure><h3 id="平均"><a href="#平均" class="headerlink" title="平均"></a>平均</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(field1) <span class="keyword">AS</span> AVGVALUE <span class="keyword">FROM</span> table1;</span><br></pre></td></tr></table></figure><h3 id="最大"><a href="#最大" class="headerlink" title="最大"></a>最大</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(field1) <span class="keyword">AS</span> MAXVALUE <span class="keyword">FROM</span> table1;</span><br></pre></td></tr></table></figure><h3 id="最小"><a href="#最小" class="headerlink" title="最小"></a>最小</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(field1) <span class="keyword">AS</span> MINVALUE <span class="keyword">FROM</span> table1;</span><br></pre></td></tr></table></figure><h2 id="进阶技巧"><a href="#进阶技巧" class="headerlink" title="进阶技巧"></a>进阶技巧</h2><h3 id="子查询-表名1：a-表名2：b"><a href="#子查询-表名1：a-表名2：b" class="headerlink" title="子查询(表名1：a 表名2：b)"></a>子查询(表名1：a 表名2：b)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a,b,c <span class="keyword">FROM</span> a <span class="keyword">WHERE</span> a <span class="keyword">IN</span> (<span class="keyword">select</span> d <span class="keyword">from</span> b );或者</span><br><span class="line"><span class="keyword">SELECT</span> a,b,c <span class="keyword">FROM</span> a <span class="keyword">WHERE</span> a <span class="keyword">IN</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><h3 id="外连接查询-表名1：a-表名2：b"><a href="#外连接查询-表名1：a-表名2：b" class="headerlink" title="外连接查询(表名1：a 表名2：b)"></a>外连接查询(表名1：a 表名2：b)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.a, a.b, a.c, b.c, b.d, b.f <span class="keyword">FROM</span> a <span class="keyword">LEFT</span> <span class="keyword">OUT</span> <span class="keyword">JOIN</span> b <span class="keyword">ON</span> a.a <span class="operator">=</span> b.c;</span><br></pre></td></tr></table></figure><h3 id="在线视图查询-表名1：a"><a href="#在线视图查询-表名1：a" class="headerlink" title="在线视图查询(表名1：a )"></a>在线视图查询(表名1：a )</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> a,b,c <span class="keyword">FROM</span> a) T <span class="keyword">WHERE</span> t.a <span class="operator">&gt;</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="between的用法"><a href="#between的用法" class="headerlink" title="between的用法"></a>between的用法</h3><p>between限制查询数据范围时包括了边界值,not between不包括</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table1 <span class="keyword">WHERE</span> <span class="type">time</span> <span class="keyword">BETWEEN</span> time1 <span class="keyword">AND</span> time2;</span><br><span class="line"><span class="keyword">SELECT</span> a,b,c, <span class="keyword">FROM</span> table1 <span class="keyword">WHERE</span> a <span class="keyword">NOT</span> <span class="keyword">BETWEEN</span> 数值<span class="number">1</span> <span class="keyword">and</span> 数值<span class="number">2</span>;</span><br></pre></td></tr></table></figure><h3 id="in的使用方法"><a href="#in的使用方法" class="headerlink" title="in的使用方法"></a>in的使用方法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table1 <span class="keyword">WHERE</span> a [<span class="keyword">not</span>] <span class="keyword">IN</span> (<span class="string">&#x27;值1&#x27;</span>,<span class="string">&#x27;值2&#x27;</span>,<span class="string">&#x27;值4&#x27;</span>,<span class="string">&#x27;值6&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="四表联查问题"><a href="#四表联查问题" class="headerlink" title="四表联查问题"></a>四表联查问题</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> a <span class="keyword">LEFT</span> <span class="keyword">INNER</span> <span class="keyword">JOIN</span> b <span class="keyword">ON</span> a.a<span class="operator">=</span>b.b <span class="keyword">RIGHT</span> <span class="keyword">INNER</span> <span class="keyword">JOIN</span> c <span class="keyword">ON</span> a.a<span class="operator">=</span>c.c <span class="keyword">INNER</span> <span class="keyword">JOIN</span> d <span class="keyword">ON</span> a.a<span class="operator">=</span>d.d <span class="keyword">WHERE</span> .....</span><br></pre></td></tr></table></figure><h3 id="前10条记录"><a href="#前10条记录" class="headerlink" title="前10条记录"></a>前10条记录</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TOP <span class="number">10</span> <span class="operator">*</span> FORM table1 <span class="keyword">WHERE</span> 范围;</span><br></pre></td></tr></table></figure><h3 id="随机取出10条记录"><a href="#随机取出10条记录" class="headerlink" title="随机取出10条记录"></a>随机取出10条记录</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TOP <span class="number">10</span> <span class="operator">*</span> <span class="keyword">FROM</span> tablename <span class="keyword">ORDER</span> <span class="keyword">BY</span> NEWID();</span><br></pre></td></tr></table></figure><h3 id="列出数据库里所有的表名"><a href="#列出数据库里所有的表名" class="headerlink" title="列出数据库里所有的表名"></a>列出数据库里所有的表名</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name <span class="keyword">FROM</span> sysobjects <span class="keyword">WHERE</span> type<span class="operator">=</span><span class="string">&#x27;U&#x27;</span>;   <span class="operator">/</span><span class="operator">/</span>U代表用户</span><br></pre></td></tr></table></figure><h3 id="列出表里的所有的列名"><a href="#列出表里的所有的列名" class="headerlink" title="列出表里的所有的列名"></a>列出表里的所有的列名</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name <span class="keyword">FROM</span> syscolumns <span class="keyword">WHERE</span> id<span class="operator">=</span>object_id(<span class="string">&#x27;TableName&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="初始化表table1"><a href="#初始化表table1" class="headerlink" title="初始化表table1"></a>初始化表table1</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> table1;</span><br></pre></td></tr></table></figure><h3 id="选择从10到15的记录"><a href="#选择从10到15的记录" class="headerlink" title="选择从10到15的记录"></a>选择从10到15的记录</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TOP <span class="number">5</span> <span class="operator">*</span> <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> TOP <span class="number">15</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> id <span class="keyword">asc</span>) table_别名 <span class="keyword">ORDER</span> <span class="keyword">BY</span> id <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码管理工具Git基础</title>
      <link href="/posts/fde3401b/"/>
      <url>/posts/fde3401b/</url>
      
        <content type="html"><![CDATA[<h2 id="2020-9-1-更新"><a href="#2020-9-1-更新" class="headerlink" title="2020.9.1 更新"></a>2020.9.1 更新</h2><p>推荐一个学习Git命令的非常棒的在线工具：<a href="https://learngitbranching.js.org/">https://learngitbranching.js.org/</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>Git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。 Git是Linus Torvalds为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p></blockquote><p>Git的功能特性，从一般开发者的角度来看，git有以下功能：</p><ol><li>从服务器上克隆完整的Git仓库（包括代码和版本信息）到单机上。</li><li>在自己的机器上根据不同的开发目的，创建分支，修改代码。</li><li>在单机上自己创建的分支上提交代码。</li><li>在单机上合并分支。</li><li>把服务器上最新版的代码fetch下来，然后跟自己的主分支合并。</li><li>生成补丁（patch），把补丁发送给主开发者。</li><li>看主开发者的反馈，如果主开发者发现两个一般开发者之间有冲突（他们之间可以合作解决的冲突），就会要求他们先解决冲突，然后再由其中一个人提交。如果主开发者可以自己解决，或者没有冲突，就通过。</li><li>一般开发者之间解决冲突的方法，开发者之间可以使用pull 命令解决冲突，解决完冲突之后再向主开发者提交补丁。</li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt-get install git</span></span><br></pre></td></tr></table></figure><h2 id="新建和初始化本地库"><a href="#新建和初始化本地库" class="headerlink" title="新建和初始化本地库"></a>新建和初始化本地库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git init</span></span><br></pre></td></tr></table></figure><h2 id="从服务器上clone代码"><a href="#从服务器上clone代码" class="headerlink" title="从服务器上clone代码"></a>从服务器上clone代码</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> ADDRESS</span></span><br></pre></td></tr></table></figure><blockquote><p>ADDRESS就是项目地址</p></blockquote><h2 id="查看新文件"><a href="#查看新文件" class="headerlink" title="查看新文件"></a>查看新文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br></pre></td></tr></table></figure><h2 id="添加更改"><a href="#添加更改" class="headerlink" title="添加更改"></a>添加更改</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add filename</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add .//用通配符提交所有更改</span></span><br></pre></td></tr></table></figure><h2 id="配置用户名和邮箱"><a href="#配置用户名和邮箱" class="headerlink" title="配置用户名和邮箱"></a>配置用户名和邮箱</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global user.email EMAIL</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global user.name NAME</span></span><br></pre></td></tr></table></figure><blockquote><p>“EMAIL” 即你的 email 地址，“NAME” 则是你的用户名</p></blockquote><h2 id="提交更改说明"><a href="#提交更改说明" class="headerlink" title="提交更改说明"></a>提交更改说明</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m “Descriptive Message”</span></span><br></pre></td></tr></table></figure><blockquote><p>“Descriptive Message” 即为你的提交的描述性信息</p></blockquote><h2 id="创建新分支"><a href="#创建新分支" class="headerlink" title="创建新分支"></a>创建新分支</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout -b BRANCH</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch //查看是否创建了新分支</span></span><br></pre></td></tr></table></figure><blockquote><p>“BRANCH” 即为你新分支的名字</p></blockquote><h2 id="远程推送"><a href="#远程推送" class="headerlink" title="远程推送"></a>远程推送</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote add origin URL //“URL” 即为远程仓库地址</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push -u origin +master //+号是在本地没有整合下强制提交</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote <span class="built_in">rm</span> origin //删除远程origin</span></span><br></pre></td></tr></table></figure><h2 id="建立远程和本地仓库的链接"><a href="#建立远程和本地仓库的链接" class="headerlink" title="建立远程和本地仓库的链接"></a>建立远程和本地仓库的链接</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push --set-upstream origin master</span> </span><br></pre></td></tr></table></figure><h2 id="将本地分支追踪到上游相应的分支"><a href="#将本地分支追踪到上游相应的分支" class="headerlink" title="将本地分支追踪到上游相应的分支"></a>将本地分支追踪到上游相应的分支</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch --set-upstream-to=origin/&lt;分支&gt; master</span> </span><br></pre></td></tr></table></figure><h2 id="拉取更新"><a href="#拉取更新" class="headerlink" title="拉取更新"></a>拉取更新</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git pull origin master</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git pull</span></span><br></pre></td></tr></table></figure><h2 id="撤销推送"><a href="#撤销推送" class="headerlink" title="撤销推送"></a>撤销推送</h2><p>已经执行<code>git add</code>和<code>git commit</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard origin/master</span><br></pre></td></tr></table></figure><blockquote><p>注意：远程仓库会直接覆盖本地仓库</p></blockquote><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git [--version] [--<span class="built_in">help</span>] [-C &lt;path&gt;] [-c name=value]</span></span><br><span class="line">      [--exec-path[=&lt;path&gt;]] [--html-path] [--man-path] [--info-path]</span><br><span class="line">      [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]</span><br><span class="line">      [--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;]</span><br><span class="line">  &lt;command&gt; [&lt;args&gt;]</span><br></pre></td></tr></table></figure><h2 id="基本命令简述"><a href="#基本命令简述" class="headerlink" title="基本命令简述"></a>基本命令简述</h2><h3 id="开始一个工作区"><a href="#开始一个工作区" class="headerlink" title="开始一个工作区"></a>开始一个工作区</h3><p>参见：<code>git help tutorial</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clone     克隆一个仓库到一个新目录</span><br><span class="line">init      创建一个空的 Git 仓库或重新初始化一个已存在的仓库</span><br></pre></td></tr></table></figure><h3 id="在当前变更上工作"><a href="#在当前变更上工作" class="headerlink" title="在当前变更上工作"></a>在当前变更上工作</h3><p>参见：<code>git help everyday</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add       添加文件内容至索引</span><br><span class="line">mv        移动或重命名一个文件、目录或符号链接</span><br><span class="line">reset     重置当前 HEAD 到指定状态</span><br><span class="line">rm        从工作区和索引中删除文件</span><br></pre></td></tr></table></figure><h3 id="检查历史和状态"><a href="#检查历史和状态" class="headerlink" title="检查历史和状态"></a>检查历史和状态</h3><p>参见：<code>git help revisions</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bisect     通过二分查找定位引入 bug 的提交</span><br><span class="line">grep       输出和模式匹配的行</span><br><span class="line">log        显示提交日志</span><br><span class="line">show       显示各种类型的对象</span><br><span class="line">status     显示工作区状态</span><br></pre></td></tr></table></figure><h3 id="扩展、标记和调校您的历史记录"><a href="#扩展、标记和调校您的历史记录" class="headerlink" title="扩展、标记和调校您的历史记录"></a>扩展、标记和调校您的历史记录</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">branch       列出、创建或删除分支</span><br><span class="line">checkout     切换分支或恢复工作区文件git</span><br><span class="line">commit       记录变更到仓库</span><br><span class="line">diff         显示提交之间、提交和工作区之间等的差异</span><br><span class="line">merge        合并两个或更多开发历史</span><br><span class="line">rebase       在另一个分支上重新应用提交</span><br><span class="line">tag          创建、列出、删除或校验一个 GPG 签名的标签对象</span><br></pre></td></tr></table></figure><h3 id="协同"><a href="#协同" class="headerlink" title="协同"></a>协同</h3><p>参见：<code>git help workflows</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fetch     从另外一个仓库下载对象和引用</span><br><span class="line">pull      获取并整合另外的仓库或一个本地分支</span><br><span class="line">push      更新远程引用和相关的对象</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>把Vim配置成属于自己的模样</title>
      <link href="/posts/bfe797d6/"/>
      <url>/posts/bfe797d6/</url>
      
        <content type="html"><![CDATA[<h2 id="启用-Vim-的特性"><a href="#启用-Vim-的特性" class="headerlink" title="启用 Vim 的特性"></a>启用 Vim 的特性</h2><p>Vim编辑器相关的所有功能开关都可以通过<code>.vimrc</code>文件进行设置，<code>.vimrc</code>配置文件分系统配置和用户配置两种。 </p><p>系统vimrc配置文件存放在Vim的安装目录，默认路径为&#x2F;usr&#x2F;share&#x2F;vim&#x2F;.vimrc。可以使用命令echo $VIM来确定Vim的安装目录。用户vimrc文件，存放在用户主目录下~&#x2F;.vimrc，可以使用命令echo $HOME确定用户主目录。 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim ~/.vimrc</span></span><br></pre></td></tr></table></figure><h2 id="基础设置"><a href="#基础设置" class="headerlink" title="基础设置"></a>基础设置</h2><blockquote><p>双引号内的中文均为注释，其他视情况而定。</p></blockquote><h3 id="设置中文不乱码"><a href="#设置中文不乱码" class="headerlink" title="设置中文不乱码"></a>设置中文不乱码</h3><p>与Vim编码有关的变量包括：<code>encoding</code>、<code>fileencoding</code>、<code>termencoding</code>。</p><p><code>encoding</code>选项用于缓存的文本、寄存器、Vim 脚本文件等；<code>fileencoding</code>选项是Vim写入文件时采用的编码类型；<code>termencoding</code>选项表示输出到终端时采用的编码类型。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;设置编码</span><br><span class="line">set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936</span><br><span class="line">set termencoding=utf-8</span><br><span class="line">set encoding=utf-8</span><br></pre></td></tr></table></figure><h3 id="显示行号"><a href="#显示行号" class="headerlink" title="显示行号"></a>显示行号</h3><p>nu是number的缩写，两个配置命令是完全等效的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set nu</span><br><span class="line">set number</span><br></pre></td></tr></table></figure><h3 id="突出显示当前行"><a href="#突出显示当前行" class="headerlink" title="突出显示当前行"></a>突出显示当前行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set cursorline</span><br></pre></td></tr></table></figure><h3 id="启用鼠标"><a href="#启用鼠标" class="headerlink" title="启用鼠标"></a>启用鼠标</h3><p>Vim编辑器里默认是不启用鼠标的，也就是说不管你鼠标点击哪个位置，光标都不会移动。通过以上设置就可以启动鼠标，不过对于高级玩家来说，用Vim就是为了解放双方不用鼠标，所以这个设置可以根据个人爱好选择.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set mouse=a</span><br><span class="line">set selection=exclusive</span><br><span class="line">set selectmode=mouse,key</span><br></pre></td></tr></table></figure><h3 id="设置缩进"><a href="#设置缩进" class="headerlink" title="设置缩进"></a>设置缩进</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;设置Tab长度为4空格</span><br><span class="line">set tabstop=4</span><br><span class="line">&quot;设置自动缩进长度为4空格</span><br><span class="line">set shiftwidth=4</span><br><span class="line">&quot;继承前一行的缩进方式，适用于多行注释</span><br><span class="line">set autoindent</span><br></pre></td></tr></table></figure><h3 id="粘贴格式"><a href="#粘贴格式" class="headerlink" title="粘贴格式"></a>粘贴格式</h3><p>显示空格和tab键在Vim中通过鼠标右键粘贴时会在行首多出许多缩进和空格，通过set paste可以在插入模式下粘贴内容时不会有任何格式变形、胡乱缩进等问题。Vim编辑器中默认不显示文件中的tab和空格符，通过上面的配置可以获得以下的显示效果，方便定位输入错误</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set paste</span><br><span class="line">set listchars=tab:&gt;-,trail:-</span><br></pre></td></tr></table></figure><h3 id="显示状态栏和光标当前位置"><a href="#显示状态栏和光标当前位置" class="headerlink" title="显示状态栏和光标当前位置"></a>显示状态栏和光标当前位置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;总是显示状态栏</span><br><span class="line">set laststatus=2</span><br><span class="line">&quot;显示光标当前位置</span><br><span class="line">set ruler</span><br></pre></td></tr></table></figure><h3 id="Vim配置变更立即生效"><a href="#Vim配置变更立即生效" class="headerlink" title="Vim配置变更立即生效"></a>Vim配置变更立即生效</h3><p>要让<code>.vimrc</code>变更内容生效，一般的做法是先保存<code>.vimrc</code>再重启vim，增加以下设置，可以实现保存 <code>.vimrc</code> 时自动重启加载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">autocmd BufWritePost $MYVIMRC source $MYVIMRC</span><br></pre></td></tr></table></figure><h3 id="语法高亮"><a href="#语法高亮" class="headerlink" title="语法高亮"></a>语法高亮</h3><p>Vim 自带语法高亮显示功能，只需要打开 <code>syntax</code> 选项即可, 依赖于 Vim 的文件类型检测功能.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;打开文件类型检测</span><br><span class="line">filetype on</span><br><span class="line">&quot;打开语法高亮显示</span><br><span class="line">syntax on</span><br></pre></td></tr></table></figure><h2 id="插件功能"><a href="#插件功能" class="headerlink" title="插件功能"></a>插件功能</h2><h3 id="代码自动补齐"><a href="#代码自动补齐" class="headerlink" title="代码自动补齐"></a>代码自动补齐</h3><p>虽然 Vim自带自动补齐功能，但是这种自带的补齐功能其本质就是 猜：通过对文本进行正则表达式匹配，再根据字典文件和生成的tags文件实现自动补全的效果， 因此其功能相对也较为简单。</p><p>YouCompleteMe 简称 YCM，是一款 Vim 下非常流行的自动代码补齐神器。YouCompleteMe 基于 clang&#x2F;llvm 等开源语法分析库进行构建，并整合了多种自动补齐引擎：an identifier-based engine that works with every programming language、a Clang-based engine that provides native semantic code completion for C&#x2F;C++&#x2F;Objective-C&#x2F;Objective-C++&#x2F;CUDA、a clangd-based experimental completion engine for the C-family languages、a Jedi-based completion engine for Python 2 and 3、an OmniSharp-based completion engine for C#、a combination of Gocode and Godef semantic engines for Go、an omnifunc-based completer that uses data from Vim’s omnicomplete system to provide semantic completions for many other languages (Ruby, PHP etc.)。由此可见，YouCompleteMe 几乎对现在所有流行的编程语言都提供了非常强大的补齐功能。</p><blockquote><p>编译 YouCompleteMe 插件时需要依赖 cmake 构建 Makefile，且依赖 Python 源码头文件</p></blockquote><p><strong>安装Python依赖</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt-get install build-essential cmake python-dev python3-dev</span></span><br></pre></td></tr></table></figure><p><strong>安装Clang</strong></p><blockquote><p>clang 是一个面向 C 族语言(C-family languages)的轻量级编译器，YouCompleteMe 插件依赖 clang 实现对 C 族语言的语义补全</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt-get install clang</span></span><br></pre></td></tr></table></figure><p><strong>Clone</strong></p><p>可以使用 Vundle 或 vim-plug 等 Vim 插件管理器从 github 获取 YouCompleteMe 最新的源码，这里推荐使用 Vundle。也可以直接使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/Valloric/YouCompleteMe.git ~/.vim/plugged/</span><br></pre></td></tr></table></figure><p><strong>获取依赖</strong></p><p>在源码目录执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule update --init --recursive</span><br></pre></td></tr></table></figure><p><strong>编译安装</strong></p><p>在源码目录执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python3 install.py --clang-completer</span></span><br></pre></td></tr></table></figure><blockquote><p><code>--clang-completer</code> 参数是编译C族语言的补全，如果需要全部语言，换成<code>--all</code> 参数即可</p></blockquote><h3 id="安装Vundle插件管理器"><a href="#安装Vundle插件管理器" class="headerlink" title="安装Vundle插件管理器"></a>安装Vundle插件管理器</h3><p>Vundle插件是提供一个Vundle.vim文件，其下载地址为：<a href="https://github.com/VundleVim/Vundle.vim.git">https://github.com/VundleVim/Vundle.vim.git</a><br>将下载的Vundle.vim文件夹（之后的所有插件相同）保存到~&#x2F;.vim&#x2F;bundle然后修改配置文件即可完成Vundle的安装</p><h3 id="配置Vundle"><a href="#配置Vundle" class="headerlink" title="配置Vundle"></a>配置Vundle</h3><p>修改<code>.vimrc</code> 文件，添加下列配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&quot;去除VIM一致性</span><br><span class="line">set nocompatible</span><br><span class="line">filetype off</span><br><span class="line">&quot;设置包括vundle和初始化相关的运行时路径</span><br><span class="line">set rtp+=~/.vim/bundle/Vundle.vim</span><br><span class="line"></span><br><span class="line">call vundle#begin()</span><br><span class="line">&quot;启用vundle管理插件</span><br><span class="line">Plugin &#x27;VundleVim/Vundle.vim&#x27;</span><br><span class="line">&quot;在此增加其他插件，安装的插件需要放在vundle#begin和vundle#end之间</span><br><span class="line">&quot;安装github上的插件格式为 Plugin &#x27;用户名/插件仓库名&#x27;</span><br><span class="line">call vundle#end()</span><br><span class="line"></span><br><span class="line">&quot;加载vim自带和插件相应的语法和文件类型相关脚本</span><br><span class="line">filetype plugin indent on</span><br></pre></td></tr></table></figure><p>更多Vundle有关配置可以参考<a href="https://github.com/VundleVim/Vundle.vim#quick-start">官方文档</a></p><h2 id="使用Vundle安装插件"><a href="#使用Vundle安装插件" class="headerlink" title="使用Vundle安装插件"></a>使用Vundle安装插件</h2><p>首先需要将要安装的插件，按照上面的配置格式将插件地址填写在<code>vundle#begin</code>和<code>vundle#end</code>之间并保存设置好配置文件后，可通过下述两种方法安装插件: </p><ul><li>在Vim尾行模式下运行命令 <code>:PluginInstall</code></li><li>在终端命令行下通过命令 <code>vim +PluginInstall +qall</code></li></ul><p><strong>删除插件</strong></p><ol><li>编辑Vim配置文件.vimrc文件，删除要移除插件所对应的Plugin一行</li><li>打开Vim，在Vim尾行模式执行命令<code>:BundleClean</code>即可删除对应Vim插件</li></ol><h2 id="Vim自带的代码补全功能"><a href="#Vim自带的代码补全功能" class="headerlink" title="Vim自带的代码补全功能"></a>Vim自带的代码补全功能</h2><p>在插入模式下，Vim可以不借助任何插件实现自动补全功能。Vim自带有单词自动补全、行自动补全和基于用户自定义字典的自动补全。</p><ul><li><code>Ctrl + n</code>：当输入完第一个字母后，再按<code>Ctrl + n</code>，Vim会自动出现下拉菜单，且默认选中第一个单词</li><li>继续按 <code>Ctrl + n</code> 可以上下选择，但如果缓冲区没有可选单词，那么下拉列表不会有任何选项</li><li><code>Ctrl + p</code>：功能同上，只是默认选中的是列表最后一个单词</li><li>在Vim插入模式下输入已经存在行的第一个单词，再按<code>Ctrl + x</code>、<code>Ctrl + l</code>命令，就会列出该整行出来实现Vim行自动补全</li></ul><h3 id="字典补全"><a href="#字典补全" class="headerlink" title="字典补全"></a>字典补全</h3><p>假设有一个备选单词表，文件名为dict.txt，每行一个单词，里面包含以下内容：</p><ul><li>Hello</li><li>Vim</li><li>editor</li><li>best</li><li>tool</li></ul><p>若要实现基于该单词表的Vim自动补齐，需要设置以下步骤：</p><ol><li>在<del>&#x2F;.vimrc配置文件中加入代码：&#96;set dictionary-&#x3D;</del>&#x2F;dict.txt dictionary+&#x3D;~&#x2F;dict.txt&#96;</li><li>打开Vim，在插入模式下输入<code>Ctrl + x</code>后再输入<code>Ctrl + k</code>，就能看到dict.txt文件中定义的单词</li><li>若想直接通过<code>Ctrl + n</code>命令就显示其中的列表，再配置.vimrc文件，加入<code>set complete-=k complete+=k</code></li></ol><h2 id="函数跳转"><a href="#函数跳转" class="headerlink" title="函数跳转"></a>函数跳转</h2><p>可以使用 Vim 插件 vim-gutentags 自动生成和更新 tags 文件进行跳转，得益于 Vim 8 提供的异步机制，vim插件vim-gutentags能够自动异步生成 tags  文件，当检测到同一个工程下面的文件有修改时，gutentags能自动增量更新对应工程的 tags  文件，而不用全部重新生成tags文件，是一个非常高效的tags生成工具。vim-gutentags的本质仍然是使用ctags生成tag标签来实现函数跳转等功能，只是在ctags的基础上进行了封装和简化，方便用户在vim中使用。由于vim-gutentags依赖ctags工具，因此在使用vim-gutentags插件的系统中必须安装ctags软件，否则会报错”Excutable ‘ctags’ can’t be found.”。</p><h3 id="安装tags软件"><a href="#安装tags软件" class="headerlink" title="安装tags软件"></a>安装tags软件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt-get install exuberant-ctags</span></span><br></pre></td></tr></table></figure><p>其次，vim-gutentags需要在vim8.0以上版本才能正常工作，因为vim-gutentags实现的是增量更新tags的方式，依赖于vim8提供的异步机制。在低于vim8.0的版本是运行vim-gutentags插件，会报错”this plugin requires the job API from Vim8 or Neovim”。  把相应vim文件放在～&#x2F;.vim&#x2F;bundle&#x2F;下</p><p>在配置文件 ~&#x2F;.vimrc 中增加配置项：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Plugin &#x27;ludovicchabant/vim-gutentags&#x27;</span><br></pre></td></tr></table></figure><p>再在vim的Normal模式下执行命令 <code>:PlugInstall</code></p><p>vim-gutentags插件的基本工作原理可以这么理解：首先确定vim当前打开的文件是否需要自动生成tags标签，若需要则通过某种方式确定tag文件的路径，再基于tag标签文件完成函数跳转、结构体定义跳转等功能。</p><h3 id="gutentags配置"><a href="#gutentags配置" class="headerlink" title="gutentags配置"></a>gutentags配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&quot; gutentags搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归</span><br><span class="line">let g:gutentags_project_root = [&#x27;.root&#x27;, &#x27;.svn&#x27;, &#x27;.git&#x27;, &#x27;.project&#x27;]</span><br><span class="line">&quot; 所生成的数据文件的名称</span><br><span class="line">let g:gutentags_ctags_tagfile = &#x27;.tags&#x27;</span><br><span class="line">&quot; 将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录</span><br><span class="line">let s:vim_tags = expand(&#x27;~/.cache/tags&#x27;)</span><br><span class="line">let g:gutentags_cache_dir = s:vim_tags</span><br><span class="line">&quot; 检测 ~/.cache/tags 不存在就新建</span><br><span class="line">if !isdirectory(s:vim_tags)</span><br><span class="line">silent! call mkdir(s:vim_tags, &#x27;p&#x27;)</span><br><span class="line">endif</span><br><span class="line">&quot; 配置 ctags 的参数</span><br><span class="line">let g:gutentags_ctags_extra_args = [&#x27;--fields=+niazS&#x27;, &#x27;--extra=+q&#x27;]</span><br><span class="line">let g:gutentags_ctags_extra_args += [&#x27;--c++-kinds=+pxI&#x27;]</span><br><span class="line">let g:gutentags_ctags_extra_args += [&#x27;--c-kinds=+px&#x27;]</span><br></pre></td></tr></table></figure><blockquote><p>变量 gutentags_project_root 是vim-gutentags提供的用于搜索工程目录的标志，gutentags插件启动后，会从文件当前路径递归往上查找 gutentags_project_root 中指定的文件或目录名，直到第一次找到对应目标文件或目录名停止。若没有找到 gutentags_project_root 变量指定的文件或目录名，则gutentags不会生成tag文件。</p><p>变量 gutentags_ctags_tagfile 和 gutentags_cache_dir 分别用于告诉ctags要使用的tag文件目录和tag文件名后缀，tag文件名的生成规则默认是根据生成tag文件的工程绝对路径按 - 分割而成。</p><p>变量 gutentags_ctags_extra_args 用于配置ctags生成tag标签的参数</p></blockquote><h3 id="ctags参数意义"><a href="#ctags参数意义" class="headerlink" title="ctags参数意义"></a>ctags参数意义</h3><table><thead><tr><th align="center">参数</th><th>含义</th></tr></thead><tbody><tr><td align="center">c</td><td>类(classes)</td></tr><tr><td align="center">d</td><td>宏定义(macro definitions)</td></tr><tr><td align="center">e</td><td>枚举变量(enumerators)</td></tr><tr><td align="center">f</td><td>函数定义(function definitions)</td></tr><tr><td align="center">g</td><td>枚举类型(enumeration names)</td></tr><tr><td align="center">l</td><td>局部变量(local variables)，默认不提取</td></tr><tr><td align="center">m</td><td>类、结构体、联合体(class, struct, and union members)</td></tr><tr><td align="center">n</td><td>命名空间(namespaces)</td></tr><tr><td align="center">p</td><td>函数原型(function prototypes)，默认不提取</td></tr><tr><td align="center">s</td><td>结构体类型(structure names)</td></tr><tr><td align="center">t</td><td>(typedefs)</td></tr><tr><td align="center">u</td><td>联合体类型(union names)</td></tr><tr><td align="center">v</td><td>变量定义(variable definitions)</td></tr><tr><td align="center">x</td><td>外部变量(external and forward variable declarations)，默认不提取</td></tr></tbody></table><p>需要注意的是，gutentags 需要靠上面定义的 <code>gutentags_project_root</code> 判断文件所在的工程，如果一个文件没有保存在包含 <code>.git</code>、<code>.svn</code>、<code>.root</code>等 定义在 <code>gutentags_project_root</code> 中的文件，gutentags就不会为该野文件生成  <code>tags</code>。  #在为当前目录生成tags文件后，可以通过按键 <code>Ctrl + ]</code> 跳转到对应的定义位置，再使用命令 <code>Ctrl + o</code> 回退到原来的位置。  建议多使用 <code>Ctrl + W + ] </code>用新窗口打开并查看光标下符号的定义，或者 <code>Ctrl+W+]</code> 使用 preview 窗口预览光标下符号的定义。</p><h2 id="工程项目树展示"><a href="#工程项目树展示" class="headerlink" title="工程项目树展示"></a>工程项目树展示</h2><p>Vim插件NERDTree是一款用来在Vim界面显示树形目录的文件管理器插件，可在vim操作界面进行文件打开、目录浏览操作。其github地址为：<a href="https://github.com/scrooloose/nerdtree">https://github.com/scrooloose/nerdtree</a></p><p>使用Vim插件管理器Vundle安装Vim插件NERDTree:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Plugin &#x27;scrooloose/nerdtree&#x27;</span><br></pre></td></tr></table></figure><p>通过vundle安装好NERDTree插件后，在vim命令行模式输入命令<code>:NERDTree</code>就可以看到NERDTree的显示界面。使用快捷键 <code>Ctrl + w</code>，可将光标自动在左右侧窗口进行切换。</p><h3 id="配置-vimrc文件"><a href="#配置-vimrc文件" class="headerlink" title="配置.vimrc文件"></a>配置.vimrc文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;在 vim 启动的时候默认开启 NERDTree：</span><br><span class="line">autocmd VimEnter * NERDTree</span><br><span class="line">或使用autocmd的缩写形式</span><br><span class="line">au VimEnter * NERDTree</span><br><span class="line">&quot;将NERDTree的窗口设置在vim窗口的右侧(默认为左侧)：</span><br><span class="line">let NERDTreeWinPos=&quot;right&quot;</span><br></pre></td></tr></table></figure><h3 id="NERDTree常用命令汇总"><a href="#NERDTree常用命令汇总" class="headerlink" title="NERDTree常用命令汇总"></a>NERDTree常用命令汇总</h3><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>q</td><td>关闭 NERDTree</td></tr><tr><td>o</td><td>在已有窗口中打开文件或目录，并将光标跳到该窗口</td></tr><tr><td>O</td><td>递归打开选中 结点下的所有目录</td></tr><tr><td>x</td><td>合拢选中结点的父目录</td></tr><tr><td>X</td><td>递归 合拢选中结点下的所有目录</td></tr><tr><td>p</td><td>跳到根结点</td></tr><tr><td>P</td><td>跳到父结点</td></tr><tr><td>u</td><td>设置上级目录为根路径</td></tr><tr><td>U</td><td>设置上级目录为跟路径，但是维持原来目录打开的状态</td></tr><tr><td>r</td><td>刷新光标所在的目录</td></tr><tr><td>R</td><td>刷新当前根路径</td></tr><tr><td>I</td><td>显示或者不显示隐藏文件</td></tr><tr><td>f</td><td>打开和关闭文件过滤器</td></tr><tr><td>A</td><td>全屏显示 NERDTree，或者关闭全屏</td></tr><tr><td>C</td><td>将根路径设置为光标所在的目录</td></tr></tbody></table><h2 id="代码折叠"><a href="#代码折叠" class="headerlink" title="代码折叠"></a>代码折叠</h2><p>Vim支持多种折叠形式：手动折叠manual、基于缩进行折叠indent、基于语法进行折叠syntax、未更改文本折叠diff等</p><p>在 ~&#x2F;.vimrc 配置文件中增加以下配置项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;基于缩进进行代码折叠</span><br><span class="line">set foldmethod=indent</span><br><span class="line">&quot;启动 Vim 时关闭折叠</span><br><span class="line">set nofoldenable</span><br></pre></td></tr></table></figure><blockquote><p>Vim打开文件后，重复使用操作命令 <code>za</code> 可打开或关闭当前折叠；<code>zM</code> 用于关闭所有折叠，<code>zR</code> 则用来打开所有折叠</p></blockquote><h2 id="全局搜索"><a href="#全局搜索" class="headerlink" title="全局搜索"></a>全局搜索</h2><p>推荐Vim模糊搜索插件ctrlp。ctrlp是一款支持对文件、缓冲区( :CtrlPBuffer )、MRU(Most Recently Used)文件( :CtrlPMRU )和标签进行模糊搜索&#x2F;查找的Vim插件，也支持通过正则表达式搜索 ( <Ctrl>-r  进行切换)，同类软件还有模糊搜索插件fzf等。  地址：<a href="https://github.com/ctrlpvim/">https://github.com/ctrlpvim/</a></p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Plugin &#x27;ctrlpvim/ctrlp.vim&#x27;</span><br></pre></td></tr></table></figure><p>安装完ctrlp插件后，可以在Vim命令行模式下使用命令 :help ctrlp.txt 获取ctrlp的官方说明文档，这是个非常详细的文档，建议细读</p><h3 id="ctrlp命令介绍"><a href="#ctrlp命令介绍" class="headerlink" title="ctrlp命令介绍"></a>ctrlp命令介绍</h3><p>在Vim命令行模式下，可通过以下几种方式启动ctrlp：</p><ol><li><p>Vim命令行模式下使用命令 </p><p><code>:CtrlP</code> 或 <code>:CtrlP</code> 路径</p><p>可以调用ctrlp并进入查找文件模式，可通过设置 <code>let g:ctrlp_cmd = &#39;CtrlP&#39;</code> 来指定打开ctrlp的Vim命令行命令</p></li><li><p>Vim命令行模式下使用命令 </p><p><code>:CtrlPBuffer</code> 或 <code>:CtrlPMRU</code> </p><p>可以调用ctrlp并分别进入查找缓冲区 和 查找 MRU文件模式</p></li><li><p>Vim命令行模式下使用命令</p><p><code> :CtrlPMixed</code> 可同时搜索 文件、缓冲区 和 MRU文件    </p></li><li><p>在Vim 普通模式下，默认按下 <code>Ctrl+p </code> 即可打开ctrlp搜索窗口。可通过设置 <code>let g:ctrlp_map = &#39;&lt;c-p&gt;&#39; </code>来修改Vim普通模式下默认打开ctrlp的Vim按键映射。</p></li><li><p>默认设置下，ctrlp的窗口显示在Vim窗口的底端(bottom)，可以通过 <code>g:ctrlp_match_window </code>选项设置窗口的位置，例如，<code>let g:ctrlp_match_window = &#39;top,order:ttb,min:1,max:10,results:20&#39; </code>设置ctrlp窗口显示在顶端(top)，模糊搜索结果按从上到下(ttb, top to bottom)的顺序显示，高度最小为1行，最大为10行，搜索结果最多显示20行。</p></li></ol><p>一旦打开ctrlp，即可输入要寻找的文件名使用ctrlp进行模糊搜索，可以使用以下命令进行操作： </p><ul><li>按下 <code>Esc</code> 或 <code>Ctrl-c</code> 可退出ctrlp，返回到Vim窗口中</li><li>按下 <code>F5</code> 用于刷新当前操作路径下的文件缓存，可以使用命令 <code>let g:ctrlp_cache_dir = $HOME.&#39;/.cache/ctrlp&#39;</code> 设置缓存文件存放路径</li><li>使用 <code>Ctrl-k</code> 和 <code>Ctrl-j</code> 在模糊搜索结果列表中上下移动 (当然也可以使用键盘上的上下方向键</li><li>使用 <code>Ctrl-f</code> 和 <code>Ctrl-b</code> 在查找文件模式、查找缓冲区模式、查找MRU文件几种模式间进行切换 (cycle between modes)</li><li>使用 <code>Ctrl-d</code> 在 路径匹配 和 文件名匹配 之间切换 (switch to filename search instead of full path) ，可以通过设置 let g:ctrlp_by_filename &#x3D; 1 来设置默认使用 文件名匹配 模式进行模糊搜索</li><li>使用 <code>Ctrl-r</code> 在 字符串模式 和 正则表达式模式 之间切换 (switch to regexp mode)</li><li>使用 <code>Ctrl-t</code> 在新的Vim标签页中打开文件 (open the selected entry in a new tab)</li><li>使用 <code>Ctrl-v</code> 垂直分割窗口打开文件</li><li>使用 <code>Ctrl-x</code> 水平分割窗口打开文件</li><li>使用 <code>Ctrl-p</code> 或&#96; 选择前或后一条历史记录</li><li>使用 <code>Ctrl-y</code> 用于当搜索的目标文件不存在时创建文件及父目录 (create a new file and its parent directories)</li><li>使用 <code>Ctrl-z</code> 标记或取消标记多个文件， 标记多个文件后可以使用 <code>Ctrl-o</code> 同时打开多个文件</li></ul><h2 id="括号自动补全"><a href="#括号自动补全" class="headerlink" title="括号自动补全"></a>括号自动补全</h2><p><a href="https://github.com/jiangmiao/auto-pairs">Github地址</a></p><h3 id="安装插件-1"><a href="#安装插件-1" class="headerlink" title="安装插件"></a>安装插件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Plugin <span class="string">&#x27;jiangmiao/auto-pairs&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="配置-vimrc文件-1"><a href="#配置-vimrc文件-1" class="headerlink" title="配置.vimrc文件"></a>配置.vimrc文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&quot;设置要自动配对的符号</span><br><span class="line">let g:AutoPairs = &#123;&#x27;(&#x27;:&#x27;)&#x27;, &#x27;[&#x27;:&#x27;]&#x27;, &#x27;&#123;&#x27;:&#x27;&#125;&#x27;,&quot;&#x27;&quot;:&quot;&#x27;&quot;,&#x27;&quot;&#x27;:&#x27;&quot;&#x27;&#125;</span><br><span class="line">&quot;添加要自动配对的符号&lt;&gt;</span><br><span class="line">let g:AutoPairs[&#x27;&lt;&#x27;]=&#x27;&gt;&#x27;</span><br><span class="line">&quot;设置要自动配对的符号，默认为g:AutoPairs，可以通过自动命令来对不同文件类型设置不同自动匹配对符号</span><br><span class="line">let b:AutoPairs = g:AutoParis</span><br><span class="line">&quot;设置插件打开/关闭的快捷键，默认为ALT+p。</span><br><span class="line">let g:AutoPairsShortcutToggle = &#x27;&lt;M-p&gt;&#x27;</span><br><span class="line">&quot;设置自动为文本添加圆括号的快捷键，默认为ALT+e。</span><br><span class="line">let g:AutoPairsShortcutFastWrap = &#x27;&lt;M-e&gt;&#x27;</span><br><span class="line">&quot;设置调到下一层括号对的快捷键，默认为ALT+n。</span><br><span class="line">let g:AutoPairsShortcutJump = &#x27;&lt;M-n&gt;&#x27;</span><br><span class="line">&quot;设置撤销飞行模式的快捷键，默认为ALT+b。</span><br><span class="line">let g:AutoPairsShortcutBackInsert = &#x27;&lt;M-b&gt;&#x27;</span><br><span class="line">&quot;把BACKSPACE键映射为删除括号对和引号，默认为1。</span><br><span class="line">let g:AutoPairsMapBS = 1</span><br><span class="line">&quot;把ctrl+h键映射为删除括号对和引号，默认为1。</span><br><span class="line">let g:AutoPairsMapCh = 1</span><br><span class="line">&quot;把ENTER键映射为换行并缩进，默认为1。</span><br><span class="line">let g:AutoPairsMapCR = 1</span><br><span class="line">&quot;当g:AutoPairsMapCR为1时，且文本位于窗口底部时，自动移到窗口中间。</span><br><span class="line">let g:AutoPairsCenterLine = 1</span><br><span class="line">&quot;把SPACE键映射为在括号两侧添加空格，默认为1。</span><br><span class="line">let g:AutoPairsMapSpace = 1</span><br><span class="line">&quot;启用飞行模式，默认为0。</span><br><span class="line">let g:AutoPairsFlyMode = 0</span><br><span class="line">&quot;启用跳出多行括号对，默认为1，为0则只能跳出同一行的括号。</span><br><span class="line">let g:AutoPairsMultilineClose = 1</span><br></pre></td></tr></table></figure><h2 id="安装vim-airline"><a href="#安装vim-airline" class="headerlink" title="安装vim-airline"></a>安装vim-airline</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Plugin <span class="string">&#x27;bling/vim-airline&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="安装neocomplete"><a href="#安装neocomplete" class="headerlink" title="安装neocomplete"></a>安装neocomplete</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Plugin &#x27;Shougo/neocomplete&#x27;</span><br></pre></td></tr></table></figure><blockquote><p>注意启用设置粘贴set paste的时候会自动禁用这个插件</p><p>安装neocomplete 插件需要vim的lua模块支持</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">let g:neocomplete#enable_at_startup = 1</span><br><span class="line">&quot;至此，neocomplete配置完成。同时，作者提供了一份neocomplete的配置，如果没有特殊需要，可以直接使用:</span><br><span class="line">    &quot;Note: This option must be set in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!</span><br><span class="line">    &quot; Disable AutoComplPop.</span><br><span class="line">    let g:acp_enableAtStartup = 0</span><br><span class="line">    &quot; Use neocomplete.</span><br><span class="line">    let g:neocomplete#enable_at_startup = 1</span><br><span class="line">    &quot; Use smartcase.</span><br><span class="line">    let g:neocomplete#enable_smart_case = 1</span><br><span class="line">    &quot; Set minimum syntax keyword length.</span><br><span class="line">    let g:neocomplete#sources#syntax#min_keyword_length = 3</span><br><span class="line"></span><br><span class="line">    &quot; Define dictionary.</span><br><span class="line">    let g:neocomplete#sources#dictionary#dictionaries = &#123;</span><br><span class="line">        \ &#x27;default&#x27; : &#x27;&#x27;,</span><br><span class="line">        \ &#x27;vimshell&#x27; : $HOME.&#x27;/.vimshell_hist&#x27;,</span><br><span class="line">        \ &#x27;scheme&#x27; : $HOME.&#x27;/.gosh_completions&#x27;</span><br><span class="line">            \ &#125;</span><br><span class="line"></span><br><span class="line">    &quot; Define keyword.</span><br><span class="line">    if !exists(&#x27;g:neocomplete#keyword_patterns&#x27;)</span><br><span class="line">        let g:neocomplete#keyword_patterns = &#123;&#125;</span><br><span class="line">    endif</span><br><span class="line">    let g:neocomplete#keyword_patterns[&#x27;default&#x27;] = &#x27;\h\w*&#x27;</span><br><span class="line"></span><br><span class="line">    &quot; Plugin key-mappings.</span><br><span class="line">    inoremap &lt;expr&gt;&lt;C-g&gt;     neocomplete#undo_completion()</span><br><span class="line">    inoremap &lt;expr&gt;&lt;C-l&gt;     neocomplete#complete_common_string()</span><br><span class="line"></span><br><span class="line">    &quot; Recommended key-mappings.</span><br><span class="line">    &quot; &lt;CR&gt;: close popup and save indent.</span><br><span class="line">    inoremap &lt;silent&gt; &lt;CR&gt; &lt;C-r&gt;=&lt;SID&gt;my_cr_function()&lt;CR&gt;</span><br><span class="line">    function! s:my_cr_function()</span><br><span class="line">      return (pumvisible() ? &quot;\&lt;C-y&gt;&quot; : &quot;&quot; ) . &quot;\&lt;CR&gt;&quot;</span><br><span class="line">      &quot; For no inserting &lt;CR&gt; key.</span><br><span class="line">      &quot;return pumvisible() ? &quot;\&lt;C-y&gt;&quot; : &quot;\&lt;CR&gt;&quot;</span><br><span class="line">    endfunction</span><br><span class="line">    &quot; &lt;TAB&gt;: completion.</span><br><span class="line">    inoremap &lt;expr&gt;&lt;TAB&gt;  pumvisible() ? &quot;\&lt;C-n&gt;&quot; : &quot;\&lt;TAB&gt;&quot;</span><br><span class="line">    &quot; &lt;C-h&gt;, &lt;BS&gt;: close popup and delete backword char.</span><br><span class="line">    inoremap &lt;expr&gt;&lt;C-h&gt; neocomplete#smart_close_popup().&quot;\&lt;C-h&gt;&quot;</span><br><span class="line">    inoremap &lt;expr&gt;&lt;BS&gt; neocomplete#smart_close_popup().&quot;\&lt;C-h&gt;&quot;</span><br><span class="line">    &quot; Close popup by &lt;Space&gt;.</span><br><span class="line">    &quot;inoremap &lt;expr&gt;&lt;Space&gt; pumvisible() ? &quot;\&lt;C-y&gt;&quot; : &quot;\&lt;Space&gt;&quot;</span><br><span class="line"></span><br><span class="line">    &quot; AutoComplPop like behavior.</span><br><span class="line">    &quot;let g:neocomplete#enable_auto_select = 1</span><br><span class="line"></span><br><span class="line">    &quot; Shell like behavior(not recommended).</span><br><span class="line">    &quot;set completeopt+=longest</span><br><span class="line">    &quot;let g:neocomplete#enable_auto_select = 1</span><br><span class="line">    &quot;let g:neocomplete#disable_auto_complete = 1</span><br><span class="line">    &quot;inoremap &lt;expr&gt;&lt;TAB&gt;  pumvisible() ? &quot;\&lt;Down&gt;&quot; : &quot;\&lt;C-x&gt;\&lt;C-u&gt;&quot;</span><br><span class="line"></span><br><span class="line">    &quot; Enable omni completion.</span><br><span class="line">    autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS</span><br><span class="line">    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags</span><br><span class="line">    autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS</span><br><span class="line">    autocmd FileType python setlocal omnifunc=pythoncomplete#Complete</span><br><span class="line">    autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags</span><br><span class="line"></span><br><span class="line">    &quot; Enable heavy omni completion.</span><br><span class="line">    if !exists(&#x27;g:neocomplete#sources#omni#input_patterns&#x27;)</span><br><span class="line">      let g:neocomplete#sources#omni#input_patterns = &#123;&#125;</span><br><span class="line">    endif</span><br><span class="line">    &quot;let g:neocomplete#sources#omni#input_patterns.php = &#x27;[^. \t]-&gt;\h\w*\|\h\w*::&#x27;</span><br><span class="line">    &quot;let g:neocomplete#sources#omni#input_patterns.c = &#x27;[^.[:digit:] *\t]\%(\.\|-&gt;\)&#x27;</span><br><span class="line">    &quot;let g:neocomplete#sources#omni#input_patterns.cpp = &#x27;[^.[:digit:] *\t]\%(\.\|-&gt;\)\|\h\w*::&#x27;</span><br><span class="line"></span><br><span class="line">    &quot; For perlomni.vim setting.</span><br><span class="line">    &quot; https://github.com/c9s/perlomni.vim</span><br><span class="line">    let g:neocomplete#sources#omni#input_patterns.perl = &#x27;\h\w*-&gt;\h\w*\|\h\w*::&#x27;</span><br></pre></td></tr></table></figure><p>先到这里，以后发现了什么好玩的插件再来更新。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Vim </tag>
            
            <tag> Vimrc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim基础</title>
      <link href="/posts/539de644/"/>
      <url>/posts/539de644/</url>
      
        <content type="html"><![CDATA[<p>Vim不论是在Linux上使用还是作为一个常用的编辑器来使用它无疑是最强大的，熟练掌握vim的使用非常之重要。</p><blockquote><p>Vim官方教程可通过<code>vimtutor</code>命令查看。</p></blockquote><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125532.png" alt="Vim"></p><h2 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h2><p>移动光标是按<code>h</code>、<code>j</code>、<code>k</code>、<code>l</code> 键。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">      ^</span><br><span class="line">      k              提示：  h 的键位于左边，每次按下就会向左移动。</span><br><span class="line">&lt; h       l &gt;               l 的键位于右边，每次按下就会向右移动。</span><br><span class="line">      j                     j 键看起来很象一支尖端方向朝下的箭头。</span><br><span class="line">      v</span><br></pre></td></tr></table></figure><blockquote><p>提示：如果您不敢确定您所按下的字母，请按下<code>ESC</code>键回到正常(Normal)模式。然后再次从键盘输入您想要的命令。</p><p>键盘上的方向键也是可以的。但是使用<code>hjkl</code>键，在习惯之后您就能够更快地在屏幕内四处移动光标。</p></blockquote><h2 id="Vim的进入和退出"><a href="#Vim的进入和退出" class="headerlink" title="Vim的进入和退出"></a>Vim的进入和退出</h2><p>首先按下<code>ESC</code>键确保处于正常(Normal)模式，输入<code>:q</code>回车就是退出vim，当然前提是你没有做任何的更改，否则就会报错。</p><p>输入<code>:wq</code>就是保存并退出</p><p>输入<code>:q!</code>就是强制退出，即使你更改了内容，强制退出之后并不会保存更改内容</p><h2 id="文本编辑"><a href="#文本编辑" class="headerlink" title="文本编辑"></a>文本编辑</h2><h3 id="文本编辑之删除"><a href="#文本编辑之删除" class="headerlink" title="文本编辑之删除"></a>文本编辑之删除</h3><p>在正常(Normal)模式下可以按下<code>x</code>键来删除光标所在位置的字符。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125613.gif" alt="删除字符"></p><blockquote><p>注意是在NORMAL模式下哦</p></blockquote><h3 id="文本编辑之插入"><a href="#文本编辑之插入" class="headerlink" title="文本编辑之插入"></a>文本编辑之插入</h3><p>打开vim之后默认会处于Normal模式，怎么对文件内容进行更改呢？按<code>i</code>键即可。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125618.gif" alt="文本插入"></p><p>插入完需要的字符之后可千万别急着用<code>Ctrl+S</code>进行保存，先按<code>ESC</code>进入Normal模式在进行保存。</p><h3 id="文本编辑之添加"><a href="#文本编辑之添加" class="headerlink" title="文本编辑之添加"></a>文本编辑之添加</h3><p>和<code>i</code>键功能差不多，<code>A</code>键的功能就是插入文本</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125625.gif" alt="添加"></p><h3 id="编辑文件"><a href="#编辑文件" class="headerlink" title="编辑文件"></a>编辑文件</h3><p>上面已经说过了输入<code>:wq</code>就是保存文件，使用vim新建文件就是直接在Shell里输入<code>vim (filename)</code>，编辑完保存即可。如果不需要保存改动，输入<code>:q!</code>即可。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125635.gif" alt="编辑文件"></p><blockquote><p>有点小失误不要在意O(∩_∩)O哈！</p></blockquote><h3 id="小结一下"><a href="#小结一下" class="headerlink" title="小结一下"></a>小结一下</h3><ol><li><p>光标在屏幕文本中的移动既可以用箭头键，也可以使用 <code>hjkl </code> 字母键。</p><p><code>h (左移)</code>       <code>j (下行)</code>       <code>k (上行)</code>     <code>l (右移)</code></p></li><li><p>欲进入 Vim 编辑器(从命令行提示符)，请输入：<code>vim 文件名 &lt;回车&gt;</code></p></li><li><p>欲退出 Vim 编辑器，请输入 <code>ESC</code> 进入Normal模式，再输入   <code>:q!   &lt;回车&gt;</code> 放弃所有改动。或者输入  <code>:wq   &lt;回车&gt;</code> 保存改动。</p></li><li><p>在正常模式下删除光标所在位置的字符，请按：<code> x</code></p></li><li><p>欲插入或添加文本，请输入：<br>  <code>i</code>   输入欲插入文本   <code>ESC</code>    在光标前插入文本<br>  <code>A</code>   输入欲添加文本   <code>ESC</code>    在一行后添加文本</p><blockquote><p>特别提示：按下 <code>ESC</code> 键会带您回到正常模式或者撤消一个不想输入或部分完整的命令。</p></blockquote></li></ol><h2 id="删除类命令"><a href="#删除类命令" class="headerlink" title="删除类命令"></a>删除类命令</h2><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>按下<code>ESC</code>确认处于Normal模式，输入<code>dw</code> 可以从光标删除到一个单词的末尾。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125650.gif" alt="dw删除"></p><p>输入<code>d$</code> 可以从光标处直接删除到行末</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125656.gif" alt="d$"></p><blockquote><p>前两下是使用<code>dw</code> 来删除，所以并不会删除完，只是删除到单词的末尾，最后一下是<code>d$</code> 删除，可以直接删除到行末</p></blockquote><h3 id="关于d命令和对象"><a href="#关于d命令和对象" class="headerlink" title="关于d命令和对象"></a>关于<code>d</code>命令和对象</h3><p>许多改变文本的命令都由一个操作符和一个动作构成。使用删除操作符 d 的删除命令的格式如下：<code>d   motion</code> 其中：<br>    d            - 删除操作符。<br>    motion - 操作符的操作对象(在下面列出)。</p><p>一个简短的动作列表：<br>    w - 从当前光标当前位置直到下一个单词起始处，不包括它的第一个字符。<br>    e - 从当前光标当前位置直到单词末尾，包括最后一个字符。<br>    $ - 从当前光标当前位置直到当前行末。</p><p>因此输入 <code>de</code> 会从当前光标位置删除到单词末尾。</p><p>特别提示：对于勇于探索者，请在正常模式下面仅按代表相应动作的键而不使用操作符，您将看到光标的移动正如上面的对象列表所代表的一样。</p><h2 id="使用数字操作"><a href="#使用数字操作" class="headerlink" title="使用数字操作"></a>使用数字操作</h2><h3 id="指定动作"><a href="#指定动作" class="headerlink" title="指定动作"></a>指定动作</h3><p>在命令前加上数字可以使它重复指定次数，例如输入<code>2w</code> 使光标向前移动两个单词</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125708.gif" alt="2w"></p><p>输入<code>3e</code> 向前移动到第三个单词的末尾，输入<code>0</code>移动到行首等。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125741.gif" alt="3e、0"></p><h3 id="使用数字删除更多"><a href="#使用数字删除更多" class="headerlink" title="使用数字删除更多"></a>使用数字删除更多</h3><p>输入<code>d2w</code> 可以同时删除两个挨着的单词</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125746.gif" alt="d2w"></p><blockquote><p>当然其他数字也是同理，只要语法正确即可。</p></blockquote><h2 id="操作整行"><a href="#操作整行" class="headerlink" title="操作整行"></a>操作整行</h2><h3 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h3><p>输入<code>dd</code> 可直接删除一个整行</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125752.gif" alt="dd"></p><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><p>输入<code>2dd</code> 可直接删除两行</p><h2 id="撤销类命令"><a href="#撤销类命令" class="headerlink" title="撤销类命令"></a>撤销类命令</h2><p>输入<code>u</code> 可撤销最后执行的命令，输入<code>U</code> 可撤销对整行的更改（注意大小写）</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125757.gif" alt="u和U"></p><blockquote><p><code>Crtl+R</code> 快捷键可以撤销任何命令</p></blockquote><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol><li>欲从当前光标删除至下一个单词，请输入：<code>dw</code></li><li>欲从当前光标删除至当前行末尾，请输入：<code>d$</code></li><li>欲删除整行，请输入：<code>dd</code></li><li>欲重复一个动作，请在它前面加上一个数字：<code>2w</code></li><li>在正常模式下修改命令的格式是：<code>operator   [number]   motion</code> 其中：<br><code>operator</code> - 操作符，代表要做的事情，比如 <code>d</code> 代表删除<br><code>number</code>   - 可以附加的数字，代表动作重复的次数<br><code>motion</code>   - 动作，代表在所操作的文本上的移动，例如 <code>w</code> 代表单词(word)，<code>$</code> 代表行末等等。</li><li>欲移动光标到行首，请按数字0键：<code>0</code></li><li>欲撤消以前的操作，请输入：<code>u</code> (小写的u)    欲撤消在一行中所做的改动，请输入：<code>U</code> (大写的U)   欲撤消以前的撤消命令，恢复以前的操作结果，请输入：<code>CTRL+R</code></li></ol><h2 id="置入类命令"><a href="#置入类命令" class="headerlink" title="置入类命令"></a>置入类命令</h2><p>输入<code>p</code> 可以将最后一次删除的内容置入光标之后，和<code>dd</code> 结合起来就相当于剪切和粘贴功能</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125805.gif" alt="dd和p"></p><h2 id="替换类命令"><a href="#替换类命令" class="headerlink" title="替换类命令"></a>替换类命令</h2><p>输入<code>r</code> 和一个字符替换光标所在位置的字符</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125811.gif" alt="t被替换为T"></p><h2 id="更改类命令"><a href="#更改类命令" class="headerlink" title="更改类命令"></a>更改类命令</h2><p>输入<code>ce</code> 会将从光标到单词末的字符删除，同时进入插入模式进行修改</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125815.gif" alt="ce"></p><blockquote><p>需要注意的是<code>ce</code> 会更改模式到插入模式，修改完记得使用<code>ESC</code> 键恢复到Normal模式</p></blockquote><p>同理，输入 <code>cw</code> 会从光标到下一个单词始的字符删除，输入<code>c$</code> 会从光标到行末（行末和单词末可不一样哦）。</p><p><code>c</code> 命令和其他命令一样，也可以使用数字进行重复执行，语法也相同，再次不多赘述。</p><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><ol><li>要重新置入已经删除的文本内容，请按小写字母 <code>p</code> 键。该操作可以将已删除的文本内容置于光标之后。如果最后一次删除的是一个整行，那么该行将置于当前光标所在行的下一行。</li><li>要替换光标所在位置的字符，请输入小写的 <code>r</code> 和要替换掉原位置字符的新字符即可。</li><li>更改类命令允许您改变从当前光标所在位置直到动作指示的位置中间的文本。比如输入 <code>ce</code> 可以替换当前光标到单词的末尾的内容；输入 <code>c$</code> 可以替换当前光标到行末的内容。</li><li>更改类命令的格式是：<code>c   [number]   motion</code></li></ol><h2 id="定位及文件状态"><a href="#定位及文件状态" class="headerlink" title="定位及文件状态"></a>定位及文件状态</h2><p>按下<code>Ctrl+G</code> 显示当前编辑文件中光标所在行位置以及文件状态信息。输入大写 <code>G</code> 则直接跳转到文件中的某一指定行。</p><p>看到页面最底部出现一个状态信息行，显示的内容是当前编辑的文件名和文件中光标位置，行号等信息。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125825.png" alt="文件状态"></p><p>在Normal模式下，输入<code>gg</code> 光标跳转到首行，输入<code>G</code> 跳转到尾行，输入一个数字和<code>g</code> 则会跳转到指定行。</p><blockquote><p>注意，我的vim界面是已经配置过的，所以默认是显示行号的，如果没有配置，则使用<code>Ctrl+G</code> 会显示当前光标所在行号，如果需要学习vim配置，请看另一篇文章之Vimrc。</p></blockquote><h2 id="搜索类命令"><a href="#搜索类命令" class="headerlink" title="搜索类命令"></a>搜索类命令</h2><p>在Normal模式下，输入一个<code>/</code> 则会跳转到命令输入行，然后输入需要搜索的字符串，回车，就会自动跳转到目标所在行</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125830.gif" alt="搜索"></p><p>要查找同上一次的字符串，只需要按 <code>n</code> 键。要向相反方向查找同上一次的字符串，请输入大写 <code>N</code> 即可。如果想逆向查找字符串，请使用 <code>?</code> 代替 <code>/</code> 进行。</p><p>要回到您之前的位置按 <code>CTRL+O</code> ，重复按可以回退更多步<code>CTRL+I </code>会跳转到较新的位置。如果查找已经到达文件末尾，查找会自动从文件头部继续查找，除非<code>wrapscan</code>选项被复位。</p><h2 id="配对括号的查找"><a href="#配对括号的查找" class="headerlink" title="配对括号的查找"></a>配对括号的查找</h2><p>输入 <code>%</code> 可以查找配对的括号 <code>)</code>、<code>]</code>、<code>&#125;</code> ，首先把光标移动到一个括号处，按下<code>%</code> 光标就会自动跳转到与这个括号配对的另一个括号处</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125836.gif" alt="括号查找"></p><h2 id="查找并替换字符串"><a href="#查找并替换字符串" class="headerlink" title="查找并替换字符串"></a>查找并替换字符串</h2><p>例如输入 <code>:s/old/new/g</code> 可以替换 old 为 new</p><blockquote><p>假如第一个字段有好几个怎么办呢？</p><p>输入 <code>:s/thee/the</code> &lt;回车&gt; 。请注意该命令只改变光标所在行的第一个匹配串。</p><p>输入 <code>:s/thee/the/g</code> 则是替换全行的匹配串，该行中所有的 “thee” 都会被改变</p></blockquote><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125842.gif" alt="替换字符串"></p><p><strong>要替换两行之间出现的每个匹配串：</strong></p><ul><li>输入   <code>:#,#s/old/new/g</code>   其中 #,## 代表的是替换操作的若干行中首尾两行的行号</li><li>输入   <code>:%s/old/new/g</code>     则是替换整个文件中的每个匹配串</li><li>输入  <code> :%s/old/new/gc</code>    会找到整个文件中的每个匹配串，并且对每个匹配串提示是否进行替换</li></ul><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><ol><li><code>CTRL+G</code> 用于显示当前光标所在位置和文件状态信息<br>  <code>G</code> 用于将光标跳转至文件最后一行<br>  先敲入一个行号然后输入大写 <code>G</code> 则是将光标移动至该行号代表的行<br>  <code>gg</code> 用于将光标跳转至文件第一行</li><li>输入 <code>/</code> 然后紧随一个字符串是在当前所编辑的文档中正向查找该字符串<br>  输入 <code>?</code> 然后紧随一个字符串则是在当前所编辑的文档中反向查找该字符串<br>  完成一次查找之后按 <code>n</code> 键是重复上一次的命令，可在同一方向上查找下一个匹配字符串所在；或者按大写 <code>N</code> 向相反方向查找下一匹配字符串所在<br>  <code>CTRL+O</code> 带您跳转回较旧的位置，<code>CTRL+I</code> 则带您到较新的位置</li><li>如果光标当前位置是括号<code>(</code>、<code>)</code>、<code>[</code>、<code>]</code>、<code>&#123;</code>、<code>&#125;</code>，按 <code>%</code> 会将光标移动到配对的括号上</li><li>在一行内替换头一个字符串 old 为新的字符串 new，输入  <code>:s/old/new</code><br>在一行内替换所有的字符串 old 为新的字符串 new，输入  <code>:s/old/new/g</code><br>在两行内替换所有的字符串 old 为新的字符串 new，输入  <code>:#,#s/old/new/g</code><br>在文件内替换所有的字符串 old 为新的字符串 new，输入  <code>:%s/old/new/g</code><br>进行全文替换时询问用户确认每个替换需添加 c 标志        <code>:%s/old/new/gc</code></li></ol><h2 id="在-VIM-内执行外部命令的方法"><a href="#在-VIM-内执行外部命令的方法" class="headerlink" title="在 VIM 内执行外部命令的方法"></a>在 VIM 内执行外部命令的方法</h2><p>输入 <code>:!</code> 然后紧接着输入一个外部命令可以执行该外部shell命令，所有的外部命令都可以以这种方式执行，包括带命令行参数的那些。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125850.gif" alt="执行Shell命令"></p><h2 id="关于保存文件"><a href="#关于保存文件" class="headerlink" title="关于保存文件"></a>关于保存文件</h2><h3 id="更改文件名"><a href="#更改文件名" class="headerlink" title="更改文件名"></a>更改文件名</h3><p>vim编辑的文件名有两种方式，一是执行vim命令的时候附带文件名参数，这我之前已经说过了，另一种就是在Normal模式下输入 <code>:w filename</code> 就可以指定文件的名称</p><h3 id="选择性保存部分文件"><a href="#选择性保存部分文件" class="headerlink" title="选择性保存部分文件"></a>选择性保存部分文件</h3><p>首先要进入vim的另一个模式，前面我们已经知道vim的正常Normal模式和插入模式，那么在Normal模式下按<code>v</code> 键就可以进入<strong>可视模式</strong>。</p><p>移动光标到要选中的文本的开始，按<code>v</code> 进入可视模式，然后按方向键进行文本选择，可以看到被选择的文本就会进行高亮，然后按<code>:</code> ，命令行位置就会出现<code>:&#39;&lt;,&#39;&gt;</code> ，现在输入<code>w filename</code> ，这个时候vim就会把选中的文本写进filename的文件中去。</p><p>当然，可视模式选中的文本也可以进行其他操作，比如<code>d</code> 删除，<code>p</code> 置入，<code>y</code> 复制等。</p><h2 id="提取和合并文件"><a href="#提取和合并文件" class="headerlink" title="提取和合并文件"></a>提取和合并文件</h2><p>提取和合并文件内容的命令是<code>r</code> ，比如我们现在有两个文件，test1和test2，我想把test1文件中的内容放入test2中的指定位置，就可以在打开test2文件下，把光标移动到指定位置，输入<code>:r test1</code> ，当然前提是test1文件的路径要正确</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125857.gif" alt="提取和合并文件"></p><p>还可以读取外部Shell命令的输出。例如 <code>:r !ls</code> 可以读取 <code>ls</code> 命令的输出，并把它放置在光标下面，类似于数据流重定向</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125901.gif" alt="数据流重定向"></p><h3 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h3><ol><li><code>:!command</code>用于执行一个外部命令 command</li><li><code>:w FILENAME</code>  可将当前 VIM 中正在编辑的文件保存到名为 FILENAME 的文件中</li><li><code>v motion :w FILENAME</code> 可将当前编辑文件中可视模式下选中的内容保存到文件FILENAME 中</li><li><code>:r FILENAME</code> 可提取磁盘文件 FILENAME 并将其插入到当前文件的光标位置后面</li><li><code>:r !dir</code>可以读取 dir 命令的输出并将其放置到当前文件的光标位置后面</li></ol><h2 id="打开类命令"><a href="#打开类命令" class="headerlink" title="打开类命令"></a>打开类命令</h2><p>输入 <code>o</code> 将在光标的下方打开新的一行并进入插入模式</p><p>在光标上方打开新的一行，输入大写的 <code>O</code> </p><h2 id="附加类命令"><a href="#附加类命令" class="headerlink" title="附加类命令"></a>附加类命令</h2><p>输入 <code>a</code> 将可在光标之后插入文本</p><p><code>a</code>、<code>i</code> 和 <code>A</code> 都会进入插入模式，惟一的区别在于字符插入的位置</p><h2 id="另外一个置换类命令的版本"><a href="#另外一个置换类命令的版本" class="headerlink" title="另外一个置换类命令的版本"></a>另外一个置换类命令的版本</h2><p>输入大写的 <code>R</code> 可连续替换多个字符，替换模式与插入模式相似，不过每个输入的字符都会删除一个已有的字符</p><h2 id="复制粘贴文本"><a href="#复制粘贴文本" class="headerlink" title="复制粘贴文本"></a>复制粘贴文本</h2><p>上面提过复制命令，现在来详细示范一下，使用操作符 <code>y</code> 复制文本，使用 <code>p</code> 粘贴文本</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721125908.gif" alt="复制粘贴"></p><blockquote><p>提示：还可以把 <code>y</code> 当作操作符来使用；例如 <code>yw</code> 可以用来复制一个单词，<code>yy</code> 复制一整行等</p></blockquote><h2 id="设置类命令的选项"><a href="#设置类命令的选项" class="headerlink" title="设置类命令的选项"></a>设置类命令的选项</h2><p>这个就涉及vim的配置文件了，另起一篇文章详解，请移步。</p><h2 id="获取vim官方帮助"><a href="#获取vim官方帮助" class="headerlink" title="获取vim官方帮助"></a>获取vim官方帮助</h2><p>使用在线帮助系统<br>Vim 拥有一个细致全面的在线帮助系统。要启动该帮助系统，请选择如下方法之一：</p><ul><li>按下 <code>F1</code> 键</li><li>输入 <code>:help</code> &lt;回车&gt;</li></ul><p><code>CTRL+W</code> 可以使您在窗口之间跳转。输入 <code>:q</code> &lt;回车&gt; 可以关闭帮助窗口。<br>提供一个正确的参数给 <code>:help</code> 命令，您可以找到关于该主题的帮助。请试验以下参数(可别忘了按回车键哦)：</p><ul><li><code>:help w</code></li><li><code>:help c_CTRL-D</code></li><li><code>:help insert-index</code></li><li><code>:help user-manual</code></li></ul><h2 id="补全功能"><a href="#补全功能" class="headerlink" title="补全功能"></a>补全功能</h2><p>vim中也有类似于bash shell中的命令补全功能，同样也是<code>TAB</code>键，按<code>Ctrl+D</code> 会显示命令列表，然后<code>TAB</code> 补全即可。</p><blockquote><p>vim基础使用就这么多，如果想了解更高阶的vim配置，情移步。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell脚本简单示例</title>
      <link href="/posts/6526142f/"/>
      <url>/posts/6526142f/</url>
      
        <content type="html"><![CDATA[<h2 id="hello-wrold"><a href="#hello-wrold" class="headerlink" title="hello wrold"></a>hello wrold</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># program:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># shows &quot;hello world!&quot; in your screen</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># history:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 2019/8/21laughfirst release</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 2019/8/21laughsecond modify</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 修复了在./下执行时路径找不到的问题；第一行‘#！’为声明使用的shell名称，解释器的作用，并不是注释</span></span></span><br><span class="line">PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/sbin:/usr/sbin</span><br><span class="line">export PATH</span><br><span class="line">echo -e &quot;hello world! \a \n&quot;</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure><h2 id="计算从1累加到100"><a href="#计算从1累加到100" class="headerlink" title="计算从1累加到100"></a>计算从1累加到100</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># program:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 计算1+2+3+...+100的数值</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># history:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 2019/8/23  laugh   first</span></span></span><br><span class="line">PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/sbin:/usr/sbin</span><br><span class="line">export PATH</span><br><span class="line">s=0 #求和的数值变量</span><br><span class="line">i=0 #累计的数值，就是123等等</span><br><span class="line">while [ &quot;$&#123;i&#125;&quot; != &quot;100&quot; ]</span><br><span class="line">do </span><br><span class="line">i=$(( $i+1 ))</span><br><span class="line">    s=$(( $s+$i ))</span><br><span class="line">done </span><br><span class="line">echo &quot;The result of 1+2+3++100 is ==&gt; $s&quot;</span><br></pre></td></tr></table></figure><h2 id="计算从1累加到指定数值"><a href="#计算从1累加到指定数值" class="headerlink" title="计算从1累加到指定数值"></a>计算从1累加到指定数值</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># program:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 计算从1累加到用户指定的数字为止</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># history:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 2019/8/23  laugh   first</span></span></span><br><span class="line">PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/sbin:/usr/sbin</span><br><span class="line">export PATH</span><br><span class="line">read -p &quot;Please input a number , I will help you to sum 1+2+3+...+your number :&quot; nu </span><br><span class="line">s=0</span><br><span class="line">for (( i=1; i&lt;=$&#123;nu&#125;; i=i+1 ))</span><br><span class="line">do </span><br><span class="line">s=$(( $&#123;s&#125; + $&#123;i&#125; ))</span><br><span class="line">done </span><br><span class="line">echo &quot;1+2+3+4+...+$&#123;nu&#125;==&gt;$&#123;s&#125;&quot;</span><br></pre></td></tr></table></figure><h2 id="键盘读取和输出语句"><a href="#键盘读取和输出语句" class="headerlink" title="键盘读取和输出语句"></a>键盘读取和输出语句</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">program:</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">显示用户输入的用户名</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">history</span>:</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2019/8/22laughfirst</span></span><br><span class="line">PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/sbin:/usr/sbin</span><br><span class="line">export PATH</span><br><span class="line">read -p &quot;Please input your first name:&quot; firstname</span><br><span class="line">read -p &quot;Please input your last name:&quot; lastname</span><br><span class="line">echo -e &quot;\nYour fullname is: $&#123;firstname&#125; $&#123;lastname&#125;&quot;</span><br></pre></td></tr></table></figure><h2 id="用if-elif-else语句实现y-n的选择"><a href="#用if-elif-else语句实现y-n的选择" class="headerlink" title="用if elif else语句实现y&#x2F;n的选择"></a>用if elif else语句实现y&#x2F;n的选择</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># program:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 判断输入字符并输出相应信息</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># history:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 2019/8/22   laugh  first</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 2019/8/23   laugh   second</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 修改了[]的用法和使用了if判断式</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 2019/8/23  laugh   3</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 使用了多重条件判断式</span></span></span><br><span class="line">PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/sbin:/usr/sbin</span><br><span class="line">export PATH</span><br><span class="line">read -p &quot;Please input (Y/N):&quot; yn</span><br><span class="line">if [[ $&#123;yn&#125; == &quot;Y&quot; ]] || [[ $&#123;yn&#125; == &quot;y&quot; ]]; then</span><br><span class="line">echo &quot;Ok,continue &quot;</span><br><span class="line">    elif [ &quot;$&#123;yn&#125;&quot; == &quot;N&quot; -o &quot;$&#123;yn&#125;&quot; == &quot;n&quot; ]; then</span><br><span class="line">echo &quot;No,interrupt &quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;I don&#x27;t know what your choice is &quot; &amp;&amp; exit 0</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="用if语句实现y-n的选择"><a href="#用if语句实现y-n的选择" class="headerlink" title="用if语句实现y&#x2F;n的选择"></a>用if语句实现y&#x2F;n的选择</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># program:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 判断输入字符并输出相应信息</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># history:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 2019/8/22   laugh   first</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 2019/8/23   laugh   second</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 修改了[]的用法和使用了if判断式</span></span></span><br><span class="line">PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/sbin:/usr/sbin</span><br><span class="line">export PATH</span><br><span class="line">read -p &quot;Please input (Y/N):&quot; yn</span><br><span class="line">if [[ $&#123;yn&#125; == &quot;Y&quot; ]] || [[ $&#123;yn&#125; == &quot;y&quot; ]]; then</span><br><span class="line">echo &quot;Ok,continue &quot;</span><br><span class="line">exit 0</span><br><span class="line">fi</span><br><span class="line">if [ &quot;$&#123;yn&#125;&quot; == &quot;N&quot; -o &quot;$&#123;yn&#125;&quot; == &quot;n&quot; ]; then</span><br><span class="line">echo &quot;No,interrupt &quot;</span><br><span class="line">exit 0</span><br><span class="line">fi</span><br><span class="line">echo &quot;I don&#x27;t know what your choice is &quot; &amp;&amp; exit 0</span><br></pre></td></tr></table></figure><h2 id="利用正则表达式实现y-n的选择"><a href="#利用正则表达式实现y-n的选择" class="headerlink" title="利用正则表达式实现y&#x2F;n的选择"></a>利用正则表达式实现y&#x2F;n的选择</h2><blockquote><p><strong>正则表达式</strong>，又称规则表达式<strong>。</strong>（英语：Regular Expression，在代码中常简写为regex、regexp或RE），计算机科学的一个概念。正则表达式通常被用来检索、替换那些符合某个模式(规则)的文本。</p><p>许多程序设计语言都支持利用正则表达式进行字符串操作。例如，在Perl中就内建了一个功能强大的正则表达式引擎。正则表达式这个概念最初是由Unix中的工具软件，例如sed和[grep普及开的。正则表达式通常缩写成“regex”，单数有regexp、regex，复数有regexps、regexes、regexen。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># program:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 判断输入字符并输出相应信息</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># history:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 2019/8/22laughfirst</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 2019/8/22laughsecond</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 修改了[]和[[]]还有“”的用法，详情看下面代码</span></span></span><br><span class="line">PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/sbin:/usr/sbin</span><br><span class="line">export PATH</span><br><span class="line">read -p &quot;Please input (Y/N):&quot; yn</span><br><span class="line">[[ $&#123;yn&#125; == &quot;Y&quot; ]] || [[ $&#123;yn&#125; == &quot;y&quot; ]] &amp;&amp; echo &quot;Ok,continue &quot; &amp;&amp; exit 0</span><br><span class="line">[ &quot;$&#123;yn&#125;&quot; == &quot;N&quot; -o &quot;$&#123;yn&#125;&quot; == &quot;n&quot; ] &amp;&amp; echo &quot;No,interrupt &quot; &amp;&amp; exit 0</span><br><span class="line">echo &quot;I don&#x27;t know what your choice is &quot; &amp;&amp; exit 0</span><br></pre></td></tr></table></figure><h2 id="计算指定位数的圆周率"><a href="#计算指定位数的圆周率" class="headerlink" title="计算指定位数的圆周率"></a>计算指定位数的圆周率</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># program:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 计算圆周率Pi</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># history:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 2019/8/22laughfirst</span></span></span><br><span class="line">PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/sbin:/usr/sbin</span><br><span class="line">export PATH</span><br><span class="line">echo -e &quot;This program will calculate pi value. \n&quot;</span><br><span class="line">echo -e &quot;You should input a float number to calculate pi value. \n&quot;</span><br><span class="line">read -p &quot;The scale number (10~10000) ? &quot; checking</span><br><span class="line">num=$&#123;checking:-&quot;10&quot;&#125;#检查是否输入数值</span><br><span class="line">echo -e &quot;Starting calcuate pi value. Be patiant.&quot;</span><br><span class="line">time echo &quot;scale=$&#123;num&#125;; 4*a(1)&quot; | bc -lq</span><br></pre></td></tr></table></figure><h2 id="计算日期"><a href="#计算日期" class="headerlink" title="计算日期"></a>计算日期</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span> </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># program:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 倒数还有多长时间退伍</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># history:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 2019/8/23  laugh   first</span></span></span><br><span class="line">PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/sbin:/usr/sbin</span><br><span class="line">export PATH</span><br><span class="line">echo &quot;This program will try to calculate :&quot;</span><br><span class="line">echo &quot;How many days before your demobilization date...&quot;</span><br><span class="line">read -p &quot;Please input your demobilization date (YYYYMMDD ex&gt;20190823) : &quot; date2</span><br><span class="line">date_d=$(echo $&#123;date2&#125; | grep &#x27;[0-9]\&#123;8\&#125;&#x27;)    #利用正则表达式测试是否为八个数字</span><br><span class="line">if [ &quot;$&#123;date_d&#125;&quot; == &quot;&quot; ]; then  #判断输入字符</span><br><span class="line">echo &quot;You input the wrong date forment...&quot;</span><br><span class="line">exit 1</span><br><span class="line">fi </span><br><span class="line">        #开始计算日期</span><br><span class="line">declare -i date_dem=$( date --date=&quot;$&#123;date2&#125;&quot; +%s) #退伍日期秒数</span><br><span class="line">declare -i date_now=$( date +%s)   #现在日期秒数</span><br><span class="line">declare -i date_total_s=$(( $&#123;date_dem&#125;-$&#123;date_now&#125; )) #剩余秒数统计</span><br><span class="line">declare -i date_d=$(( $&#123;date_total_s&#125; /60/60/24 ))  #转为日数</span><br><span class="line">if [ &quot;$&#123;date_total_s&#125;&quot; -lt &quot;0&quot; ]; then  #判断是否已经退伍</span><br><span class="line"> echo &quot;You had been demobilization before :&quot; $(( -1*$&#123;date_d&#125; )) &quot; ago&quot;</span><br><span class="line">else </span><br><span class="line">declare -i date_h=$(( $(( $&#123;date_total_s&#125;-$&#123;date_d&#125;*60*60*24 )) /60/60 ))</span><br><span class="line">echo &quot;You will demobilization after $&#123;date_d&#125; days and $&#123;date_h&#125; hours. &quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="建立三个文件，文件名是前天，昨天和今天的日期加指定的文件名"><a href="#建立三个文件，文件名是前天，昨天和今天的日期加指定的文件名" class="headerlink" title="建立三个文件，文件名是前天，昨天和今天的日期加指定的文件名"></a>建立三个文件，文件名是前天，昨天和今天的日期加指定的文件名</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">program:</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 建立三个文件，文件名的开头由用户指定，其他由今天日期决定，三个文件分别是前天、今天和明天</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># history:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 2019/8/22laughfirst</span></span></span><br><span class="line">PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/sbin:/usr/sbin</span><br><span class="line">export PATH</span><br><span class="line">echo -e &quot;I will ues &#x27;touch&#x27; command to create 3 files.&quot;#显示提示信息</span><br><span class="line">read -p &quot;Please input your filename:&quot; fileuser#输入文件名</span><br><span class="line">filename=$&#123;fileuser:-&quot;filename&quot;&#125;#利用变量功能分析文件名是否设置，避免用户错误使用【enter】</span><br><span class="line">date1=$(date --date=&#x27;2 days ago&#x27; +%Y%m%d)#读取前天的时间</span><br><span class="line">date2=$(date --date=&#x27;1 days ago&#x27; +%Y%m%d)#读取昨天的时间</span><br><span class="line">date3=$(date +%Y%m%d)#读取今天的时间</span><br><span class="line">file1=$&#123;filename&#125;_$&#123;date1&#125;#配置三个文件名</span><br><span class="line">file2=$&#123;filename&#125;_$&#123;date2&#125;</span><br><span class="line">file3=$&#123;filename&#125;_$&#123;date3&#125;</span><br><span class="line">touch &quot;$&#123;file1&#125;&quot;#建立三个文件</span><br><span class="line">touch &quot;$&#123;file2&#125;&quot;</span><br><span class="line">touch &quot;$&#123;file3&#125;&quot;</span><br></pre></td></tr></table></figure><h2 id="输入文件夹名，检索文件夹内所有文件并输出权限信息"><a href="#输入文件夹名，检索文件夹内所有文件并输出权限信息" class="headerlink" title="输入文件夹名，检索文件夹内所有文件并输出权限信息"></a>输入文件夹名，检索文件夹内所有文件并输出权限信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># program:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 用户输入目录名，自动检索该目录内文件并输出文件权限信息</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># history:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 2019/8/23  laugh   first</span></span></span><br><span class="line">PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/sbin:/usr/sbin</span><br><span class="line">export PATH</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">先查看这个目录是否存在</span></span><br><span class="line">read -p &quot;Please input a directory :&quot; dir </span><br><span class="line">if [ &quot;$&#123;dir&#125;&quot; == &quot;&quot; -o ! -d &quot;$&#123;dir&#125;&quot; ]; then </span><br><span class="line">echo &quot;The $&#123;dir&#125; is NOT exist in your system.&quot;</span><br><span class="line">exit 0</span><br><span class="line">fi </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">开始测试文件</span></span><br><span class="line">filelist=$( ls $&#123;dir&#125; )</span><br><span class="line">for filename in $&#123;filelist&#125;</span><br><span class="line">do </span><br><span class="line">perm=&quot;&quot;</span><br><span class="line">test -r &quot;$&#123;dir&#125;/$&#123;filename&#125;&quot; &amp;&amp; perm=&quot;$&#123;perm&#125; r&quot;</span><br><span class="line">test -w &quot;$&#123;dir&#125;/$&#123;filename&#125;&quot; &amp;&amp; perm=&quot;$&#123;perm&#125; w&quot;</span><br><span class="line">test -x &quot;$&#123;dir&#125;/$&#123;filename&#125;&quot; &amp;&amp; perm=&quot;$&#123;perm&#125; x&quot;</span><br><span class="line">echo &quot;The file $&#123;dir&#125;/$&#123;filename&#125;&#x27;s permission is $&#123;perm&#125; &quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="判断指定文件名是否为文件夹，若不是则检查该文件的权限信息并输出"><a href="#判断指定文件名是否为文件夹，若不是则检查该文件的权限信息并输出" class="headerlink" title="判断指定文件名是否为文件夹，若不是则检查该文件的权限信息并输出"></a>判断指定文件名是否为文件夹，若不是则检查该文件的权限信息并输出</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># program:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 输入一个文件名，查询这个文件名是否存在，是否是文件还是目录，并输出相关权限信息,本脚本不建议用root用户执行</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># history:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 2019/8/22laughfirst</span></span></span><br><span class="line">PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/sbin:/usr/sbin</span><br><span class="line">export PATH</span><br><span class="line">echo -e &quot;Please input a filename,I will check the filename&#x27;s type and permission. \n\n&quot;</span><br><span class="line">read -p &quot;input your filename:&quot; filename#读取键盘输入并赋值变量</span><br><span class="line">test -z $&#123;filename&#125; &amp;&amp; echo &quot;you MUST input a filename&quot; &amp;&amp; exit 0#判断用户是否输入文件名并提示</span><br><span class="line">test ! -e $&#123;filename&#125; &amp;&amp; echo &quot;The file &#x27;$&#123;filename&#125;&#x27; do not exist!&quot; &amp;&amp; exit 0#判断文件是否存在</span><br><span class="line">test -f $&#123;filename&#125; &amp;&amp; filetype=&quot;regulare file&quot;#判断文件是否是文件格式</span><br><span class="line">test -d $&#123;filename&#125; &amp;&amp; filetype=&quot;directory&quot;#判断文件是否为目录</span><br><span class="line">test -r $&#123;filename&#125; &amp;&amp; perm=&quot;readable&quot;#判断只读</span><br><span class="line">test -w $&#123;filename&#125; &amp;&amp; perm=&quot;$&#123;perm&#125; writable&quot;#判断写</span><br><span class="line">test -x $&#123;filename&#125; &amp;&amp; perm=&quot;$&#123;perm&#125; executable&quot;#判断可执行</span><br><span class="line">echo &quot;The filename:$&#123;filename&#125; is a $&#123;filetype&#125;&quot; #输出文件格式</span><br><span class="line">echo &quot;The filename permission for you are:$&#123;perm&#125;&quot;#输出文件权限</span><br></pre></td></tr></table></figure><h2 id="示例for-do-done-的用法"><a href="#示例for-do-done-的用法" class="headerlink" title="示例for do done 的用法"></a>示例for do done 的用法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># program:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 示例for do done 的用法</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># history:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 2019/8/23  laugh   first</span></span></span><br><span class="line">PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/sbin:/usr/sbin</span><br><span class="line">export PATH</span><br><span class="line">for animal in dog pig cat</span><br><span class="line">do </span><br><span class="line">echo &quot;There are $&#123;animal&#125;s ...&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="case判断，用户输入hello程序回应相对应对话"><a href="#case判断，用户输入hello程序回应相对应对话" class="headerlink" title="case判断，用户输入hello程序回应相对应对话"></a>case判断，用户输入hello程序回应相对应对话</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># program:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 用户输入hello程序回应相对应对话</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># history:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 2019/8/23  laugh   first</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 2019/8/23  laugh   second</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 改为case判断</span></span></span><br><span class="line">PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/sbin:/usr/sbin</span><br><span class="line">export PATH</span><br><span class="line">case $&#123;1&#125; in </span><br><span class="line">&quot;hello&quot;)</span><br><span class="line">echo &quot;Hello ,how are you !&quot;</span><br><span class="line">;;</span><br><span class="line">&quot;&quot;)</span><br><span class="line">echo &quot;you must input parameters , ex&gt; &#123; $&#123;0&#125; someword &#125;&quot;</span><br><span class="line">;;</span><br><span class="line">*)  #相当于通配符，任意字符</span><br><span class="line">echo &quot;Usage $&#123;0&#125; &#123;hello&#125;&quot;</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$&#123;1&#125;</span>&quot;</span> == <span class="string">&quot;hello&quot;</span> ]; <span class="keyword">then</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#       echo &quot;Hello,how are you!&quot;</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#  elif [ &quot;$&#123;1&#125;&quot; == &quot;&quot; ]; then</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#     echo &quot;You MUST input parameters,ex&gt; &#123;$&#123;0&#125; someword&#125;&quot;</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#  else</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#   echo &quot;The only parameters is &#x27;hello&#x27; , ex&gt; &#123;$&#123;0&#125; hello&#125;&quot;</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="keyword">fi</span></span></span><br></pre></td></tr></table></figure><h2 id="if语句实现指定对话"><a href="#if语句实现指定对话" class="headerlink" title="if语句实现指定对话"></a>if语句实现指定对话</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># program:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 用户输入hello程序回应相对应对话</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># history:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 2019/8/23  laugh   first</span></span></span><br><span class="line">PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/sbin:/usr/sbin</span><br><span class="line">export PATH</span><br><span class="line">if [ &quot;$&#123;1&#125;&quot; == &quot;hello&quot; ]; then</span><br><span class="line">echo &quot;Hello,how are you!&quot;</span><br><span class="line">elif [ &quot;$&#123;1&#125;&quot; == &quot;&quot; ]; then</span><br><span class="line">echo &quot;You MUST input parameters,ex&gt; &#123;$&#123;0&#125; someword&#125;&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;The only parameters is &#x27;hello&#x27; , ex&gt; &#123;$&#123;0&#125; hello&#125;&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="shift变量偏移的示例用法"><a href="#shift变量偏移的示例用法" class="headerlink" title="shift变量偏移的示例用法"></a>shift变量偏移的示例用法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># program:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 示例shift变量偏移的作用</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># history:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 2019/8/22laughfirst</span></span></span><br><span class="line">PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/sbin:/usr/sbin</span><br><span class="line">export PATH</span><br><span class="line">echo &quot;Please input 6 to show &#x27;shift&#x27; &quot;</span><br><span class="line">echo &quot;Total parameter number is==&gt; $#&quot;</span><br><span class="line">echo &quot;Your whole parameter is==&gt; &#x27;$@&#x27; &quot;</span><br><span class="line">shift</span><br><span class="line">echo &quot;Total parameter number is==&gt; $#&quot;</span><br><span class="line">echo &quot;Your whole parameter is==&gt; &#x27;$@&#x27; &quot;</span><br><span class="line">shift 3</span><br><span class="line">echo &quot;Total parameter number is==&gt; $#&quot;</span><br><span class="line">echo &quot;Your whole parameter is==&gt; &#x27;$@&#x27; &quot;</span><br></pre></td></tr></table></figure><h2 id="程序的文件名是什么，共有几个参数，若参数少于2则告诉用户参数太少，全部的参数内容是什么，第一个参数是什么，第二个参数是什么，参数的用法"><a href="#程序的文件名是什么，共有几个参数，若参数少于2则告诉用户参数太少，全部的参数内容是什么，第一个参数是什么，第二个参数是什么，参数的用法" class="headerlink" title="程序的文件名是什么，共有几个参数，若参数少于2则告诉用户参数太少，全部的参数内容是什么，第一个参数是什么，第二个参数是什么，参数的用法"></a>程序的文件名是什么，共有几个参数，若参数少于2则告诉用户参数太少，全部的参数内容是什么，第一个参数是什么，第二个参数是什么，参数的用法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># program:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 程序的文件名是什么，共有几个参数，若参数少于2则告诉用户参数太少，全部的参数内容是什么，第一个参数是什么，第二个参数是什么</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># history:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 2019/8/22laughfirst</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 2019/8/22laughsecond</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 显示变量的时候$(1)不需要括号</span></span></span><br><span class="line">PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/sbin:/usr/sbin</span><br><span class="line">export PATH</span><br><span class="line">echo &quot;The script name==&gt; $&#123;0&#125;&quot;</span><br><span class="line">echo &quot;Total parameter number is==&gt; $#&quot;</span><br><span class="line">[ &quot;$#&quot; -lt 2 ] &amp;&amp; echo &quot;The number of parameter is less then 2. Stop here.&quot; &amp;&amp; exit 0</span><br><span class="line">echo &quot;Your whole parameter is==&gt; &#x27;$@&#x27; &quot;</span><br><span class="line">echo &quot;The 1st parameter==&gt; $1 &quot;</span><br><span class="line">echo &quot;The 2nd parameter==&gt; $2 &quot;</span><br></pre></td></tr></table></figure><h2 id="乘法运算"><a href="#乘法运算" class="headerlink" title="乘法运算"></a>乘法运算</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># program:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 由用户输入两个整数数字，计算其乘积并输出</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># history:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 2019/8/22laughfirst</span></span></span><br><span class="line">PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/sbin:/usr/sbin</span><br><span class="line">export PATH</span><br><span class="line">echo -e &quot;Please input 2 int numbers,I will multiplying them !&quot;#显示提示信息</span><br><span class="line">read -p &quot;firstnumber:&quot; first#读取第一个数字</span><br><span class="line">read -p &quot;secondnumber:&quot; second#读取第二个数字</span><br><span class="line">total=$(($&#123;first&#125;*$&#123;second&#125;))#进行乘法运算</span><br><span class="line">echo -e &quot;\nThe result of $&#123;first&#125;*$&#123;second&#125; is ==&gt; $&#123;total&#125;&quot;#输出结果</span><br></pre></td></tr></table></figure><h2 id="扫描指定端口并输出结果"><a href="#扫描指定端口并输出结果" class="headerlink" title="扫描指定端口并输出结果"></a>扫描指定端口并输出结果</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># program:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 检测主机的80端口（www服务）、22端口（ssh服务）、21端口（ftp服务）、25端口（mail服务）</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># history:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 2019/8/23  laugh   first</span></span></span><br><span class="line">PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/sbin:/usr/sbin</span><br><span class="line">export PATH</span><br><span class="line">echo &quot;Now, I will detect your linux server&#x27;s services!&quot;</span><br><span class="line">echo -e &quot;The www, ftp, ssh and mail(smtp) will be detect!&quot;  #告知信息</span><br><span class="line">testfile=~/Desktop/netstat_checking.txt</span><br><span class="line">netstat -tuln &gt; $&#123;testfile&#125;</span><br><span class="line">testing=$(grep &quot;:80 &quot; $&#123;testfile&#125;)</span><br><span class="line">if [ &quot;$&#123;testing&#125;&quot; != &quot;&quot; ]; then</span><br><span class="line">echo &quot;WWW is runing in your system.&quot;</span><br><span class="line">fi</span><br><span class="line">testing=$(grep &quot;:22 &quot; $&#123;testfile&#125;)</span><br><span class="line">if [ &quot;$&#123;testing&#125;&quot; != &quot;&quot; ]; then</span><br><span class="line">echo &quot;SSH is runing in your system.&quot;</span><br><span class="line">fi</span><br><span class="line">testing=$(grep &quot;:21 &quot; $&#123;testfile&#125;)</span><br><span class="line">if [ &quot;$&#123;testing&#125;&quot; != &quot;&quot; ]; then</span><br><span class="line">echo &quot;FTP is runing in your system.&quot;</span><br><span class="line">fi</span><br><span class="line">testing=$(grep &quot;:25 &quot; $&#123;testfile&#125;)</span><br><span class="line">if [ &quot;$&#123;testing&#125;&quot; != &quot;&quot; ]; then</span><br><span class="line">echo &quot;MAIL is runing in your system.&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="让用户输入one-two-three三个变量，并输出到屏幕上，如果不是，就告知用户其他的选择-function的用法"><a href="#让用户输入one-two-three三个变量，并输出到屏幕上，如果不是，就告知用户其他的选择-function的用法" class="headerlink" title="让用户输入one two three三个变量，并输出到屏幕上，如果不是，就告知用户其他的选择(function的用法)"></a>让用户输入one two three三个变量，并输出到屏幕上，如果不是，就告知用户其他的选择(function的用法)</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">program:</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">让用户输入one two three三个变量，并输出到屏幕上，如果不是，就告知用户其他的选择</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">history</span>:</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2019/8/23  laugh   first</span></span><br><span class="line">PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/sbin:/usr/sbin</span><br><span class="line">export PATH</span><br><span class="line">function printit () &#123;#函数一定要放在最前面！</span><br><span class="line">echo -n &quot;Your choice is $&#123;1&#125; &quot;</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;This progarm will print your selection !&quot;</span><br><span class="line">case $&#123;1&#125; in</span><br><span class="line">&quot;one&quot;)</span><br><span class="line">printit 1;</span><br><span class="line">;;</span><br><span class="line">&quot;two&quot;)</span><br><span class="line">printit 2;</span><br><span class="line">;;</span><br><span class="line">&quot;three&quot;)</span><br><span class="line">printit 3;</span><br><span class="line">;;</span><br><span class="line"> *)</span><br><span class="line">echo &quot;Usage $&#123;0&#125; &#123;one|two|three&#125;&quot;</span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><h2 id="让用户输入one-two-three三个变量其中的一个，并输出到屏幕上，如果不是，就告知用户其他的选择，两种语法选择"><a href="#让用户输入one-two-three三个变量其中的一个，并输出到屏幕上，如果不是，就告知用户其他的选择，两种语法选择" class="headerlink" title="让用户输入one two three三个变量其中的一个，并输出到屏幕上，如果不是，就告知用户其他的选择，两种语法选择"></a>让用户输入one two three三个变量其中的一个，并输出到屏幕上，如果不是，就告知用户其他的选择，两种语法选择</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">program:</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">让用户输入one two three三个变量，并输出到屏幕上，如果不是，就告知用户其他的选择</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">history</span>:</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2019/8/23  laugh   first</span></span><br><span class="line">PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/sbin:/usr/sbin</span><br><span class="line">export PATH</span><br><span class="line">function printit ()         #函数一定要放在最前面！</span><br><span class="line">&#123;</span><br><span class="line">echo -n &quot;Your choice is :&quot;</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;This progarm will print your selection !&quot;</span><br><span class="line">case $&#123;1&#125; in</span><br><span class="line">&quot;one&quot;)</span><br><span class="line">printit; echo $&#123;1&#125; | tr &#x27;a-z&#x27; &#x27;A-Z&#x27;     #将参数做大小写转换,把输入的小写转换为大写</span><br><span class="line">;;</span><br><span class="line">&quot;two&quot;)</span><br><span class="line">printit; echo $&#123;1&#125; | tr &#x27;a-z&#x27; &#x27;A-Z&#x27;</span><br><span class="line">;;</span><br><span class="line">&quot;three&quot;)</span><br><span class="line">printit; echo $&#123;1&#125; | tr &#x27;a-z&#x27; &#x27;A-Z&#x27;</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">echo &quot;Usage $&#123;0&#125; &#123;one|two|three&#125;&quot;</span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><h2 id="用参数输出指定内容"><a href="#用参数输出指定内容" class="headerlink" title="用参数输出指定内容"></a>用参数输出指定内容</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># program:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 让用户输入one two three三个变量，并输出到屏幕上，如果不是，就告知用户其他的选择</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># history:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 2019/8/23  laugh   first</span></span></span><br><span class="line">PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/sbin:/usr/sbin</span><br><span class="line">export PATH</span><br><span class="line">echo &quot;This program will print your selection !&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">read</span> -p <span class="string">&quot;input your choice:&quot;</span> choice    <span class="comment">#暂时不用</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="keyword">case</span> <span class="variable">$&#123;choice&#125;</span> <span class="keyword">in</span>  <span class="comment">#暂时不用</span></span></span><br><span class="line">case $&#123;1&#125; in    #可用上两行替换</span><br><span class="line">&quot;one&quot;)</span><br><span class="line">echo &quot;Your choice is ONE!&quot;</span><br><span class="line">;;</span><br><span class="line">&quot;two&quot;)</span><br><span class="line">echo &quot;Your choice is TWO!&quot;</span><br><span class="line">;;</span><br><span class="line">&quot;three&quot;)</span><br><span class="line">echo &quot;Your choice is THREE!&quot;</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">echo &quot;Usage $&#123;0&#125; &#123;one|two|three&#125;&quot;</span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell脚本基础篇(一)</title>
      <link href="/posts/1b278ea7/"/>
      <url>/posts/1b278ea7/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是Shell脚本"><a href="#什么是Shell脚本" class="headerlink" title="什么是Shell脚本"></a>什么是Shell脚本</h2><p>Shell Script，Shell脚本与Windows&#x2F;Dos下的批处理相似，也就是用各类命令预先放入到一个文件中，方便一次性执行的一个程序文件，主要是方便管理员进行设置或者管理用的。但是它比Windows下的批处理更强大，比用其他编程程序编辑的程序效率更高，它使用了Linux&#x2F;Unix下的命令。</p><p>换一种说法也就是，shell script是利用shell的功能所写的一个程序，这个程序是使用纯文本文件，将一些shell的语法与指令写在里面，然后用正规表示法，管道命令以及数据流重导向等功能，以达到我们所想要的处理目的。更明白地来说，shell script就像早期dos年代的<code>.bat</code>，最简单的功能就是将许多指令汇整写一起，让使用者很容易地就能够一个操作执行多个命令，而shell script更是提供了数组，循环，条件以及逻辑判断等重要功能，让使用者可以直接以shell来写程序，而不必使用类似C程序语言等传统程序编写的语法。</p><h2 id="什么是shell"><a href="#什么是shell" class="headerlink" title="什么是shell"></a>什么是shell</h2><p>shell和shell脚本有什么区别？确切一点说，Shell就是一个命令行解释器，它的作用就是遵循一定的语法将输入的命令加以解释并传给系统。它为用户提供了一个向Linux发送请求以便运行程序的接口系统级程序，用户可以用Shell来启动、挂起、停止甚至是编写一些程序。 Shell本身是一个用C语言编写的程序，它是用户使用Linux的桥梁。Shell既是一种命令语言，又是一种程序设计语言(就是所说的shell脚本)。作为命令语言，它互动式地解释和执行用户输入的命令；作为程序设计语言，它定义了各种变量和参数，并提供了许多在高阶语言中才具有的控制结构，包括循环和分支。它虽然不是 Linux系统内核的一部分，但它调用了系统内核的大部分功能来执行程序、创建文档并以并行的方式协调各个程序的运行。</p><h2 id="构建基本脚本"><a href="#构建基本脚本" class="headerlink" title="构建基本脚本"></a>构建基本脚本</h2><blockquote><p>本例环境：BashShell</p></blockquote><h3 id="使用多个命令"><a href="#使用多个命令" class="headerlink" title="使用多个命令"></a>使用多个命令</h3><p>在shell中如果要使用多个命令，可以把命令放在同一行，用分号<code>;</code>隔开，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">date</span> ; <span class="built_in">who</span></span></span><br></pre></td></tr></table></figure><p>当然不限于两个命令，可以多个一起使用，当然只要不超过最大命令行字符数255即可</p><h3 id="创建shell脚本文件"><a href="#创建shell脚本文件" class="headerlink" title="创建shell脚本文件"></a>创建shell脚本文件</h3><p>创建shell文件需要用到编辑器，此时就要强烈推荐Vim了。</p><p>shell脚本文件的第一行，必须指定要使用的shell环境，格式如下(再次声明我的环境是Bash)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br></pre></td></tr></table></figure><p>一般情况下shell的注释就是以#这个符号开始，但是第一行例外，因为感叹号是告诉shell要用哪个shell来运行脚本，在脚本里就可以写入我们需要执行的命令就好啦</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">这是我的第一个shell脚本</span></span><br><span class="line">date</span><br><span class="line">who</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721122230.png" alt="vim编辑shell脚本"></p><blockquote><p>上图所示的头部信息并不是必须的，但是在工作或者学习中，养成一个良好的脚本编写习惯是非常重要的，必要的信息都要标记出来，比如脚本的编写时间、实现功能、编写者、联系方式和版本信息等。</p></blockquote><p>这就是一个shell脚本的所有内容了，当然不换行也是可以的，用分号隔开即可，保存到名为<code>test.sh</code>文件中（没错，shell脚本的后缀就是<code>.sh</code>但是在Linux中后缀并不重要，不加后缀也可以）</p><p>执行一下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">test.sh</span></span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721122237.png" alt="报错"></p><p><code>bash: test.sh: command not found</code></p><p>这是为什么呢，因为bash shell并不能找到你的文件，得把你的脚本文件路径增加到<code>PATH</code>环境变量里，两种方法：</p><blockquote><ol><li>将shell脚本文件目录添加进PATH环境变量中</li><li>在命令提示符中使用绝对或者相对路径来引用此脚本文件</li></ol></blockquote><p>我比较习惯第二种：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./test.sh</span></span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721122242.png" alt="报错信息"></p><p><code>bash: ./test.sh: permission denied</code></p><p>怎么又报错呢？因为我们的脚本文件并不具有可执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">chmod</span> u+x test.sh</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./test.sh</span></span><br></pre></td></tr></table></figure><p>现在就可以成功看到结果啦:</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721122247.png" alt="输出结果"></p><h3 id="输出语句"><a href="#输出语句" class="headerlink" title="输出语句"></a>输出语句</h3><p>shell的输出语句可以是<code>echo</code>，它可以加引号也可以不加引号来显示字符串，但是当要输出的字符串中有引号的话，就必须用另一种引号将整个字符串括起来，例如:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> this is a <span class="built_in">echo</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;I’m laugh&quot;</span></span></span><br></pre></td></tr></table></figure><p>现在就可以在脚本中输出想要的信息了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">test</span></span></span><br><span class="line">echo &quot;this is dates&quot;</span><br><span class="line">date</span><br><span class="line">echo &quot;who are you&quot;</span><br><span class="line">who</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./test.sh</span></span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721122254.png" alt="脚本信息"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721122304.png" alt="脚本执行结果"></p><p>如果我们想要把输出信息和命令的输出结果显示在同一行，可以用到<code>echo</code>的<code>-n</code>参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">test</span></span></span><br><span class="line">echo -n &quot;this is dates: &quot;</span><br><span class="line">date</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721122314.png" alt="执行结果"></p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>shell有一组环境变量，用来记录特定的系统信息，可以使用<code>set</code>命令来显示一份当前完整的环境变量列表:</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721122321.png" alt="环境变量"></p><p>在脚本中，在环境变量名前加上美元符号$来使用这些环境变量，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">test</span></span></span><br><span class="line">echo &quot;user info for user is: $USER&quot;</span><br><span class="line">echo UID: $UID</span><br><span class="line">echo HOME: $HOME</span><br></pre></td></tr></table></figure><p>USER、UID和​HOME环境变量用来显示已登录用户的有关信息。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721122328.png" alt="执行结果"></p><blockquote><p>注意：echo命令中的环境变量会在脚本运行时替换为当前的值。</p></blockquote><p>在第一个字符串中可以将$USER系统变量放在双引号中，而shell仍然能识别到变量，再说一个例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;the cost of item is <span class="variable">$15</span>&quot;</span></span></span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721122335.png" alt="输出结果"></p><p>只要在脚本中出现$符号，ｓｈｅｌｌ就会认为我们在引用一个变量，上面的例子就是shell找不到<code>$1</code>这个变量，所以就显示了５</p><p>如果要在字符串中显示美元符号，则要使用转义符，即反斜线<code>\</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;the cost of item is \$15&quot;</span></span></span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721122341.png" alt="输出结果正确"></p><p>今天就到这里，，，托更嘿嘿</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS3基础篇(二)</title>
      <link href="/posts/d502d76a/"/>
      <url>/posts/d502d76a/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS中的动画"><a href="#CSS中的动画" class="headerlink" title="CSS中的动画"></a>CSS中的动画</h2><h3 id="Keyframes"><a href="#Keyframes" class="headerlink" title="Keyframes"></a>Keyframes</h3><p><code>Keyframes</code>被称为关键帧，其类似于Flash中的关键帧。在CSS3中其主要以<code>@keyframes</code>开头，后面紧跟着是动画名称加上一对花括号<code>&#123; &#125;</code>，括号中就是一些不同时间段样式规则：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> changecolor&#123;</span><br><span class="line">  <span class="number">0%</span>&#123;</span><br><span class="line">   <span class="attribute">background</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: green;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在一个<code>@keyframes</code>中的样式规则可以由多个百分比构成的，如在<code>0%</code>到<code>100%</code>之间创建更多个百分比，分别给每个百分比中给需要有动画效果的元素加上不同的样式，从而达到一种在不断变化的效果。</p><blockquote><p>在<code>@keyframes</code>中定义动画名称时，其中<code>0%</code>和<code>100%</code>还可以使用关键词<code>from</code>和<code>to</code>来代表，其中<code>0%</code>对应的是<code>from</code>，<code>100%</code>对应的是<code>to</code>。</p></blockquote><p>浏览器的支持情况：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224633.jpg" alt="浏览器支持度"></p><blockquote><p>Chrome和Safari需要前缀<code>-webkit-</code>；Foxfire需要前缀<code>-moz-</code>。</p></blockquote><p>示例：</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>变形与动画<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>鼠标放在我身上<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> changecolor&#123;</span><br><span class="line">  <span class="number">0%</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">20%</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>:blue;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">40%</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>:orange;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">60%</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>:green;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">80%</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>:yellow;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: changecolor <span class="number">5s</span> ease-out .<span class="number">2s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224640.gif" alt="效果"></p><h3 id="调用动画"><a href="#调用动画" class="headerlink" title="调用动画"></a>调用动画</h3><p><code>animation-name</code>属性主要是用来调用<code>@keyframes</code>定义好的动画。需要特别注意: <code>animation-name</code>调用的动画名需要和<code>@keyframes</code>定义的动画名称完全一致（区分大小写），如果不一致将不具有任何动画效果。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">animation-name</span>: none | IDENT[,none|DENT]*;</span><br></pre></td></tr></table></figure><blockquote><ol><li><p><code>IDENT</code>是由<code>@keyframes</code>创建的动画名，上面已经讲过了（<code>animation-name </code>调用的动画名需要和<code>@keyframes</code>定义的动画名称完全一致）；</p></li><li><p>none为默认值，当值为 none 时，将没有任何动画效果,这可以用于覆盖任何动画。</p></li></ol><p>注意：需要在 Chrome 和 Safari 上面的基础上加上<code>-webkit-</code>前缀，Firefox加上<code>-moz-</code>。</p></blockquote><p>示例：</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>变形与动画<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> around&#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">25%</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">180px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span>&#123;</span><br><span class="line">     <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">180px</span>, <span class="number">180px</span>); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">75%</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">0</span>,<span class="number">180px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background</span>: orange;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">animation-name</span>: around;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">10s</span>;</span><br><span class="line">  <span class="attribute">animation-timing-function</span>: ease;</span><br><span class="line">  <span class="attribute">animation-delay</span>: <span class="number">1s</span>;</span><br><span class="line">  <span class="attribute">animation-iteration-count</span>:infinite;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224646.gif" alt="效果"></p><h3 id="设置动画播放时间"><a href="#设置动画播放时间" class="headerlink" title="设置动画播放时间"></a>设置动画播放时间</h3><p><code>animation-duration</code>主要用来设置CSS3动画播放时间，其使用方法和<code>transition-duration</code>类似，是用来指定元素播放动画所持续的时间长，也就是完成从<code>0%</code>到<code>100%</code>一次动画所需时间。单位：S&#x2F;秒 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">animation-duration</span>: &lt;time&gt;[&lt;time&gt;]*</span><br></pre></td></tr></table></figure><p>示例：</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>变形与动画<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hover Me<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> changeColor &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>:green;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">  <span class="attribute">text-align</span>:center;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">animation-name</span>: changeColor;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">5s</span>;</span><br><span class="line">  <span class="attribute">animation-timing-function</span>: ease-out;</span><br><span class="line">  <span class="attribute">animation-delay</span>: .<span class="number">1s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224651.gif" alt="效果"></p><h3 id="动画播放方式"><a href="#动画播放方式" class="headerlink" title="动画播放方式"></a>动画播放方式</h3><p><code>animation-timing-function</code>属性主要用来设置动画播放方式。主要让元素根据时间的推进来改变属性值的变换速率，简单点说就是动画的播放方式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">animation-timing-function</span>:ease | linear | ease-in | ease-out | ease-in-out | <span class="built_in">cubic-bezier</span>(&lt;number&gt;, &lt;number&gt;, &lt;number&gt;, &lt;number&gt;) [, ease | linear | ease-in | ease-out | ease-in-out | <span class="built_in">cubic-bezier</span>(&lt;number&gt;, &lt;number&gt;, &lt;number&gt;, &lt;number&gt;)]*</span><br></pre></td></tr></table></figure><p>它和<code>transition</code>中的<code>transition-timing-function</code>一样，具有以下几种变换方式：<code>ease</code>、<code>ease-in</code>、<code>ease-in-out</code>、<code>ease-out</code>、<code>linear</code>和<code>cubic-bezier</code>。对应功如下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224656.png" alt="变换方式"></p><p>在调用move动画播放中，让元素样式从初始状态到终止状态时，先加速再减速，也就是渐显渐隐效果。</p><p>示例：从初始状态到终止状态时，逐渐变慢</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>变形与动画<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> move &#123;</span><br><span class="line">  <span class="number">0%</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">15%</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">100px</span>,<span class="number">180px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">30%</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">150px</span>,<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">45%</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">250px</span>,<span class="number">180px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">60%</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">300px</span>,<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">75%</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">450px</span>,<span class="number">180px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span>&#123;</span><br><span class="line">    transfrom: <span class="built_in">translate</span>(<span class="number">480px</span>,<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background</span>: green;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">animation-name</span>:move;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">10s</span>;</span><br><span class="line"><span class="attribute">animation-timing-function</span>: ease;</span><br><span class="line">  <span class="attribute">animation-delay</span>:.<span class="number">1s</span>;</span><br><span class="line">  <span class="attribute">animation-iteration-count</span>:infinite;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224703.gif" alt="效果"></p><h3 id="动画开始播放的时间"><a href="#动画开始播放的时间" class="headerlink" title="动画开始播放的时间"></a>动画开始播放的时间</h3><p><code>animation-delay</code>属性用来定义动画开始播放的时间，用来触发动画播放的时间点。和<code>transition-delay</code>属性一样，用于定义在浏览器开始执行动画之前等待的时间。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">animation-delay</span>:&lt;time&gt;[,&lt;time&gt;]*</span><br></pre></td></tr></table></figure><p>示例：浏览器加载之后3s触发move动画</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>变形与动画<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> move &#123;</span><br><span class="line">  <span class="number">0%</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">15%</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">100px</span>,<span class="number">180px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">30%</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">150px</span>,<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">45%</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">250px</span>,<span class="number">180px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">60%</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">300px</span>,<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">75%</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">450px</span>,<span class="number">180px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span>&#123;</span><br><span class="line">    transfrom: <span class="built_in">translate</span>(<span class="number">480px</span>,<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background</span>: green;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">animation-name</span>:move;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">10s</span>;</span><br><span class="line">  <span class="attribute">animation-timing-function</span>:ease;</span><br><span class="line">  <span class="attribute">animation-delay</span>: <span class="number">3s</span>;</span><br><span class="line">  <span class="attribute">animation-iteration-count</span>:infinite;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224711.gif" alt="效果"></p><h3 id="动画播放次数"><a href="#动画播放次数" class="headerlink" title="动画播放次数"></a>动画播放次数</h3><p><code>animation-iteration-count</code>属性主要用来定义动画的播放次数。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">animation-iteration-count</span>: infinite | &lt;number&gt; [, infinite | &lt;number&gt;]*</span><br></pre></td></tr></table></figure><blockquote><p>其值通常为整数，但也可以使用带有小数的数字，其默认值为1，这意味着动画将从开始到结束只播放一次。如果取值为<code>infinite</code>，动画将会无限次的播放。</p><p>注意：Chrome或Safari浏览器，需要加入<code>-webkit-</code>前缀！</p></blockquote><p>示例：</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>变形与动画<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> move &#123;</span><br><span class="line">  <span class="number">0%</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">15%</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">100px</span>,<span class="number">180px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">30%</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">150px</span>,<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">45%</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">250px</span>,<span class="number">180px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">60%</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">300px</span>,<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">75%</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">450px</span>,<span class="number">180px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span>&#123;</span><br><span class="line">    transfrom: <span class="built_in">translate</span>(<span class="number">480px</span>,<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background</span>: green;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">animation-name</span>:move;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">10s</span>;</span><br><span class="line">  <span class="attribute">animation-timing-function</span>:ease;</span><br><span class="line">  <span class="attribute">animation-delay</span>:.<span class="number">1s</span>;</span><br><span class="line">  <span class="attribute">animation-iteration-count</span>: infinite;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224718.gif" alt="效果"></p><h3 id="动画播放方向"><a href="#动画播放方向" class="headerlink" title="动画播放方向"></a>动画播放方向</h3><p><code>animation-direction</code>属性主要用来设置动画播放方向，其语法规则如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">animation-direction</span>:normal | alternate [, normal | alternate]*</span><br></pre></td></tr></table></figure><blockquote><ol><li><p><code>normal</code>是默认值，如果设置为<code>normal</code>时，动画的每次循环都是向前播放</p></li><li><p>另一个值是<code>alternate</code>，他的作用是，动画播放在第偶数次向前播放，第奇数次向反方向播放</p><p>注意：Chrome或Safari浏览器，需要加入<code>-webkit-</code>前缀</p></li></ol></blockquote><p>示例：</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>变形与动画<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> move &#123;</span><br><span class="line">  <span class="number">0%</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">90px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">15%</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">90px</span>,<span class="number">90px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">30%</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">180px</span>,<span class="number">90px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">45%</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">90px</span>,<span class="number">90px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">60%</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">90px</span>,<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">75%</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">90px</span>,<span class="number">90px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">90%</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">90px</span>,<span class="number">180px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">90px</span>,<span class="number">90px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background</span>: orange;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">90px</span>);</span><br><span class="line">  <span class="attribute">animation-name</span>: move;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">10s</span>;</span><br><span class="line">  <span class="attribute">animation-timing-function</span>: ease-in;</span><br><span class="line">  <span class="attribute">animation-delay</span>: .<span class="number">2s</span>;</span><br><span class="line">  <span class="attribute">animation-iteration-count</span>:infinite;</span><br><span class="line">  <span class="attribute">animation-direction</span>: alternate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224725.gif" alt="效果"></p><h3 id="动画的播放状态"><a href="#动画的播放状态" class="headerlink" title="动画的播放状态"></a>动画的播放状态</h3><p><code>animation-play-state</code>属性主要用来控制元素动画的播放状态，其主要有两个值：<code>running</code>和<code>paused</code></p><p>其中<code>running</code>是其默认值，主要作用就是类似于音乐播放器一样，可以通过<code>paused</code>将正在播放的动画停下来，也可以通过<code>running</code>将暂停的动画重新播放，这里的重新播放不一定是从元素动画的开始播放，而是从暂停的那个位置开始播放。另外如果暂停了动画的播放，元素的样式将回到最原始设置状态。</p><p>示例：让停止的动画在hover的时候播放，不是hover状态停止</p><p>HTML:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>变形与动画<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> move &#123;</span><br><span class="line">  <span class="number">0%</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">90px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">15%</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">90px</span>,<span class="number">90px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">30%</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">180px</span>,<span class="number">90px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">45%</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">90px</span>,<span class="number">90px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">60%</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">90px</span>,<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">75%</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">90px</span>,<span class="number">90px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">90%</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">90px</span>,<span class="number">180px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">90px</span>,<span class="number">90px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background</span>: orange;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">90px</span>);</span><br><span class="line">  <span class="attribute">animation-name</span>: move;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">10s</span>;</span><br><span class="line">  <span class="attribute">animation-timing-function</span>: ease-in;</span><br><span class="line">  <span class="attribute">animation-delay</span>: .<span class="number">2s</span>;</span><br><span class="line">  <span class="attribute">animation-iteration-count</span>:infinite;</span><br><span class="line">  <span class="attribute">animation-direction</span>:alternate;</span><br><span class="line">  <span class="attribute">animation-play-state</span>:paused;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">animation-play-state</span>:running;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224731.gif" alt="效果"></p><h3 id="动画时间外属性"><a href="#动画时间外属性" class="headerlink" title="动画时间外属性"></a>动画时间外属性</h3><p><code>animation-fill-mode</code>属性定义在动画开始之前和结束之后发生的操作。主要具有四个属性值：<code>none</code>、<code>forwards</code>、<code>backwords</code>、<code>both</code>。其四个属性值对应效果如下：</p><table><thead><tr><th align="center">属性值</th><th align="left">效果</th></tr></thead><tbody><tr><td align="center">none</td><td align="left">默认值，表示动画将按预期进行和结束，在动画完成其最后一帧时，动画会反转到初始帧处</td></tr><tr><td align="center">forwards</td><td align="left">表示动画在结束后继续应用最后的关键帧的位置</td></tr><tr><td align="center">backwords</td><td align="left">会在向元素应用动画样式时迅速应用动画的初始帧</td></tr><tr><td align="center">both</td><td align="left">元素动画同时具有forwards和backwards效果</td></tr></tbody></table><p>在默认情况之下，动画不会影响它的关键帧之外的属性，使用<code>animation-fill-mode</code>属性可以修改动画的默认行为。简单的说就是告诉动画在第一关键帧上等待动画开始，或者在动画结束时停在最后一个关键帧上而不回到动画的第一帧上,或者同时具有这两个效果。</p><p>示例：元素背景色从红色变成蓝色</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>变形与动画<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> redToBlue&#123;</span><br><span class="line">  <span class="selector-tag">from</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">20%</span>&#123;</span><br><span class="line">      <span class="attribute">background</span>:green;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">40%</span>&#123;</span><br><span class="line">      <span class="attribute">background</span>:lime;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">60%</span>&#123;</span><br><span class="line">      <span class="attribute">background</span>:yellow;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>:blue;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">  <span class="attribute">animation-name</span>:redToBlue;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">20s</span>;</span><br><span class="line">  <span class="attribute">animation-timing-function</span>: ease;</span><br><span class="line">  <span class="attribute">animation-delay</span>: <span class="number">1s</span>;</span><br><span class="line">  <span class="attribute">animation-fill-mode</span>: both; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224737.gif" alt="效果"></p><h2 id="布局样式"><a href="#布局样式" class="headerlink" title="布局样式"></a>布局样式</h2><h3 id="多列布局——Columns"><a href="#多列布局——Columns" class="headerlink" title="多列布局——Columns"></a>多列布局——Columns</h3><p>为了能在Web页面中方便实现类似报纸、杂志那种多列排版的布局，W3C特意给CSS3增加了一个多列布局模块（CSS Multi Column Layout Module）。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">columns</span>：&lt;<span class="attribute">column-width</span>&gt; || &lt;<span class="attribute">column-count</span>&gt;</span><br></pre></td></tr></table></figure><p>多列布局<code>columns</code>属性参数主要就两个属性参数：列宽和列数</p><table><thead><tr><th align="center"><strong>参数</strong></th><th align="center">参数说明</th></tr></thead><tbody><tr><td align="center"><column-width></td><td align="center">主要用来定义多列中每列的宽度</td></tr><tr><td align="center"><column-count></td><td align="center">主要用来定义多列中的列数</td></tr></tbody></table><p>到目前为止大部分主流浏览器都对其支持：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224741.jpg" alt="浏览器支持情况"></p><p>示例：三栏布局，每栏宽度为150px</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>columns<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;columns&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我要分列显示<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我要测试我要测试我要测试我要测试我要测试我要测试我要测试我要测试我要测试我要测试我要测试我要测试我要测试我要测试我要测试我要测试我要测试我要测试我要测试我要测试我要测试我要测试我要测试我要测试我要测试我要测试我要测试我要测试我要测试我要测试<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我要测试我要测试我要测试我要测试我要测试我要测试我要测试我要测试我要测试我要测试我要测试我要测试我要测试我要测试我要测试我要测试我要测试我要测试我要测试我要测试我要测试我要测试我要测试我要测试我要测试我要测试我要测试我要测试<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.columns</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> auto; </span><br><span class="line">  -webkit-<span class="attribute">columns</span>: <span class="number">150px</span> <span class="number">3</span>;</span><br><span class="line">  -moz-<span class="attribute">columns</span>: <span class="number">150px</span> <span class="number">3</span>;</span><br><span class="line">  -o-<span class="attribute">columns</span>:<span class="number">150px</span> <span class="number">3</span>;</span><br><span class="line">  -ms-<span class="attribute">columns</span>: <span class="number">150px</span> <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">columns</span>: <span class="number">150px</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224745.png" alt="三栏布局"></p><h3 id="多列布局——column-width"><a href="#多列布局——column-width" class="headerlink" title="多列布局——column-width"></a>多列布局——column-width</h3><p><code>column-width</code>的使用和CSS中的<code>width</code>属性一样，不过不同的是，<code>column-width</code>属性在定义元素列宽的时候，既可以单独使用，也可以和多列属性中其他属性配合使用。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">column-width</span>: auto | &lt;length&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">属性值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">auto</td><td align="center">如果column-width设置值为auto或者没有显式的设置值时，元素多列的列宽将由其他属性来决定，比如前面的示例就是由列数column-count来决定</td></tr><tr><td align="center"><length></td><td align="center">使用固定值来设置元素列的宽度，其主要是由数值和长度单位组成，不过其值只能是正值，不能为负值</td></tr></tbody></table><p>示例：分为3栏，每栏的内容宽度设置为200px</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>columns-width<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;columns&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我要分列显示<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.columns</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">900px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">  </span><br><span class="line">  <span class="attribute">column-width</span>: <span class="number">200px</span>;</span><br><span class="line">  -webkit-<span class="attribute">column-width</span>: <span class="number">200px</span>;</span><br><span class="line">  -moz-<span class="attribute">column-width</span>: <span class="number">200px</span>;</span><br><span class="line">  -o-<span class="attribute">column-width</span>: <span class="number">200px</span>;</span><br><span class="line">  -ms-<span class="attribute">column-width</span>: <span class="number">200px</span>;</span><br><span class="line">  </span><br><span class="line">  -webkit-<span class="attribute">column-count</span>:<span class="number">3</span>;</span><br><span class="line">  -moz-<span class="attribute">column-count</span>:<span class="number">3</span>;</span><br><span class="line">  -o-<span class="attribute">column-count</span>:<span class="number">3</span>;</span><br><span class="line">  -ms-<span class="attribute">column-count</span>:<span class="number">3</span>;</span><br><span class="line">  <span class="attribute">column-count</span>:<span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224752.png" alt="多栏布局"></p><h3 id="多列布局——column-count"><a href="#多列布局——column-count" class="headerlink" title="多列布局——column-count"></a>多列布局——column-count</h3><p><code>column-count</code>属性主要用来给元素指定想要的列数和允许的最大列数。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">column-count</span>：auto | &lt;integer&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center"><strong>属性值</strong></th><th align="center">属性值说明</th></tr></thead><tbody><tr><td align="center">auto</td><td align="center">此值为column-count的默认值，表示元素只有一列，其主要依靠浏览器计算自动设置</td></tr><tr><td align="center"><integer></td><td align="center">此值为正整数值，主要用来定义元素的列数，取值为大于0的整数，负值无效</td></tr></tbody></table><p>示例：内容分成2列显示</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>columns-count<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;columns&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我要分列显示<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.columns</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">  </span><br><span class="line">  -webkit-<span class="attribute">column-count</span>: <span class="number">2</span>;</span><br><span class="line">  -moz-<span class="attribute">column-count</span>: <span class="number">2</span>;</span><br><span class="line">  -o-<span class="attribute">column-count</span>: <span class="number">2</span>;</span><br><span class="line">  -ms-<span class="attribute">column-count</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">column-count</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224757.png" alt="2列效果"></p><h3 id="列间距column-gap"><a href="#列间距column-gap" class="headerlink" title="列间距column-gap"></a>列间距column-gap</h3><p><code>column-gap</code>主要用来设置列与列之间的间距</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">column-gap</span>: normal || &lt;length&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">属性值</th><th>属性值说明</th></tr></thead><tbody><tr><td align="center">normal</td><td>默认值，默值为1em（如果你的字号是px，其默认值为你的font-size值）</td></tr><tr><td align="center"><length></td><td>此值用来设置列与列之间的距离，其可以使用px,em单位的任何整数值，但不能是负值</td></tr></tbody></table><p>示例：将内容列与列之间的间距设置为3em</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>列间距column-gap<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;columns&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我要分列显示<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.columns</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">900px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">  </span><br><span class="line">  -webkit-<span class="attribute">column-count</span>: <span class="number">3</span>;</span><br><span class="line">  -moz-<span class="attribute">column-count</span>: <span class="number">3</span>;</span><br><span class="line">  -o-<span class="attribute">column-count</span>: <span class="number">3</span>;</span><br><span class="line">  -ms-<span class="attribute">column-count</span>: <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">column-count</span>: <span class="number">3</span>;</span><br><span class="line">  </span><br><span class="line">  -webkit-<span class="attribute">column-gap</span>: <span class="number">3em</span>;</span><br><span class="line">  -moz-<span class="attribute">column-gap</span>: <span class="number">3em</span>;</span><br><span class="line">  -o-<span class="attribute">column-gap</span>: <span class="number">3em</span>;</span><br><span class="line">  -ms-<span class="attribute">column-gap</span>: <span class="number">3em</span>;</span><br><span class="line">  <span class="attribute">column-gap</span>: <span class="number">3em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224804.png" alt="3em效果"></p><h3 id="列表边框column-rule"><a href="#列表边框column-rule" class="headerlink" title="列表边框column-rule"></a>列表边框column-rule</h3><p><code>column-rule</code>主要是用来定义列与列之间的边框宽度、边框样式和边框颜色。简单点说，就有点类似于常用的<code>border</code>属性。但<code>column-rule</code>是不占用任何空间位置的，在列与列之间改变其宽度不会改变任何列的位置。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">column-rule</span>:&lt;column-rule-width&gt;|&lt;column-rule-style&gt;|&lt;column-rule-color&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">属性值</th><th align="left">属性值说明</th></tr></thead><tbody><tr><td align="center">column-rule-width</td><td align="left">类似于<code>border-width</code>属性，主要用来定义列边框的宽度，其默认值为<code>medium</code>，<code>column-rule-width</code>属性接受任意浮点数，但不接收负值。但也像<code>border-width</code>属性一样，可以使用关键词：<code>medium</code>、<code>thick</code>和<code>thin</code></td></tr><tr><td align="center">column-rule-style</td><td align="left">类似于<code>border-style</code>属性，主要用来定义列边框样式，其默认值为<code>none</code>。<code>column-rule-style</code>属性值与<code>border-style</code>属值相同，包括<code>none</code>、<code>hidden</code>、<code>dotted</code>、<code>dashed</code>、<code>solid</code>、<code>double</code>、<code>groove</code>、<code>ridge</code>、<code>inset</code>、<code>outset</code></td></tr><tr><td align="center">column-rule-color</td><td align="left">类似于<code>border-color</code>属性，主要用来定义列边框颜色，其默认值为前景色<code>color</code>的值，使用时相当于<code>border-color</code>。<code>column-rule-color</code>接受所有的颜色。如果不希望显示颜色，也可以将其设置为<code>transparent</code>(透明色)</td></tr></tbody></table><p>示例：为栏目列设置一个3px的灰色实体边框线</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>列表边框column-rule<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;columns&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我要分列显示<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本我是测试文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.columns</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">900px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">  </span><br><span class="line">  -webkit-<span class="attribute">column-count</span>:<span class="number">3</span>;</span><br><span class="line">  -moz-<span class="attribute">column-count</span>:<span class="number">3</span>;</span><br><span class="line">  -o-<span class="attribute">column-count</span>:<span class="number">3</span>;</span><br><span class="line">  -ms-<span class="attribute">column-count</span>:<span class="number">3</span>;</span><br><span class="line">  <span class="attribute">column-count</span>:<span class="number">3</span>;</span><br><span class="line">  </span><br><span class="line">  -webkit-<span class="attribute">column-gap</span>: <span class="number">2em</span>;</span><br><span class="line">  -moz-<span class="attribute">column-gap</span>: <span class="number">2em</span>;</span><br><span class="line">  -o-<span class="attribute">column-gap</span>: <span class="number">2em</span>;</span><br><span class="line">  -ms-<span class="attribute">column-gap</span>: <span class="number">2em</span>;</span><br><span class="line">  <span class="attribute">column-gap</span>: <span class="number">2em</span>;</span><br><span class="line">  </span><br><span class="line">  -webkit-<span class="attribute">column-rule</span>: <span class="number">3px</span> solid green;</span><br><span class="line">  -moz-<span class="attribute">column-rule</span>: <span class="number">3px</span> solid green;</span><br><span class="line">  -o-<span class="attribute">column-rule</span>: <span class="number">3px</span> solid green;</span><br><span class="line">  -ms-<span class="attribute">column-rule</span>: <span class="number">3px</span> solid green;</span><br><span class="line">  <span class="attribute">column-rule</span>: <span class="number">3px</span> solid green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224810.png" alt="边框效果"></p><h3 id="跨列设置column-span"><a href="#跨列设置column-span" class="headerlink" title="跨列设置column-span"></a>跨列设置column-span</h3><p><code>column-span</code>主要用来定义一个分列元素中的子元素能跨列多少。<code>column-width</code>、<code>column-count</code>等属性能让一元素分成多列，不管里面元素如何排放顺序，他们都是从左向右的放置内容，但有时我们需要基中一段内容或一个标题不进行分列，也就是横跨所有列，此时<code>column-span</code>就可以轻松实现</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">column-span</span>: none | all</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">属性值</th><th>属性值说明</th></tr></thead><tbody><tr><td align="center">none</td><td>此值为<code>column-span</code>的默认值，表示不跨越任何列</td></tr><tr><td align="center">all</td><td>这个值跟<code>none</code>值刚好相反，表示的是元素跨越所有列，并定位在列的<code>Ｚ轴</code>之上</td></tr></tbody></table><p>示例：所有偶数段落和标题，跨越所有列</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>跨列设置column-span<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;columns&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我要分列显示<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>为了能在Web页面中方便实现类似报纸、杂志那种多列排版的布局，W3C特意给CSS3增加了一个多列布局模块（CSS Multi Column Layout Module）。它主要应用在文本的多列布局方面。对于文本的多列布局，我想大家并不陌生，因为报纸和杂志上我们随处可见，这种布局在报纸和杂志上都使用了几十年了，但需要在Web页面上实现文本的多列布局，正如下图所示。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样我是测试文本你能拿我怎么样<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.columns</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">900px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">  </span><br><span class="line">  -webkit-<span class="attribute">column-count</span>:<span class="number">3</span>;</span><br><span class="line">  -moz-<span class="attribute">column-count</span>:<span class="number">3</span>;</span><br><span class="line">  -o-<span class="attribute">column-count</span>:<span class="number">3</span>;</span><br><span class="line">  -ms-<span class="attribute">column-count</span>:<span class="number">3</span>;</span><br><span class="line">  <span class="attribute">column-count</span>:<span class="number">3</span>;</span><br><span class="line">  </span><br><span class="line">  -webkit-<span class="attribute">column-gap</span>: <span class="number">2em</span>;</span><br><span class="line">  -moz-<span class="attribute">column-gap</span>: <span class="number">2em</span>;</span><br><span class="line">  -o-<span class="attribute">column-gap</span>: <span class="number">2em</span>;</span><br><span class="line">  -ms-<span class="attribute">column-gap</span>: <span class="number">2em</span>;</span><br><span class="line">  <span class="attribute">column-gap</span>: <span class="number">2em</span>;</span><br><span class="line">  </span><br><span class="line">  -webkit-<span class="attribute">column-rule</span>: <span class="number">3px</span> gray solid;</span><br><span class="line">  -moz-<span class="attribute">column-rule</span>: <span class="number">3px</span> gray solid;</span><br><span class="line">  -o-<span class="attribute">column-rule</span>: <span class="number">3px</span> gray solid;</span><br><span class="line">  -ms-<span class="attribute">column-rule</span>: <span class="number">3px</span> gray solid;</span><br><span class="line">  <span class="attribute">column-rule</span>: <span class="number">3px</span> gray solid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h2</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: green;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span>,</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>n)&#123;</span><br><span class="line">  -webkit-<span class="attribute">column-span</span>: all;</span><br><span class="line">  -moz-<span class="attribute">column-span</span>: all;</span><br><span class="line">  -o-<span class="attribute">column-span</span>: all;</span><br><span class="line">  -ms-<span class="attribute">column-span</span>: all;</span><br><span class="line">  <span class="attribute">column-span</span>: all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224818.png" alt="效果"></p><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><p>CSS中有一种基础设计模式叫盒模型，盒模型定义了Web页面中的元素中如何来解析。CSS中每一个元素都是一个盒模型，包括<code>html</code>和<code>body</code>标签元素。在盒模型中主要包括<code>width</code>、<code>height</code>、<code>border</code>、<code>background</code>、<code>padding</code>和<code>margin</code>这些属性，而且他们之间的层次关系可以相互影响。</p><p><img src="/css3jczs2/cssjczs106.png" alt="盒子模型平面图"></p><p><img src="/css3jczs2/cssjczs107.jpg" alt="盒子模型3D图"></p><p>从图中可以看出<code>padding</code>属性和<code>content</code>属性层叠<code>background-image</code>属性，层叠<code>background-color</code>属性，这个是存在的，它们四者之间构成了Ｚ轴（垂直屏幕的坐标）多重层叠关系。但是<code>border</code>属性与<code>margin</code>属性、<code>padding</code>属性三者之间应该是平面上的并级关系，并不能构成Ｚ轴的层叠关系。</p><h4 id="box-sizing："><a href="#box-sizing：" class="headerlink" title="box-sizing："></a>box-sizing：</h4><p>在CSS中盒模型被分为两种，第一种是w3c的标准模型，另一种是IE的传统模型，它们相同之处都是对元素计算尺寸的模型，具体说不是对元素的<code>width</code>、<code>height</code>、<code>padding</code>和<code>border</code>以及元素实际尺寸的计算关系，它们不同之处是两者的计算方法不一致，原则上来说盒模型是分得很细的，这里所看到的主要是外盒模型和内盒模型，如下面计算公式所示：</p><p>W3C标准盒模型：</p><blockquote><p>外盒尺寸计算（元素空间尺寸）：</p><p>element空间高度＝内容高度＋内距＋边框＋外距</p><p>element空间宽度＝内容宽度＋内距＋边框＋外距</p><p>内盒尺寸计算（元素大小）：</p><p>element高度＝内容高度＋内距＋边框（height为内容高度）</p><p>element宽度＝内容宽度＋内距＋边框（width为内容宽度）</p></blockquote><p>IE传统下盒模型（IE6以下，不包含IE6版本或”QuirksMode下IE5.5+”）：</p><blockquote><p>外盒尺寸计算（元素空间尺寸）:</p><p>element空间高度＝内容高度＋外距（height包含了元素内容宽度、边框、内距）</p><p>element宽间宽度＝内容宽度＋外距（width包含了元素内容宽度、边框、内距）</p><p>内盒尺寸计算（元素大小）:</p><p>element高度＝内容高度（height包含了元素内容宽度、边框、内距）</p><p>element宽度＝内容宽度（width包含了元素内容宽度、边框、内距）</p></blockquote><p>在CSS3中新增加了<code>box-sizing</code>属性，能够事先定义盒模型的尺寸解析方式，其语法规则如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">box-sizing</span>: content-box | border-box | inherit</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">属性值</th><th>属性值说明</th></tr></thead><tbody><tr><td align="center">content-box</td><td>默认值，其让元素维持W3C的标准盒模型，也就是说元素的宽度和高度（<code>width</code>&#x2F;<code>height</code>）等于元素边框宽度（<code>border</code>）加上元素内距（<code>padding</code>）加上元素内容宽度或高度（<code>content  width/ height</code>），也就是<code>element width/height = border + padding + content  width / height</code></td></tr><tr><td align="center">border-box</td><td>重新定义CSS2.1中盒模型组成的模式，让元素维持IE传统的盒模型（IE6以下版本和IE6-7怪异模式），也就是说元素的宽度或高度等于元素内容的宽度或高度。从上面盒模型介绍可知，这里的内容宽度或高度包含了元素的<code>border</code>、<code>padding</code>、内容的宽度或高度（此处的内容宽度或高度＝盒子的宽度或高度 - 边框 - 内距）</td></tr><tr><td align="center">inherit</td><td>使元素继承父元素的盒模型模式</td></tr></tbody></table><p>其中最为关键的是<code>box-sizing</code>中<code>content-box</code>和<code>border-box</code>两者的区别，他们之间的区别可以通过下图来展示，其对盒模型的不同解析：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224828.jpg" alt="区别"></p><p>示例：在自适应布局当中，在元素基础上添加内距<code>padding</code>，按照标准盒模型解析，往往会将布局撑破，但使用<code>box-sizing</code>的<code>border-box</code>值，可以解决</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>盒子模型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Header Content<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;page&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Main Content<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Sidebar Content<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Footer Content<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#page</span><span class="selector-pseudo">:after</span>,</span><br><span class="line"><span class="selector-id">#page</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#page</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">  <span class="attribute">clear</span>:both;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#page</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#header</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: green;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">60%</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background</span>: orange;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">38%</span>;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f36</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#footer</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#36f</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#header</span>,</span><br><span class="line"><span class="selector-class">.main</span>,</span><br><span class="line"><span class="selector-class">.sidebar</span>,</span><br><span class="line"><span class="selector-id">#footer</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  -moz-<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  -o-<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  -ms-<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224834.png" alt="挤压"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224838.png" alt="正常"></p><h3 id="伸缩布局"><a href="#伸缩布局" class="headerlink" title="伸缩布局"></a>伸缩布局</h3><p>CSS3引入了一种新的布局模式——Flexbox布局，即伸缩布局盒模型（Flexible Box），用来提供一个更加有效的方式制定、调整和分布一个容器里项目布局，即使它们的大小是未知或者动态的，这里简称为Flex。</p><p>Flexbox布局常用于设计比较复杂的页面，可以轻松的实现屏幕和浏览器窗口大小发生变化时保持元素的相对位置和大小不变，同时减少了依赖于浮动布局实现元素位置的定义以及重置元素的大小。</p><p>Flexbox布局在定义伸缩项目大小时伸缩容器会预留一些可用空间，让你可以调节伸缩项目的相对大小和位置。例如，你可以确保伸缩容器中的多余空间平均分配多个伸缩项目，当然，如果你的伸缩容器没有足够大的空间放置伸缩项目时，浏览器会根据一定的比例减少伸缩项目的大小，使其不溢出伸缩容器。综合而言，Flexbox布局功能主要具有以下几点：</p><blockquote><p>第一，屏幕和浏览器窗口大小发生改变也可以灵活调整布局</p><p>第二，可以指定伸缩项目沿着主轴或侧轴按比例分配额外空间（伸缩容器额外空间），从而调整伸缩项目的大小</p><p>第三，可以指定伸缩项目沿着主轴或侧轴将伸缩容器额外空间，分配到伸缩项目之前、之后或之间</p><p>第四，可以指定如何将垂直于元素布局轴的额外空间分布到该元素的周围</p><p>第五，可以控制元素在页面上的布局方向</p><p>第六，可以按照不同于文档对象模型（DOM）所指定排序方式对屏幕上的元素重新排序。也就是说可以在浏览器渲染中不按照文档流先后顺序重排伸缩项目顺序</p></blockquote><p>示例：</p><ol><li>创建一个flex容器</li></ol><p>任何一个flexbox布局的第一步是需要创建一个flex容器。为此给元素设置<code>display</code>属性的值为<code>flex</code>。在Safari浏览器中，你依然需要添加前缀-<code>webkit-</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flexcontainer</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-flex;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Flex项目显示</li></ol><p>Flex项目是Flex容器的子元素。他们沿着主要轴和横轴定位。默认的是沿着水平轴排列一行。你可以通过<code>flex-direction</code>来改变主轴方向修改为<code>column</code>，其默认值是<code>row</code></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224844.jpg" alt="flex容器"></p><ol start="3"><li>Flex项目列显示</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flexcontainer</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-flex;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    -webkit-<span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224846.jpg" alt="项目列"></p><ol start="4"><li>Flex项目移动到顶部</li></ol><p>如何实现将flex项目移动到顶部的效果，关键点：取决于主轴的方向。<code>justify-content</code>属性定义了项目在主轴上的对齐方式。<code>align-items</code>属性定义项目在交叉轴上如何对齐。 如果主轴是水平的方向，通过<code>align-items</code>设置；如果主轴是垂直的方向，通过<code>justify-content</code>设置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flexcontainer</span>&#123;</span><br><span class="line">-webkit-<span class="attribute">flex-direction</span>: column;</span><br><span class="line"><span class="attribute">flex-direction</span>: column;</span><br><span class="line">-webkit-<span class="attribute">justify-content</span>: flex-start;</span><br><span class="line"><span class="attribute">justify-content</span>: flex-start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224849.jpg" alt="效果"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flexcontainer</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-flex;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    -webkit-<span class="attribute">flex-direction</span>: row;</span><br><span class="line">    <span class="attribute">flex-direction</span>: row;</span><br><span class="line">    -webkit-<span class="attribute">align-items</span>: flex-start;</span><br><span class="line">    <span class="attribute">align-items</span>: flex-start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224854.jpg" alt="顶部"></p><ol start="5"><li>Flex项目移到左边</li></ol><p>flex项目称动到左边或右边也取决于主轴的方向。如果<code>flex-direction</code>设置为<code>row</code>，设置<code>justify-content</code>控制方向；如果设置为<code>column</code>，设置<code>align-items</code>控制方向</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flexcontainer</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-flex;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    -webkit-<span class="attribute">flex-direction</span>: row;</span><br><span class="line">    <span class="attribute">flex-direction</span>: row;</span><br><span class="line">    -webkit-<span class="attribute">justify-content</span>: flex-start;、</span><br><span class="line">    <span class="attribute">justify-content</span>: flex-start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224858.jpg" alt="行靠左效果"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flexcontainer</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-flex;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    -webkit-<span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    -webkit-<span class="attribute">align-items</span>: flex-start;</span><br><span class="line">    <span class="attribute">align-items</span>: flex-start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224906.jpg" alt="列靠左效果"></p><ol start="6"><li>Flex项目移动右边</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flexcontainer</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-flex;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    -webkit-<span class="attribute">flex-direction</span>: row;</span><br><span class="line">    <span class="attribute">flex-direction</span>: row;</span><br><span class="line">    -webkit-<span class="attribute">justify-content</span>: flex-end;</span><br><span class="line">    <span class="attribute">justify-content</span>: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224910.jpg" alt="行靠右"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flexcontainer</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-flex;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    -webkit-<span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    -webkit-<span class="attribute">align-items</span>: flex-end;</span><br><span class="line">    <span class="attribute">align-items</span>: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224913.jpg" alt="列靠右"></p><ol start="7"><li>水平垂直居中</li></ol><p>在Flexbox容器中制作水平垂直居中是微不足道的。设置<code>justify-content</code>或者<code>align-items</code>为center。另外根据主轴的方向设置<code>flex-direction</code>为<code>row</code>或<code>column</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flexcontainer</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-flex;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    -webkit-<span class="attribute">flex-direction</span>: row;</span><br><span class="line">    <span class="attribute">flex-direction</span>: row;</span><br><span class="line">    -webkit-<span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    -webkit-<span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224918.jpg" alt="行居中"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flexcontainer</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-flex;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    -webkit-<span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    -webkit-<span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    -webkit-<span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224923.jpg" alt="列居中"></p><ol start="8"><li>Flex项目实现自动伸缩</li></ol><p>可以定义一个flex项目，如何相对于flex容器实现自动的伸缩。需要给每个<code>flex</code>项目设置<code>flex</code>属性设置需要伸缩的值</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bigitem</span>&#123;</span><br><span class="line">    -webkit-<span class="attribute">flex</span>:<span class="number">200</span>;</span><br><span class="line">    <span class="attribute">flex</span>:<span class="number">200</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.smallitem</span>&#123;</span><br><span class="line">    -webkit-<span class="attribute">flex</span>:<span class="number">100</span>;</span><br><span class="line">    <span class="attribute">flex</span>:<span class="number">100</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224933.jpg" alt="自动伸缩"></p><p>示例：图片水平垂直居中</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>伸缩布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://laugh0608.oss-cn-beijing.aliyuncs.com/wenZhang/cssJiChu/104.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">  -webkit-<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>:flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224937.png" alt="图片水平垂直居中"></p><p>暂时先到这里，之后学习了再更新。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> HTML </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deepin之大黄蜂驱动</title>
      <link href="/posts/26093a52/"/>
      <url>/posts/26093a52/</url>
      
        <content type="html"><![CDATA[<blockquote><p>警告</p><p>本篇文章内容涵盖危险操作，请务必了解后果和做好数据备份工作</p><p>OS: deepin15.11 桌面版 系统最后更新时间：2019&#x2F;12&#x2F;15 15:00:23</p></blockquote><h2 id="安装大黄蜂bumblebee"><a href="#安装大黄蜂bumblebee" class="headerlink" title="安装大黄蜂bumblebee"></a>安装大黄蜂bumblebee</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt-get install bumblebee-nvidia primus nvidia-settings</span></span><br></pre></td></tr></table></figure><blockquote><p>primus是可选项用于提升性能，nvidia-settings用于图形化界面的设置。</p></blockquote><h3 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">bumblebeed --version</span></span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721085133.png" alt="3"></p><h3 id="安装查看显卡的工具"><a href="#安装查看显卡的工具" class="headerlink" title="安装查看显卡的工具"></a>安装查看显卡的工具</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt-get install libgl1-nvidia-glx</span></span><br></pre></td></tr></table></figure><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>取消如下行的注释</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo vim /etc/bumblebee/xorg.conf.nvidia</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># BusID&quot;PCI:01:00:0</span></span></span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721085137.png" alt="4"></p><p>配置大黄蜂</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo vim /etc/bumblebee/bumblebee.conf</span></span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721085142.png" alt="QfwCAf.png"></p><h2 id="查看是否生效"><a href="#查看是否生效" class="headerlink" title="查看是否生效"></a>查看是否生效</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">optirun glxgears -info</span></span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721085146.png" alt="QfwBCD.png"></p><blockquote><p>左上角的图是不停转动的，懒得录动态图了</p></blockquote><h2 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h2><p>查看状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">optirun glxinfo | grep NVIDIA</span></span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721085152.png" alt="Qfw7Ks.png"></p><p>查看自带驱动管理器</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721085156.png" alt="Qfwz24.png"></p><p>查看显卡状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">lspci | grep VGA</span></span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721085201.png" alt="Qf0AIK.png"></p><p>okk，完美。</p><blockquote><p>再次输入<code>optirun glxgears -info</code>命令查看显卡工作状态</p></blockquote><h2 id="可能遇到的错误"><a href="#可能遇到的错误" class="headerlink" title="可能遇到的错误"></a>可能遇到的错误</h2><h4 id="第一，最大的问题就是开机之后卡死在启动logo"><a href="#第一，最大的问题就是开机之后卡死在启动logo" class="headerlink" title="第一，最大的问题就是开机之后卡死在启动logo"></a>第一，最大的问题就是开机之后卡死在启动logo</h4><p>别着急，重启后在启动项按<code>e</code>编辑启动项文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=&quot;splash quiet&quot; </span><br></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=&quot;splash quiet acpi_osi=! acpi_osi=‘Windows 2009’ &quot;</span><br></pre></td></tr></table></figure><blockquote><p>acpi_osi&#x3D;! acpi_osi&#x3D;‘Windows 2009‘配置并不适用于所有笔记本电脑，对于不同的电脑设置不一样，有些需要设置为：acpi_osi&#x3D;”!Windows 2015”</p></blockquote><p>进入系统之后重新安装显卡驱动即可。</p><h4 id="第二，本身显卡驱动和安装的大黄蜂冲突"><a href="#第二，本身显卡驱动和安装的大黄蜂冲突" class="headerlink" title="第二，本身显卡驱动和安装的大黄蜂冲突"></a>第二，本身显卡驱动和安装的大黄蜂冲突</h4><p>由于一时疏忽，我安装的时候忘了禁用本身的开源驱动，所以安装的时候报错”本身的nouveau模块已经启用，是否继续进行安装”，输入<code>y</code>继续安装即可，它会自动卸载开源驱动并安装大黄蜂。</p><blockquote><p>注意，这个情况只是我自己的电脑如此，其他的我不保证过程一致，所以请真的慎重慎重再慎重，Linux的显卡驱动真的是最大的坑。</p></blockquote><p> 安装驱动之前禁止nouveau驱动</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo nano /etc/modprobe.d/blacklist.conf</span></span><br></pre></td></tr></table></figure><p>然后在打开的blacklist.conf文件中添加如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">blacklist nouveau</span><br><span class="line">options nouveau modeset=0</span><br></pre></td></tr></table></figure><p>然后执行命令：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo update-initramfs -u</span></span><br></pre></td></tr></table></figure><p>一直等到检测结束，退出重启电脑，重新启动后验证是否成功，运行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">lsmod | grep nouveau</span></span><br></pre></td></tr></table></figure><blockquote><p> 注：如果页面没什么反应、无输出什么内容即为成功。</p></blockquote><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>使用独显运行命令或者程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">optirun <span class="built_in">command</span> 或 primusrun <span class="built_in">command</span></span></span><br></pre></td></tr></table></figure><p>如果你需要渲染的程序很多，你不想每次都从命令行启动的话，可以去修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/share/applications/&lt;application&gt;.desktop</span><br></pre></td></tr></table></figure><p>在 <code>Exec= </code>后面加上 <code>primusrun</code>或<code>optirun</code>和程序路径即可。</p><h2 id="敬告"><a href="#敬告" class="headerlink" title="敬告"></a>敬告</h2><p>如果真的不是硬性要求，不要轻易的更改Linux上的显卡驱动，Linux本身设计来就不是跑大型图形化应用的，对显卡支持度真的很差，轻则桌面卡死，重则系统崩溃。虽然开源驱动的性能是不如闭源，但是贵在稳定啊。</p><p>一定要慎思慎之。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Deepin </tag>
            
            <tag> NVIDIA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS3基础篇(一)</title>
      <link href="/posts/e5143bb2/"/>
      <url>/posts/e5143bb2/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是CSS3"><a href="#什么是CSS3" class="headerlink" title="什么是CSS3"></a>什么是CSS3</h2><p>CSS3是<a href="https://baike.baidu.com/item/CSS/5457">CSS</a>（层叠样式表）技术的升级版本，于1999年开始制订，2001年5月23日W3C完成了CSS3的工作草案，主要包括盒子模型、列表模块、<a href="https://baike.baidu.com/item/%E8%B6%85%E9%93%BE%E6%8E%A5/97857">超链接</a>方式、语言模块、背景和边框、文字特效、多栏布局等模块 。——百度百科</p><p>在编写CSS3样式时，不同的浏览器可能需要不同的前缀。它表示该CSS属性或规则尚未成为W3C标准的一部分，是浏览器的私有属性，虽然目前较新版本的浏览器都是不需要前缀的，但为了更好的向前兼容前缀还是少不了的。</p><table><thead><tr><th align="center">前缀</th><th align="center">浏览器</th></tr></thead><tbody><tr><td align="center">-webkit</td><td align="center">chrome&#x2F;safari</td></tr><tr><td align="center">-moz</td><td align="center">firefox</td></tr><tr><td align="center">-ms</td><td align="center">IE</td></tr><tr><td align="center">-o</td><td align="center">opera</td></tr></tbody></table><h2 id="CSS3能做什么"><a href="#CSS3能做什么" class="headerlink" title="CSS3能做什么"></a>CSS3能做什么</h2><p>CSS3把很多以前需要使用图片和脚本来实现的效果、甚至动画效果，只需要短短几行代码就能搞定。比如圆角，图片边框，文字阴影和盒阴影，过渡、动画等。CSS3简化了前端开发工作人员的设计过程，加快页面载入速度。</p><h2 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h2><h3 id="圆角效果-border-radius"><a href="#圆角效果-border-radius" class="headerlink" title="圆角效果  border-radius"></a>圆角效果  border-radius</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>:<span class="number">10px</span>; <span class="comment">/* 所有角都使用半径为10px的圆角 */</span> </span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">5px</span> <span class="number">4px</span> <span class="number">3px</span> <span class="number">2px</span>; <span class="comment">/* 四个半径值分别是左上角、右上角、右下角和左下角，顺时针 */</span> </span><br></pre></td></tr></table></figure><blockquote><p>还可以用<strong>百分比</strong>或者<code>em</code>，但兼容性目前还不太好。</p></blockquote><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223037.png" alt="圆角"></p><h4 id="实心上半圆"><a href="#实心上半圆" class="headerlink" title="实心上半圆"></a>实心上半圆</h4><p>把高度<code>height</code>设为宽度<code>width</code>的一半，并且只设置左上角和右上角的半径与元素的高度一致</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">50px</span>;<span class="comment">/*是width的一半*/</span></span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#9da</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>:<span class="number">50px</span> <span class="number">50px</span> <span class="number">0</span> <span class="number">0</span>;<span class="comment">/*半径至少设置为height的值*/</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223043.png" alt="左半圆"></p><h4 id="实心圆"><a href="#实心圆" class="headerlink" title="实心圆"></a>实心圆</h4><p>把宽度<code>width</code>与高度<code>height</code>值设置为一致（也就是正方形），并且四个圆角值都设置为它们值的一半</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;<span class="comment">/*与width设置一致*/</span></span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#9da</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>:<span class="number">50px</span>;<span class="comment">/*四个圆角值都设置为宽度或高度值的一半*/</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223049.png" alt="实心圆"></p><h3 id="阴影-box-shadow"><a href="#阴影-box-shadow" class="headerlink" title="阴影 box-shadow"></a>阴影 box-shadow</h3><p>box-shadow是向盒子添加阴影。支持添加一个或者多个。用法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: X轴偏移量 Y轴偏移量 [阴影模糊半径] [阴影扩展半径] [阴影颜色] [投影方式];</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">值</th><th align="center">选择</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">X轴偏移量</td><td align="center">必须</td><td align="center">水平阴影的位置，允许负值</td></tr><tr><td align="center">Y轴偏移量</td><td align="center">必须</td><td align="center">垂直阴影的位置，允许负值</td></tr><tr><td align="center">阴影模糊半径</td><td align="center">可选</td><td align="center">模糊距离</td></tr><tr><td align="center">阴影扩展半径</td><td align="center">可选</td><td align="center">阴影尺寸</td></tr><tr><td align="center">阴影颜色</td><td align="center">可选</td><td align="center">阴影的颜色，默认黑色</td></tr><tr><td align="center">投影方式</td><td align="center">可选</td><td align="center"><code>inset</code>为内投影，默认为外投影</td></tr></tbody></table><blockquote><p><code>inset</code>可以写在参数的第一个或最后一个，其它位置是无效的。</p></blockquote><h4 id="外阴影"><a href="#外阴影" class="headerlink" title="外阴影"></a>外阴影</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box_shadow</span>&#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>:<span class="number">4px</span> <span class="number">2px</span> <span class="number">6px</span> <span class="number">#333333</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223102.png" alt="外"></p><h4 id="内阴影"><a href="#内阴影" class="headerlink" title="内阴影"></a>内阴影</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box_shadow</span>&#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>:<span class="number">4px</span> <span class="number">2px</span> <span class="number">6px</span> <span class="number">#333333</span> inset; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223107.png" alt="内"></p><h4 id="添加多个阴影"><a href="#添加多个阴影" class="headerlink" title="添加多个阴影"></a>添加多个阴影</h4><p>多个效果用逗号隔开即可。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box_shadow</span>&#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>:<span class="number">4px</span> <span class="number">2px</span> <span class="number">6px</span> <span class="number">#f00</span>, -<span class="number">4px</span> -<span class="number">2px</span> <span class="number">6px</span> <span class="number">#000</span>, <span class="number">0px</span> <span class="number">0px</span> <span class="number">12px</span> <span class="number">5px</span> <span class="number">#33CC00</span> inset;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223113.png" alt="多个效果"></p><h4 id="阴影模糊半径与阴影扩展半径的区别"><a href="#阴影模糊半径与阴影扩展半径的区别" class="headerlink" title="阴影模糊半径与阴影扩展半径的区别"></a>阴影模糊半径与阴影扩展半径的区别</h4><p>阴影模糊半径：此参数可选，其值只能是为正值，如果其值为0时，表示阴影不具有模糊效果，其值越大阴影的边缘就越模糊</p><p>阴影扩展半径：此参数可选，其值可以是正负值，如果值为正，则整个阴影都延展扩大，反之值为负值时，则缩小</p><h4 id="X轴偏移量和Y轴偏移量值可以设置为负数"><a href="#X轴偏移量和Y轴偏移量值可以设置为负数" class="headerlink" title="X轴偏移量和Y轴偏移量值可以设置为负数"></a>X轴偏移量和Y轴偏移量值可以设置为负数</h4><p>X轴偏移量为负数：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.boxshadow-outset</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>:-<span class="number">4px</span> <span class="number">4px</span> <span class="number">6px</span> <span class="number">#666</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223122.png" alt="X负数"></p><p>Y轴偏移量为负数：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.boxshadow-outset</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>:<span class="number">4px</span> -<span class="number">4px</span> <span class="number">6px</span> <span class="number">#666</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223130.png" alt="Y负数"></p><h3 id="为边框应用图片-border-image"><a href="#为边框应用图片-border-image" class="headerlink" title="为边框应用图片 border-image"></a>为边框应用图片 border-image</h3><p>顾名思义就是为边框应用背景图片，它和我们常用的background属性比较相似。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">xx.jpg</span>) <span class="number">10px</span> <span class="number">20px</span> no-repeat;</span><br></pre></td></tr></table></figure><p>但是又比背景图片复杂一些。可以理解为它是一个切片工具，会自动把用做边框的图片切割。怎么切割呢？为了方便理解，做了一张特殊的图片，由9个矩形（70<em>70像素）拼成的一张图（210</em>210像素），并标注好序号，是不是像传说中的九宫图，如下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223139.png" alt="九宫格"></p><p>根据border-image的语法：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223145.png" alt="语法"></p><p>我们把上图当作边框图片 来应用一下， 看一看是什么效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#border-image</span>&#123;</span><br><span class="line">   <span class="attribute">background</span>:<span class="number">#F4FFFA</span>;</span><br><span class="line">   <span class="attribute">width</span>:<span class="number">210px</span>; <span class="attribute">height</span>:<span class="number">210px</span>; <span class="attribute">border</span>:<span class="number">70px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">   <span class="attribute">border-image</span>:<span class="built_in">url</span>(<span class="string">borderimg.png</span>) <span class="number">70</span> repeat  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223151.png" alt="效果"></p><p>从序号可以看出div的四个角分别对应了背景图片的四个角。而2,4,6,8 被重复。5在哪？因为是从四周向中心切割图片的所以，5显示不出来。而在chrome浏览器中5是存在的，下图的样子：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223230.png" alt="Chrome"></p><p><code>repeat</code>的意思就是重复，目前因为是刚好被整除，效果看不出来。如果改下<code>div</code>的宽高，再来看重复的效果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223245.png" alt="重复"></p><p>边角部分为裁掉了，可见<code>repeat</code>就是一直重复，然后超出部分剪裁掉，而且是居中开始重复。</p><h4 id="Round-参数"><a href="#Round-参数" class="headerlink" title="Round 参数"></a>Round 参数</h4><p>Round可以理解为圆满的铺满。为了实现圆满所以会压缩（或拉伸）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#border-image</span> &#123;</span><br><span class="line">     <span class="attribute">width</span>:<span class="number">170px</span>;</span><br><span class="line">     <span class="attribute">height</span>:<span class="number">170px</span>;</span><br><span class="line">     <span class="attribute">border</span>:<span class="number">70px</span> solid;</span><br><span class="line">     <span class="attribute">border-image</span>:<span class="built_in">url</span>(<span class="string">borderimg.png</span>) <span class="number">70</span> round;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223253.png" alt="Round"></p><p>可见图片被压扁了。</p><h4 id="Stretch参数"><a href="#Stretch参数" class="headerlink" title="Stretch参数"></a>Stretch参数</h4><p>Stretch 很好理解就是拉伸，有多长拉多长。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-image</span>:<span class="built_in">url</span>(<span class="string">borderimg.png</span>) <span class="number">70</span> stretch</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223408.png" alt="Stretch"></p><blockquote><p>Chrome下，中间部分也会被拉伸，webkit浏览器对于round属性和repeat属性似乎没有区分，显示效果是一样的。</p><p>Firefox 26.0 下是可以准确区分的。</p></blockquote><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>边框图片<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#border_image</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>:<span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">line-height</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>:<span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">450px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">15px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-image</span>:<span class="built_in">url</span>(<span class="string">http://img.mukewang.com/52e22a1c0001406e03040221.jpg</span>)  <span class="number">10</span> repeat;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;border_image&quot;</span>&gt;</span></span><br><span class="line">请为我镶嵌上漂亮的画框吧</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223415.jpg"></p><p>效果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223419.png" alt="效果"></p><h2 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h2><h3 id="颜色之RGBA"><a href="#颜色之RGBA" class="headerlink" title="颜色之RGBA"></a>颜色之RGBA</h3><p><code>RGB</code>是一种色彩标准，是由红<code>R</code>、绿<code>G</code>、蓝<code>B</code>的变化以及相互叠加来得到各式各样的颜色。<code>RGBA</code>是在<code>RGB</code>的基础上增加了控制<code>alpha</code>透明度的参数。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">color</span>：rgba(R,G,<span class="selector-tag">B</span>,<span class="selector-tag">A</span>);</span><br></pre></td></tr></table></figure><p><code>R、G、B</code>三个参数，正整数值的取值范围为：<code>0 - 255</code>。百分数值的取值范围为：<code>0.0% - 100.0%</code>。超出范围的数值将被截至其最接近的取值极限。并非所有浏览器都支持使用百分数值。A为透明度参数，取值在<code>0~1</code>之间，不可为负值。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>RGBA colors<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span>&#123;<span class="attribute">background</span>: black;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>:<span class="number">42px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-weight</span>:bold;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>:<span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.5</span>);</span></span><br><span class="line"><span class="language-css">&#125; </span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>背景是半透明的<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223428.png" alt="半透明"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223432.png" alt="不透明"></p><h3 id="渐变色"><a href="#渐变色" class="headerlink" title="渐变色"></a>渐变色</h3><p><code>CSS3 Gradient</code>分为线性渐变<code>(linear)</code>和径向渐变<code>(radial)</code>。由于不同的渲染引擎实现渐变的语法不同，这里只针对线性渐变的 W3C 标准语法来分析其用法，其余可以查阅相关资料。W3C 语法已经得到了 IE10+、Firefox19.0+、Chrome26.0+ 和 Opera12.1+等浏览器的支持。</p><p>线性渐变：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223437.png" alt="语法"></p><p>第一个参数: 指定渐变方向，可以用<code>角度</code>的关键词或<code>英文</code>来表示：</p><table><thead><tr><th align="center">角度</th><th align="center">英文</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">0deg</td><td align="center">to top</td><td align="center">从下到上</td></tr><tr><td align="center">90deg</td><td align="center">to right</td><td align="center">从左到右</td></tr><tr><td align="center">180deg</td><td align="center">to bottom</td><td align="center">从上到下</td></tr><tr><td align="center">270deg</td><td align="center">to left</td><td align="center">从右到左</td></tr><tr><td align="center"></td><td align="center">to top left</td><td align="center">从右下角到左上角</td></tr><tr><td align="center"></td><td align="center">to top right</td><td align="center">从左下角到右上角</td></tr></tbody></table><p>第一个参数省略时，默认为“180deg”，等同于“to bottom”。第二个和第三个参数，表示颜色的起始点和结束点，可以有多个颜色值。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to left, red, orange,yellow,green,blue,indigo,violet);</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223444.png" alt="从右到左效果"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to top left,red,orange,yellow,green,blue,indigo,violet);</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223449.png" alt="从右下角到左上角效果图"></p><h2 id="文字与字体"><a href="#文字与字体" class="headerlink" title="文字与字体"></a>文字与字体</h2><h3 id="text-overflow-word-wrap"><a href="#text-overflow-word-wrap" class="headerlink" title="text-overflow&#x2F;word-wrap"></a>text-overflow&#x2F;word-wrap</h3><p><code>text-overflow</code>用来设置是否使用一个省略标记<code>（...）</code>标示对象内文本的溢出。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223524.jpg" alt="语法"></p><p>但是<code>text-overflow</code>只是用来说明文字溢出时用什么方式显示，要实现溢出时产生省略号的效果，还须定义强制文本在一行内显示<code>（white-space:nowrap）</code>及溢出内容为隐藏<code>（overflow:hidden）</code>，只有这样才能实现溢出文本显示省略号的效果，代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-overflow</span>: ellipsis; </span><br><span class="line"><span class="attribute">overflow</span>: hidden; </span><br><span class="line"><span class="attribute">white-space</span>: nowrap; </span><br></pre></td></tr></table></figure><p>同时，<code>word-wrap</code>也可以用来设置文本行为，当前行超过指定容器的边界时是否断开转行。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223531.jpg" alt="语法"></p><p><code>normal</code>为浏览器默认值，<code>break-word</code>设置在长单词或 URL地址内部进行换行，此属性不常用，用浏览器默认值即可。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>text-overflow<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.test_demo</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-overflow</span>:clip ellipsis; </span></span><br><span class="line"><span class="language-css">    <span class="attribute">overflow</span>:hidden; </span></span><br><span class="line"><span class="language-css">    <span class="attribute">white-space</span>:nowrap; </span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>:<span class="number">200px</span>; </span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>:<span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;test_demo&quot;</span>&gt;</span></span><br><span class="line">  测试测试测试测试测试（我是省略号）</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223539.png" alt="省略之前"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223543.png" alt="省略之后"></p><h3 id="嵌入字体-font-face"><a href="#嵌入字体-font-face" class="headerlink" title="嵌入字体@font-face"></a>嵌入字体@font-face</h3><p><code>@font-face</code>能够加载服务器端的字体文件，让浏览器端可以显示用户电脑里没有安装的字体。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="comment">/*字体名称*/</span>;</span><br><span class="line">    <span class="attribute">src</span>: <span class="comment">/*字体文件在服务器上的相对或绝对路径*/</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置之后，就可以像使用普通字体一样在<strong>（font-*）</strong>中设置字体样式。例如:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span> :<span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">font-family</span> : <span class="string">&quot;My Font&quot;</span>;</span><br><span class="line">    <span class="comment">/*必须项，设置@font-face中font-family同样的值*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文本阴影text-shadow"><a href="#文本阴影text-shadow" class="headerlink" title="文本阴影text-shadow"></a>文本阴影text-shadow</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-shadow</span>: X-Offset Y-Offset blur color;</span><br></pre></td></tr></table></figure><blockquote><p>X-Offset：表示阴影的水平偏移距离，其值为正值时阴影向右偏移，反之向左偏移；      </p><p>Y-Offset：是指阴影的垂直偏移距离，如果其值是正值时，阴影向下偏移，反之向上偏移；</p><p>Blur：是指阴影的模糊程度，其值不能是负值，如果值越大，阴影越模糊，反之阴影越清晰，如果不需要阴影模糊可以将Blur值设置为0；</p><p>Color：是指阴影的颜色，其可以使用rgba色。</p></blockquote><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>text-shadow<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.demo</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">340px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font</span>: bold <span class="number">55px</span>/<span class="number">100%</span> <span class="string">&quot;微软雅黑&quot;</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: <span class="number">#C5DFF8</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-shadow</span>: <span class="number">2px</span> <span class="number">2px</span> <span class="number">0</span> red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span>测试ceshi<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223553.png" alt="效果"></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h3 id="background-origin"><a href="#background-origin" class="headerlink" title="background-origin"></a>background-origin</h3><p>设置元素背景图片的原始起始位置。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-origin</span>： <span class="attribute">border</span>-box | <span class="attribute">padding</span>-box | <span class="attribute">content</span>-box;</span><br></pre></td></tr></table></figure><p>参数分别表示背景图片是从<code>边框</code>，还是<code>内边距（默认值）</code>，或者是<code>内容区域</code>开始显示。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223559.png" alt="效果"></p><blockquote><p>需要注意的是，如果背景不是<code>no-repeat</code>，这个属性无效，它会从边框开始显示。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>背景原点<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.wrap</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>:<span class="number">220px</span>; </span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>:<span class="number">20px</span> dashed <span class="number">#000</span>; </span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>:<span class="number">20px</span>; </span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-weight</span>:bold; </span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>:<span class="number">#000</span>; </span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>:<span class="number">#ccc</span> <span class="built_in">url</span>() no-repeat; </span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-origin</span>: content-box;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.wrap</span> <span class="selector-tag">span</span> &#123; </span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: absolute; </span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>:<span class="number">0</span>; </span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>:<span class="number">80px</span>; </span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>padding<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223605.png" alt="效果"></p><h3 id="background-clip"><a href="#background-clip" class="headerlink" title="background-clip"></a>background-clip</h3><p>用来将背景图片做适当的裁剪以适应实际需要。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-clip</span>： <span class="attribute">border</span>-box | <span class="attribute">padding</span>-box | <span class="attribute">content</span>-box | no-<span class="attribute">clip</span></span><br></pre></td></tr></table></figure><p>参数分别表示从边框、或内填充，或者内容区域向外裁剪背景。<code>no-clip</code>表示不裁切，和参数<code>border-box</code>显示同样的效果。<code>backgroud-clip</code>默认值为<code>border-box</code>。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223612.png" alt="效果"></p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>背景裁切<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.wrap</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>:<span class="number">220px</span>; </span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>:<span class="number">20px</span> dashed <span class="number">#000</span>; </span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>:<span class="number">20px</span>; </span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-weight</span>:bold; </span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>:<span class="number">#000</span>; </span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>:<span class="number">#ccc</span> <span class="built_in">url</span>() no-repeat; </span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-origin</span>: border-box;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-clip</span>: padding-box;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.wrap</span> <span class="selector-tag">span</span> &#123; </span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: absolute; </span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>:<span class="number">0</span>; </span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>:<span class="number">80px</span>; </span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>padding<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223623.png" alt="效果"></p><h3 id="background-size"><a href="#background-size" class="headerlink" title="background-size"></a>background-size</h3><p>设置背景图片的大小，以长度值或百分比显示，还可以通过<code>cover</code>和<code>contain</code>来对图片进行伸缩。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-size</span>: auto | &lt;长度值&gt; | &lt;百分比&gt; | cover | contain</span><br></pre></td></tr></table></figure><blockquote><p><code>auto</code>：默认值，不改变背景图片的原始高度和宽度；</p><p><code>&lt;长度值&gt;</code>：成对出现如200px 50px，将背景图片宽高依次设置为前面两个值，当设置一个值时，将其作为图片宽度值来等比缩放；</p><p><code>&lt;百分比&gt;</code>：0％~100％之间的任何值，将背景图片宽高依次设置为所在元素宽高乘以前面百分比得出的数值，当设置一个值时同上；</p><p><code>cover</code>：顾名思义为覆盖，即将背景图片等比缩放以填满整个容器；</p><p><code>contain</code>：容纳，即将背景图片等比缩放至某一边紧贴容器边缘为止。</p></blockquote><h3 id="multiple-backgrounds"><a href="#multiple-backgrounds" class="headerlink" title="multiple backgrounds"></a>multiple backgrounds</h3><p>多重背景，也就是CSS2里<code>background</code>的属性外加<code>origin</code>、<code>clip</code>和<code>size</code>组成的新<code>background</code>的多次叠加，缩写时为用逗号隔开的每组值；用分解写法时，如果有多个背景图片，而其他属性只有一个（例如background-repeat只有一个），表明所有背景图片应用该属性值。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span> ： <span class="selector-attr">[background-color]</span> | <span class="selector-attr">[background-image]</span> | <span class="selector-attr">[background-position]</span><span class="selector-attr">[/background-size]</span> | <span class="selector-attr">[background-repeat]</span> | <span class="selector-attr">[background-attachment]</span> | <span class="selector-attr">[background-clip]</span> | <span class="selector-attr">[background-origin]</span>,...</span><br></pre></td></tr></table></figure><p>其他属性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-repeat</span> : repeat1,repeat2,...,repeatN;</span><br><span class="line">backround-<span class="attribute">position</span> : position1,position2,...,positionN;</span><br><span class="line"><span class="attribute">background-size</span> : size1,size2,...,sizeN;</span><br><span class="line"><span class="attribute">background-attachment</span> : attachment1,attachment2,...,attachmentN;</span><br><span class="line"><span class="attribute">background-clip</span> : clip1,clip2,...,clipN;</span><br><span class="line"><span class="attribute">background-origin</span> : origin1,origin2,...,originN;</span><br><span class="line"><span class="attribute">background-color</span> : color;</span><br></pre></td></tr></table></figure><blockquote><p>用逗号隔开每组 <code>background </code>的缩写值；</p><p>如果有 <code>size </code>值，需要紧跟 <code>position</code> 并且用 <code>/</code>隔开；</p><p>如果有多个背景图片，而其他属性只有一个（例如 <code>background-repeat </code>只有一个），表明所有背景图片应用该属性值。</p><p><code>background-color</code> 只能设置一个。</p></blockquote><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>多重背景<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.demo</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">140px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#999</span>;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">https://laugh0608.oss-cn-beijing.aliyuncs.com/wenZhang/cssJiChu/15.png</span>),</span></span><br><span class="line"><span class="language-css">                      <span class="built_in">url</span>(<span class="string">https://laugh0608.oss-cn-beijing.aliyuncs.com/wenZhang/cssJiChu/16.png</span>),</span></span><br><span class="line"><span class="language-css">                      <span class="built_in">url</span>(<span class="string">https://laugh0608.oss-cn-beijing.aliyuncs.com/wenZhang/cssJiChu/18.png</span>);</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-position</span>: left top, <span class="number">100px</span> <span class="number">0</span>, <span class="number">200px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-repeat</span>: no-repeat, no-repeat, no-repeat;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">20px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;task&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223652.png" alt="1"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223657.png" alt="2"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223701.png" alt="3"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223712.png" alt="效果"></p><h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><p>在HTML中，通过各种各样的属性可以给元素增加很多附加的信息。例如，通过id属性可以将不同div元素进行区分。在CSS2中引入了一些属性选择器，而CSS3在CSS2的基础上对属性选择器进行了扩展，新增了3个属性选择器，使得属性选择器有了通配符的概念，这三个属性选择器与CSS2的属性选择器共同构成了CSS功能强大的属性选择器。如下表所示：</p><table><thead><tr><th>属性选择器</th><th>功能</th></tr></thead><tbody><tr><td>E[att^&#x3D;”val”]</td><td>选择匹配元素<code>E</code>，且<code>E</code>元素定义了属性<code>att</code>，其属性值以<code>val</code>开头的任意字符串</td></tr><tr><td>E[att$&#x3D;”val”]</td><td>选择匹配元素<code>E</code>，且<code>E</code>元素定义了属性<code>att</code>，其属性值以<code>val</code>结尾的任意字符串</td></tr><tr><td>E[att*&#x3D;”val”]</td><td>选择匹配元素<code>E</code>，且<code>E</code>元素定义了属性<code>att</code>，其属性值包含了<code>val</code>的任意字符串</td></tr></tbody></table><p>示例：</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;xxx.pdf&quot;</span>&gt;</span>我链接的是PDF文件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span>&gt;</span>我类名是icon<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">title</span>=<span class="string">&quot;我的title是more&quot;</span>&gt;</span>我的title是more<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[class^=icon]</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: green;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href$=pdf]</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: orange;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[title*=more]</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: blue;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223726.jpg" alt="效果"></p><h3 id="root"><a href="#root" class="headerlink" title="root"></a>root</h3><p><code>:root</code>选择器，从字面上我们就可以很清楚的理解是根选择器，他的意思就是匹配元素E所在文档的根元素。在HTML文档中，根元素始终是<code>&lt;html&gt;</code>。</p><p>示例：通过<code>:root</code>选择器设置背景颜色：</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>:root选择器的演示<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>:orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223731.png" alt="效果"></p><p><code>:root</code>选择器等同于<code>&lt;html&gt;</code>元素，简单点说：<code>:root&#123;background:orange&#125;</code> 和 <code>html &#123;background:orange;&#125;</code>得到的效果等同。建议使用<code>:root</code>方法。另外在IE９以下还可以借助<code>:root</code>实现<code>hack</code>功能。</p><h3 id="not"><a href="#not" class="headerlink" title="not"></a>not</h3><p><code>:not</code>选择器称为否定选择器，和jQuery中的<code>:not</code>选择器一模一样，可以选择除某个元素之外的所有元素。就拿<code>form</code>元素来说，比如说你想给表单中除<code>submit</code>按钮之外的<code>input</code>元素添加红色边框，CSS代码可以写成：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">form</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:not</span>(<span class="selector-attr">[type=<span class="string">&quot;submit&quot;</span>]</span>)&#123;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>Text Input:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;John Smith&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>Password Input:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;John Smith&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223737.png" alt="效果"></p><h3 id="empty"><a href="#empty" class="headerlink" title="empty"></a>empty</h3><p><code>:empty</code>选择器表示的就是空。用来选择没有任何内容的元素，这里没有内容指的是一点内容都没有，哪怕是一个空格。</p><p>比如说，你的文档中有三个段落<code>p</code>元素，你想把没有任何内容的<code>p</code>元素隐藏起来。我们就可以使用<code>:empty</code>选择器来控制。</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line"> <span class="attribute">background</span>: orange;</span><br><span class="line"> <span class="attribute">min-height</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:empty</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223744.png" alt="效果"></p><h3 id="target"><a href="#target" class="headerlink" title="target"></a>target</h3><p><code>:target</code>选择器称为目标选择器，用来匹配文档(页面)的url的某个标志符的目标元素。我们先来上个例子，然后再做分析：点击链接显示隐藏的段落</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#brand&quot;</span>&gt;</span>Brand<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menuSection&quot;</span> <span class="attr">id</span>=<span class="string">&quot;brand&quot;</span>&gt;</span></span><br><span class="line">    content for Brand</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.menuSection</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-pseudo">:target</span>&#123;<span class="comment">/*这里的:target就是指id=&quot;brand&quot;的div对象*/</span></span><br><span class="line">  <span class="attribute">display</span>:block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223751.jpg" alt="效果"></p><blockquote><p><strong>分析：</strong></p><p>1、具体来说，触发元素的URL中的标志符通常会包含一个<code>#</code>号，后面带有一个标志符名称，上面代码中是：<code>#brand</code></p><p>2、<code>:target</code>就是用来匹配<code>id</code>为<code>brand</code>的元素（id&#x3D;”brand”的元素）,上面代码中是那个<code>div</code>元素。</p></blockquote><p>多个url（多个target）处理：</p><p>就像上面的例子，#brand与后面的id&#x3D;”brand”是对应的，当同一个页面上有很多的url的时候你可以取不同的名字，只要#号后对的名称与id&#x3D;””中的名称对应就可以了。  如下面例子：  </p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#brand&quot;</span>&gt;</span>Brand<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menuSection&quot;</span> <span class="attr">id</span>=<span class="string">&quot;brand&quot;</span>&gt;</span></span><br><span class="line">  content for Brand</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#jake&quot;</span>&gt;</span>Brand<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menuSection&quot;</span> <span class="attr">id</span>=<span class="string">&quot;jake&quot;</span>&gt;</span></span><br><span class="line"> content for jake</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#aron&quot;</span>&gt;</span>Brand<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menuSection&quot;</span> <span class="attr">id</span>=<span class="string">&quot;aron&quot;</span>&gt;</span></span><br><span class="line">    content for aron</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#brand</span><span class="selector-pseudo">:target</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: orange;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#jake</span><span class="selector-pseudo">:target</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: blue;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#aron</span><span class="selector-pseudo">:target</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码可以对不同的target对象分别设置不的样式。</p><p>示例：当点击链接后，段落<code>p</code>将添加橙色背景和白色文字。</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>结构性伪类选择器—target<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menuSection&quot;</span> <span class="attr">id</span>=<span class="string">&quot;brand&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#brand&quot;</span>&gt;</span>Brand<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>content for Brand<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#brand</span><span class="selector-pseudo">:target</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: orange;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223800.gif" alt="效果"></p><h3 id="first-child"><a href="#first-child" class="headerlink" title="first-child"></a>first-child</h3><p><code>:first-child</code>选择器表示的是选择父元素的第一个子元素的元素E。简单点理解就是选择元素中的第一个子元素，记住是子元素，而不是后代元素。 示例：通过<code>:first-child</code>选择器定位列表中的第一个列表项，并将序列号颜色变为红色</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;##&quot;</span>&gt;</span>Link1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;##&quot;</span>&gt;</span>Link2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;##&quot;</span>&gt;</span>link3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ol</span> &gt; <span class="selector-tag">li</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>:<span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ol</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ol</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-child&#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223807.png" alt="效果"></p><h3 id="last-child"><a href="#last-child" class="headerlink" title="last-child"></a>last-child</h3><p><code>:last-child</code>选择器与<code>:first-child</code>选择器作用类似，不同的是<code>:last-child</code>选择器选择的是元素的最后一个子元素。例如，需要改变的是列表中的最后一个<code>li</code>的背景色，就可以使用这个选择器：<code>ul&gt;li:last-child&#123;background:blue;&#125;</code></p><p>示例：在博客的排版中，每个段落都有<code>15px</code>的<code>margin-bottom</code>，假设不想让博客<code>post</code>中最后一个段落不需要底部的<code>margin</code>值，可以使用<code>:last-child</code>选择器</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>第一段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>第二段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>第三段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>第四段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>第五段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.post</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">15px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.post</span> <span class="selector-tag">p</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223813.png" alt="效果"></p><h3 id="nth-child-n"><a href="#nth-child-n" class="headerlink" title="nth-child(n)"></a>nth-child(n)</h3><p><code>:nth-child(n)</code>选择器用来定位某个父元素的一个或多个特定的子元素。其中<code>n</code>是其参数，而且可以是整数值<code>1,2,3,4</code>，也可以是表达式<code>2n+1、-n+5</code>和关键词<code>odd、even</code>，但参数<code>n</code>的起始值始终是<code>1</code>，而不是<code>0</code>。也就是说，参数<code>n</code>的值为<code>0</code>时，选择器将选择不到任何匹配的元素。</p><p>当<code>:nth-child(n)</code>选择器中的n为一个表达式时，其中<code>n</code>是从<code>0</code>开始计算，当表达式的值<code>为0</code>或<code>小于0</code>的时候，不选择任何匹配的元素。如下表所示：</p><table><thead><tr><th align="center">n</th><th align="center">2n+1</th><th align="center">4n+1</th><th align="center">4n+4</th><th align="center">4n</th><th align="center">5n-2</th><th align="center">-n+3</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">1</td><td align="center">1</td><td align="center">4</td><td align="center">-</td><td align="center">-</td><td align="center">3</td></tr><tr><td align="center">1</td><td align="center">3</td><td align="center">5</td><td align="center">8</td><td align="center">4</td><td align="center">3</td><td align="center">2</td></tr><tr><td align="center">2</td><td align="center">5</td><td align="center">9</td><td align="center">12</td><td align="center">8</td><td align="center">8</td><td align="center">1</td></tr><tr><td align="center">3</td><td align="center">7</td><td align="center">13</td><td align="center">16</td><td align="center">12</td><td align="center">13</td><td align="center">0</td></tr><tr><td align="center">4</td><td align="center">9</td><td align="center">17</td><td align="center">20</td><td align="center">16</td><td align="center">18</td><td align="center">-1</td></tr><tr><td align="center">5</td><td align="center">11</td><td align="center">21</td><td align="center">24</td><td align="center">20</td><td align="center">23</td><td align="center">-2</td></tr></tbody></table><p>示例：通过<code>:nth-child(n)</code>选择器，并且参数使用表达式<code>2n</code>，将偶数行列表背景色设置为橙色</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item7<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item8<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item9<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item10<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ol</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>n)&#123;</span><br><span class="line">  <span class="attribute">background</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223820.png" alt="效果"></p><h3 id="nth-last-child-n"><a href="#nth-last-child-n" class="headerlink" title="nth-last-child(n)"></a>nth-last-child(n)</h3><p><code>:nth-last-child(n)</code>选择器和前面的<code>:nth-child(n)</code>选择器非常的相似，只是这里多了一个<code>last</code>，所起的作用和<code>:nth-child(n)</code>选择器有所区别，从某父元素的最后一个子元素开始计算，来选择特定的元素。</p><p>示例：选择列表中倒数第五个列表项，将其背景设置为橙色</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item7<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item8<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item9<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item10<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item11<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item12<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item13<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item14<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item15<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ol</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:nth-last-child</span>(<span class="number">5</span>)&#123;</span><br><span class="line">  <span class="attribute">background</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223827.png" alt="效果"></p><h3 id="first-of-type"><a href="#first-of-type" class="headerlink" title="first-of-type"></a>first-of-type</h3><p><code>:first-of-type</code>选择器类似于“:first-child”选择器，不同之处就是指定了元素的类型，其主要用来定位一个父元素下的某个类型的第一个子元素。示例：通过<code>:first-of-type</code>选择器，定位<code>div</code>容器中的第一个<code>p</code>元素（<code>p</code>不一定是容器中的第一个子元素），并设置其背景色为橙色</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是一个块元素，我是.wrapper的第一个子元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个段落元素，我是不是.wrapper的第一个子元素，但是他的第一个段落元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个段落元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是一个块元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrapper</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrapper</span> &gt; <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*我要改变第一个段落的背景为橙色*/</span></span><br><span class="line"><span class="selector-class">.wrapper</span> &gt; <span class="selector-tag">p</span><span class="selector-pseudo">:first</span>-of-type &#123;</span><br><span class="line">  <span class="attribute">background</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223834.png" alt="效果"></p><h3 id="nth-of-type-n"><a href="#nth-of-type-n" class="headerlink" title="nth-of-type(n)"></a>nth-of-type(n)</h3><p><code>:nth-of-type(n)</code>选择器和<code>:nth-child(n)</code>选择器非常类似，不同的是它只计算父元素中指定的某种类型的子元素。当某个元素中的子元素不单单是同一种类型的子元素时，使用<code>:nth-of-type(n)</code>选择器来定位于父元素中某种类型的子元素是非常方便和有用的。在<code>:nth-of-type(n)</code>选择器中的<code>n</code>和<code>:nth-child(n)</code>选择器中的n参数也一样，可以是具体的整数，也可以是表达式，还可以是关键词。</p><p>示例：通过<code>:nth-of-type(2n)</code>选择器，将容器<code>div.wrapper</code>中偶数段数的背景设置为橙色</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是一个Div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个段落元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是一个Div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是一个Div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是一个Div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是一个Div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是一个Div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是一个Div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是一个Div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &gt; <span class="selector-tag">p</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>n)&#123;</span><br><span class="line">  <span class="attribute">background</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223840.png" alt="效果"></p><h3 id="last-of-type"><a href="#last-of-type" class="headerlink" title="last-of-type"></a>last-of-type</h3><p><code>:last-of-type</code>选择器和<code>:first-of-type</code>选择器功能是一样的，不同的是他选择是父元素下的某个类型的最后一个子元素。</p><p>示例：通过<code>:last-of-type</code>选择器，将容器<code>div.wrapper</code>中最后一个段落元素背景设置为橙色（注：这个段落不是<code>div.wrapper</code>容器的最后一个子元素）。</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是第一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是第二个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是第三个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是第一个Div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是第二个Div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是第三个Div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &gt; <span class="selector-tag">p</span><span class="selector-pseudo">:last-of-type</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223847.png" alt="效果"></p><h3 id="nth-last-of-type-n"><a href="#nth-last-of-type-n" class="headerlink" title="nth-last-of-type(n)"></a>nth-last-of-type(n)</h3><p><code>:nth-last-of-type(n)</code>选择器和<code>:nth-of-type(n)</code>选择器是一样的，选择父元素中指定的某种子元素类型，但它的起始方向是从最后一个子元素开始，而且它的使用方法类似于上节中介绍的<code>:nth-last-child(n)</code>选择器一样。</p><p>示例：通过<code>:nth-last-of-type(n)</code>选择器将容器<code>div.wrapper</code>中的倒数第三个段落背景设置为橙色</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是第一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是第二个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是第三个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是第四个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是第五个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是一个Div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是第六个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是第七个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &gt; <span class="selector-tag">p</span><span class="selector-pseudo">:nth-last-of-type</span>(<span class="number">3</span>)&#123;</span><br><span class="line">  <span class="attribute">background</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223853.png" alt="效果"></p><h3 id="only-child"><a href="#only-child" class="headerlink" title="only-child"></a>only-child</h3><p><code>:only-child</code>选择器选择的是父元素中只有一个子元素，而且只有唯一的一个子元素。也就是说，匹配的元素的父元素中仅有一个子元素，而且是一个唯一的子元素。</p><p>示例：通过:only-child选择器，来控制仅有一个子元素的背景样式，为了更好的理解，这个示例通过对比的方式来演示</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: green;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.post</span> <span class="selector-tag">p</span><span class="selector-pseudo">:only-child</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223859.png" alt="效果"></p><h3 id="only-of-type"><a href="#only-of-type" class="headerlink" title="only-of-type"></a>only-of-type</h3><p><code>:only-of-type</code>选择器用来选择一个元素是它的父元素的唯一一个相同类型的子元素。这样说或许不太好理解，换一种说法。<code>:only-of-type</code>是表示一个元素他有很多个子元素，而其中只有一种类型的子元素是唯一的，使用<code>:only-of-type</code>选择器就可以选中这个元素中的唯一一个类型子元素。</p><p>示例：通过<code>:only-of-type</code>选择器来修改容器中仅有一个<code>div</code>元素的背景色为橙色</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是一个Div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是一个Div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是一个列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &gt; <span class="selector-tag">div</span><span class="selector-pseudo">:only-of-type</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223904.png" alt="效果"></p><h3 id="enabled"><a href="#enabled" class="headerlink" title=":enabled"></a>:enabled</h3><p>在Web的表单中，有些表单元素有可用<code>:enabled</code>和不可用<code>:disabled</code>状态，比如输入框，密码框，复选框等。在默认情况之下，这些表单元素都处在可用状态。那么我们可以通过伪选择器<code>:enabled</code>对这些表单元素设置样式。</p><p>示例：通过<code>:enabled</code>选择器，修改文本输入框的边框为2像素的红色边框，并设置它的背景为灰色</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>Text Input:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;可用输入框&quot;</span>  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>Text Input:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;禁用输入框&quot;</span>  <span class="attr">disabled</span>=<span class="string">&quot;disabled&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span><span class="selector-pseudo">:enabled</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223910.png" alt="效果"></p><h3 id="disabled"><a href="#disabled" class="headerlink" title=":disabled"></a>:disabled</h3><p><code>:disabled</code>选择器刚好与<code>:enabled</code>选择器相反，用来选择不可用表单元素。要正常使用<code>:disabled</code>选择器，需要在表单元素的HTML中设置<code>disabled</code>属性。</p><p>示例：通过<code>:disabled</code>选择器，给不可用输入框设置明显的样式</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;我是可用输入框&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;我是不可用输入框&quot;</span> <span class="attr">disabled</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">form</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid orange;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span><span class="selector-pseudo">:disabled</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">15</span>);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">15</span>);</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">15</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223915.png" alt="效果"></p><h3 id="checked"><a href="#checked" class="headerlink" title=":checked"></a>:checked</h3><p>在表单元素中，单选按钮和复选按钮都具有选中和未选中状态。在CSS3中，我们可以通过状态选择器<code>:checked</code>配合其他标签实现自定义样式。而<code>:checked</code>表示的是选中状态。</p><p>示例：通过<code>:checked</code>状态来自定义复选框效果</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> <span class="attr">id</span>=<span class="string">&quot;usename&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>√<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">&quot;usename&quot;</span>&gt;</span>我是选中状态<span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>  <span class="attr">id</span>=<span class="string">&quot;usepwd&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>√<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;usepwd&quot;</span>&gt;</span>我是未选中状态<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">form</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">30px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid orange;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">font-family</span>: Arial;</span><br><span class="line">  -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">30deg</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">30deg</span>);</span><br><span class="line">  <span class="attribute">color</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;checkbox&quot;</span>]</span> + <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;checkbox&quot;</span>]</span><span class="selector-pseudo">:checked</span> + <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223923.png" alt="效果"></p><h3 id="selection"><a href="#selection" class="headerlink" title="::selection"></a>::selection</h3><p><code>::selection</code>伪元素是用来匹配突出显示的文本(用鼠标选择文本时的文本)。浏览器默认情况下，用鼠标选择网页文本是以“深蓝的背景，白色的字体”显示的，效果如下图所示：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223927.jpg" alt="效果"></p><p>从上图中可以看出，用鼠标选中“专注IT、互联网技术”、“纯干货、学以致用”、“没错、这是免费的”这三行文本中，默认显示样式为：蓝色背景、白色文本。有的时候设计要求,不使用上图那种浏览器默认的突出文本效果，需要一个与众不同的效果，此时<code>::selection</code>伪元素就非常的实用。不过在Firefox浏览器还需要添加前缀。</p><p>示例：通过<code>::selection</code>选择器，将Web中选中的文本背景变成红色，文本变成绿色</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>::selection伪元素是用来匹配突出显示的文本。浏览器默认情况下，选择网站文本是深蓝的背景，白色的字体<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">::-moz-selection &#123;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-pseudo">::selection</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223933.jpg" alt="效果"></p><blockquote><p>1、IE9+、Opera、Google Chrome 以及 Safari 中支持 ::selection 选择器</p><p>2、Firefox 支持替代的 ::-moz-selection</p></blockquote><h3 id="read-only"><a href="#read-only" class="headerlink" title=":read-only"></a>:read-only</h3><p><code>:read-only</code>伪类选择器用来指定处于只读状态元素的样式。简单点理解就是，元素中设置了<code>readonly=’readonly’</code></p><p>示例：通过<code>:read-only</code>选择器来设置地址文本框的样式</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>姓名:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;test&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;address&quot;</span>&gt;</span>地址:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;test test&quot;</span> <span class="attr">readonly</span>=<span class="string">&quot;readonly&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">form</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">form</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span>&#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid orange;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span>:-moz-read-only&#123;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span><span class="selector-pseudo">:read-only</span>&#123;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223942.png" alt="效果"></p><h3 id="read-write"><a href="#read-write" class="headerlink" title=":read-write"></a>:read-write</h3><p><code>:read-write</code>选择器刚好与<code>:read-only</code>选择器相反，主要用来指定当元素处于非只读状态时的样式</p><p>示例：使用<code>:read-write</code>选择器来设置不是只读控件的文本框样式</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>姓名:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;test&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;address&quot;</span>&gt;</span>地址:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;test test&quot;</span> <span class="attr">readonly</span>=<span class="string">&quot;readonly&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">form</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">form</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span>&#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid orange;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span>:-moz-read-only&#123;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span><span class="selector-pseudo">:read-only</span>&#123;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span>:-moz-read-write&#123;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#f36</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span><span class="selector-pseudo">:read-write</span>&#123;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#f36</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223951.png" alt="效果"></p><h3 id="before-after"><a href="#before-after" class="headerlink" title="::before&#x2F;::after"></a>::before&#x2F;::after</h3><p><code>::before</code>和<code>::after</code>这两个主要用来给元素的前面或后面插入内容，这两个常和<code>content</code>配合使用，使用的场景最多的就是清除浮动</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;.&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;<span class="attribute">clear</span>: both;&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;zoom: <span class="number">1</span>;&#125;</span><br></pre></td></tr></table></figure><p>当然可以利用他们制作出其他更好的效果，比如右侧中的阴影效果，也是通过这个来实现的。</p><p>关键代码分析：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.effect</span><span class="selector-pseudo">::before</span>, <span class="selector-class">.effect</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">z-index</span>:-<span class="number">1</span>;</span><br><span class="line">    -webkit-<span class="attribute">box-shadow</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">20px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.8</span>);</span><br><span class="line">    -moz-<span class="attribute">box-shadow</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">20px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.8</span>);</span><br><span class="line">    <span class="attribute">box-shadow</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">20px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.8</span>);</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">bottom</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">right</span>:<span class="number">10px</span>;</span><br><span class="line">    -moz-<span class="attribute">border-radius</span>:<span class="number">100px</span> / <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>:<span class="number">100px</span> / <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码作用在<code>class</code>名叫<code>.effect</code>上的<code>div</code>的前<code>before</code>后<code>after</code>都添加一个空元素，然后为这两个空元素添加阴影特效</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">utf-8</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>before、after<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span> <span class="selector-tag">h3</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">position</span>:relative;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">top</span>:<span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>:<span class="number">70%</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background</span>:<span class="number">#FFF</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin</span>:<span class="number">40px</span> auto;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.effect</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">position</span>:relative;       </span></span><br><span class="line"><span class="language-css">    -webkit-<span class="attribute">box-shadow</span>:<span class="number">0</span> <span class="number">1px</span> <span class="number">4px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>), <span class="number">0</span> <span class="number">0</span> <span class="number">40px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>) inset;</span></span><br><span class="line"><span class="language-css">   -moz-<span class="attribute">box-shadow</span>:<span class="number">0</span> <span class="number">1px</span> <span class="number">4px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>), <span class="number">0</span> <span class="number">0</span> <span class="number">40px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>) inset;</span></span><br><span class="line"><span class="language-css"><span class="attribute">box-shadow</span>:<span class="number">0</span> <span class="number">1px</span> <span class="number">4px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>), <span class="number">0</span> <span class="number">0</span> <span class="number">40px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>) inset;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.effect</span><span class="selector-pseudo">::before</span>, <span class="selector-class">.effect</span><span class="selector-pseudo">::after</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>:absolute; </span></span><br><span class="line"><span class="language-css"><span class="attribute">z-index</span>:-<span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">-webkit-<span class="attribute">box-shadow</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">20px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.8</span>);</span></span><br><span class="line"><span class="language-css">-moz-<span class="attribute">box-shadow</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">20px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.8</span>);</span></span><br><span class="line"><span class="language-css"><span class="attribute">box-shadow</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">20px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.8</span>);</span></span><br><span class="line"><span class="language-css"><span class="attribute">top</span>:<span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">bottom</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">left</span>:<span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">right</span>:<span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">-moz-<span class="attribute">border-radius</span>:<span class="number">100px</span> / <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border-radius</span>:<span class="number">100px</span> / <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box effect&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Shadow Effect <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720223959.png" alt="效果"></p><h2 id="变形与动画"><a href="#变形与动画" class="headerlink" title="变形与动画"></a>变形与动画</h2><h3 id="旋转-rotate"><a href="#旋转-rotate" class="headerlink" title="旋转 rotate()"></a>旋转 rotate()</h3><p>旋转rotate()函数通过指定的角度参数使元素相对原点进行旋转。它主要在二维空间内进行操作，设置一个角度值，用来指定旋转的幅度。如果这个值为正值，元素相对原点中心顺时针旋转；如果这个值为负值，元素相对原点中心逆时针旋转。如下图所示：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224004.png" alt="效果"></p><p>示例：</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> dotted red;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrapper</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>: orange;</span><br><span class="line">  -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224009.png" alt="效果"></p><p>示例：</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>变形与动画<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>我不想旋转(^_^)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> dotted blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrapper</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">background</span>: green;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">20deg</span>);</span><br><span class="line">  -moz-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">20deg</span>);</span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">rotate</span>(-<span class="number">20deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrapper</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>:block;</span><br><span class="line"> -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">20deg</span>);</span><br><span class="line"> -moz-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">20deg</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">20deg</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224017.png" alt="效果"></p><h3 id="扭曲-skew"><a href="#扭曲-skew" class="headerlink" title="扭曲 skew()"></a>扭曲 skew()</h3><p>扭曲<code>skew()</code>函数能够让元素倾斜显示。它可以将一个对象以其中心位置围绕着<code>X轴</code>和<code>Y轴</code>按照一定的角度倾斜。这与<code>rotate()</code>函数的旋转不同，<code>rotate()</code>函数只是旋转，而不会改变元素的形状。<code>skew()</code>函数不会旋转，而只会改变元素的形状。</p><p>Skew()具有三种情况：</p><ol><li><code>skew(x,y)</code>使元素在水平和垂直方向同时扭曲（X轴和Y轴同时按一定的角度值进行扭曲变形）</li></ol><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224110.png" alt="效果"></p><p>第一个参数对应<code>X轴</code>，第二个参数对应<code>Y轴</code>。如果第二个参数未提供，则值为0，也就是<code>Y轴</code>方向上无斜切。</p><ol start="2"><li><code>skewX(x)</code>仅使元素在水平方向扭曲变形（X轴扭曲变形）</li></ol><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224116.png" alt="效果"></p><ol start="3"><li><code>skewY(y)</code>仅使元素在垂直方向扭曲变形（Y轴扭曲变形）</li></ol><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224121.png" alt="效果"></p><p>示例：通过<code>skew()</code>函数将长方形变成平行四边形</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我变成平形四边形<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> dotted red;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">30px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrapper</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background</span>: orange;</span><br><span class="line">  -webkit-<span class="attribute">transform</span>: <span class="built_in">skew</span>(<span class="number">45deg</span>);</span><br><span class="line">  -moz-<span class="attribute">transform</span>:<span class="built_in">skew</span>(<span class="number">45deg</span>) </span><br><span class="line">  transform:<span class="built_in">skew</span>(<span class="number">45deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224127.png" alt="效果"></p><h3 id="缩放-scale"><a href="#缩放-scale" class="headerlink" title="缩放 scale()"></a>缩放 scale()</h3><p>缩放<code>scale()</code>函数让元素根据中心原点对对象进行缩放。缩放<code>scale</code>具有三种情况：</p><ol><li><code>scale(X,Y)</code>使元素水平方向和垂直方向同时缩放（也就是<code>X轴</code>和<code>Y轴</code>同时缩放）</li></ol><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224133.png" alt="效果"></p><p>例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.5</span>,<span class="number">0.5</span>);</span><br><span class="line">  -moz-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1.5</span>,<span class="number">0.5</span>)</span><br><span class="line">  transform: <span class="built_in">scale</span>(<span class="number">1.5</span>,<span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>Y</code>是一个可选参数，如果没有设置<code>Y</code>值，则表示<code>X</code>，<code>Y</code>两个方向的缩放倍数是一样的。</p></blockquote><ol start="2"><li><code>scaleX(x)</code>元素仅水平方向缩放（<code>X轴</code>缩放）</li></ol><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224138.png" alt="效果"></p><ol start="3"><li><code>scaleY(y)</code>元素仅垂直方向缩放（<code>Y轴</code>缩放）</li></ol><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224142.png" alt="效果"></p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我将放大1.5倍<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">2px</span> dashed red;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrapper</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>: orange;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrapper</span> <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: .<span class="number">5</span>;</span><br><span class="line">  -webkit-<span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.5</span>);</span><br><span class="line">  -moz-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1.5</span>)</span><br><span class="line">  transform: <span class="built_in">scale</span>(<span class="number">1.5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224148.png" alt="效果"></p><blockquote><p>注意：<code>scale()</code>的取值默认的值为1，当值设置为0.01到0.99之间的任何值，作用使一个元素缩小；而任何大于或等于1.01的值，作用是让元素放大。</p></blockquote><p>示例：让容器的鼠标滑过时的状态缩小0.8</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>变形与动画<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我将缩小0.8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">2px</span> dashed red;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrapper</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>: orange;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrapper</span> <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: .<span class="number">5</span>;</span><br><span class="line">  -webkit-<span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.8</span>);</span><br><span class="line">  -moz-<span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.8</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.8</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224157.gif" alt="效果"></p><h3 id="位移-translate"><a href="#位移-translate" class="headerlink" title="位移 translate()"></a>位移 translate()</h3><p><code>translate()</code>函数可以将元素向指定的方向移动，类似于<code>position</code>中的<code>relative</code>。或以简单的理解为，使用<code>translate()</code>函数，可以把元素从原来的位置移动，而不影响在<code>X</code>、<code>Y</code>轴上的任何Web组件。</p><p><code>translate</code>我们分为三种情况：</p><ol><li><code>translate(x,y)</code>水平方向和垂直方向同时移动（也就是<code>X</code>轴和<code>Y</code>轴同时移动）</li></ol><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224202.png" alt="效果"></p><ol start="2"><li><code>translateX(x)</code>仅水平方向移动（<code>X</code>轴移动）</li></ol><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224207.png" alt="效果"></p><ol start="3"><li><code>translateY(Y)</code>仅垂直方向移动（<code>Y</code>轴移动）</li></ol><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224213.png" alt="效果"></p><p>示例：通过<code>translate()</code>函数将元素向Y轴下方移动<code>50px</code>,X轴右方移动<code>100px</code></p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我向右向下移动<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> dotted red;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrapper</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">background</span>: orange;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  -webkit-<span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">50px</span>,<span class="number">100px</span>);</span><br><span class="line">  -moz-<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">50px</span>,<span class="number">100px</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">50px</span>,<span class="number">100px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224219.png" alt="效果"></p><p>垂直水平居中效果：</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>变形与动画<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">我不知道我的宽度和高是多少，我要实现水平垂直居中    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background</span>:orange;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">position</span>:absolute;</span><br><span class="line">  <span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  -webkit-<span class="attribute">transform</span>:<span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>);</span><br><span class="line">  -moz-<span class="attribute">transform</span>:<span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>);</span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224224.png" alt="垂直水平居中效果"></p><h3 id="矩阵-matrix"><a href="#矩阵-matrix" class="headerlink" title="矩阵 matrix()"></a>矩阵 matrix()</h3><p><code>matrix()</code>是一个含六个值的<code>(a,b,c,d,e,f)</code>变换矩阵，用来指定一个2D变换，相当于直接应用一个<code>[a  b c d e  f]</code>变换矩阵。就是基于水平方向<code>X轴</code>和垂直方向<code>Y轴</code>重新定位元素,此属性值使用涉及到数学中的矩阵，这里只是简单的说一下CSS3中的<code>transform</code>有这么一个属性值，如果需要深入了解，需要对线性代数的矩阵有一定了解。</p><p>示例：通过<code>matrix()</code>函数来模拟<code>transform</code>中<code>translate()</code>位移的效果</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> dotted red;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">40px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrapper</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>: orange;</span><br><span class="line">  -webkit-<span class="attribute">transform</span>: <span class="built_in">matrix</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line">  -moz-<span class="attribute">transform</span>:<span class="built_in">matrix</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">matrix</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224230.png" alt="效果"></p><h3 id="原点-transform-origin"><a href="#原点-transform-origin" class="headerlink" title="原点 transform-origin"></a>原点 transform-origin</h3><p>任何一个元素都有一个中心点，默认情况之下，其中心点是居于元素X轴和Y轴的50%处。如下图所示：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224233.png" alt="原点"></p><p>在没有重置<code>transform-origin</code>改变元素原点位置的情况下，CSS变形进行的旋转、位移、缩放，扭曲等操作都是以元素自己中心位置进行变形。但很多时候，我们可以通过<code>transform-origin</code>来对元素进行原点位置改变，使元素原点不在元素的中心位置，以达到需要的原点位置。</p><p><code>transform-origin</code>取值和元素设置背景中的<code>background-position</code>取值类似，如下表所示：</p><table><thead><tr><th align="center">关键词</th><th align="center">百分比</th></tr></thead><tbody><tr><td align="center">top &#x3D; top center &#x3D; center top</td><td align="center">50% 0</td></tr><tr><td align="center">right &#x3D; righr center &#x3D; center right</td><td align="center">100% &#x2F; (100% 50%)</td></tr><tr><td align="center">bottom &#x3D; bottom center &#x3D; center bottom</td><td align="center">50% 100%</td></tr><tr><td align="center">left &#x3D; left center &#x3D; center left</td><td align="center">0 &#x2F; (0 50%)</td></tr><tr><td align="center">center &#x3D; center center</td><td align="center">50% &#x2F; (50% 50%)</td></tr><tr><td align="center">top left &#x3D; left top</td><td align="center">0 0</td></tr><tr><td align="center">top right &#x3D; right top</td><td align="center">100% 0</td></tr><tr><td align="center">bottom right &#x3D; right bottom</td><td align="center">100% 100%</td></tr><tr><td align="center">bottom left &#x3D; left bottom</td><td align="center">0 100%</td></tr></tbody></table><p>示例：通过<code>transform-origin</code>改变元素原点到左上角，然后进行顺时旋转45度</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>原点在默认位置处<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper transform-origin&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>原点重置到左上角<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> dotted red;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrapper</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: orange;</span><br><span class="line">  -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.transform-origin</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">transform-origin</span>: left top;</span><br><span class="line">  <span class="attribute">transform-origin</span>: left top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224240.png" alt="效果"></p><h3 id="过渡属性-transition-property"><a href="#过渡属性-transition-property" class="headerlink" title="过渡属性 transition-property"></a>过渡属性 transition-property</h3><p>早期在Web中要实现动画效果，都是依赖于JavaScript或Flash来完成。但在CSS3中新增加了一个新的模块<code>transition</code>，它可以通过一些简单的CSS事件来触发元素的外观变化，让效果显得更加细腻。简单点说，就是通过鼠标的单击、获得焦点，被点击或对元素任何改变中触发，并平滑地以动画效果改变CSS的属性值。</p><blockquote><p>在CSS中创建简单的过渡效果可以从以下几个步骤来实现：</p><ol><li>在默认样式中声明元素的初始状态样式；</li><li>声明过渡元素最终状态样式，比如悬浮状态；</li><li>在默认样式中通过添加过渡函数，添加一些不同的样式。</li></ol></blockquote><p>CSS3的过度<code>transition</code>属性是一个复合属性，主要包括以下几个子属性：</p><ol><li><code>transition-property</code>:指定过渡或动态模拟的CSS属性</li><li><code>transition-duration</code>:指定完成过渡所需的时间</li><li><code>transition-timing-function</code>:指定过渡函数</li><li><code>transition-delay</code>:指定开始出现的延迟时间</li></ol><p><code>transition-property</code>用来指定过渡动画的CSS属性名称，而这个过渡属性只有具备一个中点值的属性（需要产生动画的属性）才能具备过渡效果，其对应具有过渡的CSS属性主要有：</p><table><thead><tr><th align="center">background-color</th><th align="center">background-position</th><th align="center">border-bottom-color</th><th align="center">boder-bottom-width</th></tr></thead><tbody><tr><td align="center">border-left-color</td><td align="center">border-left-width</td><td align="center">border-right-color</td><td align="center">border-right-width</td></tr><tr><td align="center">border-spacing</td><td align="center">border-top-color</td><td align="center">border-top-width</td><td align="center">bottom</td></tr><tr><td align="center">clip</td><td align="center">color</td><td align="center">font-size</td><td align="center">font-weight</td></tr><tr><td align="center">height</td><td align="center">left</td><td align="center">letter-spacing</td><td align="center">line-height</td></tr><tr><td align="center">margin-bottom</td><td align="center">margin-left</td><td align="center">margin-right</td><td align="center">margin-top</td></tr><tr><td align="center">max-height</td><td align="center">max-width</td><td align="center">min-height</td><td align="center">min-width</td></tr><tr><td align="center">opacity</td><td align="center">outline-color</td><td align="center">outline-width</td><td align="center">padding-bottom</td></tr><tr><td align="center">padding-left</td><td align="center">padding-right</td><td align="center">padding-top</td><td align="center">right</td></tr><tr><td align="center">text-indent</td><td align="center">text-shadow</td><td align="center">vertical-align</td><td align="center">visibility</td></tr><tr><td align="center">width</td><td align="center">word-spacing</td><td align="center">z-index</td><td align="center"></td></tr></tbody></table><p>HTML:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:red;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">  -webkit-<span class="attribute">transition</span>: background-color .<span class="number">5s</span> ease .<span class="number">1s</span>;</span><br><span class="line">  <span class="attribute">transition</span>: background-color .<span class="number">5s</span> ease .<span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224247.gif" alt="效果"></p><p>示例：</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>变形与动画<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">  -webkit-？: width;</span><br><span class="line">  <span class="attribute">transition-property</span>: width;</span><br><span class="line">  -webkit-<span class="attribute">transition-duration</span>:.<span class="number">5s</span>;</span><br><span class="line">  <span class="attribute">transition-duration</span>:.<span class="number">5s</span>;</span><br><span class="line">  -webkit-<span class="attribute">transition-timing-function</span>: ease-in;</span><br><span class="line">  <span class="attribute">transition-timing-function</span>: ease-in;</span><br><span class="line">  -webkit-<span class="attribute">transition-delay</span>: .<span class="number">18s</span>;</span><br><span class="line">  <span class="attribute">transition-delay</span>:.<span class="number">18s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224253.gif" alt="效果"></p><blockquote><p>特别注意：当<code>transition-property</code>属性设置为<code>all</code>时，表示的是所有中点值的属性。</p><p>用一个简单的例子来说明这个问题：</p><p>假设你的初始状态设置了样式<code>width</code>、<code>height</code>、<code>background</code>当你在终始状态都改变了这三个属性，那么<code>all</code>代表的就是<code>width</code>、<code>height</code>和<code>background</code>。如果你的终始状态只改变了<code>width</code>和<code>height</code>时，那么<code>all</code>代表的就是<code>width</code>和<code>height</code>。</p></blockquote><h3 id="过渡所需时间-transition-duration"><a href="#过渡所需时间-transition-duration" class="headerlink" title="过渡所需时间 transition-duration"></a>过渡所需时间 transition-duration</h3><p><code>transition-duration</code>属性主要用来设置一个属性过渡到另一个属性所需的时间，也就是从旧属性过渡到新属性花费的时间长度，俗称持续时间。</p><p>示例：在鼠标悬停<code>hover</code>状态下，让容器从直角慢慢过渡到圆角，并让整个动画持续0.5s</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: orange;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">  -webkit-<span class="attribute">transition-property</span>: -webkit-border-radius;</span><br><span class="line">  <span class="attribute">transition-property</span>: border-radius;</span><br><span class="line">  -webkit-<span class="attribute">transition-duration</span>: .<span class="number">5s</span>;</span><br><span class="line">  <span class="attribute">transition-duration</span>: .<span class="number">5s</span>;</span><br><span class="line">  -webkit-<span class="attribute">transition-timing-function</span>: ease-out;</span><br><span class="line">  <span class="attribute">transition-timing-function</span>: ease-out;</span><br><span class="line">  -webkit-<span class="attribute">transition-delay</span>: .<span class="number">2s</span>;</span><br><span class="line">  <span class="attribute">transition-delay</span>: .<span class="number">2s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224300.gif" alt="效果"></p><h3 id="过渡函数-transition-timing-function"><a href="#过渡函数-transition-timing-function" class="headerlink" title="过渡函数 transition-timing-function"></a>过渡函数 transition-timing-function</h3><p><code>transition-timing-function</code>属性指的是过渡的“缓动函数。主要用来指定浏览器的过渡速度，以及过渡期间的操作进展情况，其中要包括以下几种函数：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224305.png" alt="过渡函数"></p><p>示例：在<code>hover</code>状态下，让容器从一个正方形慢慢过渡到一个圆形，而整个过渡是先加速再减速，也就是运用<code>ease-in-out</code>函数</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">  -webkit-<span class="attribute">transition-property</span>: -webkit-border-radius;</span><br><span class="line">  <span class="attribute">transition-property</span>: border-radius;</span><br><span class="line">  -webkit-<span class="attribute">transition-duration</span>: .<span class="number">5s</span>;</span><br><span class="line">  <span class="attribute">transition-duration</span>: .<span class="number">5s</span>;</span><br><span class="line">  -webkit-<span class="attribute">transition-timing-function</span>: ease-in-out;</span><br><span class="line">  <span class="attribute">transition-timing-function</span>: ease-in-out;</span><br><span class="line">  -webkit-<span class="attribute">transition-delay</span>: .<span class="number">2s</span>;</span><br><span class="line">  <span class="attribute">transition-delay</span>: .<span class="number">2s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224311.gif" alt="效果"></p><h3 id="过渡延迟时间-transition-delay"><a href="#过渡延迟时间-transition-delay" class="headerlink" title="过渡延迟时间 transition-delay"></a>过渡延迟时间 transition-delay</h3><p><code>transition-delay</code>属性和<code>transition-duration</code>属性极其类似，不同的是<code>transition-duration</code>是用来设置过渡动画的持续时间，而<code>transition-delay</code>主要用来指定一个动画开始执行的时间，也就是说当改变元素属性值后多长时间开始执行。</p><p>有时我们想改变两个或者多个css属性的<code>transition</code>效果时，只要把几个<code>transition</code>的声明串在一起，用逗号<code>,</code>隔开，然后各自可以有各自不同的延续时间和其时间的速率变换方式。但需要值得注意的一点：第一个时间的值为 <code>transition-duration</code>，第二个为<code>transition-delay</code>。</p><p>例如：<code>a&#123; transition: background 0.8s ease-in 0.3,color 0.6s ease-out 0.3;&#125;</code></p><p>示例：通过<code>transition</code>属性将一个200px *200px的橙色容器，在鼠标悬浮状态时，过渡到一个300px * 300px的红色容器。而且整个过渡0.1s后触发，并且整个过渡持续0.28s</p><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>鼠标放到我的身上来<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> dotted red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrapper</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: orange;</span><br><span class="line">  -webkit-<span class="attribute">transition</span>: all .<span class="number">28s</span> ease-in .<span class="number">1s</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all .<span class="number">28s</span> ease-in .<span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrapper</span> <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720224318.gif" alt="效果"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统性能分析工具</title>
      <link href="/posts/5ab84722/"/>
      <url>/posts/5ab84722/</url>
      
        <content type="html"><![CDATA[<h4 id="整理几个Linux下监控系统性能等状态的命令和工具"><a href="#整理几个Linux下监控系统性能等状态的命令和工具" class="headerlink" title="整理几个Linux下监控系统性能等状态的命令和工具"></a>整理几个Linux下监控系统性能等状态的命令和工具</h4><h2 id="top"><a href="#top" class="headerlink" title="top"></a>top</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721094455.png" alt="top"></p><p><code>top</code>命令的汇总区域显示了五个方面的系统性能信息：</p><ol><li>负载：时间，登陆用户数，系统平均负载；</li><li>进程：运行，睡眠，停止，僵尸；</li><li>cpu:用户态，核心态，NICE,空闲，等待IO,中断等；</li><li>内存：总量，已用，空闲（系统角度），缓冲，缓存；</li><li>交换分区：总量，已用，空闲</li></ol><blockquote><p>任务区域默认显示：进程ID,有效用户，进程优先级，NICE值，进程使用的虚拟内存，物理内存和共享内存，进程状态，CPU占用率，内存占用率，累计CPU时间，进程命令行信息。</p></blockquote><h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721094500.png" alt="ps"></p><p><code>ps</code>参数太多，具体使用方法可以参考&#96;&#96;man ps&#96;，常用的方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ps aux <span class="comment">#hsserver</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ps –ef | grep <span class="comment">#hundsun</span></span></span><br></pre></td></tr></table></figure><blockquote><ul><li>杀掉某一程序的方法：ps  aux | grep mysqld | grep –v grep | awk ‘{print $2 }’ xargs kill -9</li><li>杀掉僵尸进程：ps –eal | awk ‘{if ($2 &#x3D;&#x3D; “Z”){print $4}}’ | xargs kill -9</li></ul></blockquote><h2 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721094505.png" alt="netstat"></p><p>Netstat用于显示与IP、TCP、UDP和ICMP协议相关的统计数据，一般用于检验本机各端口的网络连接情况。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netstat –npl   <span class="comment">## 可以查看你要打开的端口是否已经打开。</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netstat –rn    <span class="comment">## 打印路由表信息。</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netstat –<span class="keyword">in</span>    <span class="comment">## 提供系统上的接口信息，打印每个接口的MTU,输入分组数，输入错误，输出分组数，输出错误，冲突以及当前的输出队列的长度。</span></span></span><br></pre></td></tr></table></figure><h2 id="htop"><a href="#htop" class="headerlink" title="htop"></a>htop</h2><blockquote><p>需要安装</p></blockquote><p><code>htop</code>是Linux系统中的一个互动的进程查看器,一个文本模式的应用程序(在控制台或者X终端中),需要<code>ncurses</code>。Htop可让用户交互式操作，支持颜色主题，可横向或纵向滚动浏览进程列表，并支持鼠标操作。 </p><h2 id="uptime"><a href="#uptime" class="headerlink" title="uptime"></a>uptime</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721094534.png" alt="uptime"></p><p><code>uptime</code>能够打印系统总共运行了多长时间和系统的平均负载，<code>uptime</code>命令最后输出的三个数字的含义分别是1分钟，5分钟，15分钟内系统的平均负荷。</p><h2 id="lsof"><a href="#lsof" class="headerlink" title="lsof"></a>lsof</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721094651.png" alt="lsof"></p><p><code>lsof</code>(list open files)是一个列出当前系统打开文件的工具。通过<code>lsof</code>工具能够查看这个列表对系统检测及排错，常见的用法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">lsof /boot<span class="comment">## 查看文件系统阻塞</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">lsof  -i : 3306<span class="comment">## 查看端口号被哪个进程占用</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">lsof –u username<span class="comment">## 查看用户打开哪些文件</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">lsof –p  4838<span class="comment">## 查看进程打开哪些文件</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">lsof –i @192.168.34.128<span class="comment">## 查看远程已打开的网络链接</span></span></span><br></pre></td></tr></table></figure><h2 id="strace"><a href="#strace" class="headerlink" title="strace"></a>strace</h2><blockquote><p>需要安装</p></blockquote><p><code>strace</code>跟踪程序执行过程中产生的系统调用及接收到的信号，帮助分析程序或命令执行中遇到的异常情况。举例：</p><p>查看&#96;&#96;mysqld&#96;在linux上加载哪种配置文件，可以通过运行下面的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">strace –e stat64 mysqld –<span class="built_in">print</span> –defaults &gt; /dev/null</span></span><br></pre></td></tr></table></figure><h2 id="iotop"><a href="#iotop" class="headerlink" title="iotop"></a>iotop</h2><blockquote><p>需要安装</p></blockquote><p><code>iotop</code>命令是专门显示硬盘IO的命令，界面风格类似<code>top</code>命令，可以显示IO负载具体是由哪个进程产生的。是一个用来监视磁盘I&#x2F;O使用状况的<code>top</code>类工具，具有与<code>top</code>相似的UI，其中包括PID、用户、I&#x2F;O、进程等相关信息。可以以非交互的方式使用<code>iotop –bod interval</code>。</p><h2 id="dstat"><a href="#dstat" class="headerlink" title="dstat"></a>dstat</h2><blockquote><p>需要安装</p></blockquote><p><code>dstat</code>显示了cpu使用情况，磁盘io情况，网络发包情况和换页情况，输出是彩色的，可读性较强，相对于<code>vmstat</code>和iostat&#96;的输入更加详细且较为直观。在使用时，直接输入命令即可，当然也可以使用特定参数。</p><h2 id="vmstat"><a href="#vmstat" class="headerlink" title="vmstat"></a>vmstat</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721094631.png" alt="vmstat"></p><p>VirtualMeomoryStatistics(虚拟内存统计)是Linux中监控内存的常用工具,可对操作系统的虚拟内存、进程、CPU等的整体情况进行监视。</p><p><code>vmstat</code>的常规用法：<code>vmstat interval times</code>即每隔<code>interval</code>秒采样一次，共采样<code>times</code>次，如果省略<code>times</code>,则一直采集数据，直到用户手动停止为止。可以使用ctrl+c停止vmstat采集数据。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721094637.png" alt="vmstat"></p><p>第一行显示了系统自启动以来的平均值，第二行开始显示现在正在发生的情况，接下来的行会显示每5秒间隔发生了什么，每一列的含义在头部，如下所示：</p><blockquote><p>▪ procs：r这一列显示了多少进程在等待cpu，b列显示多少进程正在不可中断的休眠（等待IO）。</p><p>▪ memory：swapd列显示了多少块被换出了磁盘（页面交换），剩下的列显示了多少块是空闲的（未被使用），多少块正在被用作缓冲区，以及多少正在被用作操作系统的缓存。</p><p>▪ swap：显示交换活动：每秒有多少块正在被换入（从磁盘）和换出（到磁盘）。</p><p>▪ io：显示了多少块从块设备读取（bi）和写出（bo）,通常反映了硬盘I&#x2F;O。</p><p>▪ system：显示每秒中断(in)和上下文切换（cs）的数量。</p><p>▪ cpu：显示所有的cpu时间花费在各类操作的百分比，包括执行用户代码（非内核），执行系统代码（内核），空闲以及等待IO。</p></blockquote><p>内存不足的表现：<code>free   memory</code>急剧减少，回收<code>buffer</code>和<code>cacher</code>也无济于事，大量使用交换分区<code>（swpd）</code>,页面交换<code>（swap）</code>频繁，读写磁盘数量 <code>（io）</code>增多，缺页中断<code>（in）</code>增多，上下文切换<code>（cs）</code>次数增多，等待IO的进程数<code>（b）</code>增多，大量CPU时间用于等待IO<code>（wa）</code>。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROOT用户SSH登录kali</title>
      <link href="/posts/b4e59a6/"/>
      <url>/posts/b4e59a6/</url>
      
        <content type="html"><![CDATA[<h2 id="使用SSH登录kali"><a href="#使用SSH登录kali" class="headerlink" title="使用SSH登录kali"></a>使用SSH登录kali</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721123221.png" alt="1"></p><blockquote><p>201904版本的kali默认是拒绝root用户直接登录的，需要我们修改两个配置项才能登录</p></blockquote><h3 id="首先查看SSH服务状态"><a href="#首先查看SSH服务状态" class="headerlink" title="首先查看SSH服务状态"></a>首先查看SSH服务状态</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">/etc/init.d/ssh status</span></span><br></pre></td></tr></table></figure><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim /etc/ssh/sshd_config</span></span><br></pre></td></tr></table></figure><p>增加下面第二行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PermitRootLogin prohib-passwd</span></span><br><span class="line">PermitRootLogin yes</span><br></pre></td></tr></table></figure><p>取消注释下面第二行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PasswordAuthentication <span class="built_in">yes</span></span></span><br><span class="line">PasswordAuthentication yes</span><br></pre></td></tr></table></figure><h3 id="重启SSH服务"><a href="#重启SSH服务" class="headerlink" title="重启SSH服务"></a>重启SSH服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">/etc/init.d/ssh restart</span></span><br></pre></td></tr></table></figure><p>OK</p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kali </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Hexo博客中插入自定义的页面</title>
      <link href="/posts/fe365555/"/>
      <url>/posts/fe365555/</url>
      
        <content type="html"><![CDATA[<h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p>Hexo官方给出了两种插入自定义页面的方法：一是对指定文件进行渲染，形成在主题指定区域显示自定义页面；二是对相关文件或者文件夹进行忽略，完全进行不渲染，直接<code>copy</code> 到<code>public</code>文件夹里进行链接。</p><h3 id="1-部分渲染"><a href="#1-部分渲染" class="headerlink" title="1 部分渲染"></a>1 部分渲染</h3><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p>给单个文件添加不应用模板的标记，适用于个别特殊文件的处理。</p><h4 id="实现方法-1"><a href="#实现方法-1" class="headerlink" title="实现方法"></a>实现方法</h4><p>在不需要渲染的文章或HTML文件头部添加以下标记：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---layout: false---</span><br></pre></td></tr></table></figure><p>这样，这个文件就不会经过模板渲染，最终发布到<code>/public/</code>里的文件就是去掉标记后的文件的样子。</p><h3 id="2-排除文件"><a href="#2-排除文件" class="headerlink" title="2 排除文件"></a>2 排除文件</h3><h4 id="实现原理-1"><a href="#实现原理-1" class="headerlink" title="实现原理"></a>实现原理</h4><blockquote><p>只有<code>source</code>目录下的文件才会发布到<code>public</code>（能够在网络上访问到），因此Hexo只渲染<code>source</code>目录下的文件。<code>skip_render</code>参数设置的路径是相对于<code>source</code>目录的路径。</p></blockquote><p>Hexo的配置文件中提供了配置项<code>skip_render</code> ，是用来对不需要的目录或者文件进行渲染排除。</p><ol><li><p>排除单个文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skip_render: &#x27;test.html&#x27;</span><br></pre></td></tr></table></figure></li><li><p>排除多个文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">skip_render:</span><br><span class="line">  - &#x27;1.html&#x27;</span><br><span class="line">  - &#x27;2.html&#x27;</span><br></pre></td></tr></table></figure></li><li><p>正则表达式匹配</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skip_render: &#x27;*.html&#x27;</span><br></pre></td></tr></table></figure><blockquote><p>注意<code>skip_render</code>匹配的文件夹为<code>source</code>，这样会排除所有<code>source</code>文件夹下HTML结尾的文件，但是不会匹配到子目录。</p></blockquote></li><li><p>排除目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skip_render: &#x27;demo/*&#x27;</span><br></pre></td></tr></table></figure></li><li><p>排除多个目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">skip_render:</span><br><span class="line">  - &#x27;test/*&#x27;</span><br><span class="line">  - &#x27;demo/*&#x27;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo一键Git自动部署</title>
      <link href="/posts/f15b8f46/"/>
      <url>/posts/f15b8f46/</url>
      
        <content type="html"><![CDATA[<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ul><li>名称：hexo-deployer-git</li><li>作用：Hexo 提供了快速方便的一键部署功能，让您只需一条命令就能将网站部署到服务器上。</li><li>官方文档：<a href="https://hexo.io/zh-cn/docs/one-command-deployment">Hexo文档</a> <a href="https://github.com/hexojs/hexo-deployer-git">Github文档</a></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cnpm install hexo-deployer-git --save</span></span><br></pre></td></tr></table></figure><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim _config.yml</span></span><br><span class="line">//添加</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: 仓库地址</span><br><span class="line">  branch: 分支名</span><br><span class="line">  message: 提交信息</span><br></pre></td></tr></table></figure><blockquote><p>提交信息可以写 <code>Site updated: &amp;#123; &amp;#123; now(&#39;YYYY-MM-DD HH:mm:ss&#39;) &amp;#125; &amp;#125;</code> </p></blockquote><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>生成站点文件并推送至远程库。执行</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo clean &amp;&amp; hexo deploy</span></span><br></pre></td></tr></table></figure><blockquote><p>当执行 <code>hexo deploy</code> 时，Hexo 会将 <code>public</code> 目录中的文件和目录推送至 <code>_config.yml</code> 中指定的远端仓库和分支中，并且<strong>完全覆盖</strong>该分支下的已有内容</p><p>此外，如果您的 Github Pages 需要使用 CNAME 文件<strong>自定义域名</strong>，请将 CNAME 文件置于 <code>source</code> 目录下，只有这样 <code>hexo deploy</code> 才能将 CNAME 文件一并推送至部署分支。</p></blockquote><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="第一个报错"><a href="#第一个报错" class="headerlink" title="第一个报错"></a>第一个报错</h3><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721093425.png" alt="bug"></p><blockquote><p>是配置文件中格式不正确，更改站点配置文件时必须必须保证格式的严谨，少一个或者多一个空格都不行。</p></blockquote><h3 id="第二个报错"><a href="#第二个报错" class="headerlink" title="第二个报错"></a>第二个报错</h3><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721093435.png" alt="bug"></p><blockquote><p>没有清除缓存</p><p>请清除缓存之后再执行<code>hexo g</code>和<code>hexo deploy</code></p></blockquote><h2 id="其他方式"><a href="#其他方式" class="headerlink" title="其他方式"></a>其他方式</h2><p>hexo官方给出了好几种插件来发布到其他服务器上，更多请参考：<a href="https://hexo.io/zh-cn/docs/one-command-deployment">https://hexo.io/zh-cn/docs/one-command-deployment</a></p><blockquote><p>Hexo 生成的所有文件都放在 <code>public</code> 文件夹中，您可以将它们复制到您喜欢的地方。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给博客实现许多有趣的小功能</title>
      <link href="/posts/73a2844f/"/>
      <url>/posts/73a2844f/</url>
      
        <content type="html"><![CDATA[<blockquote><p>通过Hexo插件给自己的小破站增加一些有趣的小功能</p></blockquote><h2 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h2><ul><li>插件：hexo-tag-aplayer</li><li>描述：在指定位置生成一个播放器，播放器将支持对于 QQ音乐、网易云音乐、虾米、酷狗、百度等平台的音乐播放。</li><li>官方文档：<a href="https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md">https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md</a></li></ul><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cnpm install --save hexo-tag-aplayer</span></span><br></pre></td></tr></table></figure><h3 id="插件依赖"><a href="#插件依赖" class="headerlink" title="插件依赖"></a>插件依赖</h3><ul><li>APlayer.js &gt; 1.8.0</li><li>Meting.js &gt; 1.1.1</li></ul><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim _config.yml</span></span><br><span class="line">//写入：</span><br><span class="line">aplayer:</span><br><span class="line">  meting: true</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>在想要放置的页面的md文档中写入：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 简单示例 (id, server, type)  --&gt;</span><br><span class="line">&#123;% meting &quot;60198&quot; &quot;netease&quot; &quot;playlist&quot; %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 进阶示例 --&gt;</span><br><span class="line">&#123;% meting &quot;60198&quot; &quot;netease&quot; &quot;playlist&quot; &quot;autoplay&quot; &quot;mutex:false&quot; &quot;listmaxheight:340px&quot; &quot;preload:none&quot; &quot;theme:#ad7a86&quot;%&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：只有新版本才支持meting格式，如使用旧版本请参考官方文档</p><p>数字ID就是网易云相对应歌单的ID，可以通过网易云音乐网页版获得</p></blockquote><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><table><thead><tr><th align="center">id</th><th align="center"><strong>必须值</strong></th><th align="left">歌曲 id &#x2F; 播放列表 id &#x2F; 相册 id &#x2F; 搜索关键字</th></tr></thead><tbody><tr><td align="center">server</td><td align="center"><strong>必须值</strong></td><td align="left">音乐平台: <code>netease</code>, <code>tencent</code>, <code>kugou</code>, <code>xiami</code>, <code>baidu</code></td></tr><tr><td align="center">type</td><td align="center"><strong>必须值</strong></td><td align="left"><code>song</code>, <code>playlist</code>, <code>album</code>, <code>search</code>, <code>artist</code></td></tr><tr><td align="center">fixed</td><td align="center"><code>false</code></td><td align="left">开启固定模式</td></tr><tr><td align="center">mini</td><td align="center"><code>false</code></td><td align="left">开启迷你模式</td></tr><tr><td align="center">loop</td><td align="center"><code>all</code></td><td align="left">列表循环模式：<code>all</code>, <code>one</code>,<code>none</code></td></tr><tr><td align="center">order</td><td align="center"><code>list</code></td><td align="left">列表播放模式： <code>list</code>, <code>random</code></td></tr><tr><td align="center">volume</td><td align="center">0.7</td><td align="left">播放器音量</td></tr><tr><td align="center">lrctype</td><td align="center">0</td><td align="left">歌词格式类型</td></tr><tr><td align="center">listfolded</td><td align="center"><code>false</code></td><td align="left">指定音乐播放列表是否折叠</td></tr><tr><td align="center">storagename</td><td align="center"><code>metingjs</code></td><td align="left">LocalStorage 中存储播放器设定的键名</td></tr><tr><td align="center">autoplay</td><td align="center"><code>true</code></td><td align="left">自动播放，移动端浏览器暂时不支持此功能</td></tr><tr><td align="center">mutex</td><td align="center"><code>true</code></td><td align="left">该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</td></tr><tr><td align="center">listmaxheight</td><td align="center"><code>340px</code></td><td align="left">播放列表的最大长度</td></tr><tr><td align="center">preload</td><td align="center"><code>auto</code></td><td align="left">音乐文件预载入模式，可选项： <code>none</code>, <code>metadata</code>, <code>auto</code></td></tr><tr><td align="center">theme</td><td align="center"><code>#ad7a86</code></td><td align="left">播放器风格色彩设置</td></tr></tbody></table><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721130954.png" alt="网易云效果图"></p><h2 id="电影"><a href="#电影" class="headerlink" title="电影"></a>电影</h2><ul><li>插件：hexo-douban</li><li>描述：一个在页面中嵌入豆瓣个人主页的小插件。</li><li>官方文档：<a href="https://github.com/mythsman/hexo-douban">https://github.com/mythsman/hexo-douban</a></li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cnpm install hexo-douban --save</span></span><br></pre></td></tr></table></figure><blockquote><p>推荐安装最新版本1.1.3</p></blockquote><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">douban:</span><br><span class="line">  user: mythsman</span><br><span class="line">  builtin: false</span><br><span class="line">  book:</span><br><span class="line">    title: &#x27;This is my book title&#x27;</span><br><span class="line">    quote: &#x27;This is my book quote&#x27;</span><br><span class="line">  movie:</span><br><span class="line">    title: &#x27;This is my movie title&#x27;</span><br><span class="line">    quote: &#x27;This is my movie quote&#x27;</span><br><span class="line">  game:</span><br><span class="line">    title: &#x27;This is my game title&#x27;</span><br><span class="line">    quote: &#x27;This is my game quote&#x27;</span><br><span class="line">  timeout: 10000 </span><br></pre></td></tr></table></figure><blockquote><p>如果只想显示某一个页面(比如movie)，那就把其他的配置项注释掉即可。</p></blockquote><h3 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h3><blockquote><ul><li><strong>user</strong>: 你的豆瓣ID.打开豆瓣，登入账户，然后在右上角点击 “个人主页” ，这时候地址栏的URL大概是这样：”<a href="https://www.douban.com/people/xxxxxx/">https://www.douban.com/people/xxxxxx/</a>“ ，其中的”xxxxxx”就是你的个人ID了。</li><li><strong>builtin</strong>: 是否将生成页面的功能嵌入<code>hexo s</code>和<code>hexo g</code>中，默认是<code>false</code>,另一可选项为<code>true</code>(1.x.x版本新增配置项)。</li><li><strong>title</strong>: 该页面的标题.</li><li><strong>quote</strong>: 写在页面开头的一段话,支持html语法.</li><li><strong>timeout</strong>: 爬取数据的超时时间，默认是 10000ms ,如果在使用时发现报了超时的错(ETIMEOUT)可以把这个数据设置的大一点。</li></ul></blockquote><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo douban -h</span></span><br><span class="line">Usage: hexo douban</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line">Generate pages from douban</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -b, --books   Generate douban books only</span><br><span class="line">  -g, --games   Generate douban games only</span><br><span class="line">  -m, --movies  Generate douban movies only</span><br></pre></td></tr></table></figure><blockquote><p>如果配置了<code>builtin</code>参数为<code>true</code>，那么除了可以使用<code>hexo douban</code>命令之外，<code>hexo g</code>或<code>hexo s</code>也内嵌了生成页面的功能。</p></blockquote><h3 id="保持更新"><a href="#保持更新" class="headerlink" title="保持更新"></a>保持更新</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cnpm install hexo-douban --update --save</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：生成的页面是在根目录下的movies文件夹里，所以别忘了在主配置文件里增加movies的菜单哦</p></blockquote><h3 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h3><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721131009.png" alt="效果图"></p><h2 id="看板娘"><a href="#看板娘" class="headerlink" title="看板娘"></a>看板娘</h2><ul><li>插件：hexo-helper-live2d</li><li>描述：把你喜欢的动画人物养在自己的小破站里吧～</li><li>官方文档：<a href="https://github.com/EYHN/hexo-helper-live2d">https://github.com/EYHN/hexo-helper-live2d</a></li></ul><p>请看另一篇文章《live2D》</p><h3 id="效果-2"><a href="#效果-2" class="headerlink" title="效果"></a>效果</h3><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721131019.gif" alt="效果"></p><h2 id="Gallery相册"><a href="#Gallery相册" class="headerlink" title="Gallery相册"></a>Gallery相册</h2><blockquote><p>Butterfly 2.0.0以上提供  </p></blockquote><p>区别于旧版的<code>Gallery</code>相册,新的<code>Gallery</code>相册会自动根据图片长度进行排版，书写也更加方便，与<code>markdown</code>格式一样。可根据需要插入到相应的<code>md</code>。</p><h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">markdown 图片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](<span class="link">https://gratisography.com/wp-content/uploads/2019/10/gratisography-scary-pumpkin-hand-900x600.jpg</span>)</span><br><span class="line">![](<span class="link">https://gratisography.com/wp-content/uploads/2019/10/gratisography-fresh-fish-dinner-900x600.jpg</span>)</span><br><span class="line">![](<span class="link">https://gratisography.com/wp-content/uploads/2019/10/gratisography-mountain-cloud-landscape-900x600.jpg</span>)</span><br><span class="line">![](<span class="link">https://picjumbo.com/wp-content/uploads/iphone-free-stock-photos-2210x3315.jpg</span>)</span><br><span class="line">![](<span class="link">https://picjumbo.com/wp-content/uploads/young-millennial-girl-drinking-lemonade-and-overlooking-the-city-2210x1473.jpg</span>)</span><br><span class="line">![](<span class="link">https://picjumbo.com/wp-content/uploads/modern-graphic-designer-essentials_free_stock_photos_picjumbo_HNCK4919-2210x1474.jpg</span>)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><h3 id="效果-3"><a href="#效果-3" class="headerlink" title="效果"></a>效果</h3><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721131034.png" alt="效果"></p><p>Butterfly 3.0更新了相册组，用法如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>name：图库名字</li><li>description：图库描述</li><li>link：连接到对应相册的地址</li><li>img-url：图库封面的地址</li></ul><h2 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h2><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>使用插件<code>hexo-generator-search</code></p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cnpm install --save  hexo-generator-search</span></span><br></pre></td></tr></table></figure><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  labels:</span><br><span class="line">    input_placeholder: Search for Posts</span><br><span class="line">    hits_empty: &quot;We didn&#x27;t find any results for the search: $&#123;query&#125;&quot; ## if there are no result</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown基础</title>
      <link href="/posts/b797e99c/"/>
      <url>/posts/b797e99c/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>​MarkDown格式应该是一个程序员必备的技能了吧，是我们在写作的一大利器。支持Markdown格式的编辑器也很多，我经常使用的就只有VScode和Typora，这两个算是各有优缺点。</p><p>​VScode的预览格式是在右边单独分出来一栏来进行实时预览写作效果，左边还是代码部分，效果如下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721120533.gif" alt="3"></p><p>而Typora的预览是直接在本文档生成文档效果，结果如下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721120556.gif" alt="4"></p><p>具体效果可以自己去试试哦，之前一直用着VScode但是碍于屏幕较小，分成两个屏幕有些东西预览的时候不好看效果，后来经过同事推荐，才知道Typora这个超级轻量的编辑器，而且也支持Linux、Windows和Mac。</p><p><em>所以本篇文章是基于Typora来写markdown语法的，但是语法是通用的哦，除了一些特有的功能</em></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>我用的是基于Ubuntu的Linux发行版，所以安装很简单：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE</span></span></span><br><span class="line"></span><br><span class="line">wget -qO - https://typora.io/linux/public-key.asc | sudo apt-key add -</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># add Typora&#x27;s repository</span></span></span><br><span class="line"></span><br><span class="line">sudo add-apt-repository &#x27;deb https://typora.io/linux ./&#x27;</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># install typora</span></span></span><br><span class="line"></span><br><span class="line">sudo apt-get install typora</span><br></pre></td></tr></table></figure><p>或者下载源码进行编译安装，其他安装方式请参考：</p><h2 id="特有功能和配置"><a href="#特有功能和配置" class="headerlink" title="特有功能和配置"></a>特有功能和配置</h2><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><p>Typora支持非常多的主题，甚至可以自己去设计属于自己的主题。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721120604.png" alt="5"></p><p>这里是官方的主题：<a href="http://theme.typora.io/">http://theme.typora.io/</a> </p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721120611.png" alt="6"></p><p>在这里可以根据官方文档进行自己安装、配置和制作主题</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721120617.png" alt="7"></p><h3 id="特有配置"><a href="#特有配置" class="headerlink" title="特有配置"></a>特有配置</h3><p>在设置里可以自己自定义非常多关于自己的喜好设置</p><p> <img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721120627.png" alt="8"><br> <img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721120633.png" alt="9"></p><p>更多请自己去探索哦，真的很强大。</p><blockquote><p>在新版Typora里可以设置图片通过PicGo一键上传图床功能，很方便呢</p></blockquote><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>标题是用”#”号来进行标记的，一个代表h1到六个代表h6，后面记得要加一个空格，并且会自动生成目录。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">## 这是h1标题</span></span><br><span class="line"><span class="section">#### 这是h3</span></span><br><span class="line"><span class="section">####### 这是h6</span></span><br></pre></td></tr></table></figure><p>效果如下：<br> <img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721120852.gif" alt="10"></p><blockquote><p>注意左边的大纲里也会生成相应的目录哦</p></blockquote><h3 id="引用内容"><a href="#引用内容" class="headerlink" title="引用内容"></a>引用内容</h3><p>我们经常需要引用一些东西，格式如下</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 这里是提示内容</span></span><br><span class="line">&gt;&gt;&gt; 增加缩进引用</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; 数量不受限制</span><br></pre></td></tr></table></figure><p>效果如下：<img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721120858.gif" alt="11"></p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>列表分为无序和有序列表，格式分别为：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">### 无序</span></span><br><span class="line"><span class="bullet">*</span>   Red</span><br><span class="line"><span class="bullet">*</span>   Green</span><br><span class="line"><span class="bullet">*</span>   Blue</span><br><span class="line"></span><br><span class="line"><span class="section">### 有序</span></span><br><span class="line"><span class="bullet">1.</span>  Red</span><br><span class="line"><span class="bullet">2.</span> Green</span><br><span class="line"><span class="bullet">3.</span>Blue</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>序号之后是有空格的哦</p></blockquote><p>效果：<img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721120904.gif" alt="12"></p><h3 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h3><p>任务列表就是内容前面加上勾选的选项，显示这个任务的状态。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">### 未选中状态</span></span><br><span class="line"><span class="bullet">-</span> [ ] a task list item</span><br><span class="line"></span><br><span class="line"><span class="section">### 选中状态</span></span><br><span class="line"><span class="bullet">-</span> [x] completed</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果如下：<img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721120915.gif" alt="13"></p><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>代码块的符号，就是键盘上ESC下面那个键，和波浪线是同一个键，就是” &#96;&#96; “这个符号，格式：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">​<span class="code">```</span></span><br><span class="line"><span class="code">代码在这里</span></span><br><span class="line"><span class="code">​```</span></span><br></pre></td></tr></table></figure><p>效果如下：<img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721120925.gif" alt="效果"></p><blockquote><p>单行代码只用一个反引号包住代码即可。</p></blockquote><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>表格比较复杂，标记符号就是通道符” | “，格式如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">| 第一格 | 第二格 | 第三格 |</span><br></pre></td></tr></table></figure><p>效果：<img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721120933.gif" alt="效果"></p><p>标准格式：虚线上方为标题栏：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| First Header  | Second Header |</span><br><span class="line">| ------------- | ------------- |</span><br><span class="line">| Content Cell  | Content Cell  |</span><br><span class="line">| Content Cell  | Content Cell  |</span><br></pre></td></tr></table></figure><p>效果：<img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721120939.gif" alt="效果"></p><p>表格内容居中：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">| Left-Aligned  | Center Aligned  | Right Aligned |</span><br><span class="line">| :------------ |:---------------:| -----:|</span><br><span class="line">| col 3 is      | some wordy text | $1600 |</span><br><span class="line">| col 2 is      | centered        |   $12 |</span><br><span class="line">| zebra stripes | are neat        |    $1 |</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果：<br><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721120946.gif" alt="效果"></p><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><p>脚注是指当鼠标移动到该单词时显示对该词的注释，格式如下</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">You can create footnotes like this[^footnote].</span><br><span class="line">[<span class="symbol">^footnote</span>]: <span class="link">Here is the *text* of the **footnote**.</span></span><br></pre></td></tr></table></figure><p>效果：<img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721120952.gif" alt="效果"></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>对指定文字进行超链接：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">This link</span>](<span class="link">http://example.net/</span>)</span><br></pre></td></tr></table></figure><p>效果：<img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721121001.gif" alt="效果"></p><p>另一种链接：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">This is [<span class="string">an example</span>][<span class="symbol">id</span>] reference-style link.</span><br><span class="line"></span><br><span class="line">[<span class="symbol">id</span>]: <span class="link">http://example.com/  &quot;Optional Title Here&quot;</span></span><br></pre></td></tr></table></figure><p>效果：<img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721121007.gif" alt="效果"></p><p>普通链接：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">&lt;https://www.laugh0608.online&gt;</span></span><br></pre></td></tr></table></figure><h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><p>代码：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">Alt text</span>](<span class="link">/path/to/img.jpg</span>)</span><br><span class="line">![<span class="string">Alt text</span>](<span class="link">/path/to/img.jpg &quot;Optional title&quot;</span>)</span><br></pre></td></tr></table></figure><p>既可以引用本地文件，但是更推荐使用图床工具，即使是图片链接也可以实时预览哦 <del>前提是你要有网</del></p><p>例如：<img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721121029.gif" alt="效果"></p><h3 id="文字斜体和加粗"><a href="#文字斜体和加粗" class="headerlink" title="文字斜体和加粗"></a>文字斜体和加粗</h3><p>格式如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 内容 *         //加粗</span><br><span class="line">_ 内容 _         //斜体</span><br><span class="line"><span class="strong">*** 内容 **</span>*     //斜体加粗</span><br></pre></td></tr></table></figure><p>效果：<br><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721121036.gif" alt="效果"></p><h3 id="其他通用语法"><a href="#其他通用语法" class="headerlink" title="其他通用语法"></a>其他通用语法</h3><h4 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h4><p>在Typora里换行直接可以敲一个回车即可，但是在其他编辑器或者Github里，换行是有严谨的格式的，就是每一个段落的后面必须加上两个空格和一个回车才能换行，或者说中间空一行。例如：<br><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721121041.gif" alt="14"></p><h4 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h4><p>有时候我们需要删除一些东西，但是又不能完全删除，还需要一些参考意义，就可以使用到删除线：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~ 内容 ~~ </span><br></pre></td></tr></table></figure><p>类似于这样：<br><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721121052.gif" alt="15"></p><h4 id="转义符"><a href="#转义符" class="headerlink" title="转义符"></a>转义符</h4><p>文字缩进空格是不行的，因为空格和tab在markdown里都是标记，所以要用到转义符，所有的转义符都可以使用HTML格式：<br><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721121057.png" alt="16"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MarkDown </tag>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给Hexo博客实现无后端评论功能</title>
      <link href="/posts/a48566bb/"/>
      <url>/posts/a48566bb/</url>
      
        <content type="html"><![CDATA[<h2 id="Gitalk"><a href="#Gitalk" class="headerlink" title="Gitalk"></a>Gitalk</h2><p>主要特性：</p><ul><li>使用 Github 登录</li><li>支持多语言 [en, zh-CN, zh-TW]</li><li>支持个人或组织</li><li>无干扰模式（设置 distractionFreeMode 为 true 开启）</li><li>快捷键提交评论 （cmd|ctrl + enter）</li><li>支持MarkDown语法等</li></ul><h3 id="申请应用"><a href="#申请应用" class="headerlink" title="申请应用"></a>申请应用</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;在Github上申请一个OAuth Application，步骤如下：  </p><p>1. </p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721092212.png" alt="1"></p><p>2.<br><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721092220.png" alt="2"></p><p>3. </p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721092226.png" alt="3"></p><p>4. </p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721092231.png" alt="4"></p><p>5. </p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721092236.png" alt="5"></p><p>请记下这个ID。</p><h3 id="安装GitTalk"><a href="#安装GitTalk" class="headerlink" title="安装GitTalk"></a>安装GitTalk</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i --save gitalk</span><br></pre></td></tr></table></figure><p>或者直接引入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/gitalk/dist/gitalk.css&quot;&gt;</span><br><span class="line">&lt;script src=&quot;https://unpkg.com/gitalk/dist/gitalk.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import &#x27;gitalk/dist/gitalk.css&#x27;</span><br><span class="line">import Gitalk from &#x27;gitalk&#x27;</span><br></pre></td></tr></table></figure><h3 id="新建一个Github仓库"><a href="#新建一个Github仓库" class="headerlink" title="新建一个Github仓库"></a>新建一个Github仓库</h3><p>主要是用来存储评论，新建方法不多说了，肯定都会。</p><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>注：这是butterfly主题的配置方式，其他还请参考官方文档。<a href="https://github.com/gitalk/gitalk">https://github.com/gitalk/gitalk</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gitalk:</span><br><span class="line">  enable: true</span><br><span class="line">  client_id: 你的client id </span><br><span class="line">  client_secret: 你的client secret</span><br><span class="line">  repo: 你的github仓库名</span><br><span class="line">  owner: 你的github用户名</span><br><span class="line">  admin: 仓库拥有者</span><br></pre></td></tr></table></figure><p>大功告成！</p><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721092244.png" alt="效果"></p><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><h4 id="gittalk报错Error-Not-found"><a href="#gittalk报错Error-Not-found" class="headerlink" title="gittalk报错Error:Not found"></a>gittalk报错Error:Not found</h4><p>发现是Github应用的博客地址和回调地址填错了，更改之后就好了。</p><h4 id="Error-Issues-are-disabled-for-this-repo"><a href="#Error-Issues-are-disabled-for-this-repo" class="headerlink" title="Error:Issues are disabled for this repo"></a>Error:Issues are disabled for this repo</h4><p>去新建的评论仓库里将issues打开即可。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721092249.png" alt="debug"></p><h4 id="未找到相关的-Issues-进行评论-请联系-初始化创建"><a href="#未找到相关的-Issues-进行评论-请联系-初始化创建" class="headerlink" title="未找到相关的 Issues 进行评论 请联系 @初始化创建"></a>未找到相关的 Issues 进行评论 请联系 @初始化创建</h4><p>这个报错我也没有解决，但是发现只要进行登录也可以正常评论，查看了官方文档，发现好像就是这样，这个Page面并没有建立新的评论标题，即评论是空的就会有这个错误。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721092317.png" alt="233"></p><p>效果棒棒的，嘿嘿。 <del>哦对了，记得更改语言哦，当然英语也不是不行</del></p><h2 id="Valine"><a href="#Valine" class="headerlink" title="Valine"></a>Valine</h2><p>Valine 诞生于2017年8月7日，是一款基于<a href="https://leancloud.cn/">LeanCloud</a>的快速、简洁且高效的无后端评论系统。  </p><p>理论上支持但不限于静态博客，目前已有<a href="https://valine.js.org/hexo.html">Hexo</a>、<a href="https://valine.js.org/jekyll.html">Jekyll</a>、<a href="http://typecho.org/">Typecho</a>、<a href="https://gohugo.io/">Hugo</a>、<a href="https://ghost.org/">Ghost</a> 等博客程序在使用Valine。</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>快速</li><li>安全</li><li>Emoji 😉</li><li>无后端实现</li><li>MarkDown 全语法支持</li><li>轻量易用(~15kb gzipped)</li><li>文章阅读量统计 <code>v1.2.0+</code></li></ul><h3 id="获取APP-ID-和-APP-Key"><a href="#获取APP-ID-和-APP-Key" class="headerlink" title="获取APP ID 和 APP Key"></a>获取APP ID 和 APP Key</h3><p>请先<a href="https://leancloud.cn/dashboard/login.html#/signin">登录</a>或<a href="https://leancloud.cn/dashboard/login.html#/signup">注册</a> <code>LeanCloud</code>, 进入<a href="https://leancloud.cn/dashboard/applist.html#/apps">控制台</a>后点击左下角<a href="https://leancloud.cn/dashboard/applist.html#/newapp">创建应用</a>：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721092457.png" alt="创建"></p><p>应用创建好以后，进入刚刚创建的应用，选择左下角的<code>设置</code>&gt;<code>应用Key</code>，然后就能看到你的<code>APP ID</code>和<code>APP Key</code>了：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721092501.png" alt="获取"></p><h3 id="更改配置文件"><a href="#更改配置文件" class="headerlink" title="更改配置文件"></a>更改配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">valine:</span><br><span class="line">  enable: false ## if you want use valine,please set this value is true</span><br><span class="line">  appId: ## leancloud application app id</span><br><span class="line">  appKey: ## leancloud application app key</span><br><span class="line">  notify: false ## valine mail notify (true/false) https://github.com/xCss/Valine/wiki</span><br><span class="line">  verify: false ## valine verify code (true/false)</span><br><span class="line">  pageSize: 10 ## comment list page size</span><br><span class="line">  avatar: monsterid ## gravatar style https://valine.js.org/#/avatar</span><br><span class="line">  lang: en ## i18n: zh-cn/en</span><br><span class="line">  placeholder: Please leave your footprints ## valine comment input placeholder(like: Please leave your footprints )</span><br><span class="line">  guest_info: nick,mail,link #valine comment header info</span><br><span class="line">  bg: /img/comment_bg.png ## valine background</span><br><span class="line">  count: false ## top_img顯示評論數</span><br></pre></td></tr></table></figure><h3 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h3><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721092513.png" alt="效果"></p><p>还有好几个插件可以实现，有兴趣的同学可以自己去搜一下，而且最新的Hexo已经支持在线即时聊天的服务啦~</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Valine </tag>
            
            <tag> Butterfly </tag>
            
            <tag> Gitalk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装RSS插件实现订阅</title>
      <link href="/posts/c2535796/"/>
      <url>/posts/c2535796/</url>
      
        <content type="html"><![CDATA[<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install -- save hexo-generator-feed</span><br></pre></td></tr></table></figure><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ vim _config.yml</span><br><span class="line">#RSS订阅</span><br><span class="line">plugin: hexo-generator-feed</span><br><span class="line">#Feed Atom</span><br><span class="line">feed:</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: 20</span><br><span class="line">  hub:</span><br><span class="line">  content: true</span><br><span class="line">  content_limit: 140</span><br><span class="line">  content_limit_delim: &#x27; &#x27;</span><br><span class="line">  order_by: -date</span><br><span class="line">  icon: icon.png</span><br><span class="line">  autodiscovery: true</span><br><span class="line">  template: ./source/rss/atom.xml</span><br></pre></td></tr></table></figure><p>因为我是Butterfly主题，所以已经集成了rss功能，所以设置到这一步就可以了。如果你的主题里面没有rss相关设置，也可以添加如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rss: /atom.xml</span><br></pre></td></tr></table></figure><p>然后按照模板的路径<code>./source/rss/atom.xml</code>新建一个<code>atom.xml</code>文件，文件中写入以下模板：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">feed</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2005/Atom&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;&#123; config.title &#125;&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  &#123;% if icon %&#125;<span class="tag">&lt;<span class="name">icon</span>&gt;</span>&#123;&#123; icon &#125;&#125;<span class="tag">&lt;/<span class="name">icon</span>&gt;</span>&#123;% endif %&#125;</span><br><span class="line">  &#123;% if config.subtitle %&#125;<span class="tag">&lt;<span class="name">subtitle</span>&gt;</span>&#123;&#123; config.subtitle &#125;&#125;<span class="tag">&lt;/<span class="name">subtitle</span>&gt;</span>&#123;% endif %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; feed_url | uriencode &#125;&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;self&quot;</span>/&gt;</span></span><br><span class="line">  &#123;% if config.feed.hub %&#125;<span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; config.feed.hub | uriencode &#125;&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;hub&quot;</span>/&gt;</span>&#123;% endif %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url | uriencode &#125;&#125;&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">updated</span>&gt;</span>&#123;&#123; posts.first().updated.toISOString() &#125;&#125;<span class="tag">&lt;/<span class="name">updated</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>&#123;&#123; url | uriencode &#125;&#125;<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  &#123;% if config.author %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">author</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>&#123;&#123; config.author &#125;&#125;<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    &#123;% if config.email %&#125;<span class="tag">&lt;<span class="name">email</span>&gt;</span>&#123;&#123; config.email &#125;&#125;<span class="tag">&lt;/<span class="name">email</span>&gt;</span>&#123;% endif %&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">generator</span> <span class="attr">uri</span>=<span class="string">&quot;https://hexo.io/&quot;</span>&gt;</span>Hexo<span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">  &#123;% for post in posts.toArray() %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;&#123; post.title &#125;&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; post.permalink | uriencode &#125;&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>&#123;&#123; post.permalink | uriencode &#125;&#125;<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">published</span>&gt;</span>&#123;&#123; post.date.toISOString() &#125;&#125;<span class="tag">&lt;/<span class="name">published</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">updated</span>&gt;</span>&#123;&#123; post.updated.toISOString() &#125;&#125;<span class="tag">&lt;/<span class="name">updated</span>&gt;</span></span><br><span class="line">    &#123;% if config.feed.content and post.content %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">content</span> <span class="attr">type</span>=<span class="string">&quot;html&quot;</span>&gt;</span>&lt;![CDATA[&#123;&#123; post.content | noControlChars | safe &#125;&#125;]]&gt;<span class="tag">&lt;/<span class="name">content</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">summary</span> <span class="attr">type</span>=<span class="string">&quot;html&quot;</span>&gt;</span></span><br><span class="line">    &#123;% if post.description %&#125;</span><br><span class="line">      &#123;&#123; post.description &#125;&#125;</span><br><span class="line">    &#123;% elif post.intro %&#125;</span><br><span class="line">      &#123;&#123; post.intro &#125;&#125;</span><br><span class="line">    &#123;% elif post.excerpt %&#125;</span><br><span class="line">      &#123;&#123; post.excerpt &#125;&#125;</span><br><span class="line">    &#123;% elif post.content %&#125;</span><br><span class="line">      &#123;% set short_content = post.content.substring(0, config.feed.content_limit) %&#125;</span><br><span class="line">      &#123;% if config.feed.content_limit_delim %&#125;</span><br><span class="line">        &#123;% set delim_pos = short_content.lastIndexOf(config.feed.content_limit_delim) %&#125;</span><br><span class="line">        &#123;% if delim_pos &gt; -1 %&#125;</span><br><span class="line">          &#123;&#123; short_content.substring(0, delim_pos) &#125;&#125;</span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">          &#123;&#123; short_content &#125;&#125;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">      &#123;% else %&#125;</span><br><span class="line">        &#123;&#123; short_content &#125;&#125;</span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line">    &#123;% if post.image %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">content</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; url + post.image | uriencode &#125;&#125;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image&quot;</span> /&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    &#123;% for category in post.categories.toArray() %&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">category</span> <span class="attr">term</span>=<span class="string">&quot;&#123;&#123; category.name &#125;&#125;&quot;</span> <span class="attr">scheme</span>=<span class="string">&quot;&#123;&#123; url + category.path | uriencode &#125;&#125;&quot;</span>/&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    &#123;% for tag in post.tags.toArray() %&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">category</span> <span class="attr">term</span>=<span class="string">&quot;&#123;&#123; tag.name &#125;&#125;&quot;</span> <span class="attr">scheme</span>=<span class="string">&quot;&#123;&#123; url + tag.path | uriencode &#125;&#125;&quot;</span>/&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">feed</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Yes!</p><p>官方文档请参考：<a href="https://github.com/hexojs/hexo-generator-feed">https://github.com/hexojs/hexo-generator-feed</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>让你的博客充满生气之Live2D</title>
      <link href="/posts/599f1d72/"/>
      <url>/posts/599f1d72/</url>
      
        <content type="html"><![CDATA[<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cnpm install --save hexo-helper-live2d</span></span><br></pre></td></tr></table></figure><h4 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cnpm uninstall hexo-helper-live2d</span></span><br></pre></td></tr></table></figure><h2 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cnpm install live2d-widget-model-miku</span></span><br></pre></td></tr></table></figure><h4 id="官方提供的模块有："><a href="#官方提供的模块有：" class="headerlink" title="官方提供的模块有："></a>官方提供的模块有：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">live2d-widget-model-chitose</span><br><span class="line">live2d-widget-model-epsilon2_1</span><br><span class="line">live2d-widget-model-gf</span><br><span class="line">live2d-widget-model-haru/01 (use npm install --save live2d-widget-model-haru)</span><br><span class="line">live2d-widget-model-haru/02 (use npm install --save live2d-widget-model-haru)</span><br><span class="line">live2d-widget-model-haruto</span><br><span class="line">live2d-widget-model-hibiki</span><br><span class="line">live2d-widget-model-hijiki</span><br><span class="line">live2d-widget-model-izumi</span><br><span class="line">live2d-widget-model-koharu</span><br><span class="line">live2d-widget-model-miku</span><br><span class="line">live2d-widget-model-ni-j</span><br><span class="line">live2d-widget-model-nico</span><br><span class="line">live2d-widget-model-nietzsche</span><br></pre></td></tr></table></figure><h2 id="更改配置文件"><a href="#更改配置文件" class="headerlink" title="更改配置文件"></a>更改配置文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim _config.yml</span></span><br><span class="line">添加以下配置：</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Live2D</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># https://github.com/xiazeyu/live2d-widget.js</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-live2d:</span></span></span><br><span class="line">  enable: true</span><br><span class="line">  scriptFrom: local</span><br><span class="line">  pluginRootPath: live2dw/</span><br><span class="line">  pluginJsPath: lib/</span><br><span class="line">  pluginModelPath: assets/</span><br><span class="line">  tagMode: false</span><br><span class="line">  debug: false</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-miku</span><br><span class="line">  display:</span><br><span class="line">    position: right</span><br><span class="line">    width: 150</span><br><span class="line">    height: 300</span><br><span class="line">  mobile:</span><br><span class="line">    show: true</span><br><span class="line">  react:</span><br><span class="line">    opacity: 0.7</span><br></pre></td></tr></table></figure><h2 id="安装过程中遇到的问题"><a href="#安装过程中遇到的问题" class="headerlink" title="安装过程中遇到的问题"></a>安装过程中遇到的问题</h2><p>如图所示：<br><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721115945.png"><br>报错原因是我安装的npm版本、系统版本以及所要安装的版本有冲突，如何解决呢？经过不断求助大佬，只能重新安装npm或者安装国内版的cnpm。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install cnpm -g</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install cnpm -g --registry=https://r.npm.taobao.org</span></span><br></pre></td></tr></table></figure><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721115953.gif"></p><h4 id="如果需要更换模块，则修改上述配置文件的model-use项"><a href="#如果需要更换模块，则修改上述配置文件的model-use项" class="headerlink" title="如果需要更换模块，则修改上述配置文件的model-use项"></a>如果需要更换模块，则修改上述配置文件的model-use项</h4><p>说在后面:<br>这个live2D插件bug实在是很多，特别是配置文件，我写入_config.yml之后并没有生效，且修改配置文件也不会生效，但是博客会自动生成，但是实际上刷新之后就会消失，时有时无，百度了一大堆解决方案都是无效，所以就这样吧，这个插件就随缘分了。<br>官方给了好几种安装模块的方式，具体请参阅：<br><a href="https://github.com/laugh0608/hexo-helper-live2d/blob/master/README.zh-CN.md">中文文档</a> <a href="https://github.com/laugh0608/hexo-helper-live2d/blob/master/README.md">英文文档</a> </p><h1 id="重大更新"><a href="#重大更新" class="headerlink" title="重大更新"></a>重大更新</h1><blockquote><p>终于解决了看板娘无法使用和配置的问题了。</p><p>更新于2019&#x2F;12&#x2F;15</p></blockquote><p>闲来无事，又去Github翻阅了一下官方文档 <del>其实是不死心</del> 然后尝试了一番自定义的安装方式而不是用上述npm安装模块，果然就能用了。</p><p>配置文件什么的不用更改。</p><ol><li>在博客根目录下新建一个文件夹，名为<code>live2d_models</code> </li><li>从Github上<code>clone</code>模块包，当然也可以使用自己做的模块包，地址：<a href="https://github.com/laugh0608/live2d-widget-models.git">https://github.com/laugh0608/live2d-widget-models.git</a></li><li>进入<code>clone</code>好的文件夹，进入<code>packages</code>文件夹，就能看到所有的模块包啦</li><li>把希望应用的模块包复制到刚才新建的<code>live2d_models</code>文件夹里</li><li>现在目录结构应该就是<code>/live2d_models/live2d-widget-model-wanko</code>这个样子了吧</li><li>然后在配置文件<code>_config.yml</code> 里把<code>live2d</code>配置里的<code>model.use</code>项改为模块包的名称</li><li>然后<code>hexo clean</code>清除缓存<code>hexo g</code>重新生成页面就可以看到效果啦</li></ol><p>如果还不行，就进入模块包的文件夹里，会有一个<code>assets</code>的文件夹，里面有一个<code>wanko.model.json</code>文件（其他包名称同理），把它拷贝到我们的<code>/live2d_models/live2d-widget-model-wanko</code>文件夹下面就可以了，当然配置文件也要改哦，改成相对应的路径即可。</p><p>Yes！</p><h1 id="2020-1-5更新"><a href="#2020-1-5更新" class="headerlink" title="2020&#x2F;1&#x2F;5更新"></a>2020&#x2F;1&#x2F;5更新</h1><blockquote><p>2020&#x2F;1&#x2F;5更新。</p></blockquote><p>最近这个插件的大小问题一直困扰着我，调大了手机端会影响观看文章，调小了又不好看，有没有一种办法让插件适应手机和电脑端呢？去再次查阅了官方文档，果然发现官方更新了使用方法，更改一下配置文件即可。</p><p>这是最新的配置文件:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Live2D</span></span><br><span class="line"><span class="comment">## https://github.com/xiazeyu/live2d-widget.js</span></span><br><span class="line"><span class="comment">## https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init</span></span><br><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span> <span class="comment"># 默认</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span> <span class="comment"># 插件在站点上的根目录(相对路径)</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span> <span class="comment"># 脚本文件相对与插件根目录路径</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span> <span class="comment"># 模型文件相对与插件根目录路径</span></span><br><span class="line">  <span class="comment"># scriptFrom: jsdelivr # jsdelivr CDN</span></span><br><span class="line">  <span class="comment"># scriptFrom: unpkg # unpkg CDN</span></span><br><span class="line">  <span class="comment"># scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url</span></span><br><span class="line">  <span class="attr">tagMode:</span> <span class="literal">false</span> <span class="comment"># 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span></span><br><span class="line">  <span class="attr">debug:</span> <span class="literal">false</span> <span class="comment"># 调试, 是否在控制台输出日志</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-shizuku</span> <span class="comment"># npm-module package name</span></span><br><span class="line">    <span class="comment"># use: wanko # 博客根目录/live2d_models/ 下的目录名</span></span><br><span class="line">    <span class="comment"># use: ./wives/wanko # 相对于博客根目录的路径</span></span><br><span class="line">    <span class="comment"># use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url</span></span><br><span class="line">    <span class="attr">scale:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">hHeadPos:</span> <span class="number">0.5</span></span><br><span class="line">    <span class="attr">vHeadPos:</span> <span class="number">0.618</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">superSample:</span> <span class="number">2</span>  <span class="comment">#超采样等级</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">150</span>  <span class="comment">#canvas的长度</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">300</span> <span class="comment">#canvas的高度</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">left</span>  <span class="comment"># 显示位置：左或右</span></span><br><span class="line">    <span class="attr">hOffset:</span> <span class="number">0</span>   <span class="comment">#水平偏移</span></span><br><span class="line">    <span class="attr">vOffset:</span> <span class="number">-70</span>  <span class="comment">#垂直偏移</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">scale:</span> <span class="number">0.5</span>  <span class="comment">#模型与canvas的缩放</span></span><br><span class="line">  <span class="attr">react:</span></span><br><span class="line">    <span class="attr">opacityDefault:</span> <span class="number">0.2</span> <span class="comment">#透明度默认</span></span><br><span class="line">    <span class="attr">opacityOnHover:</span> <span class="number">0.1</span></span><br><span class="line">  <span class="attr">dialog:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span>  <span class="comment">#显示人物对话框</span></span><br><span class="line">    <span class="attr">hitokoto:</span> <span class="literal">true</span>  <span class="comment">#使用一言API</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Live2D </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSL证书的部署</title>
      <link href="/posts/ef0be786/"/>
      <url>/posts/ef0be786/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是SSL证书，为什么需要它？"><a href="#什么是SSL证书，为什么需要它？" class="headerlink" title="什么是SSL证书，为什么需要它？"></a>什么是SSL证书，为什么需要它？</h2><p>SSL证书是数字证书的一种，类似于驾驶证、护照和营业执照的电子副本。因为配置在服务器上，也称为SSL服务器证书。 </p><p>SSL 证书就是遵守 SSL协议，由受信任的数字证书颁发机构CA，在验证服务器身份后颁发，具有服务器身份验证和数据传输加密功能。 </p><p>具体请查阅：<a href="https://baike.baidu.com/item/SSL%E8%AF%81%E4%B9%A6/5201468?fr=aladdin">https://baike.baidu.com/item/SSL%E8%AF%81%E4%B9%A6/5201468?fr=aladdin</a></p><h2 id="准备事项"><a href="#准备事项" class="headerlink" title="准备事项"></a>准备事项</h2><ol><li>需要购买和申请SSL证书</li></ol><p>  阿里云，腾讯云等服务商都提供SSL证书购买服务，可以直接去申请，有很多版本和配置可供选择，我选择了阿里云免费提供的一年ssl证书。（推荐在自己的域名服务商购买，进行验证的时候会方便很多）</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721123752.png" alt="3"></p><ol start="2"><li>下载和上传证书文件</li></ol><p>  购买成功后会进行域名验证，请根据服务商提示完成验证。验证成功后大概几分钟就会签发成功，此时去证书管理控制台进行下载。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721123813.png" alt="4"></p><p>下载证书时记得下载自己服务器对应的版本。下载到本地之后进行解压，会看到一个key文件和crt（或者pem）文件。 </p><p>文件上传可使用rz和sz命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yum install -y lrzsz</span></span><br></pre></td></tr></table></figure><p> <del>命令用法自行百度。</del></p><h2 id="安装证书和配置服务器"><a href="#安装证书和配置服务器" class="headerlink" title="安装证书和配置服务器"></a>安装证书和配置服务器</h2><p>本文档以CentOS 7、Nginx 1.16.1为例  </p><ol><li>首先查看主配置文件中http所包含域。</li></ol><blockquote><p> 注：不是server域而是http。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /etc/nginx/nginx.conf</span></span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721123916.png" alt="5"></p><ol start="2"><li>在此目录下新建一个配置文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim /etc/nginx/conf.d/ssl.conf</span></span><br></pre></td></tr></table></figure><p>写入配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">以下属性中以ssl开头的属性代表与证书配置有关，其他属性请根据自己的需要进行配置。</span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;   #SSL协议访问端口号为443。此处如未添加ssl，可能会造成Nginx无法启动。</span><br><span class="line">    server_name localhost;  #将localhost修改为您证书绑定的域名，例如：www.example.com。</span><br><span class="line">    root html;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line">    ssl_certificate cert/domain name.pem;   #将domain name.pem替换成您证书的文件名。</span><br><span class="line">    ssl_certificate_key cert/domain name.key;   #将domain name.key替换成您证书的密钥文件名。</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;  #使用此加密套件。</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;   #使用该协议进行配置。</span><br><span class="line">    ssl_prefer_server_ciphers on;   </span><br><span class="line">    location / &#123;</span><br><span class="line">        root html;   #站点目录。</span><br><span class="line">        index index.html index.htm;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">可选： 设置HTTP请求自动跳转HTTPS</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name localhost;   #将localhost修改为您证书绑定的域名，例如：www.example.com。</span><br><span class="line">    rewrite ^(.*)$ https://$host$1 permanent;   #将所有http请求通过rewrite重定向到https。</span><br><span class="line">    location / &#123;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存退出。  </p><ol start="3"><li>查看SSL证书安装目录</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /etc/nginx/nginx.conf</span></span><br></pre></td></tr></table></figure><p>找到以下目录：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721123926.png" alt="6"></p><p>把上传到服务器的SSL证书（pem和key文件）分别放在指定目录即可。</p><ol start="4"><li>测试是否生效<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nginx -t</span></span><br></pre></td></tr></table></figure>如果配置成功，则显示结果如下：</li></ol><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721123932.png" alt="7"></p><ol start="5"><li>可能遇到的错误（务必不要完全执行，只是参考作用，数据无价做好备份）</li></ol><p>  （1）配置文件错误，无法生效</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721123936.png" alt="8"></p><p>检查配置文件语法、单词等正确。 </p><p>（2）unknown directive “ssl” in &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;ssl.conf:121  </p><p>部署SSL要用到nginx中的SSL模块，但是我们一开始编译nginx的时候并没有把SSL模块也一起编译进去，所以导致这个问题的出现。 </p><p>安装openssl：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yum -y install openssl openssl-devel</span></span><br></pre></td></tr></table></figure><p>在&#x2F;usr&#x2F;local&#x2F;nginx-1.14.2（即Nginx安装目录）执行编译ssl模块：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./configure --with-http_ssl_module</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make</span></span><br></pre></td></tr></table></figure><p>备份、转移</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cp</span> /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cp</span> objs/nginx /usr/local/nginx/sbin/nginx</span></span><br></pre></td></tr></table></figure><p>查看是否将ssl模块编译进来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//当看到以下信息说明成功！</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./nginx -V</span></span><br><span class="line">    nginx version: nginx/1.14.2</span><br><span class="line">    built by gcc 4.8.5 20150623 (Red Hat 4.8.5-36) (GCC) </span><br><span class="line">    built with OpenSSL 1.0.2k-fips  26 Jan 2017</span><br><span class="line">    TLS SNI support enabled</span><br><span class="line">    configure arguments: --with-http_ssl_module</span><br></pre></td></tr></table></figure><p>重新启动nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> /usr/local/nginx/sbin</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./nginx -s reload</span></span><br></pre></td></tr></table></figure><p>这次部署就到这里。 </p><blockquote><p>注意注意注意: </p><p>请务必一定要考虑清楚操作后果，个人情况不同，机况不同，结果自然不同，我的经历和过程只能给您起到参考作用，一定务必不要完全按照我的过程去完成，最后，数据无价，做好备份工作。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>deepin安装xfce4</title>
      <link href="/posts/be871a40/"/>
      <url>/posts/be871a40/</url>
      
        <content type="html"><![CDATA[<h3 id="请务必注意相关版本出错很麻烦"><a href="#请务必注意相关版本出错很麻烦" class="headerlink" title="请务必注意相关版本出错很麻烦"></a>请务必注意相关版本出错很麻烦</h3><blockquote><p>OS版本：deepin15.11 桌面版64位</p><p>桌面版本：xfce4</p></blockquote><p>deepin自带的桌面看腻了？或者想尝试其他桌面？Let’s do it!</p><h2 id="安装xfce4"><a href="#安装xfce4" class="headerlink" title="安装xfce4"></a>安装xfce4</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt-get install xfce4</span></span><br></pre></td></tr></table></figure><p>静静等待几分钟（依网速而定）。</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721085851.png" alt="安装中"></p><p>安装完成：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721085856.png" alt="完成"></p><h2 id="登录切换桌面"><a href="#登录切换桌面" class="headerlink" title="登录切换桌面"></a>登录切换桌面</h2><p>首先注销（或者关机重启）：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721085901.png" alt="注销"></p><p>切换桌面：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721085906.jpg" alt="右下角的deepin图标"></p><p>输入密码，成功登录;</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200721085911.png" alt="xfce桌面"></p><p>OK! 如果再发现好玩的，一定会再来更新的。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Deepin </tag>
            
            <tag> Xfce4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云OSS对象存储图床</title>
      <link href="/posts/47cf195c/"/>
      <url>/posts/47cf195c/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>阿里云的oss对象存储资源包还是很便宜的，具体资费请看阿里云官网。</p><p>附购买链接：<a href="https://common-buy.aliyun.com/?spm=5176.7933691.1309819..62dd2a66fOsBHk&commodityCode=ossbag&request=%7B%22region%22:%22china-common%22%7D#/buy">阿里云OSS资源包购买</a></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720221053.png" alt="首页"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720221106.png" alt="资费"></p><p>购买成功后，在控制台会提示开通OSS存储功能，选择激活开通即可。</p><h2 id="创建Bucket"><a href="#创建Bucket" class="headerlink" title="创建Bucket"></a>创建Bucket</h2><p>前往控制台：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720221202.png" alt="oss"></p><p>创建Bucket：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720221211.png" alt="Bucket"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720221221.png" alt="bucket"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720221225.png" alt="bucket"></p><h2 id="设置访问权限"><a href="#设置访问权限" class="headerlink" title="设置访问权限"></a>设置访问权限</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720221231.png" alt="权限设置"></p><h2 id="获取AK秘钥"><a href="#获取AK秘钥" class="headerlink" title="获取AK秘钥"></a>获取AK秘钥</h2><p>前往用户设置，查看AK秘钥：</p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720221236.png" alt="AK秘钥"></p><h2 id="下载传输工具"><a href="#下载传输工具" class="headerlink" title="下载传输工具"></a>下载传输工具</h2><p>阿里云官方推荐的工具为OSS-Browser，还有其他，官方也把功能比对写了出来：<a href="https://help.aliyun.com/document_detail/44075.html?spm=5176.8465980.0.0.4e701450vMtKJY">官方文档</a></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720221241.png" alt="ossbrowser"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720221245.png" alt="ossutil"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720221249.png" alt="osscmd"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720221257.png" alt="ossfs"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720221301.png" alt="ossftp/ossimport"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720221306.png" alt="RAM/ossemulator"></p><h2 id="登录和上传图片"><a href="#登录和上传图片" class="headerlink" title="登录和上传图片"></a>登录和上传图片</h2><blockquote><p> 以oss-browser为例，版本1.10.0</p></blockquote><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720221315.png" alt="登录"></p><p>如图所示，<code>endpoint</code>选项就是你的OSS域名，如果是公共云，则默认即可，不需要修改。下面红色字的两个选项则就是你的AK秘钥，<code>oss路径</code>就是你的oss所设置的<code>Bucket</code>名，例如你的<code>Bucket</code>名为”test”，则oss预设路径为：<code>oss://test/</code>。登录就可以上传文件了。</p><h2 id="获取链接"><a href="#获取链接" class="headerlink" title="获取链接"></a>获取链接</h2><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720221319.png" alt="上传文件示例"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720221323.png" alt="获取地址"></p><p><img src="https://imbhj-cdn.oss-cn-hangzhou.aliyuncs.com/CDN/20200720221332.png" alt="获取地址"></p><blockquote><p>这个时候必须要注意一点，oss-Browser生成的链接默认是http服务的，而阿里云OSS是支持https服务的，所以只需要自己加上那一个可爱的”s”。</p></blockquote><p>然后就可以在需要的地方插上自己的图片链接<del>(≧▽≦)&#x2F;</del>啦啦啦</p><h2 id="特别注意事项"><a href="#特别注意事项" class="headerlink" title="特别注意事项"></a>特别注意事项</h2><blockquote><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>阿里云OSS对象存储整改之后，也就是从现在9月23号开始，oss存储的图片外链不允许预览，如果在浏览器里打开图片外链是不可以看到图片的，而是直接弹出下载文件。但是写进HTML和markdownDennis文件里是没有问题的，所以必须要注意这一点。</p></blockquote><ul><li>若您的 Bucket 是2019年9月23日前创建的，在浏览器中打开OSS默认访问域名或自有域名生成的文件URL时可以预览文件内容。</li><li>若您的 Bucket 是2019年9月23日后创建的，在浏览器中打开OSS默认域名生成的文件URL时会以附件形式下载；使用自有域名生成的文件URL访问时，可以预览文件内容。</li><li>因浏览器对于部分图片格式不支持预览，可能会出现直接下载的情况。对于此类问题，您只需要在浏览器上安装支持预览对应格式文件的插件即可。</li></ul><p>这是官方的解释，所以如果想在浏览器里预览，请去OSS控制台绑定自己域名，使用自有域名生成的URL。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
            <tag> 阿里云 </tag>
            
            <tag> OSS对象存储 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录建站过程</title>
      <link href="/posts/a658961f/"/>
      <url>/posts/a658961f/</url>
      
        <content type="html"><![CDATA[<h4 id="记录心情："><a href="#记录心情：" class="headerlink" title="记录心情："></a>记录心情：</h4><p>我很菜，甚至非常菜，刚学前端不久，就迫不及待的想建成自己的第一个站。应该算是还没学会走就想跑的那种，刚开始第一次尝试是去找的模板，然后在此基础上自己去魔改，敲敲打打，然后注册了Github，按照网上百度的教程，想去部署GithubPage，结果第一关就把我难住了。 </p><p>我不知道怎么把写好的网站上传到Github的仓库里 <del>（这个时候还不知道git这个工具）</del> ，只能在Github上在线一个一个上传文件、图片等 <del>（为此还百度了一次怎么在Github仓库里新建文件夹）</del> ，然后让舍友在手机上访问了我的网站，那个时候真的是成就感满满，更加坚定了自己后面建站的决心。 </p><p>我隔壁宿舍在学Java的舍友也有建站的想法，但是我什么都不会，只会Ctrl+C和Ctrl+V <del>（那个时候我也才下定决心用大部分精力来学习编程，哦对了，我的专业是化学工程与工艺，当时大一第一学期，我自己的故事慢慢讲）</del> ，舍友是在校外报的培训班，然后我们就商量一起干。他租了一个虚拟主机 <del>（当时我还不知道虚拟主机和ECS服务器的区别）</del> ，是西部数码最便宜的一种，只有68RMB一年，域名是附赠的。然后趁着暑假，他做好备案等工作，我写主页。我只会HTML，而且CSS也都不会写多少，然后我们最简单最简单的一个网站就那么搭建好了 <del>（虽然只有一个导航栏，之后暑假完了增加了一些内容）</del> 。 </p><p>暑假的时候我潜心学习Linux，当时了解到除了win10之外电脑也可以装其他操作系统，还是很新奇的，就买了一本《鸟哥的Linux私房菜》，这个时候就萌生了做自己博客记录笔记和生活的想法。然后就把一个暑假整理的笔记什么的都放在了舍友的网站里：<a href="http://www.tocoyo.top/">http://www.tocoyo.top</a>  <del>（写这篇文章的时候还可以访问的）</del> ，但是由于他后来转向学建模和视频动画渲染了，就搁置了，所以开学后大概在9月20号左右我也租了一个虚拟主机 <del>（还不知道阿里云学生机的活动）</del> ，然后注册域名、备案、上线一气呵成，现在用来放笔记了，就在友链里的第一个，有兴趣的朋友可以去看看，不过非常简陋，都是我自己写的 <del>（当然也有一部分Copy的，如果有什么错误或者问题的话，请务必及时联系我删除）</del> 。 </p><p>这个站的配置是：之前租西部数码虚拟主机送的域名，阿里云学生机，CentOS7.x，Nginx，Hexo，Butterfly。  </p><h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><blockquote><p>不要按照文章的来啊，这只是当时瞎写的，留着只是为了回忆</p></blockquote><h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><p>部署网站的目的就是不仅让自己要访问到，还要让别人也访问到嘛，就要用到web服务器了。<br>目前我知道的几种方法有：  </p><h4 id="1-GithubPage"><a href="#1-GithubPage" class="headerlink" title="1. GithubPage"></a>1. GithubPage</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;优点：免费，好管理<br>&nbsp;&nbsp;&nbsp;&nbsp;缺点：只支持静态站点</p><h4 id="2-虚拟主机"><a href="#2-虚拟主机" class="headerlink" title="2. 虚拟主机"></a>2. 虚拟主机</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;优点：价格便宜，非常方便管理<br>&nbsp;&nbsp;&nbsp;&nbsp;缺点：功能少，可自定义的非常少，上传方法单一，对数据库、PHP等有版本要求</p><h4 id="3-本地服务器（废旧安卓手机、树莓派等）"><a href="#3-本地服务器（废旧安卓手机、树莓派等）" class="headerlink" title="3. 本地服务器（废旧安卓手机、树莓派等）"></a>3. 本地服务器（废旧安卓手机、树莓派等）</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;优点：完全自定义化，想干什么就能干什么<br>&nbsp;&nbsp;&nbsp;&nbsp;缺点：难管理，需要一定的知识储备和解决问题能力，且需要内网穿透或者公网IP</p><h4 id="4-云服务器ECS实例"><a href="#4-云服务器ECS实例" class="headerlink" title="4.云服务器ECS实例"></a>4.云服务器ECS实例</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;优点：相对虚拟主机来说自由度很高，可以按照自己的想法来，不仅可以建站，更可以拓展非常多的功能<br>&nbsp;&nbsp;&nbsp;&nbsp;缺点：价格相对昂贵，需要一定基础<br>&nbsp;&nbsp;&nbsp;&nbsp;我选择了阿里云服务器，因为阿里云有学生机优惠，仅9.9RMB一个月<del>（原价100+RMB一个月）</del>，配置可观，完全够用。当然也可以选择腾讯云、西部数码等等这些云计算服务商。<br>&nbsp;&nbsp;&nbsp;&nbsp;哦对了，购买服务器的时候记得选择Linux或者WindowsServer，根据自己的需要来吧，我因为对Linux比较熟悉，所以选择CentOS7</p><h3 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;有了服务器还得有一个响当当的域名，不然总不能让朋友们用IP来访问网站吧，那样就太粗糙了。<br>&nbsp;&nbsp;&nbsp;&nbsp;尽量选择 .com、.cn等这些常见的，当然价格也是非常的承受不起啦<br> <del>（还好我有租虚拟主机赠送的一个域名）</del> ，不过我另一个域名是在阿里云买的，ltd作为后缀的，57RMB买了五年，哈哈哈</p><h4 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;在阿里云控制台里记得要对自己的域名和服务器IP进行解析哦，不然域名是无法访问到服务器的呢</p><h3 id="备案"><a href="#备案" class="headerlink" title="备案"></a>备案</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;我们身在中华大地，就要做一个遵纪守法的好公民啦，不论是个人还是商业网站都是要进行ICP备案哦。备案的时候一定要仔细阅读相关条例，不要一眼扫过就点了个同意协议。<br>&nbsp;&nbsp;&nbsp;&nbsp;备案的时间大概在15天左右，服务商审核在2-3天，管理局审核在5-15天左右，依据所处的地域不同而不同。<br>&nbsp;&nbsp;&nbsp;&nbsp;如果嫌麻烦或者不想备案也可以租国外的服务器和域名哦，不过价格就稍微昂贵很多。</p><h2 id="开始阶段"><a href="#开始阶段" class="headerlink" title="开始阶段"></a>开始阶段</h2><h3 id="选取web服务器"><a href="#选取web服务器" class="headerlink" title="选取web服务器"></a>选取web服务器</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;我知道的就两种:Nginx和Apache，目前我了解的还不多，我摘抄一点百度百科给你们看吧：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Nginx：Nginx是一款轻量级的Web 服务器&#x2F;反向代理服务器及电子邮件（IMAP&#x2F;POP3）代理服务器，在BSD-like 协议下发行。其特点是占有内存少，并发能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、京东、新浪、网易、腾讯、淘宝等。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Apache：Apache是世界使用排名第一的Web服务器软件。它可以运行在几乎所有广泛使用的计算机平台上，由于其跨平台和安全性被广泛使用，是最流行的Web服务器端软件之一。它快速、可靠并且可通过简单的API扩充，将Perl&#x2F;Python等解释器编译到服务器中。<br>&nbsp;&nbsp;&nbsp;&nbsp;Apache非常优秀，所以我选择了Nginx，嘿嘿</p><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;安装过程很是艰辛，难死我了<br>&nbsp;&nbsp;&nbsp;&nbsp;我去 <del>复制</del> 一下我的笔记：(请务必注意系统版本和要安装的nginx版本)  </p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>添加nginx的官方rpm源：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br></pre></td></tr></table></figure><p>再执行安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y nginx</span><br></pre></td></tr></table></figure><p>启动：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl restart nginx</span><br></pre></td></tr></table></figure><p>添加开机自启：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl enable nginx.service</span><br></pre></td></tr></table></figure><p>关闭二连：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl stop nginx.service</span><br><span class="line">$ systemctl disable nginx.service</span><br></pre></td></tr></table></figure><h4 id="安装过程中的问题"><a href="#安装过程中的问题" class="headerlink" title="安装过程中的问题"></a>安装过程中的问题</h4><ol><li>开启Nginx却无法访问服务器</li></ol><p>检查nginx状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ps aux|grep nginx</span><br></pre></td></tr></table></figure><p>检查端口是否开启：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ netstat -ntlp</span><br></pre></td></tr></table></figure><p>如果80端口启动了nginx服务，剩下的八成都是防火墙问题，开启80端口入方向安全组策略：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br></pre></td></tr></table></figure><p>重启防火墙：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl restart firewalld.service</span><br></pre></td></tr></table></figure><p>okk，阿里云ECS服务器可以去控制台面板添加安全组策略，在入方向开启http和https放行就可。  </p><ol start="2"><li>关于Nginx目录配置问题</li></ol><p>系统版本：CentOS7.x<br>Nginx版本：nginx-release-centos-7-0.el7<br>这三个路径自己找一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/etc/nginx/nginx.conf</span><br><span class="line">/etc/nginx/conf.d/default.conf</span><br><span class="line">/etc/nginx/default.conf</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;首先请保证自己的服务器开启并运行了nginx服务，且在入方向开启了80端口<br>&nbsp;&nbsp;&nbsp;&nbsp;在本机浏览器直接输入localhost即可，在其他浏览器输入你云服务器的公网IP就可以看到nginx的欢迎页面啦<br>一般情况下，这个页面存放在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/share/nginx/html/</span><br><span class="line">/var/www/html/</span><br></pre></td></tr></table></figure><p>这两个目录下，你可以去更改default.conf文件来更改这个位置，具体nginx怎么配置，请移步百度</p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><h4 id="请务必注意，务必确认您要在服务器上安装接下来的步骤（推荐安装在本地机器）"><a href="#请务必注意，务必确认您要在服务器上安装接下来的步骤（推荐安装在本地机器）" class="headerlink" title="请务必注意，务必确认您要在服务器上安装接下来的步骤（推荐安装在本地机器）"></a>请务必注意，务必确认您要在服务器上安装接下来的步骤（推荐安装在本地机器）</h4><p>&nbsp;&nbsp;注意：系统版本：Centos7.x<br>首先请务必确保您的系统安装了git工具(注：Debian可以使用 <code>sudo apt install nodejs</code> 命令安装)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y git</span><br></pre></td></tr></table></figure><ol><li>安装基础编译环境</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install gcc-c++</span><br></pre></td></tr></table></figure><ol start="2"><li>下载nodeJS源码包<br>或者去官网下载</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://npm.taobao.org/mirrors/node/v11.0.0/node-v11.0.0.tar.gz</span><br></pre></td></tr></table></figure><ol start="3"><li>解压源码包，并进入解压后的文件夹中</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ tar -zxf node-v11.0.0.tar.gz</span><br><span class="line">$ cd node-v11.0.0</span><br></pre></td></tr></table></figure><ol start="4"><li>开始进行编译，注意编译时间很长，我这垃圾配置用了大概一个小时。。。。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./configure &amp;&amp; make</span><br></pre></td></tr></table></figure><ol start="5"><li>开始进行安装</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make install</span><br></pre></td></tr></table></figure><ol start="6"><li>检查版本</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">$ npm -v</span><br></pre></td></tr></table></figure><ol start="7"><li>如果node -v没有版本信息，可进行一下设置环境变量再进行测试</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/profile</span><br><span class="line">    //在该文件底部增加下面两行</span><br><span class="line">$ export NODE_HOME=node目录</span><br><span class="line">$ export PATH=$NODE_HOME/bin:$PATH</span><br><span class="line">$ export NODE_PATH=$NODE_HOME/lib/node_modules</span><br><span class="line">    //给root用户添加环境变量</span><br><span class="line">$ vim /root/.bashrc</span><br><span class="line">    //文件末尾加入一行</span><br><span class="line">$ source etc/profile</span><br></pre></td></tr></table></figure><ol start="8"><li>执行命令生效环境变量后再次重新尝试获取版本信息。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ source /etc/profile</span><br><span class="line">$ node -v</span><br><span class="line">$ npm -v</span><br></pre></td></tr></table></figure><ol start="9"><li>安装cnpm</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install cnpm -g</span><br></pre></td></tr></table></figure><ol start="10"><li>更换国内淘宝镜像</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install cnpm -g --registry=https://r.npm.taobao.org</span><br></pre></td></tr></table></figure><p>（从这里开始接下来的请用cnpm安装，避免版本冲突和依赖关系的问题）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;————这个注释更新于2019.12.9.20:38</p><ol start="11"><li>安装hexo</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br><span class="line">$ hexo -v</span><br></pre></td></tr></table></figure><p>安装到此告一段落。</p><h2 id="预览阶段"><a href="#预览阶段" class="headerlink" title="预览阶段"></a>预览阶段</h2><h3 id="Hexo的使用"><a href="#Hexo的使用" class="headerlink" title="Hexo的使用"></a>Hexo的使用</h3><p>官方文档在这里: <a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a><br>我们只需要记住几个最常用的命令即可：</p><ol><li>在指定文件夹中新建所需要的文件。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>完成后，指定文件夹的目录如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p>文件夹的功能与作用请移步官方文档参考。<br>2. 生成静态文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><ol start="3"><li>清除缓存和生成的文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><ol start="4"><li>预览</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>执行预览之后就可以在本地浏览器地址输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost:4000</span><br></pre></td></tr></table></figure><p>进行预览生成的静态站点。</p><h2 id="发布阶段"><a href="#发布阶段" class="headerlink" title="发布阶段"></a>发布阶段</h2><p>既然已经生成了站点了，当然就要部署到自己的服务器上了  </p><p>有很多很多的方法，但是我都看不明白 <del>当然是我很菜的原因</del> ,所以我就选择了一个非常非常简单粗暴的方法 </p><p>Hexo生成的站点文件都在public文件夹里，那么我就可以在Github新建一个仓库，然后把public的所有文件一键 <code>hexo deploy</code>到Github仓库里，然后在服务器端进行 <code>git clone</code> 就好啦</p><blockquote><p>2020.7.21前来考古，觉得自己写的好羞耻，，，</p><p>很多东西已经过时了，ε&#x3D;(´ο｀*)))唉</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 建站 </tag>
            
            <tag> 阿里云ECS </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
